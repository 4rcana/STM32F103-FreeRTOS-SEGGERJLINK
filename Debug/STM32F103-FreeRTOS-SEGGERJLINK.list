
STM32F103-FreeRTOS-SEGGERJLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007484  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08007594  08007594  00008594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007888  08007888  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007888  08007888  00009064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007888  08007888  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007888  08007888  00008888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800788c  0800788c  0000888c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007890  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048a0  20000064  080078f4  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004904  080078f4  00009904  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191f0  00000000  00000000  0000908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037bf  00000000  00000000  0002227d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  00025a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e8  00000000  00000000  00027188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e82  00000000  00000000  00028370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001886a  00000000  00000000  000421f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab89e  00000000  00000000  0005aa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001062fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006664  00000000  00000000  00106340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b6  00000000  00000000  0010c9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	0800757c 	.word	0x0800757c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	0800757c 	.word	0x0800757c

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	@ 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20003c0c 	.word	0x20003c0c

080001dc <LEDGreen>:
 */

#include "LEDS.h"
#include "main.h"

void LEDGreen(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e2:	463b      	mov	r3, r7
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin;
 80001ee:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80001f2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f4:	2301      	movs	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001fc:	2302      	movs	r3, #2
 80001fe:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000200:	463b      	mov	r3, r7
 8000202:	4619      	mov	r1, r3
 8000204:	480f      	ldr	r0, [pc, #60]	@ (8000244 <LEDGreen+0x68>)
 8000206:	f000 fdfd 	bl	8000e04 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED4_Pin|LED2_Pin;
 800020a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800020e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000210:	2300      	movs	r3, #0
 8000212:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000214:	2300      	movs	r3, #0
 8000216:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000218:	2302      	movs	r3, #2
 800021a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800021c:	463b      	mov	r3, r7
 800021e:	4619      	mov	r1, r3
 8000220:	4808      	ldr	r0, [pc, #32]	@ (8000244 <LEDGreen+0x68>)
 8000222:	f000 fdef 	bl	8000e04 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2180      	movs	r1, #128	@ 0x80
 800022a:	4806      	ldr	r0, [pc, #24]	@ (8000244 <LEDGreen+0x68>)
 800022c:	f000 ff6e 	bl	800110c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000236:	4803      	ldr	r0, [pc, #12]	@ (8000244 <LEDGreen+0x68>)
 8000238:	f000 ff68 	bl	800110c <HAL_GPIO_WritePin>
}
 800023c:	bf00      	nop
 800023e:	3710      	adds	r7, #16
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010c00 	.word	0x40010c00

08000248 <LEDBlue>:

void LEDBlue(){
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024e:	463b      	mov	r3, r7
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 800025a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800025e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000260:	2301      	movs	r3, #1
 8000262:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000264:	2300      	movs	r3, #0
 8000266:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000268:	2302      	movs	r3, #2
 800026a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026c:	463b      	mov	r3, r7
 800026e:	4619      	mov	r1, r3
 8000270:	480f      	ldr	r0, [pc, #60]	@ (80002b0 <LEDBlue+0x68>)
 8000272:	f000 fdc7 	bl	8000e04 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin;
 8000276:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800027a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000280:	2300      	movs	r3, #0
 8000282:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000284:	2302      	movs	r3, #2
 8000286:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000288:	463b      	mov	r3, r7
 800028a:	4619      	mov	r1, r3
 800028c:	4808      	ldr	r0, [pc, #32]	@ (80002b0 <LEDBlue+0x68>)
 800028e:	f000 fdb9 	bl	8000e04 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8000292:	2201      	movs	r2, #1
 8000294:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000298:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <LEDBlue+0x68>)
 800029a:	f000 ff37 	bl	800110c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2180      	movs	r1, #128	@ 0x80
 80002a2:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <LEDBlue+0x68>)
 80002a4:	f000 ff32 	bl	800110c <HAL_GPIO_WritePin>
}
 80002a8:	bf00      	nop
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40010c00 	.word	0x40010c00

080002b4 <LEDRed>:

void LEDRed(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ba:	463b      	mov	r3, r7
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 80002c6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80002ca:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002cc:	2301      	movs	r3, #1
 80002ce:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d4:	2302      	movs	r3, #2
 80002d6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d8:	463b      	mov	r3, r7
 80002da:	4619      	mov	r1, r3
 80002dc:	480f      	ldr	r0, [pc, #60]	@ (800031c <LEDRed+0x68>)
 80002de:	f000 fd91 	bl	8000e04 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin;
 80002e2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80002e6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002e8:	2300      	movs	r3, #0
 80002ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f0:	2302      	movs	r3, #2
 80002f2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f4:	463b      	mov	r3, r7
 80002f6:	4619      	mov	r1, r3
 80002f8:	4808      	ldr	r0, [pc, #32]	@ (800031c <LEDRed+0x68>)
 80002fa:	f000 fd83 	bl	8000e04 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2180      	movs	r1, #128	@ 0x80
 8000302:	4806      	ldr	r0, [pc, #24]	@ (800031c <LEDRed+0x68>)
 8000304:	f000 ff02 	bl	800110c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800030e:	4803      	ldr	r0, [pc, #12]	@ (800031c <LEDRed+0x68>)
 8000310:	f000 fefc 	bl	800110c <HAL_GPIO_WritePin>
}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40010c00 	.word	0x40010c00

08000320 <LEDOff>:

void LEDOff(){
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	463b      	mov	r3, r7
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
 8000330:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8000332:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000336:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000338:	2300      	movs	r3, #0
 800033a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000340:	2302      	movs	r3, #2
 8000342:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000344:	463b      	mov	r3, r7
 8000346:	4619      	mov	r1, r3
 8000348:	4803      	ldr	r0, [pc, #12]	@ (8000358 <LEDOff+0x38>)
 800034a:	f000 fd5b 	bl	8000e04 <HAL_GPIO_Init>
}
 800034e:	bf00      	nop
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010c00 	.word	0x40010c00

0800035c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000364:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000368:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	2b00      	cmp	r3, #0
 8000372:	d013      	beq.n	800039c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000374:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000378:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800037c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000380:	2b00      	cmp	r3, #0
 8000382:	d00b      	beq.n	800039c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000384:	e000      	b.n	8000388 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000386:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000388:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0f9      	beq.n	8000386 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000392:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	b2d2      	uxtb	r2, r2
 800039a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800039c:	687b      	ldr	r3, [r7, #4]
}
 800039e:	4618      	mov	r0, r3
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f000 fbf4 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f850 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f000 f890 	bl	80004d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  SEGGER_SYSVIEW_Conf();
 80003b8:	f004 fd44 	bl	8004e44 <SEGGER_SYSVIEW_Conf>
  osKernelInitialize();
 80003bc:	f001 fd84 	bl	8001ec8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003c0:	4a15      	ldr	r2, [pc, #84]	@ (8000418 <main+0x70>)
 80003c2:	2100      	movs	r1, #0
 80003c4:	4815      	ldr	r0, [pc, #84]	@ (800041c <main+0x74>)
 80003c6:	f001 fdc7 	bl	8001f58 <osThreadNew>
 80003ca:	4603      	mov	r3, r0
 80003cc:	4a14      	ldr	r2, [pc, #80]	@ (8000420 <main+0x78>)
 80003ce:	6013      	str	r3, [r2, #0]

  /* creation of GreenTask */
  GreenTaskHandle = osThreadNew(GreenLED, NULL, &GreenTask_attributes);
 80003d0:	4a14      	ldr	r2, [pc, #80]	@ (8000424 <main+0x7c>)
 80003d2:	2100      	movs	r1, #0
 80003d4:	4814      	ldr	r0, [pc, #80]	@ (8000428 <main+0x80>)
 80003d6:	f001 fdbf 	bl	8001f58 <osThreadNew>
 80003da:	4603      	mov	r3, r0
 80003dc:	4a13      	ldr	r2, [pc, #76]	@ (800042c <main+0x84>)
 80003de:	6013      	str	r3, [r2, #0]

  /* creation of BlueTask */
  BlueTaskHandle = osThreadNew(BlueLED, NULL, &BlueTask_attributes);
 80003e0:	4a13      	ldr	r2, [pc, #76]	@ (8000430 <main+0x88>)
 80003e2:	2100      	movs	r1, #0
 80003e4:	4813      	ldr	r0, [pc, #76]	@ (8000434 <main+0x8c>)
 80003e6:	f001 fdb7 	bl	8001f58 <osThreadNew>
 80003ea:	4603      	mov	r3, r0
 80003ec:	4a12      	ldr	r2, [pc, #72]	@ (8000438 <main+0x90>)
 80003ee:	6013      	str	r3, [r2, #0]

  /* creation of RedTask */
  RedTaskHandle = osThreadNew(RedLED, NULL, &RedTask_attributes);
 80003f0:	4a12      	ldr	r2, [pc, #72]	@ (800043c <main+0x94>)
 80003f2:	2100      	movs	r1, #0
 80003f4:	4812      	ldr	r0, [pc, #72]	@ (8000440 <main+0x98>)
 80003f6:	f001 fdaf 	bl	8001f58 <osThreadNew>
 80003fa:	4603      	mov	r3, r0
 80003fc:	4a11      	ldr	r2, [pc, #68]	@ (8000444 <main+0x9c>)
 80003fe:	6013      	str	r3, [r2, #0]

  /* creation of LedMUX */
  LedMUXHandle = osThreadNew(StartLedMUX, NULL, &LedMUX_attributes);
 8000400:	4a11      	ldr	r2, [pc, #68]	@ (8000448 <main+0xa0>)
 8000402:	2100      	movs	r1, #0
 8000404:	4811      	ldr	r0, [pc, #68]	@ (800044c <main+0xa4>)
 8000406:	f001 fda7 	bl	8001f58 <osThreadNew>
 800040a:	4603      	mov	r3, r0
 800040c:	4a10      	ldr	r2, [pc, #64]	@ (8000450 <main+0xa8>)
 800040e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000410:	f001 fd7c 	bl	8001f0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <main+0x6c>
 8000418:	08007748 	.word	0x08007748
 800041c:	0800060d 	.word	0x0800060d
 8000420:	20000080 	.word	0x20000080
 8000424:	0800776c 	.word	0x0800776c
 8000428:	0800061d 	.word	0x0800061d
 800042c:	20000084 	.word	0x20000084
 8000430:	08007790 	.word	0x08007790
 8000434:	080006e1 	.word	0x080006e1
 8000438:	20000088 	.word	0x20000088
 800043c:	080077b4 	.word	0x080077b4
 8000440:	08000769 	.word	0x08000769
 8000444:	2000008c 	.word	0x2000008c
 8000448:	080077d8 	.word	0x080077d8
 800044c:	080007b9 	.word	0x080007b9
 8000450:	20000090 	.word	0x20000090

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b090      	sub	sp, #64	@ 0x40
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	2228      	movs	r2, #40	@ 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f006 fbfc 	bl	8006c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	2302      	movs	r3, #2
 8000478:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047a:	2301      	movs	r3, #1
 800047c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047e:	2310      	movs	r3, #16
 8000480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000482:	2302      	movs	r3, #2
 8000484:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000486:	2300      	movs	r3, #0
 8000488:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800048a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800048e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	f107 0318 	add.w	r3, r7, #24
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fe69 	bl	800116c <HAL_RCC_OscConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004a0:	f000 fa27 	bl	80008f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a4:	230f      	movs	r3, #15
 80004a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a8:	2302      	movs	r3, #2
 80004aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2102      	movs	r1, #2
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 f8d6 	bl	8001670 <HAL_RCC_ClockConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004ca:	f000 fa12 	bl	80008f2 <Error_Handler>
  }
}
 80004ce:	bf00      	nop
 80004d0:	3740      	adds	r7, #64	@ 0x40
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ec:	4b42      	ldr	r3, [pc, #264]	@ (80005f8 <MX_GPIO_Init+0x120>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a41      	ldr	r2, [pc, #260]	@ (80005f8 <MX_GPIO_Init+0x120>)
 80004f2:	f043 0310 	orr.w	r3, r3, #16
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b3f      	ldr	r3, [pc, #252]	@ (80005f8 <MX_GPIO_Init+0x120>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0310 	and.w	r3, r3, #16
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b3c      	ldr	r3, [pc, #240]	@ (80005f8 <MX_GPIO_Init+0x120>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a3b      	ldr	r2, [pc, #236]	@ (80005f8 <MX_GPIO_Init+0x120>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b39      	ldr	r3, [pc, #228]	@ (80005f8 <MX_GPIO_Init+0x120>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	4b36      	ldr	r3, [pc, #216]	@ (80005f8 <MX_GPIO_Init+0x120>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a35      	ldr	r2, [pc, #212]	@ (80005f8 <MX_GPIO_Init+0x120>)
 8000522:	f043 0308 	orr.w	r3, r3, #8
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b33      	ldr	r3, [pc, #204]	@ (80005f8 <MX_GPIO_Init+0x120>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0308 	and.w	r3, r3, #8
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2120      	movs	r1, #32
 8000538:	4830      	ldr	r0, [pc, #192]	@ (80005fc <MX_GPIO_Init+0x124>)
 800053a:	f000 fde7 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000544:	482e      	ldr	r0, [pc, #184]	@ (8000600 <MX_GPIO_Init+0x128>)
 8000546:	f000 fde1 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000550:	4b2c      	ldr	r3, [pc, #176]	@ (8000604 <MX_GPIO_Init+0x12c>)
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	482a      	ldr	r0, [pc, #168]	@ (8000608 <MX_GPIO_Init+0x130>)
 8000560:	f000 fc50 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000564:	2320      	movs	r3, #32
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2302      	movs	r3, #2
 8000572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	4820      	ldr	r0, [pc, #128]	@ (80005fc <MX_GPIO_Init+0x124>)
 800057c:	f000 fc42 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : Left_Button_Pin */
  GPIO_InitStruct.Pin = Left_Button_Pin;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000584:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <MX_GPIO_Init+0x12c>)
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000588:	2301      	movs	r3, #1
 800058a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Left_Button_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4619      	mov	r1, r3
 8000592:	481b      	ldr	r0, [pc, #108]	@ (8000600 <MX_GPIO_Init+0x128>)
 8000594:	f000 fc36 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin;
 8000598:	23c0      	movs	r3, #192	@ 0xc0
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	4815      	ldr	r0, [pc, #84]	@ (8000600 <MX_GPIO_Init+0x128>)
 80005ac:	f000 fc2a 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80005b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2302      	movs	r3, #2
 80005c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	4619      	mov	r1, r3
 80005c8:	480d      	ldr	r0, [pc, #52]	@ (8000600 <MX_GPIO_Init+0x128>)
 80005ca:	f000 fc1b 	bl	8000e04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2105      	movs	r1, #5
 80005d2:	2006      	movs	r0, #6
 80005d4:	f000 fbeb 	bl	8000dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005d8:	2006      	movs	r0, #6
 80005da:	f000 fc04 	bl	8000de6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2105      	movs	r1, #5
 80005e2:	2028      	movs	r0, #40	@ 0x28
 80005e4:	f000 fbe3 	bl	8000dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005e8:	2028      	movs	r0, #40	@ 0x28
 80005ea:	f000 fbfc 	bl	8000de6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005ee:	bf00      	nop
 80005f0:	3720      	adds	r7, #32
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800
 8000600:	40010c00 	.word	0x40010c00
 8000604:	10210000 	.word	0x10210000
 8000608:	40011000 	.word	0x40011000

0800060c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8000614:	200a      	movs	r0, #10
 8000616:	f001 fd61 	bl	80020dc <osDelay>
 800061a:	e7fb      	b.n	8000614 <StartDefaultTask+0x8>

0800061c <GreenLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenLED */
void GreenLED(void *argument)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenLED */
  uint8_t counter = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
      SEGGER_SYSVIEW_Print("GreenTask is running");
 8000628:	4823      	ldr	r0, [pc, #140]	@ (80006b8 <GreenLED+0x9c>)
 800062a:	f006 fa2f 	bl	8006a8c <SEGGER_SYSVIEW_Print>
      HAL_Delay(50);
 800062e:	2032      	movs	r0, #50	@ 0x32
 8000630:	f000 fae4 	bl	8000bfc <HAL_Delay>

      if(GreenState == OFF) {
 8000634:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <GreenLED+0xa0>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d103      	bne.n	8000644 <GreenLED+0x28>
	  GreenState = ON;
 800063c:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <GreenLED+0xa0>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	e002      	b.n	800064a <GreenLED+0x2e>
      }
      else {
	  GreenState = OFF;
 8000644:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <GreenLED+0xa0>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
      }

      counter++;
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	3301      	adds	r3, #1
 800064e:	73fb      	strb	r3, [r7, #15]

      sprintf(message_buffer,"GreenTask counter = %d\n",counter);
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	461a      	mov	r2, r3
 8000654:	491a      	ldr	r1, [pc, #104]	@ (80006c0 <GreenLED+0xa4>)
 8000656:	481b      	ldr	r0, [pc, #108]	@ (80006c4 <GreenLED+0xa8>)
 8000658:	f006 fad0 	bl	8006bfc <siprintf>
      ITM_Print(message_buffer);
 800065c:	4819      	ldr	r0, [pc, #100]	@ (80006c4 <GreenLED+0xa8>)
 800065e:	f000 f933 	bl	80008c8 <ITM_Print>

      if(Left_Button_State == PRESSED){
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <GreenLED+0xac>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d10e      	bne.n	8000688 <GreenLED+0x6c>
	  sprintf(message_buffer,"Terminating GreenTask\n");
 800066a:	4918      	ldr	r1, [pc, #96]	@ (80006cc <GreenLED+0xb0>)
 800066c:	4815      	ldr	r0, [pc, #84]	@ (80006c4 <GreenLED+0xa8>)
 800066e:	f006 fac5 	bl	8006bfc <siprintf>
	  ITM_Print(message_buffer);
 8000672:	4814      	ldr	r0, [pc, #80]	@ (80006c4 <GreenLED+0xa8>)
 8000674:	f000 f928 	bl	80008c8 <ITM_Print>
	  GreenState = OFF;
 8000678:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <GreenLED+0xa0>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
	  osThreadTerminate(GreenTaskHandle);
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <GreenLED+0xb4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fcfd 	bl	8002082 <osThreadTerminate>
      }

      if(counter==5){
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	2b05      	cmp	r3, #5
 800068c:	d10e      	bne.n	80006ac <GreenLED+0x90>
	  sprintf(message_buffer,"Terminating RedTask\n");
 800068e:	4911      	ldr	r1, [pc, #68]	@ (80006d4 <GreenLED+0xb8>)
 8000690:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <GreenLED+0xa8>)
 8000692:	f006 fab3 	bl	8006bfc <siprintf>
	  ITM_Print(message_buffer);
 8000696:	480b      	ldr	r0, [pc, #44]	@ (80006c4 <GreenLED+0xa8>)
 8000698:	f000 f916 	bl	80008c8 <ITM_Print>
	  osThreadTerminate(RedTaskHandle);
 800069c:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <GreenLED+0xbc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fcee 	bl	8002082 <osThreadTerminate>
	  RedState = OFF;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <GreenLED+0xc0>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
      }

      osDelay(500);
 80006ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006b0:	f001 fd14 	bl	80020dc <osDelay>
      SEGGER_SYSVIEW_Print("GreenTask is running");
 80006b4:	e7b8      	b.n	8000628 <GreenLED+0xc>
 80006b6:	bf00      	nop
 80006b8:	080075c8 	.word	0x080075c8
 80006bc:	20000001 	.word	0x20000001
 80006c0:	080075e0 	.word	0x080075e0
 80006c4:	20000094 	.word	0x20000094
 80006c8:	20000000 	.word	0x20000000
 80006cc:	080075f8 	.word	0x080075f8
 80006d0:	20000084 	.word	0x20000084
 80006d4:	08007610 	.word	0x08007610
 80006d8:	2000008c 	.word	0x2000008c
 80006dc:	20000002 	.word	0x20000002

080006e0 <BlueLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BlueLED */
void BlueLED(void *argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlueLED */
  uint8_t counter=0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
  SEGGER_SYSVIEW_NameMarker(Marker1_Id, "MyMarker");
 80006ec:	4919      	ldr	r1, [pc, #100]	@ (8000754 <BlueLED+0x74>)
 80006ee:	2001      	movs	r0, #1
 80006f0:	f006 f878 	bl	80067e4 <SEGGER_SYSVIEW_NameMarker>
  /* Infinite loop */
  for(;;)
  {
      SEGGER_SYSVIEW_MarkStart(Marker1_Id);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f005 fffd 	bl	80066f4 <SEGGER_SYSVIEW_MarkStart>
      SEGGER_SYSVIEW_Print("BlueTask is running");
 80006fa:	4817      	ldr	r0, [pc, #92]	@ (8000758 <BlueLED+0x78>)
 80006fc:	f006 f9c6 	bl	8006a8c <SEGGER_SYSVIEW_Print>
      for(uint32_t i=0; i<35000; i++)			//add some delay
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	e002      	b.n	800070c <BlueLED+0x2c>
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	3301      	adds	r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	f648 02b7 	movw	r2, #34999	@ 0x88b7
 8000712:	4293      	cmp	r3, r2
 8000714:	d9f7      	bls.n	8000706 <BlueLED+0x26>
	;
      if(BlueState == OFF) {
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <BlueLED+0x7c>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d103      	bne.n	8000726 <BlueLED+0x46>
	  BlueState = ON;
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <BlueLED+0x7c>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	e002      	b.n	800072c <BlueLED+0x4c>
      }
      else {
	  BlueState = OFF;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <BlueLED+0x7c>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
      }

      counter++;
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	3301      	adds	r3, #1
 8000730:	73fb      	strb	r3, [r7, #15]

      sprintf(message_buffer,"BlueTask counter = %d\n",counter);
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	461a      	mov	r2, r3
 8000736:	490a      	ldr	r1, [pc, #40]	@ (8000760 <BlueLED+0x80>)
 8000738:	480a      	ldr	r0, [pc, #40]	@ (8000764 <BlueLED+0x84>)
 800073a:	f006 fa5f 	bl	8006bfc <siprintf>
      ITM_Print(message_buffer);
 800073e:	4809      	ldr	r0, [pc, #36]	@ (8000764 <BlueLED+0x84>)
 8000740:	f000 f8c2 	bl	80008c8 <ITM_Print>
      SEGGER_SYSVIEW_MarkStop(Marker1_Id);
 8000744:	2001      	movs	r0, #1
 8000746:	f006 f811 	bl	800676c <SEGGER_SYSVIEW_MarkStop>
      osDelay(200);
 800074a:	20c8      	movs	r0, #200	@ 0xc8
 800074c:	f001 fcc6 	bl	80020dc <osDelay>
      SEGGER_SYSVIEW_MarkStart(Marker1_Id);
 8000750:	e7d0      	b.n	80006f4 <BlueLED+0x14>
 8000752:	bf00      	nop
 8000754:	08007628 	.word	0x08007628
 8000758:	08007634 	.word	0x08007634
 800075c:	20000003 	.word	0x20000003
 8000760:	08007648 	.word	0x08007648
 8000764:	20000094 	.word	0x20000094

08000768 <RedLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedLED */
void RedLED(void *argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedLED */
  uint8_t counter=0;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	if(RedState == OFF) {
 8000774:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <RedLED+0x44>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d103      	bne.n	8000784 <RedLED+0x1c>
		RedState = ON;
 800077c:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <RedLED+0x44>)
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
 8000782:	e002      	b.n	800078a <RedLED+0x22>
	}
	else {
		RedState = OFF;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <RedLED+0x44>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
	}
	counter++;
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	3301      	adds	r3, #1
 800078e:	73fb      	strb	r3, [r7, #15]

	sprintf(message_buffer,"RedTask counter = %d\n",counter);
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	461a      	mov	r2, r3
 8000794:	4906      	ldr	r1, [pc, #24]	@ (80007b0 <RedLED+0x48>)
 8000796:	4807      	ldr	r0, [pc, #28]	@ (80007b4 <RedLED+0x4c>)
 8000798:	f006 fa30 	bl	8006bfc <siprintf>
	ITM_Print(message_buffer);
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <RedLED+0x4c>)
 800079e:	f000 f893 	bl	80008c8 <ITM_Print>

    osDelay(3000);
 80007a2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80007a6:	f001 fc99 	bl	80020dc <osDelay>
	if(RedState == OFF) {
 80007aa:	e7e3      	b.n	8000774 <RedLED+0xc>
 80007ac:	20000002 	.word	0x20000002
 80007b0:	08007660 	.word	0x08007660
 80007b4:	20000094 	.word	0x20000094

080007b8 <StartLedMUX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedMUX */
void StartLedMUX(void *argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedMUX */
  /* Infinite loop */
  for(;;)
  {
	if(GreenState == ON){
 80007c0:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <StartLedMUX+0xac>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d110      	bne.n	80007ea <StartLedMUX+0x32>
		LEDGreen();
 80007c8:	f7ff fd08 	bl	80001dc <LEDGreen>
		if (BlueState == ON || RedState == ON){
 80007cc:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <StartLedMUX+0xb0>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d003      	beq.n	80007dc <StartLedMUX+0x24>
 80007d4:	4b25      	ldr	r3, [pc, #148]	@ (800086c <StartLedMUX+0xb4>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d103      	bne.n	80007e4 <StartLedMUX+0x2c>
		osDelay(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f001 fc7d 	bl	80020dc <osDelay>
 80007e2:	e002      	b.n	80007ea <StartLedMUX+0x32>
		}
		else{
			osDelay(200);
 80007e4:	20c8      	movs	r0, #200	@ 0xc8
 80007e6:	f001 fc79 	bl	80020dc <osDelay>
		}
	}

	if(BlueState == ON){
 80007ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <StartLedMUX+0xb0>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d110      	bne.n	8000814 <StartLedMUX+0x5c>
		LEDBlue();
 80007f2:	f7ff fd29 	bl	8000248 <LEDBlue>
		if (GreenState == ON || RedState == ON){
 80007f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <StartLedMUX+0xac>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d003      	beq.n	8000806 <StartLedMUX+0x4e>
 80007fe:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <StartLedMUX+0xb4>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d103      	bne.n	800080e <StartLedMUX+0x56>
		osDelay(1);
 8000806:	2001      	movs	r0, #1
 8000808:	f001 fc68 	bl	80020dc <osDelay>
 800080c:	e002      	b.n	8000814 <StartLedMUX+0x5c>
		}
		else{
			osDelay(200);
 800080e:	20c8      	movs	r0, #200	@ 0xc8
 8000810:	f001 fc64 	bl	80020dc <osDelay>
		}
	}

	if(RedState == ON){
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <StartLedMUX+0xb4>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d110      	bne.n	800083e <StartLedMUX+0x86>
		LEDRed();
 800081c:	f7ff fd4a 	bl	80002b4 <LEDRed>
		if (BlueState == ON || GreenState == ON){
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <StartLedMUX+0xb0>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d003      	beq.n	8000830 <StartLedMUX+0x78>
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <StartLedMUX+0xac>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d103      	bne.n	8000838 <StartLedMUX+0x80>
		osDelay(1);
 8000830:	2001      	movs	r0, #1
 8000832:	f001 fc53 	bl	80020dc <osDelay>
 8000836:	e002      	b.n	800083e <StartLedMUX+0x86>
		}
		else{
			osDelay(200);
 8000838:	20c8      	movs	r0, #200	@ 0xc8
 800083a:	f001 fc4f 	bl	80020dc <osDelay>
		}
	}

	if(GreenState == OFF && BlueState == OFF && RedState == OFF){
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <StartLedMUX+0xac>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d1bc      	bne.n	80007c0 <StartLedMUX+0x8>
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <StartLedMUX+0xb0>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d1b8      	bne.n	80007c0 <StartLedMUX+0x8>
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <StartLedMUX+0xb4>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d1b4      	bne.n	80007c0 <StartLedMUX+0x8>
		LEDOff();
 8000856:	f7ff fd63 	bl	8000320 <LEDOff>
		osDelay(200);
 800085a:	20c8      	movs	r0, #200	@ 0xc8
 800085c:	f001 fc3e 	bl	80020dc <osDelay>
	if(GreenState == ON){
 8000860:	e7ae      	b.n	80007c0 <StartLedMUX+0x8>
 8000862:	bf00      	nop
 8000864:	20000001 	.word	0x20000001
 8000868:	20000003 	.word	0x20000003
 800086c:	20000002 	.word	0x20000002

08000870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a04      	ldr	r2, [pc, #16]	@ (8000890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d101      	bne.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000882:	f000 f99f 	bl	8000bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40000800 	.word	0x40000800

08000894 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);

	if(GPIO_Pin == Left_Button_Pin){
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d10a      	bne.n	80008ba <HAL_GPIO_EXTI_Callback+0x26>
		if(Left_Button_State == WAIT){
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0x30>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d103      	bne.n	80008b4 <HAL_GPIO_EXTI_Callback+0x20>
			Left_Button_State = PRESSED;
 80008ac:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0x30>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
		}
		else{
			Left_Button_State = WAIT;
		}
	}
}
 80008b2:	e002      	b.n	80008ba <HAL_GPIO_EXTI_Callback+0x26>
			Left_Button_State = WAIT;
 80008b4:	4b03      	ldr	r3, [pc, #12]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0x30>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000000 	.word	0x20000000

080008c8 <ITM_Print>:

void ITM_Print(const char *message_buffer){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	while(*message_buffer){
 80008d0:	e006      	b.n	80008e0 <ITM_Print+0x18>
		ITM_SendChar(*message_buffer++);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fd3e 	bl	800035c <ITM_SendChar>
	while(*message_buffer){
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1f4      	bne.n	80008d2 <ITM_Print+0xa>
	}
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f6:	b672      	cpsid	i
}
 80008f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fa:	bf00      	nop
 80008fc:	e7fd      	b.n	80008fa <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000906:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <HAL_MspInit+0x68>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4a17      	ldr	r2, [pc, #92]	@ (8000968 <HAL_MspInit+0x68>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6193      	str	r3, [r2, #24]
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <HAL_MspInit+0x68>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <HAL_MspInit+0x68>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a11      	ldr	r2, [pc, #68]	@ (8000968 <HAL_MspInit+0x68>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <HAL_MspInit+0x68>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	f06f 0001 	mvn.w	r0, #1
 800093e:	f000 fa36 	bl	8000dae <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <HAL_MspInit+0x6c>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4a04      	ldr	r2, [pc, #16]	@ (800096c <HAL_MspInit+0x6c>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000
 800096c:	40010000 	.word	0x40010000

08000970 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08e      	sub	sp, #56	@ 0x38
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000986:	4b34      	ldr	r3, [pc, #208]	@ (8000a58 <HAL_InitTick+0xe8>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4a33      	ldr	r2, [pc, #204]	@ (8000a58 <HAL_InitTick+0xe8>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	61d3      	str	r3, [r2, #28]
 8000992:	4b31      	ldr	r3, [pc, #196]	@ (8000a58 <HAL_InitTick+0xe8>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800099e:	f107 0210 	add.w	r2, r7, #16
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 ffbd 	bl	8001928 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009ae:	6a3b      	ldr	r3, [r7, #32]
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d103      	bne.n	80009c0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009b8:	f000 ffa2 	bl	8001900 <HAL_RCC_GetPCLK1Freq>
 80009bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80009be:	e004      	b.n	80009ca <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009c0:	f000 ff9e 	bl	8001900 <HAL_RCC_GetPCLK1Freq>
 80009c4:	4603      	mov	r3, r0
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009cc:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <HAL_InitTick+0xec>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	0c9b      	lsrs	r3, r3, #18
 80009d4:	3b01      	subs	r3, #1
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009d8:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <HAL_InitTick+0xf0>)
 80009da:	4a22      	ldr	r2, [pc, #136]	@ (8000a64 <HAL_InitTick+0xf4>)
 80009dc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009de:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <HAL_InitTick+0xf0>)
 80009e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009e4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a60 <HAL_InitTick+0xf0>)
 80009e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ea:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <HAL_InitTick+0xf0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <HAL_InitTick+0xf0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f8:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <HAL_InitTick+0xf0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80009fe:	4818      	ldr	r0, [pc, #96]	@ (8000a60 <HAL_InitTick+0xf0>)
 8000a00:	f000 ffe0 	bl	80019c4 <HAL_TIM_Base_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a0a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d11b      	bne.n	8000a4a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000a12:	4813      	ldr	r0, [pc, #76]	@ (8000a60 <HAL_InitTick+0xf0>)
 8000a14:	f001 f82e 	bl	8001a74 <HAL_TIM_Base_Start_IT>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a1e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d111      	bne.n	8000a4a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a26:	201e      	movs	r0, #30
 8000a28:	f000 f9dd 	bl	8000de6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b0f      	cmp	r3, #15
 8000a30:	d808      	bhi.n	8000a44 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a32:	2200      	movs	r2, #0
 8000a34:	6879      	ldr	r1, [r7, #4]
 8000a36:	201e      	movs	r0, #30
 8000a38:	f000 f9b9 	bl	8000dae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <HAL_InitTick+0xf8>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	e002      	b.n	8000a4a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3738      	adds	r7, #56	@ 0x38
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	431bde83 	.word	0x431bde83
 8000a60:	200000bc 	.word	0x200000bc
 8000a64:	40000800 	.word	0x40000800
 8000a68:	20000008 	.word	0x20000008

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <NMI_Handler+0x4>

08000a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <MemManage_Handler+0x4>

08000a84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_Button_Pin);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f000 fb49 	bl	800113c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ab4:	4802      	ldr	r0, [pc, #8]	@ (8000ac0 <TIM4_IRQHandler+0x10>)
 8000ab6:	f001 f82f 	bl	8001b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000bc 	.word	0x200000bc

08000ac4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ac8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000acc:	f000 fb36 	bl	800113c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000adc:	4a14      	ldr	r2, [pc, #80]	@ (8000b30 <_sbrk+0x5c>)
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <_sbrk+0x60>)
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <_sbrk+0x64>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <_sbrk+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af6:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d207      	bcs.n	8000b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b04:	f006 f8b4 	bl	8006c70 <__errno>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	e009      	b.n	8000b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <_sbrk+0x64>)
 8000b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20005000 	.word	0x20005000
 8000b34:	00000400 	.word	0x00000400
 8000b38:	20000104 	.word	0x20000104
 8000b3c:	20004908 	.word	0x20004908

08000b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b4c:	f7ff fff8 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480b      	ldr	r0, [pc, #44]	@ (8000b80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b52:	490c      	ldr	r1, [pc, #48]	@ (8000b84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b54:	4a0c      	ldr	r2, [pc, #48]	@ (8000b88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a09      	ldr	r2, [pc, #36]	@ (8000b8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b68:	4c09      	ldr	r4, [pc, #36]	@ (8000b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b76:	f006 f881 	bl	8006c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7a:	f7ff fc15 	bl	80003a8 <main>
  bx lr
 8000b7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000b88:	08007890 	.word	0x08007890
  ldr r2, =_sbss
 8000b8c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b90:	20004904 	.word	0x20004904

08000b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_2_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <HAL_Init+0x28>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	@ (8000bc0 <HAL_Init+0x28>)
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f8f5 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	200f      	movs	r0, #15
 8000bb0:	f7ff fede 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fea4 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <HAL_IncTick+0x1c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <HAL_IncTick+0x20>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a03      	ldr	r2, [pc, #12]	@ (8000be4 <HAL_IncTick+0x20>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	2000000c 	.word	0x2000000c
 8000be4:	20000108 	.word	0x20000108

08000be8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b02      	ldr	r3, [pc, #8]	@ (8000bf8 <HAL_GetTick+0x10>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	20000108 	.word	0x20000108

08000bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c04:	f7ff fff0 	bl	8000be8 <HAL_GetTick>
 8000c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c14:	d005      	beq.n	8000c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <HAL_Delay+0x44>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c22:	bf00      	nop
 8000c24:	f7ff ffe0 	bl	8000be8 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d8f7      	bhi.n	8000c24 <HAL_Delay+0x28>
  {
  }
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000000c 	.word	0x2000000c

08000c44 <__NVIC_SetPriorityGrouping>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	@ (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4906      	ldr	r1, [pc, #24]	@ (8000cdc <__NVIC_EnableIRQ+0x34>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	@ (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	@ (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	@ 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	@ 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff4f 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff64 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ffb2 	bl	8000d34 <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff81 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff57 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b08b      	sub	sp, #44	@ 0x2c
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e16:	e169      	b.n	80010ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 8158 	bne.w	80010e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	4a9a      	ldr	r2, [pc, #616]	@ (80010a4 <HAL_GPIO_Init+0x2a0>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d05e      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e40:	4a98      	ldr	r2, [pc, #608]	@ (80010a4 <HAL_GPIO_Init+0x2a0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d875      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e46:	4a98      	ldr	r2, [pc, #608]	@ (80010a8 <HAL_GPIO_Init+0x2a4>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d058      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e4c:	4a96      	ldr	r2, [pc, #600]	@ (80010a8 <HAL_GPIO_Init+0x2a4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d86f      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e52:	4a96      	ldr	r2, [pc, #600]	@ (80010ac <HAL_GPIO_Init+0x2a8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d052      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e58:	4a94      	ldr	r2, [pc, #592]	@ (80010ac <HAL_GPIO_Init+0x2a8>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d869      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e5e:	4a94      	ldr	r2, [pc, #592]	@ (80010b0 <HAL_GPIO_Init+0x2ac>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d04c      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e64:	4a92      	ldr	r2, [pc, #584]	@ (80010b0 <HAL_GPIO_Init+0x2ac>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d863      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e6a:	4a92      	ldr	r2, [pc, #584]	@ (80010b4 <HAL_GPIO_Init+0x2b0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d046      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e70:	4a90      	ldr	r2, [pc, #576]	@ (80010b4 <HAL_GPIO_Init+0x2b0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d85d      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e76:	2b12      	cmp	r3, #18
 8000e78:	d82a      	bhi.n	8000ed0 <HAL_GPIO_Init+0xcc>
 8000e7a:	2b12      	cmp	r3, #18
 8000e7c:	d859      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e84 <HAL_GPIO_Init+0x80>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000eff 	.word	0x08000eff
 8000e88:	08000ed9 	.word	0x08000ed9
 8000e8c:	08000eeb 	.word	0x08000eeb
 8000e90:	08000f2d 	.word	0x08000f2d
 8000e94:	08000f33 	.word	0x08000f33
 8000e98:	08000f33 	.word	0x08000f33
 8000e9c:	08000f33 	.word	0x08000f33
 8000ea0:	08000f33 	.word	0x08000f33
 8000ea4:	08000f33 	.word	0x08000f33
 8000ea8:	08000f33 	.word	0x08000f33
 8000eac:	08000f33 	.word	0x08000f33
 8000eb0:	08000f33 	.word	0x08000f33
 8000eb4:	08000f33 	.word	0x08000f33
 8000eb8:	08000f33 	.word	0x08000f33
 8000ebc:	08000f33 	.word	0x08000f33
 8000ec0:	08000f33 	.word	0x08000f33
 8000ec4:	08000f33 	.word	0x08000f33
 8000ec8:	08000ee1 	.word	0x08000ee1
 8000ecc:	08000ef5 	.word	0x08000ef5
 8000ed0:	4a79      	ldr	r2, [pc, #484]	@ (80010b8 <HAL_GPIO_Init+0x2b4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ed6:	e02c      	b.n	8000f32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	623b      	str	r3, [r7, #32]
          break;
 8000ede:	e029      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e024      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	3308      	adds	r3, #8
 8000ef0:	623b      	str	r3, [r7, #32]
          break;
 8000ef2:	e01f      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	330c      	adds	r3, #12
 8000efa:	623b      	str	r3, [r7, #32]
          break;
 8000efc:	e01a      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f06:	2304      	movs	r3, #4
 8000f08:	623b      	str	r3, [r7, #32]
          break;
 8000f0a:	e013      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d105      	bne.n	8000f20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f14:	2308      	movs	r3, #8
 8000f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	611a      	str	r2, [r3, #16]
          break;
 8000f1e:	e009      	b.n	8000f34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f20:	2308      	movs	r3, #8
 8000f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	615a      	str	r2, [r3, #20]
          break;
 8000f2a:	e003      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          break;
 8000f32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	2bff      	cmp	r3, #255	@ 0xff
 8000f38:	d801      	bhi.n	8000f3e <HAL_GPIO_Init+0x13a>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	e001      	b.n	8000f42 <HAL_GPIO_Init+0x13e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3304      	adds	r3, #4
 8000f42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	2bff      	cmp	r3, #255	@ 0xff
 8000f48:	d802      	bhi.n	8000f50 <HAL_GPIO_Init+0x14c>
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	e002      	b.n	8000f56 <HAL_GPIO_Init+0x152>
 8000f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f52:	3b08      	subs	r3, #8
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	401a      	ands	r2, r3
 8000f68:	6a39      	ldr	r1, [r7, #32]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	431a      	orrs	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 80b1 	beq.w	80010e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f84:	4b4d      	ldr	r3, [pc, #308]	@ (80010bc <HAL_GPIO_Init+0x2b8>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a4c      	ldr	r2, [pc, #304]	@ (80010bc <HAL_GPIO_Init+0x2b8>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b4a      	ldr	r3, [pc, #296]	@ (80010bc <HAL_GPIO_Init+0x2b8>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f9c:	4a48      	ldr	r2, [pc, #288]	@ (80010c0 <HAL_GPIO_Init+0x2bc>)
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a40      	ldr	r2, [pc, #256]	@ (80010c4 <HAL_GPIO_Init+0x2c0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d013      	beq.n	8000ff0 <HAL_GPIO_Init+0x1ec>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a3f      	ldr	r2, [pc, #252]	@ (80010c8 <HAL_GPIO_Init+0x2c4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d00d      	beq.n	8000fec <HAL_GPIO_Init+0x1e8>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80010cc <HAL_GPIO_Init+0x2c8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d007      	beq.n	8000fe8 <HAL_GPIO_Init+0x1e4>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a3d      	ldr	r2, [pc, #244]	@ (80010d0 <HAL_GPIO_Init+0x2cc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d101      	bne.n	8000fe4 <HAL_GPIO_Init+0x1e0>
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e006      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	e004      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e002      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ff4:	f002 0203 	and.w	r2, r2, #3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001002:	492f      	ldr	r1, [pc, #188]	@ (80010c0 <HAL_GPIO_Init+0x2bc>)
 8001004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800101c:	4b2d      	ldr	r3, [pc, #180]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	492c      	ldr	r1, [pc, #176]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	608b      	str	r3, [r1, #8]
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800102a:	4b2a      	ldr	r3, [pc, #168]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	43db      	mvns	r3, r3
 8001032:	4928      	ldr	r1, [pc, #160]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001034:	4013      	ands	r3, r2
 8001036:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001044:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	4922      	ldr	r1, [pc, #136]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	60cb      	str	r3, [r1, #12]
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001052:	4b20      	ldr	r3, [pc, #128]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	43db      	mvns	r3, r3
 800105a:	491e      	ldr	r1, [pc, #120]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 800105c:	4013      	ands	r3, r2
 800105e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d006      	beq.n	800107a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800106c:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	4918      	ldr	r1, [pc, #96]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	604b      	str	r3, [r1, #4]
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800107a:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	43db      	mvns	r3, r3
 8001082:	4914      	ldr	r1, [pc, #80]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001084:	4013      	ands	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d021      	beq.n	80010d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	490e      	ldr	r1, [pc, #56]	@ (80010d4 <HAL_GPIO_Init+0x2d0>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	600b      	str	r3, [r1, #0]
 80010a0:	e021      	b.n	80010e6 <HAL_GPIO_Init+0x2e2>
 80010a2:	bf00      	nop
 80010a4:	10320000 	.word	0x10320000
 80010a8:	10310000 	.word	0x10310000
 80010ac:	10220000 	.word	0x10220000
 80010b0:	10210000 	.word	0x10210000
 80010b4:	10120000 	.word	0x10120000
 80010b8:	10110000 	.word	0x10110000
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010000 	.word	0x40010000
 80010c4:	40010800 	.word	0x40010800
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	40011000 	.word	0x40011000
 80010d0:	40011400 	.word	0x40011400
 80010d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <HAL_GPIO_Init+0x304>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	43db      	mvns	r3, r3
 80010e0:	4909      	ldr	r1, [pc, #36]	@ (8001108 <HAL_GPIO_Init+0x304>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e8:	3301      	adds	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	fa22 f303 	lsr.w	r3, r2, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f47f ae8e 	bne.w	8000e18 <HAL_GPIO_Init+0x14>
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	372c      	adds	r7, #44	@ 0x2c
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001128:	e003      	b.n	8001132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	041a      	lsls	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	611a      	str	r2, [r3, #16]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fb9a 	bl	8000894 <HAL_GPIO_EXTI_Callback>
  }
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40010400 	.word	0x40010400

0800116c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e272      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8087 	beq.w	800129a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800118c:	4b92      	ldr	r3, [pc, #584]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b04      	cmp	r3, #4
 8001196:	d00c      	beq.n	80011b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001198:	4b8f      	ldr	r3, [pc, #572]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d112      	bne.n	80011ca <HAL_RCC_OscConfig+0x5e>
 80011a4:	4b8c      	ldr	r3, [pc, #560]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011b0:	d10b      	bne.n	80011ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b2:	4b89      	ldr	r3, [pc, #548]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d06c      	beq.n	8001298 <HAL_RCC_OscConfig+0x12c>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d168      	bne.n	8001298 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e24c      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d2:	d106      	bne.n	80011e2 <HAL_RCC_OscConfig+0x76>
 80011d4:	4b80      	ldr	r3, [pc, #512]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a7f      	ldr	r2, [pc, #508]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80011da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	e02e      	b.n	8001240 <HAL_RCC_OscConfig+0xd4>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10c      	bne.n	8001204 <HAL_RCC_OscConfig+0x98>
 80011ea:	4b7b      	ldr	r3, [pc, #492]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a7a      	ldr	r2, [pc, #488]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4b78      	ldr	r3, [pc, #480]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a77      	ldr	r2, [pc, #476]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e01d      	b.n	8001240 <HAL_RCC_OscConfig+0xd4>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0xbc>
 800120e:	4b72      	ldr	r3, [pc, #456]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a71      	ldr	r2, [pc, #452]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 8001214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b6f      	ldr	r3, [pc, #444]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a6e      	ldr	r2, [pc, #440]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 8001220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e00b      	b.n	8001240 <HAL_RCC_OscConfig+0xd4>
 8001228:	4b6b      	ldr	r3, [pc, #428]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a6a      	ldr	r2, [pc, #424]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 800122e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b68      	ldr	r3, [pc, #416]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a67      	ldr	r2, [pc, #412]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 800123a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d013      	beq.n	8001270 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fcce 	bl	8000be8 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff fcca 	bl	8000be8 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	@ 0x64
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e200      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4b5d      	ldr	r3, [pc, #372]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0xe4>
 800126e:	e014      	b.n	800129a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fcba 	bl	8000be8 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fcb6 	bl	8000be8 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	@ 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e1ec      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	4b53      	ldr	r3, [pc, #332]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x10c>
 8001296:	e000      	b.n	800129a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d063      	beq.n	800136e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012a6:	4b4c      	ldr	r3, [pc, #304]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00b      	beq.n	80012ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012b2:	4b49      	ldr	r3, [pc, #292]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d11c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x18c>
 80012be:	4b46      	ldr	r3, [pc, #280]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d116      	bne.n	80012f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ca:	4b43      	ldr	r3, [pc, #268]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <HAL_RCC_OscConfig+0x176>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d001      	beq.n	80012e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e1c0      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e2:	4b3d      	ldr	r3, [pc, #244]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4939      	ldr	r1, [pc, #228]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f6:	e03a      	b.n	800136e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d020      	beq.n	8001342 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001300:	4b36      	ldr	r3, [pc, #216]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff fc6f 	bl	8000be8 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff fc6b 	bl	8000be8 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e1a1      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132c:	4b2a      	ldr	r3, [pc, #168]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4927      	ldr	r1, [pc, #156]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
 8001340:	e015      	b.n	800136e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001342:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <HAL_RCC_OscConfig+0x270>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fc4e 	bl	8000be8 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001350:	f7ff fc4a 	bl	8000be8 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e180      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d03a      	beq.n	80013f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d019      	beq.n	80013b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <HAL_RCC_OscConfig+0x274>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001388:	f7ff fc2e 	bl	8000be8 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001390:	f7ff fc2a 	bl	8000be8 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e160      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f000 faea 	bl	8001988 <RCC_Delay>
 80013b4:	e01c      	b.n	80013f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b6:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <HAL_RCC_OscConfig+0x274>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013bc:	f7ff fc14 	bl	8000be8 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c2:	e00f      	b.n	80013e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c4:	f7ff fc10 	bl	8000be8 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d908      	bls.n	80013e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e146      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	42420000 	.word	0x42420000
 80013e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e4:	4b92      	ldr	r3, [pc, #584]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e9      	bne.n	80013c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80a6 	beq.w	800154a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001402:	4b8b      	ldr	r3, [pc, #556]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10d      	bne.n	800142a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b88      	ldr	r3, [pc, #544]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a87      	ldr	r2, [pc, #540]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b85      	ldr	r3, [pc, #532]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142a:	4b82      	ldr	r3, [pc, #520]	@ (8001634 <HAL_RCC_OscConfig+0x4c8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001432:	2b00      	cmp	r3, #0
 8001434:	d118      	bne.n	8001468 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001436:	4b7f      	ldr	r3, [pc, #508]	@ (8001634 <HAL_RCC_OscConfig+0x4c8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a7e      	ldr	r2, [pc, #504]	@ (8001634 <HAL_RCC_OscConfig+0x4c8>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001442:	f7ff fbd1 	bl	8000be8 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144a:	f7ff fbcd 	bl	8000be8 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b64      	cmp	r3, #100	@ 0x64
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e103      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	4b75      	ldr	r3, [pc, #468]	@ (8001634 <HAL_RCC_OscConfig+0x4c8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d106      	bne.n	800147e <HAL_RCC_OscConfig+0x312>
 8001470:	4b6f      	ldr	r3, [pc, #444]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4a6e      	ldr	r2, [pc, #440]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6213      	str	r3, [r2, #32]
 800147c:	e02d      	b.n	80014da <HAL_RCC_OscConfig+0x36e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x334>
 8001486:	4b6a      	ldr	r3, [pc, #424]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a69      	ldr	r2, [pc, #420]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	6213      	str	r3, [r2, #32]
 8001492:	4b67      	ldr	r3, [pc, #412]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4a66      	ldr	r2, [pc, #408]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 8001498:	f023 0304 	bic.w	r3, r3, #4
 800149c:	6213      	str	r3, [r2, #32]
 800149e:	e01c      	b.n	80014da <HAL_RCC_OscConfig+0x36e>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b05      	cmp	r3, #5
 80014a6:	d10c      	bne.n	80014c2 <HAL_RCC_OscConfig+0x356>
 80014a8:	4b61      	ldr	r3, [pc, #388]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a60      	ldr	r2, [pc, #384]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6213      	str	r3, [r2, #32]
 80014c0:	e00b      	b.n	80014da <HAL_RCC_OscConfig+0x36e>
 80014c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	6213      	str	r3, [r2, #32]
 80014ce:	4b58      	ldr	r3, [pc, #352]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4a57      	ldr	r2, [pc, #348]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	f023 0304 	bic.w	r3, r3, #4
 80014d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d015      	beq.n	800150e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fb81 	bl	8000be8 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e8:	e00a      	b.n	8001500 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ea:	f7ff fb7d 	bl	8000be8 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e0b1      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001500:	4b4b      	ldr	r3, [pc, #300]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0ee      	beq.n	80014ea <HAL_RCC_OscConfig+0x37e>
 800150c:	e014      	b.n	8001538 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fb6b 	bl	8000be8 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001514:	e00a      	b.n	800152c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001516:	f7ff fb67 	bl	8000be8 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e09b      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152c:	4b40      	ldr	r3, [pc, #256]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1ee      	bne.n	8001516 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d105      	bne.n	800154a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800153e:	4b3c      	ldr	r3, [pc, #240]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a3b      	ldr	r2, [pc, #236]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001548:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 8087 	beq.w	8001662 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001554:	4b36      	ldr	r3, [pc, #216]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b08      	cmp	r3, #8
 800155e:	d061      	beq.n	8001624 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d146      	bne.n	80015f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001568:	4b33      	ldr	r3, [pc, #204]	@ (8001638 <HAL_RCC_OscConfig+0x4cc>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff fb3b 	bl	8000be8 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001576:	f7ff fb37 	bl	8000be8 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e06d      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001588:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800159c:	d108      	bne.n	80015b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800159e:	4b24      	ldr	r3, [pc, #144]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	4921      	ldr	r1, [pc, #132]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a19      	ldr	r1, [r3, #32]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c0:	430b      	orrs	r3, r1
 80015c2:	491b      	ldr	r1, [pc, #108]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <HAL_RCC_OscConfig+0x4cc>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fb0b 	bl	8000be8 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff fb07 	bl	8000be8 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e03d      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x46a>
 80015f4:	e035      	b.n	8001662 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <HAL_RCC_OscConfig+0x4cc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff faf4 	bl	8000be8 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff faf0 	bl	8000be8 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e026      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x498>
 8001622:	e01e      	b.n	8001662 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d107      	bne.n	800163c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e019      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
 8001630:	40021000 	.word	0x40021000
 8001634:	40007000 	.word	0x40007000
 8001638:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <HAL_RCC_OscConfig+0x500>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	429a      	cmp	r2, r3
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d001      	beq.n	8001662 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40021000 	.word	0x40021000

08001670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0d0      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001684:	4b6a      	ldr	r3, [pc, #424]	@ (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d910      	bls.n	80016b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	4b67      	ldr	r3, [pc, #412]	@ (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 0207 	bic.w	r2, r3, #7
 800169a:	4965      	ldr	r1, [pc, #404]	@ (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b63      	ldr	r3, [pc, #396]	@ (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0b8      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d020      	beq.n	8001702 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016cc:	4b59      	ldr	r3, [pc, #356]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a58      	ldr	r2, [pc, #352]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e4:	4b53      	ldr	r3, [pc, #332]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4a52      	ldr	r2, [pc, #328]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f0:	4b50      	ldr	r3, [pc, #320]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	494d      	ldr	r1, [pc, #308]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d040      	beq.n	8001790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b47      	ldr	r3, [pc, #284]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d115      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e07f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d107      	bne.n	800173e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172e:	4b41      	ldr	r3, [pc, #260]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e073      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173e:	4b3d      	ldr	r3, [pc, #244]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e06b      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800174e:	4b39      	ldr	r3, [pc, #228]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f023 0203 	bic.w	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4936      	ldr	r1, [pc, #216]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001760:	f7ff fa42 	bl	8000be8 <HAL_GetTick>
 8001764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	e00a      	b.n	800177e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001768:	f7ff fa3e 	bl	8000be8 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e053      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177e:	4b2d      	ldr	r3, [pc, #180]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 020c 	and.w	r2, r3, #12
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	429a      	cmp	r2, r3
 800178e:	d1eb      	bne.n	8001768 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001790:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d210      	bcs.n	80017c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 0207 	bic.w	r2, r3, #7
 80017a6:	4922      	ldr	r1, [pc, #136]	@ (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e032      	b.n	8001826 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017cc:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4916      	ldr	r1, [pc, #88]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ea:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	490e      	ldr	r1, [pc, #56]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017fe:	f000 f821 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8001802:	4602      	mov	r2, r0
 8001804:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	490a      	ldr	r1, [pc, #40]	@ (8001838 <HAL_RCC_ClockConfig+0x1c8>)
 8001810:	5ccb      	ldrb	r3, [r1, r3]
 8001812:	fa22 f303 	lsr.w	r3, r2, r3
 8001816:	4a09      	ldr	r2, [pc, #36]	@ (800183c <HAL_RCC_ClockConfig+0x1cc>)
 8001818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <HAL_RCC_ClockConfig+0x1d0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f8a6 	bl	8000970 <HAL_InitTick>

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40022000 	.word	0x40022000
 8001834:	40021000 	.word	0x40021000
 8001838:	080077fc 	.word	0x080077fc
 800183c:	20000004 	.word	0x20000004
 8001840:	20000008 	.word	0x20000008

08001844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800185e:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b04      	cmp	r3, #4
 800186c:	d002      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x30>
 800186e:	2b08      	cmp	r3, #8
 8001870:	d003      	beq.n	800187a <HAL_RCC_GetSysClockFreq+0x36>
 8001872:	e027      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_RCC_GetSysClockFreq+0x98>)
 8001876:	613b      	str	r3, [r7, #16]
      break;
 8001878:	e027      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	0c9b      	lsrs	r3, r3, #18
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	4a17      	ldr	r2, [pc, #92]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001884:	5cd3      	ldrb	r3, [r2, r3]
 8001886:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d010      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	0c5b      	lsrs	r3, r3, #17
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	4a11      	ldr	r2, [pc, #68]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800189e:	5cd3      	ldrb	r3, [r2, r3]
 80018a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	@ (80018dc <HAL_RCC_GetSysClockFreq+0x98>)
 80018a6:	fb03 f202 	mul.w	r2, r3, r2
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e004      	b.n	80018be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a0c      	ldr	r2, [pc, #48]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	613b      	str	r3, [r7, #16]
      break;
 80018c2:	e002      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_RCC_GetSysClockFreq+0x98>)
 80018c6:	613b      	str	r3, [r7, #16]
      break;
 80018c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ca:	693b      	ldr	r3, [r7, #16]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
 80018dc:	007a1200 	.word	0x007a1200
 80018e0:	08007814 	.word	0x08007814
 80018e4:	08007824 	.word	0x08007824
 80018e8:	003d0900 	.word	0x003d0900

080018ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f0:	4b02      	ldr	r3, [pc, #8]	@ (80018fc <HAL_RCC_GetHCLKFreq+0x10>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001904:	f7ff fff2 	bl	80018ec <HAL_RCC_GetHCLKFreq>
 8001908:	4602      	mov	r2, r0
 800190a:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	4903      	ldr	r1, [pc, #12]	@ (8001924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001916:	5ccb      	ldrb	r3, [r1, r3]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800191c:	4618      	mov	r0, r3
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	0800780c 	.word	0x0800780c

08001928 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	220f      	movs	r2, #15
 8001936:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <HAL_RCC_GetClockConfig+0x58>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0203 	and.w	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001944:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <HAL_RCC_GetClockConfig+0x58>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001950:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <HAL_RCC_GetClockConfig+0x58>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <HAL_RCC_GetClockConfig+0x58>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	08db      	lsrs	r3, r3, #3
 8001962:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_RCC_GetClockConfig+0x5c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0207 	and.w	r2, r3, #7
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000
 8001984:	40022000 	.word	0x40022000

08001988 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001990:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <RCC_Delay+0x34>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <RCC_Delay+0x38>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0a5b      	lsrs	r3, r3, #9
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019a4:	bf00      	nop
  }
  while (Delay --);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1e5a      	subs	r2, r3, #1
 80019aa:	60fa      	str	r2, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f9      	bne.n	80019a4 <RCC_Delay+0x1c>
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	20000004 	.word	0x20000004
 80019c0:	10624dd3 	.word	0x10624dd3

080019c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e041      	b.n	8001a5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f839 	bl	8001a62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3304      	adds	r3, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	4610      	mov	r0, r2
 8001a04:	f000 f99c 	bl	8001d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d001      	beq.n	8001a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e03a      	b.n	8001b02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a18      	ldr	r2, [pc, #96]	@ (8001b0c <HAL_TIM_Base_Start_IT+0x98>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00e      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x58>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ab6:	d009      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x58>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <HAL_TIM_Base_Start_IT+0x9c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d004      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x58>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a13      	ldr	r2, [pc, #76]	@ (8001b14 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d111      	bne.n	8001af0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d010      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0201 	orr.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aee:	e007      	b.n	8001b00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40012c00 	.word	0x40012c00
 8001b10:	40000400 	.word	0x40000400
 8001b14:	40000800 	.word	0x40000800

08001b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d020      	beq.n	8001b7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01b      	beq.n	8001b7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f06f 0202 	mvn.w	r2, #2
 8001b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8d1 	bl	8001d0a <HAL_TIM_IC_CaptureCallback>
 8001b68:	e005      	b.n	8001b76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f8c4 	bl	8001cf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f8d3 	bl	8001d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d020      	beq.n	8001bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d01b      	beq.n	8001bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0204 	mvn.w	r2, #4
 8001b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8ab 	bl	8001d0a <HAL_TIM_IC_CaptureCallback>
 8001bb4:	e005      	b.n	8001bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f89e 	bl	8001cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f8ad 	bl	8001d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d020      	beq.n	8001c14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01b      	beq.n	8001c14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 0208 	mvn.w	r2, #8
 8001be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2204      	movs	r2, #4
 8001bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f885 	bl	8001d0a <HAL_TIM_IC_CaptureCallback>
 8001c00:	e005      	b.n	8001c0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f878 	bl	8001cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f887 	bl	8001d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d020      	beq.n	8001c60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01b      	beq.n	8001c60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0210 	mvn.w	r2, #16
 8001c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2208      	movs	r2, #8
 8001c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f85f 	bl	8001d0a <HAL_TIM_IC_CaptureCallback>
 8001c4c:	e005      	b.n	8001c5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f852 	bl	8001cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f861 	bl	8001d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00c      	beq.n	8001c84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d007      	beq.n	8001c84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0201 	mvn.w	r2, #1
 8001c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7fe fdf6 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00c      	beq.n	8001ca8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d007      	beq.n	8001ca8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f8c3 	bl	8001e2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00c      	beq.n	8001ccc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f831 	bl	8001d2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00c      	beq.n	8001cf0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0220 	mvn.w	r2, #32
 8001ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f896 	bl	8001e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a2f      	ldr	r2, [pc, #188]	@ (8001e10 <TIM_Base_SetConfig+0xd0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00b      	beq.n	8001d70 <TIM_Base_SetConfig+0x30>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d5e:	d007      	beq.n	8001d70 <TIM_Base_SetConfig+0x30>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a2c      	ldr	r2, [pc, #176]	@ (8001e14 <TIM_Base_SetConfig+0xd4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d003      	beq.n	8001d70 <TIM_Base_SetConfig+0x30>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8001e18 <TIM_Base_SetConfig+0xd8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d108      	bne.n	8001d82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a22      	ldr	r2, [pc, #136]	@ (8001e10 <TIM_Base_SetConfig+0xd0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00b      	beq.n	8001da2 <TIM_Base_SetConfig+0x62>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d90:	d007      	beq.n	8001da2 <TIM_Base_SetConfig+0x62>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a1f      	ldr	r2, [pc, #124]	@ (8001e14 <TIM_Base_SetConfig+0xd4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d003      	beq.n	8001da2 <TIM_Base_SetConfig+0x62>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001e18 <TIM_Base_SetConfig+0xd8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d108      	bne.n	8001db4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0d      	ldr	r2, [pc, #52]	@ (8001e10 <TIM_Base_SetConfig+0xd0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d103      	bne.n	8001de8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f023 0201 	bic.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]
  }
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	40012c00 	.word	0x40012c00
 8001e14:	40000400 	.word	0x40000400
 8001e18:	40000800 	.word	0x40000800

08001e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <__NVIC_SetPriority>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	@ (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	@ (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <SysTick_Handler+0x1c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001e9c:	f001 ff8e 	bl	8003dbc <xTaskGetSchedulerState>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001ea6:	f002 fcb7 	bl	8004818 <xPortSysTickHandler>
  }
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	e000e010 	.word	0xe000e010

08001eb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001eb8:	2100      	movs	r1, #0
 8001eba:	f06f 0004 	mvn.w	r0, #4
 8001ebe:	f7ff ffbf 	bl	8001e40 <__NVIC_SetPriority>
#endif
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ece:	f3ef 8305 	mrs	r3, IPSR
 8001ed2:	603b      	str	r3, [r7, #0]
  return(result);
 8001ed4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001eda:	f06f 0305 	mvn.w	r3, #5
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	e00c      	b.n	8001efc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <osKernelInitialize+0x40>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001eea:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <osKernelInitialize+0x40>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	e002      	b.n	8001efc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001efc:	687b      	ldr	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	2000010c 	.word	0x2000010c

08001f0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f12:	f3ef 8305 	mrs	r3, IPSR
 8001f16:	603b      	str	r3, [r7, #0]
  return(result);
 8001f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f1e:	f06f 0305 	mvn.w	r3, #5
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	e010      	b.n	8001f48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f26:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <osKernelStart+0x48>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d109      	bne.n	8001f42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f2e:	f7ff ffc1 	bl	8001eb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f32:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <osKernelStart+0x48>)
 8001f34:	2202      	movs	r2, #2
 8001f36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f38:	f001 f918 	bl	800316c <vTaskStartScheduler>
      stat = osOK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	e002      	b.n	8001f48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f48:	687b      	ldr	r3, [r7, #4]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2000010c 	.word	0x2000010c

08001f58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08e      	sub	sp, #56	@ 0x38
 8001f5c:	af04      	add	r7, sp, #16
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f68:	f3ef 8305 	mrs	r3, IPSR
 8001f6c:	617b      	str	r3, [r7, #20]
  return(result);
 8001f6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f040 8081 	bne.w	8002078 <osThreadNew+0x120>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d07d      	beq.n	8002078 <osThreadNew+0x120>
    stack = configMINIMAL_STACK_SIZE;
 8001f7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f82:	2318      	movs	r3, #24
 8001f84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d045      	beq.n	8002022 <osThreadNew+0xca>
      if (attr->name != NULL) {
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <osThreadNew+0x4c>
        name = attr->name;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d008      	beq.n	8001fca <osThreadNew+0x72>
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	2b38      	cmp	r3, #56	@ 0x38
 8001fbc:	d805      	bhi.n	8001fca <osThreadNew+0x72>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <osThreadNew+0x76>
        return (NULL);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e055      	b.n	800207a <osThreadNew+0x122>
      }

      if (attr->stack_size > 0U) {
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <osThreadNew+0x86>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00e      	beq.n	8002004 <osThreadNew+0xac>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b5b      	cmp	r3, #91	@ 0x5b
 8001fec:	d90a      	bls.n	8002004 <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d006      	beq.n	8002004 <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <osThreadNew+0xac>
        mem = 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	e010      	b.n	8002026 <osThreadNew+0xce>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10c      	bne.n	8002026 <osThreadNew+0xce>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d108      	bne.n	8002026 <osThreadNew+0xce>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d104      	bne.n	8002026 <osThreadNew+0xce>
          mem = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	e001      	b.n	8002026 <osThreadNew+0xce>
        }
      }
    }
    else {
      mem = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d110      	bne.n	800204e <osThreadNew+0xf6>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002034:	9202      	str	r2, [sp, #8]
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	6a3a      	ldr	r2, [r7, #32]
 8002040:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fce4 	bl	8002a10 <xTaskCreateStatic>
 8002048:	4603      	mov	r3, r0
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e014      	b.n	8002078 <osThreadNew+0x120>
      #endif
    }
    else {
      if (mem == 0) {
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d111      	bne.n	8002078 <osThreadNew+0x120>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	b29b      	uxth	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	f107 0310 	add.w	r3, r7, #16
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fd3e 	bl	8002aea <xTaskCreate>
 800206e:	4603      	mov	r3, r0
 8002070:	2b01      	cmp	r3, #1
 8002072:	d001      	beq.n	8002078 <osThreadNew+0x120>
            hTask = NULL;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002078:	693b      	ldr	r3, [r7, #16]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3728      	adds	r7, #40	@ 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800208e:	f3ef 8305 	mrs	r3, IPSR
 8002092:	60bb      	str	r3, [r7, #8]
  return(result);
 8002094:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <osThreadTerminate+0x20>
    stat = osErrorISR;
 800209a:	f06f 0305 	mvn.w	r3, #5
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e017      	b.n	80020d2 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d103      	bne.n	80020b0 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80020a8:	f06f 0303 	mvn.w	r3, #3
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	e010      	b.n	80020d2 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80020b0:	6938      	ldr	r0, [r7, #16]
 80020b2:	f000 ff65 	bl	8002f80 <eTaskGetState>
 80020b6:	4603      	mov	r3, r0
 80020b8:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d005      	beq.n	80020cc <osThreadTerminate+0x4a>
      stat = osOK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80020c4:	6938      	ldr	r0, [r7, #16]
 80020c6:	f000 fe81 	bl	8002dcc <vTaskDelete>
 80020ca:	e002      	b.n	80020d2 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80020cc:	f06f 0302 	mvn.w	r3, #2
 80020d0:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80020d2:	697b      	ldr	r3, [r7, #20]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020e4:	f3ef 8305 	mrs	r3, IPSR
 80020e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80020ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <osDelay+0x1c>
    stat = osErrorISR;
 80020f0:	f06f 0305 	mvn.w	r3, #5
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	e007      	b.n	8002108 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 ff04 	bl	8002f10 <vTaskDelay>
    }
  }

  return (stat);
 8002108:	68fb      	ldr	r3, [r7, #12]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4a07      	ldr	r2, [pc, #28]	@ (8002140 <vApplicationGetIdleTaskMemory+0x2c>)
 8002124:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	4a06      	ldr	r2, [pc, #24]	@ (8002144 <vApplicationGetIdleTaskMemory+0x30>)
 800212a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002132:	601a      	str	r2, [r3, #0]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000110 	.word	0x20000110
 8002144:	2000016c 	.word	0x2000016c

08002148 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4a07      	ldr	r2, [pc, #28]	@ (8002174 <vApplicationGetTimerTaskMemory+0x2c>)
 8002158:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4a06      	ldr	r2, [pc, #24]	@ (8002178 <vApplicationGetTimerTaskMemory+0x30>)
 800215e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002166:	601a      	str	r2, [r3, #0]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	2000056c 	.word	0x2000056c
 8002178:	200005c8 	.word	0x200005c8

0800217c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 0208 	add.w	r2, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f103 0208 	add.w	r2, r3, #8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f103 0208 	add.w	r2, r3, #8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80021b0:	f240 1019 	movw	r0, #281	@ 0x119
 80021b4:	f004 f8c8 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80021ce:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80021d2:	f004 f8b9 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 800221a:	f240 101b 	movw	r0, #283	@ 0x11b
 800221e:	f004 f893 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d103      	bne.n	800224a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	e00c      	b.n	8002264 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3308      	adds	r3, #8
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e002      	b.n	8002258 <vListInsert+0x2e>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	429a      	cmp	r2, r3
 8002262:	d2f6      	bcs.n	8002252 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002290:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002294:	f004 f858 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6892      	ldr	r2, [r2, #8]
 80022b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6852      	ldr	r2, [r2, #4]
 80022c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d103      	bne.n	80022d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	1e5a      	subs	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f240 101d 	movw	r0, #285	@ 0x11d
 80022ee:	f004 f867 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800230a:	2301      	movs	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10b      	bne.n	8002330 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d05d      	beq.n	80023f2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800233a:	2b00      	cmp	r3, #0
 800233c:	d059      	beq.n	80023f2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002346:	2100      	movs	r1, #0
 8002348:	fba3 2302 	umull	r2, r3, r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d000      	beq.n	8002352 <xQueueGenericReset+0x52>
 8002350:	2101      	movs	r1, #1
 8002352:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002354:	2b00      	cmp	r3, #0
 8002356:	d14c      	bne.n	80023f2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002358:	f002 f9de 	bl	8004718 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	6939      	ldr	r1, [r7, #16]
 8002366:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	441a      	add	r2, r3
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2200      	movs	r2, #0
 8002376:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002388:	3b01      	subs	r3, #1
 800238a:	6939      	ldr	r1, [r7, #16]
 800238c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	441a      	add	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	22ff      	movs	r2, #255	@ 0xff
 800239c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	22ff      	movs	r2, #255	@ 0xff
 80023a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d114      	bne.n	80023d8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01a      	beq.n	80023ec <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	3310      	adds	r3, #16
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 fa84 	bl	80038c8 <xTaskRemoveFromEventList>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d012      	beq.n	80023ec <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80023c6:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <xQueueGenericReset+0x128>)
 80023c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	e009      	b.n	80023ec <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	3310      	adds	r3, #16
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fecd 	bl	800217c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	3324      	adds	r3, #36	@ 0x24
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fec8 	bl	800217c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80023ec:	f002 f9c4 	bl	8004778 <vPortExitCritical>
 80023f0:	e001      	b.n	80023f6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <xQueueGenericReset+0x114>
    __asm volatile
 80023fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	60bb      	str	r3, [r7, #8]
}
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	4619      	mov	r1, r3
 8002418:	2096      	movs	r0, #150	@ 0x96
 800241a:	f003 ffd1 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800241e:	697b      	ldr	r3, [r7, #20]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	e000ed04 	.word	0xe000ed04

0800242c <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800242c:	b580      	push	{r7, lr}
 800242e:	b08c      	sub	sp, #48	@ 0x30
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <xQueueGenericCreateStatic+0x30>
    __asm volatile
 8002444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	623b      	str	r3, [r7, #32]
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d031      	beq.n	80024c6 <xQueueGenericCreateStatic+0x9a>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d02e      	beq.n	80024c6 <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d028      	beq.n	80024c6 <xQueueGenericCreateStatic+0x9a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d122      	bne.n	80024c6 <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8002480:	2350      	movs	r3, #80	@ 0x50
 8002482:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b50      	cmp	r3, #80	@ 0x50
 8002488:	d00b      	beq.n	80024a2 <xQueueGenericCreateStatic+0x76>
    __asm volatile
 800248a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800248e:	f383 8811 	msr	BASEPRI, r3
 8002492:	f3bf 8f6f 	isb	sy
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	61fb      	str	r3, [r7, #28]
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	e7fd      	b.n	800249e <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 80024a2:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80024a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024b0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f81e 	bl	8002500 <prvInitialiseNewQueue>
 80024c4:	e00e      	b.n	80024e4 <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 80024cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d0:	f383 8811 	msr	BASEPRI, r3
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	61bb      	str	r3, [r7, #24]
}
 80024de:	bf00      	nop
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	4618      	mov	r0, r3
 80024e8:	f004 f9da 	bl	80068a0 <SEGGER_SYSVIEW_ShrinkId>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4619      	mov	r1, r3
 80024f0:	2097      	movs	r0, #151	@ 0x97
 80024f2:	f003 ff65 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80024f8:	4618      	mov	r0, r3
 80024fa:	3728      	adds	r7, #40	@ 0x28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e002      	b.n	8002522 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800252e:	2101      	movs	r1, #1
 8002530:	69b8      	ldr	r0, [r7, #24]
 8002532:	f7ff fee5 	bl	8002300 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08c      	sub	sp, #48	@ 0x30
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002554:	2300      	movs	r3, #0
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800255c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10b      	bne.n	800257a <xQueueReceive+0x32>
    __asm volatile
 8002562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	623b      	str	r3, [r7, #32]
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	e7fd      	b.n	8002576 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d103      	bne.n	8002588 <xQueueReceive+0x40>
 8002580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <xQueueReceive+0x44>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <xQueueReceive+0x46>
 800258c:	2300      	movs	r3, #0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10b      	bne.n	80025aa <xQueueReceive+0x62>
    __asm volatile
 8002592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002596:	f383 8811 	msr	BASEPRI, r3
 800259a:	f3bf 8f6f 	isb	sy
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	61fb      	str	r3, [r7, #28]
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	e7fd      	b.n	80025a6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025aa:	f001 fc07 	bl	8003dbc <xTaskGetSchedulerState>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <xQueueReceive+0x72>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <xQueueReceive+0x76>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <xQueueReceive+0x78>
 80025be:	2300      	movs	r3, #0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <xQueueReceive+0x94>
    __asm volatile
 80025c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	61bb      	str	r3, [r7, #24]
}
 80025d6:	bf00      	nop
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025dc:	f002 f89c 	bl	8004718 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d023      	beq.n	8002634 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025f0:	f000 f898 	bl	8002724 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	1e5a      	subs	r2, r3, #1
 80025f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fa:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00f      	beq.n	8002624 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002606:	3310      	adds	r3, #16
 8002608:	4618      	mov	r0, r3
 800260a:	f001 f95d 	bl	80038c8 <xTaskRemoveFromEventList>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002614:	4b42      	ldr	r3, [pc, #264]	@ (8002720 <xQueueReceive+0x1d8>)
 8002616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002624:	f002 f8a8 	bl	8004778 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002628:	2101      	movs	r1, #1
 800262a:	20a4      	movs	r0, #164	@ 0xa4
 800262c:	f003 fec8 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002630:	2301      	movs	r3, #1
 8002632:	e071      	b.n	8002718 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d107      	bne.n	800264a <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800263a:	f002 f89d 	bl	8004778 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800263e:	2100      	movs	r1, #0
 8002640:	20a4      	movs	r0, #164	@ 0xa4
 8002642:	f003 febd 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002646:	2300      	movs	r3, #0
 8002648:	e066      	b.n	8002718 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800264a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	4618      	mov	r0, r3
 8002656:	f001 fa19 	bl	8003a8c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800265a:	2301      	movs	r3, #1
 800265c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800265e:	f002 f88b 	bl	8004778 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002662:	f000 fde1 	bl	8003228 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002666:	f002 f857 	bl	8004718 <vPortEnterCritical>
 800266a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002670:	b25b      	sxtb	r3, r3
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002676:	d103      	bne.n	8002680 <xQueueReceive+0x138>
 8002678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002682:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002686:	b25b      	sxtb	r3, r3
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d103      	bne.n	8002696 <xQueueReceive+0x14e>
 800268e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002696:	f002 f86f 	bl	8004778 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800269a:	1d3a      	adds	r2, r7, #4
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 fa0a 	bl	8003abc <xTaskCheckForTimeOut>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d123      	bne.n	80026f6 <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026b0:	f000 f8b0 	bl	8002814 <prvIsQueueEmpty>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d017      	beq.n	80026ea <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026bc:	3324      	adds	r3, #36	@ 0x24
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 f88e 	bl	80037e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80026c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026ca:	f000 f851 	bl	8002770 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80026ce:	f000 fdb9 	bl	8003244 <xTaskResumeAll>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d181      	bne.n	80025dc <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 80026d8:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <xQueueReceive+0x1d8>)
 80026da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	e778      	b.n	80025dc <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80026ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026ec:	f000 f840 	bl	8002770 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026f0:	f000 fda8 	bl	8003244 <xTaskResumeAll>
 80026f4:	e772      	b.n	80025dc <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80026f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026f8:	f000 f83a 	bl	8002770 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026fc:	f000 fda2 	bl	8003244 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002700:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002702:	f000 f887 	bl	8002814 <prvIsQueueEmpty>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	f43f af67 	beq.w	80025dc <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800270e:	2100      	movs	r1, #0
 8002710:	20a4      	movs	r0, #164	@ 0xa4
 8002712:	f003 fe55 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8002716:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002718:	4618      	mov	r0, r3
 800271a:	3730      	adds	r7, #48	@ 0x30
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	e000ed04 	.word	0xe000ed04

08002724 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d018      	beq.n	8002768 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	441a      	add	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	429a      	cmp	r2, r3
 800274e:	d303      	bcc.n	8002758 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68d9      	ldr	r1, [r3, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	461a      	mov	r2, r3
 8002762:	6838      	ldr	r0, [r7, #0]
 8002764:	f004 fab0 	bl	8006cc8 <memcpy>
    }
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002778:	f001 ffce 	bl	8004718 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002782:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002784:	e011      	b.n	80027aa <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	2b00      	cmp	r3, #0
 800278c:	d012      	beq.n	80027b4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3324      	adds	r3, #36	@ 0x24
 8002792:	4618      	mov	r0, r3
 8002794:	f001 f898 	bl	80038c8 <xTaskRemoveFromEventList>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800279e:	f001 f9f9 	bl	8003b94 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	dce9      	bgt.n	8002786 <prvUnlockQueue+0x16>
 80027b2:	e000      	b.n	80027b6 <prvUnlockQueue+0x46>
                    break;
 80027b4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	22ff      	movs	r2, #255	@ 0xff
 80027ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80027be:	f001 ffdb 	bl	8004778 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80027c2:	f001 ffa9 	bl	8004718 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027cc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80027ce:	e011      	b.n	80027f4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d012      	beq.n	80027fe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3310      	adds	r3, #16
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 f873 	bl	80038c8 <xTaskRemoveFromEventList>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80027e8:	f001 f9d4 	bl	8003b94 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80027ec:	7bbb      	ldrb	r3, [r7, #14]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80027f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	dce9      	bgt.n	80027d0 <prvUnlockQueue+0x60>
 80027fc:	e000      	b.n	8002800 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80027fe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	22ff      	movs	r2, #255	@ 0xff
 8002804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002808:	f001 ffb6 	bl	8004778 <vPortExitCritical>
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800281c:	f001 ff7c 	bl	8004718 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002824:	2b00      	cmp	r3, #0
 8002826:	d102      	bne.n	800282e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002828:	2301      	movs	r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	e001      	b.n	8002832 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002832:	f001 ffa1 	bl	8004778 <vPortExitCritical>

    return xReturn;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <vQueueAddToRegistry+0x2c>
    __asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	60fb      	str	r3, [r7, #12]
}
 8002866:	bf00      	nop
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d024      	beq.n	80028bc <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e01e      	b.n	80028b6 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002878:	4a18      	ldr	r2, [pc, #96]	@ (80028dc <vQueueAddToRegistry+0x9c>)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	429a      	cmp	r2, r3
 8002886:	d105      	bne.n	8002894 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4a13      	ldr	r2, [pc, #76]	@ (80028dc <vQueueAddToRegistry+0x9c>)
 800288e:	4413      	add	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
                    break;
 8002892:	e013      	b.n	80028bc <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10a      	bne.n	80028b0 <vQueueAddToRegistry+0x70>
 800289a:	4a10      	ldr	r2, [pc, #64]	@ (80028dc <vQueueAddToRegistry+0x9c>)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d104      	bne.n	80028b0 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4a0c      	ldr	r2, [pc, #48]	@ (80028dc <vQueueAddToRegistry+0x9c>)
 80028ac:	4413      	add	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3301      	adds	r3, #1
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b07      	cmp	r3, #7
 80028ba:	d9dd      	bls.n	8002878 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 80028ce:	20b6      	movs	r0, #182	@ 0xb6
 80028d0:	f003 fd3a 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80028d4:	bf00      	nop
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000dc8 	.word	0x20000dc8

080028e0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80028f0:	f001 ff12 	bl	8004718 <vPortEnterCritical>
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028fa:	b25b      	sxtb	r3, r3
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d103      	bne.n	800290a <vQueueWaitForMessageRestricted+0x2a>
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002910:	b25b      	sxtb	r3, r3
 8002912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002916:	d103      	bne.n	8002920 <vQueueWaitForMessageRestricted+0x40>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002920:	f001 ff2a 	bl	8004778 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002928:	2b00      	cmp	r3, #0
 800292a:	d106      	bne.n	800293a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	3324      	adds	r3, #36	@ 0x24
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	4618      	mov	r0, r3
 8002936:	f000 ff7d 	bl	8003834 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800293a:	6978      	ldr	r0, [r7, #20]
 800293c:	f7ff ff18 	bl	8002770 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002940:	20b9      	movs	r0, #185	@ 0xb9
 8002942:	f003 fd01 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 800294e:	b580      	push	{r7, lr}
 8002950:	b08e      	sub	sp, #56	@ 0x38
 8002952:	af04      	add	r7, sp, #16
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 800295c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10b      	bne.n	800297a <prvCreateStaticTask+0x2c>
    __asm volatile
 8002962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	623b      	str	r3, [r7, #32]
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	e7fd      	b.n	8002976 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 800297a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <prvCreateStaticTask+0x4a>
    __asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	61fb      	str	r3, [r7, #28]
}
 8002992:	bf00      	nop
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8002998:	235c      	movs	r3, #92	@ 0x5c
 800299a:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b5c      	cmp	r3, #92	@ 0x5c
 80029a0:	d00b      	beq.n	80029ba <prvCreateStaticTask+0x6c>
    __asm volatile
 80029a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	61bb      	str	r3, [r7, #24]
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	e7fd      	b.n	80029b6 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 80029ba:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01f      	beq.n	8002a02 <prvCreateStaticTask+0xb4>
 80029c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01c      	beq.n	8002a02 <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 80029c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80029cc:	225c      	movs	r2, #92	@ 0x5c
 80029ce:	2100      	movs	r1, #0
 80029d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029d2:	f004 f945 	bl	8006c60 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029e4:	2300      	movs	r3, #0
 80029e6:	9303      	str	r3, [sp, #12]
 80029e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ea:	9302      	str	r3, [sp, #8]
 80029ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f89d 	bl	8002b3a <prvInitialiseNewTask>
 8002a00:	e001      	b.n	8002a06 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3728      	adds	r7, #40	@ 0x28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	@ 0x28
 8002a14:	af04      	add	r7, sp, #16
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8002a22:	f107 0310 	add.w	r3, r7, #16
 8002a26:	9303      	str	r3, [sp, #12]
 8002a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2a:	9302      	str	r3, [sp, #8]
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff ff87 	bl	800294e <prvCreateStaticTask>
 8002a40:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002a48:	6978      	ldr	r0, [r7, #20]
 8002a4a:	f000 f907 	bl	8002c5c <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f003 ff25 	bl	80068a0 <SEGGER_SYSVIEW_ShrinkId>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4619      	mov	r1, r3
 8002a5a:	20bf      	movs	r0, #191	@ 0xbf
 8002a5c:	f003 fcb0 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002a60:	693b      	ldr	r3, [r7, #16]
    }
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b08a      	sub	sp, #40	@ 0x28
 8002a6e:	af04      	add	r7, sp, #16
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 ff57 	bl	8004930 <pvPortMalloc>
 8002a82:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d013      	beq.n	8002ab2 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002a8a:	205c      	movs	r0, #92	@ 0x5c
 8002a8c:	f001 ff50 	bl	8004930 <pvPortMalloc>
 8002a90:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002a98:	225c      	movs	r2, #92	@ 0x5c
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	6978      	ldr	r0, [r7, #20]
 8002a9e:	f004 f8df 	bl	8006c60 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aa8:	e005      	b.n	8002ab6 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002aaa:	6938      	ldr	r0, [r7, #16]
 8002aac:	f002 f872 	bl	8004b94 <vPortFree>
 8002ab0:	e001      	b.n	8002ab6 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d011      	beq.n	8002ae0 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	9303      	str	r3, [sp, #12]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	9302      	str	r3, [sp, #8]
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	9301      	str	r3, [sp, #4]
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f82d 	bl	8002b3a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002ae0:	697b      	ldr	r3, [r7, #20]
    }
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b088      	sub	sp, #32
 8002aee:	af02      	add	r7, sp, #8
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f7ff ffaf 	bl	8002a6a <prvCreateTask>
 8002b0c:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002b14:	6938      	ldr	r0, [r7, #16]
 8002b16:	f000 f8a1 	bl	8002c5c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e002      	b.n	8002b26 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b20:	f04f 33ff 	mov.w	r3, #4294967295
 8002b24:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	20c2      	movs	r0, #194	@ 0xc2
 8002b2c:	f003 fc48 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002b30:	697b      	ldr	r3, [r7, #20]
    }
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b088      	sub	sp, #32
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	461a      	mov	r2, r3
 8002b52:	21a5      	movs	r1, #165	@ 0xa5
 8002b54:	f004 f884 	bl	8006c60 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b62:	3b01      	subs	r3, #1
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f023 0307 	bic.w	r3, r3, #7
 8002b70:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00b      	beq.n	8002b94 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	617b      	str	r3, [r7, #20]
}
 8002b8e:	bf00      	nop
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d01e      	beq.n	8002bd8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	e012      	b.n	8002bc6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	7819      	ldrb	r1, [r3, #0]
 8002ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	3334      	adds	r3, #52	@ 0x34
 8002bb0:	460a      	mov	r2, r1
 8002bb2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	4413      	add	r3, r2
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d006      	beq.n	8002bce <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	2b0f      	cmp	r3, #15
 8002bca:	d9e9      	bls.n	8002ba0 <prvInitialiseNewTask+0x66>
 8002bcc:	e000      	b.n	8002bd0 <prvInitialiseNewTask+0x96>
            {
                break;
 8002bce:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bda:	2b37      	cmp	r3, #55	@ 0x37
 8002bdc:	d90b      	bls.n	8002bf6 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	613b      	str	r3, [r7, #16]
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	e7fd      	b.n	8002bf2 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf8:	2b37      	cmp	r3, #55	@ 0x37
 8002bfa:	d901      	bls.n	8002c00 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bfc:	2337      	movs	r3, #55	@ 0x37
 8002bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c04:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c0a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0e:	3304      	adds	r3, #4
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fad5 	bl	80021c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c18:	3318      	adds	r3, #24
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fad0 	bl	80021c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c24:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c34:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	68f9      	ldr	r1, [r7, #12]
 8002c3a:	69b8      	ldr	r0, [r7, #24]
 8002c3c:	f001 fc2e 	bl	800449c <pxPortInitialiseStack>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c44:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c50:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c52:	bf00      	nop
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002c5c:	b5b0      	push	{r4, r5, r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002c64:	f001 fd58 	bl	8004718 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002c68:	4b51      	ldr	r3, [pc, #324]	@ (8002db0 <prvAddNewTaskToReadyList+0x154>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	4a50      	ldr	r2, [pc, #320]	@ (8002db0 <prvAddNewTaskToReadyList+0x154>)
 8002c70:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002c72:	4b50      	ldr	r3, [pc, #320]	@ (8002db4 <prvAddNewTaskToReadyList+0x158>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002c7a:	4a4e      	ldr	r2, [pc, #312]	@ (8002db4 <prvAddNewTaskToReadyList+0x158>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c80:	4b4b      	ldr	r3, [pc, #300]	@ (8002db0 <prvAddNewTaskToReadyList+0x154>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d110      	bne.n	8002caa <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002c88:	f000 ffa8 	bl	8003bdc <prvInitialiseTaskLists>
 8002c8c:	e00d      	b.n	8002caa <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002db8 <prvAddNewTaskToReadyList+0x15c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c96:	4b47      	ldr	r3, [pc, #284]	@ (8002db4 <prvAddNewTaskToReadyList+0x158>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d802      	bhi.n	8002caa <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002ca4:	4a43      	ldr	r2, [pc, #268]	@ (8002db4 <prvAddNewTaskToReadyList+0x158>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002caa:	4b44      	ldr	r3, [pc, #272]	@ (8002dbc <prvAddNewTaskToReadyList+0x160>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	4a42      	ldr	r2, [pc, #264]	@ (8002dbc <prvAddNewTaskToReadyList+0x160>)
 8002cb2:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cb4:	4b41      	ldr	r3, [pc, #260]	@ (8002dbc <prvAddNewTaskToReadyList+0x160>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d016      	beq.n	8002cf0 <prvAddNewTaskToReadyList+0x94>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f003 fbef 	bl	80064a8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	461d      	mov	r5, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	461c      	mov	r4, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	1ae3      	subs	r3, r4, r3
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	462b      	mov	r3, r5
 8002cec:	f002 f962 	bl	8004fb4 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 fc5c 	bl	80065b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cfc:	4b30      	ldr	r3, [pc, #192]	@ (8002dc0 <prvAddNewTaskToReadyList+0x164>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d903      	bls.n	8002d0c <prvAddNewTaskToReadyList+0xb0>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	4a2d      	ldr	r2, [pc, #180]	@ (8002dc0 <prvAddNewTaskToReadyList+0x164>)
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d10:	492c      	ldr	r1, [pc, #176]	@ (8002dc4 <prvAddNewTaskToReadyList+0x168>)
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	3204      	adds	r2, #4
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	1d1a      	adds	r2, r3, #4
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc4 <prvAddNewTaskToReadyList+0x168>)
 8002d50:	441a      	add	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	615a      	str	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d5a:	491a      	ldr	r1, [pc, #104]	@ (8002dc4 <prvAddNewTaskToReadyList+0x168>)
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d6c:	1c59      	adds	r1, r3, #1
 8002d6e:	4815      	ldr	r0, [pc, #84]	@ (8002dc4 <prvAddNewTaskToReadyList+0x168>)
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4403      	add	r3, r0
 8002d7a:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002d7c:	f001 fcfc 	bl	8004778 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002d80:	4b0d      	ldr	r3, [pc, #52]	@ (8002db8 <prvAddNewTaskToReadyList+0x15c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00e      	beq.n	8002da6 <prvAddNewTaskToReadyList+0x14a>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002d88:	4b0a      	ldr	r3, [pc, #40]	@ (8002db4 <prvAddNewTaskToReadyList+0x158>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d207      	bcs.n	8002da6 <prvAddNewTaskToReadyList+0x14a>
 8002d96:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <prvAddNewTaskToReadyList+0x16c>)
 8002d98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bdb0      	pop	{r4, r5, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200012dc 	.word	0x200012dc
 8002db4:	20000e08 	.word	0x20000e08
 8002db8:	200012e8 	.word	0x200012e8
 8002dbc:	200012f8 	.word	0x200012f8
 8002dc0:	200012e4 	.word	0x200012e4
 8002dc4:	20000e0c 	.word	0x20000e0c
 8002dc8:	e000ed04 	.word	0xe000ed04

08002dcc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8002dd8:	f001 fc9e 	bl	8004718 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <vTaskDelete+0x1c>
 8002de2:	4b43      	ldr	r3, [pc, #268]	@ (8002ef0 <vTaskDelete+0x124>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	e000      	b.n	8002dea <vTaskDelete+0x1e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	3304      	adds	r3, #4
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fa55 	bl	80022a0 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <vTaskDelete+0x3c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	3318      	adds	r3, #24
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fa4c 	bl	80022a0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002e08:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef4 <vTaskDelete+0x128>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	4a39      	ldr	r2, [pc, #228]	@ (8002ef4 <vTaskDelete+0x128>)
 8002e10:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8002e12:	4b37      	ldr	r3, [pc, #220]	@ (8002ef0 <vTaskDelete+0x124>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d101      	bne.n	8002e20 <vTaskDelete+0x54>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <vTaskDelete+0x56>
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8002e24:	4b34      	ldr	r3, [pc, #208]	@ (8002ef8 <vTaskDelete+0x12c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01d      	beq.n	8002e68 <vTaskDelete+0x9c>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01a      	beq.n	8002e68 <vTaskDelete+0x9c>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	3304      	adds	r3, #4
 8002e36:	4619      	mov	r1, r3
 8002e38:	4830      	ldr	r0, [pc, #192]	@ (8002efc <vTaskDelete+0x130>)
 8002e3a:	f7ff f9d0 	bl	80021de <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002e3e:	4b30      	ldr	r3, [pc, #192]	@ (8002f00 <vTaskDelete+0x134>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3301      	adds	r3, #1
 8002e44:	4a2e      	ldr	r2, [pc, #184]	@ (8002f00 <vTaskDelete+0x134>)
 8002e46:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 fd28 	bl	80068a0 <SEGGER_SYSVIEW_ShrinkId>
 8002e50:	4603      	mov	r3, r0
 8002e52:	4619      	mov	r1, r3
 8002e54:	20c3      	movs	r0, #195	@ 0xc3
 8002e56:	f002 fe9f 	bl	8005b98 <SEGGER_SYSVIEW_RecordU32>
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f002 f911 	bl	8005084 <SYSVIEW_DeleteTask>

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8002e62:	2301      	movs	r3, #1
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e013      	b.n	8002e90 <vTaskDelete+0xc4>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002e68:	4b26      	ldr	r3, [pc, #152]	@ (8002f04 <vTaskDelete+0x138>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	4a25      	ldr	r2, [pc, #148]	@ (8002f04 <vTaskDelete+0x138>)
 8002e70:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 fd13 	bl	80068a0 <SEGGER_SYSVIEW_ShrinkId>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	20c3      	movs	r0, #195	@ 0xc3
 8002e80:	f002 fe8a 	bl	8005b98 <SEGGER_SYSVIEW_RecordU32>
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 f8fc 	bl	8005084 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002e8c:	f000 ff7c 	bl	8003d88 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002e90:	f001 fc72 	bl	8004778 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d002      	beq.n	8002ea0 <vTaskDelete+0xd4>
        {
            prvDeleteTCB( pxTCB );
 8002e9a:	6938      	ldr	r0, [r7, #16]
 8002e9c:	f000 ff44 	bl	8003d28 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8002ea0:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <vTaskDelete+0x12c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01c      	beq.n	8002ee2 <vTaskDelete+0x116>
            {
                if( pxTCB == pxCurrentTCB )
 8002ea8:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <vTaskDelete+0x124>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d117      	bne.n	8002ee2 <vTaskDelete+0x116>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8002eb2:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <vTaskDelete+0x13c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <vTaskDelete+0x106>
    __asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	60bb      	str	r3, [r7, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	e7fd      	b.n	8002ece <vTaskDelete+0x102>
                    taskYIELD_WITHIN_API();
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <vTaskDelete+0x140>)
 8002ed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	f3bf 8f6f 	isb	sy
                }
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
 8002ee2:	20c3      	movs	r0, #195	@ 0xc3
 8002ee4:	f003 fa30 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002ee8:	bf00      	nop
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000e08 	.word	0x20000e08
 8002ef4:	200012f8 	.word	0x200012f8
 8002ef8:	200012e8 	.word	0x200012e8
 8002efc:	200012b0 	.word	0x200012b0
 8002f00:	200012c4 	.word	0x200012c4
 8002f04:	200012dc 	.word	0x200012dc
 8002f08:	20001304 	.word	0x20001304
 8002f0c:	e000ed04 	.word	0xe000ed04

08002f10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d018      	beq.n	8002f54 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8002f22:	f000 f981 	bl	8003228 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8002f26:	4b14      	ldr	r3, [pc, #80]	@ (8002f78 <vTaskDelay+0x68>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d00b      	beq.n	8002f46 <vTaskDelay+0x36>
    __asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	60bb      	str	r3, [r7, #8]
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	e7fd      	b.n	8002f42 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f46:	2100      	movs	r1, #0
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 ff59 	bl	8003e00 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002f4e:	f000 f979 	bl	8003244 <xTaskResumeAll>
 8002f52:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d107      	bne.n	8002f6a <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8002f5a:	4b08      	ldr	r3, [pc, #32]	@ (8002f7c <vTaskDelay+0x6c>)
 8002f5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8002f6a:	20c5      	movs	r0, #197	@ 0xc5
 8002f6c:	f003 f9ec 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20001304 	.word	0x20001304
 8002f7c:	e000ed04 	.word	0xe000ed04

08002f80 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	@ 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxEventList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	61fb      	str	r3, [r7, #28]

        traceENTER_eTaskGetState( xTask );

        configASSERT( pxTCB );
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10b      	bne.n	8002faa <eTaskGetState+0x2a>
    __asm volatile
 8002f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	60bb      	str	r3, [r7, #8]
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	e7fd      	b.n	8002fa6 <eTaskGetState+0x26>

        #if ( configNUMBER_OF_CORES == 1 )
            if( pxTCB == pxCurrentTCB )
 8002faa:	4b36      	ldr	r3, [pc, #216]	@ (8003084 <eTaskGetState+0x104>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d103      	bne.n	8002fbc <eTaskGetState+0x3c>
            {
                /* The task calling this function is querying its own state. */
                eReturn = eRunning;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002fba:	e056      	b.n	800306a <eTaskGetState+0xea>
            }
            else
        #endif
        {
            taskENTER_CRITICAL();
 8002fbc:	f001 fbac 	bl	8004718 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	61bb      	str	r3, [r7, #24]
                pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fca:	617b      	str	r3, [r7, #20]
                pxDelayedList = pxDelayedTaskList;
 8002fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8003088 <eTaskGetState+0x108>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	613b      	str	r3, [r7, #16]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8002fd2:	4b2e      	ldr	r3, [pc, #184]	@ (800308c <eTaskGetState+0x10c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]
            }
            taskEXIT_CRITICAL();
 8002fd8:	f001 fbce 	bl	8004778 <vPortExitCritical>

            if( pxEventList == &xPendingReadyList )
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	4a2c      	ldr	r2, [pc, #176]	@ (8003090 <eTaskGetState+0x110>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d103      	bne.n	8002fec <eTaskGetState+0x6c>
            {
                /* The task has been placed on the pending ready list, so its
                 * state is eReady regardless of what list the task's state list
                 * item is currently placed on. */
                eReturn = eReady;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002fea:	e03e      	b.n	800306a <eTaskGetState+0xea>
            }
            else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d003      	beq.n	8002ffc <eTaskGetState+0x7c>
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d103      	bne.n	8003004 <eTaskGetState+0x84>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003002:	e032      	b.n	800306a <eTaskGetState+0xea>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	4a23      	ldr	r2, [pc, #140]	@ (8003094 <eTaskGetState+0x114>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d120      	bne.n	800304e <eTaskGetState+0xce>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003010:	2b00      	cmp	r3, #0
 8003012:	d118      	bne.n	8003046 <eTaskGetState+0xc6>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
 8003014:	2303      	movs	r3, #3
 8003016:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
 800301e:	e00e      	b.n	800303e <eTaskGetState+0xbe>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	4413      	add	r3, r2
 8003026:	3358      	adds	r3, #88	@ 0x58
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d103      	bne.n	8003038 <eTaskGetState+0xb8>
                                {
                                    eReturn = eBlocked;
 8003030:	2302      	movs	r3, #2
 8003032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                    break;
 8003036:	e018      	b.n	800306a <eTaskGetState+0xea>
                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	3301      	adds	r3, #1
 800303c:	623b      	str	r3, [r7, #32]
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	2b00      	cmp	r3, #0
 8003042:	dded      	ble.n	8003020 <eTaskGetState+0xa0>
 8003044:	e011      	b.n	800306a <eTaskGetState+0xea>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 8003046:	2302      	movs	r3, #2
 8003048:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800304c:	e00d      	b.n	800306a <eTaskGetState+0xea>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	4a11      	ldr	r2, [pc, #68]	@ (8003098 <eTaskGetState+0x118>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d002      	beq.n	800305c <eTaskGetState+0xdc>
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d103      	bne.n	8003064 <eTaskGetState+0xe4>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 800305c:	2304      	movs	r3, #4
 800305e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003062:	e002      	b.n	800306a <eTaskGetState+0xea>
            {
                #if ( configNUMBER_OF_CORES == 1 )
                {
                    /* If the task is not in any other state, it must be in the
                     * Ready (including pending ready) state. */
                    eReturn = eReady;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
                #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
            }
        }

        traceRETURN_eTaskGetState( eReturn );
 800306a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800306e:	4619      	mov	r1, r3
 8003070:	20c6      	movs	r0, #198	@ 0xc6
 8003072:	f003 f9a5 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return eReturn;
 8003076:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 800307a:	4618      	mov	r0, r3
 800307c:	3728      	adds	r7, #40	@ 0x28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000e08 	.word	0x20000e08
 8003088:	20001294 	.word	0x20001294
 800308c:	20001298 	.word	0x20001298
 8003090:	2000129c 	.word	0x2000129c
 8003094:	200012c8 	.word	0x200012c8
 8003098:	200012b0 	.word	0x200012b0

0800309c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b090      	sub	sp, #64	@ 0x40
 80030a0:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 80030a2:	2301      	movs	r3, #1
 80030a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80030aa:	2300      	movs	r3, #0
 80030ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ae:	e013      	b.n	80030d8 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80030b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003160 <prvCreateIdleTasks+0xc4>)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	4413      	add	r3, r2
 80030b6:	7819      	ldrb	r1, [r3, #0]
 80030b8:	f107 0210 	add.w	r2, r7, #16
 80030bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030be:	4413      	add	r3, r2
 80030c0:	460a      	mov	r2, r1
 80030c2:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80030c4:	f107 0210 	add.w	r2, r7, #16
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	4413      	add	r3, r2
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d006      	beq.n	80030e0 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	3301      	adds	r3, #1
 80030d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	2b0f      	cmp	r3, #15
 80030dc:	dde8      	ble.n	80030b0 <prvCreateIdleTasks+0x14>
 80030de:	e000      	b.n	80030e2 <prvCreateIdleTasks+0x46>
        {
            break;
 80030e0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80030e2:	2300      	movs	r3, #0
 80030e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030e6:	e031      	b.n	800314c <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80030e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003164 <prvCreateIdleTasks+0xc8>)
 80030ea:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 80030f4:	1d3a      	adds	r2, r7, #4
 80030f6:	f107 0108 	add.w	r1, r7, #8
 80030fa:	f107 030c 	add.w	r3, r7, #12
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff f808 	bl	8002114 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	f107 0110 	add.w	r1, r7, #16
 800310e:	9202      	str	r2, [sp, #8]
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	2300      	movs	r3, #0
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	2300      	movs	r3, #0
 8003118:	4602      	mov	r2, r0
 800311a:	6a38      	ldr	r0, [r7, #32]
 800311c:	f7ff fc78 	bl	8002a10 <xTaskCreateStatic>
 8003120:	4602      	mov	r2, r0
 8003122:	4911      	ldr	r1, [pc, #68]	@ (8003168 <prvCreateIdleTasks+0xcc>)
 8003124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 800312a:	4a0f      	ldr	r2, [pc, #60]	@ (8003168 <prvCreateIdleTasks+0xcc>)
 800312c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 8003136:	2301      	movs	r3, #1
 8003138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800313a:	e001      	b.n	8003140 <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 800313c:	2300      	movs	r3, #0
 800313e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d006      	beq.n	8003154 <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003148:	3301      	adds	r3, #1
 800314a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800314c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	ddca      	ble.n	80030e8 <prvCreateIdleTasks+0x4c>
 8003152:	e000      	b.n	8003156 <prvCreateIdleTasks+0xba>
        {
            break;
 8003154:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003158:	4618      	mov	r0, r3
 800315a:	3730      	adds	r7, #48	@ 0x30
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	08007678 	.word	0x08007678
 8003164:	08003bad 	.word	0x08003bad
 8003168:	20001300 	.word	0x20001300

0800316c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003172:	f7ff ff93 	bl	800309c <prvCreateIdleTasks>
 8003176:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800317e:	f000 febb 	bl	8003ef8 <xTimerCreateTimerTask>
 8003182:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d129      	bne.n	80031de <vTaskStartScheduler+0x72>
    __asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	60bb      	str	r3, [r7, #8]
}
 800319c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800319e:	4b1c      	ldr	r3, [pc, #112]	@ (8003210 <vTaskStartScheduler+0xa4>)
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295
 80031a4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80031a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003214 <vTaskStartScheduler+0xa8>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003218 <vTaskStartScheduler+0xac>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80031b2:	4b1a      	ldr	r3, [pc, #104]	@ (800321c <vTaskStartScheduler+0xb0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3334      	adds	r3, #52	@ 0x34
 80031b8:	2205      	movs	r2, #5
 80031ba:	4919      	ldr	r1, [pc, #100]	@ (8003220 <vTaskStartScheduler+0xb4>)
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 fd3f 	bl	8006c40 <memcmp>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <vTaskStartScheduler+0x68>
 80031c8:	4b14      	ldr	r3, [pc, #80]	@ (800321c <vTaskStartScheduler+0xb0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f003 f9ad 	bl	800652c <SEGGER_SYSVIEW_OnTaskStartExec>
 80031d2:	e001      	b.n	80031d8 <vTaskStartScheduler+0x6c>
 80031d4:	f003 f94c 	bl	8006470 <SEGGER_SYSVIEW_OnIdle>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80031d8:	f001 f9e0 	bl	800459c <xPortStartScheduler>
 80031dc:	e00f      	b.n	80031fe <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d10b      	bne.n	80031fe <vTaskStartScheduler+0x92>
    __asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	607b      	str	r3, [r7, #4]
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	e7fd      	b.n	80031fa <vTaskStartScheduler+0x8e>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80031fe:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <vTaskStartScheduler+0xb8>)
 8003200:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003202:	20cd      	movs	r0, #205	@ 0xcd
 8003204:	f003 f8a0 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	200012fc 	.word	0x200012fc
 8003214:	200012e8 	.word	0x200012e8
 8003218:	200012e0 	.word	0x200012e0
 800321c:	20000e08 	.word	0x20000e08
 8003220:	08007678 	.word	0x08007678
 8003224:	08007828 	.word	0x08007828

08003228 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800322c:	4b04      	ldr	r3, [pc, #16]	@ (8003240 <vTaskSuspendAll+0x18>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	4a03      	ldr	r2, [pc, #12]	@ (8003240 <vTaskSuspendAll+0x18>)
 8003234:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8003236:	20cf      	movs	r0, #207	@ 0xcf
 8003238:	f003 f886 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20001304 	.word	0x20001304

08003244 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003252:	f001 fa61 	bl	8004718 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800325a:	4b7a      	ldr	r3, [pc, #488]	@ (8003444 <xTaskResumeAll+0x200>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10b      	bne.n	800327a <xTaskResumeAll+0x36>
    __asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	603b      	str	r3, [r7, #0]
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	e7fd      	b.n	8003276 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800327a:	4b72      	ldr	r3, [pc, #456]	@ (8003444 <xTaskResumeAll+0x200>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3b01      	subs	r3, #1
 8003280:	4a70      	ldr	r2, [pc, #448]	@ (8003444 <xTaskResumeAll+0x200>)
 8003282:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003284:	4b6f      	ldr	r3, [pc, #444]	@ (8003444 <xTaskResumeAll+0x200>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f040 80cf 	bne.w	800342c <xTaskResumeAll+0x1e8>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800328e:	4b6e      	ldr	r3, [pc, #440]	@ (8003448 <xTaskResumeAll+0x204>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80ca 	beq.w	800342c <xTaskResumeAll+0x1e8>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003298:	e093      	b.n	80033c2 <xTaskResumeAll+0x17e>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800329a:	4b6c      	ldr	r3, [pc, #432]	@ (800344c <xTaskResumeAll+0x208>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	6a12      	ldr	r2, [r2, #32]
 80032b0:	609a      	str	r2, [r3, #8]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	69d2      	ldr	r2, [r2, #28]
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	3318      	adds	r3, #24
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d103      	bne.n	80032d0 <xTaskResumeAll+0x8c>
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	6a1a      	ldr	r2, [r3, #32]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2200      	movs	r2, #0
 80032d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	1e5a      	subs	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	68d2      	ldr	r2, [r2, #12]
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	6892      	ldr	r2, [r2, #8]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3304      	adds	r3, #4
 8003302:	429a      	cmp	r2, r3
 8003304:	d103      	bne.n	800330e <xTaskResumeAll+0xca>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	2200      	movs	r2, #0
 8003312:	615a      	str	r2, [r3, #20]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	1e5a      	subs	r2, r3, #1
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	4618      	mov	r0, r3
 8003322:	f003 f945 	bl	80065b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800332a:	4b49      	ldr	r3, [pc, #292]	@ (8003450 <xTaskResumeAll+0x20c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d903      	bls.n	800333a <xTaskResumeAll+0xf6>
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003336:	4a46      	ldr	r2, [pc, #280]	@ (8003450 <xTaskResumeAll+0x20c>)
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333e:	4945      	ldr	r1, [pc, #276]	@ (8003454 <xTaskResumeAll+0x210>)
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3304      	adds	r3, #4
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	3204      	adds	r2, #4
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	1d1a      	adds	r2, r3, #4
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4a35      	ldr	r2, [pc, #212]	@ (8003454 <xTaskResumeAll+0x210>)
 800337e:	441a      	add	r2, r3
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	615a      	str	r2, [r3, #20]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003388:	4932      	ldr	r1, [pc, #200]	@ (8003454 <xTaskResumeAll+0x210>)
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800339a:	1c59      	adds	r1, r3, #1
 800339c:	482d      	ldr	r0, [pc, #180]	@ (8003454 <xTaskResumeAll+0x210>)
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4403      	add	r3, r0
 80033a8:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003458 <xTaskResumeAll+0x214>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d904      	bls.n	80033c2 <xTaskResumeAll+0x17e>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80033b8:	4a28      	ldr	r2, [pc, #160]	@ (800345c <xTaskResumeAll+0x218>)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2101      	movs	r1, #1
 80033be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033c2:	4b22      	ldr	r3, [pc, #136]	@ (800344c <xTaskResumeAll+0x208>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f47f af67 	bne.w	800329a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <xTaskResumeAll+0x192>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80033d2:	f000 fcd9 	bl	8003d88 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033d6:	4b22      	ldr	r3, [pc, #136]	@ (8003460 <xTaskResumeAll+0x21c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d012      	beq.n	8003408 <xTaskResumeAll+0x1c4>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80033e2:	f000 f869 	bl	80034b8 <xTaskIncrementTick>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <xTaskResumeAll+0x1b2>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80033ec:	4a1b      	ldr	r2, [pc, #108]	@ (800345c <xTaskResumeAll+0x218>)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2101      	movs	r1, #1
 80033f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ef      	bne.n	80033e2 <xTaskResumeAll+0x19e>

                            xPendedTicks = 0;
 8003402:	4b17      	ldr	r3, [pc, #92]	@ (8003460 <xTaskResumeAll+0x21c>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003408:	4a14      	ldr	r2, [pc, #80]	@ (800345c <xTaskResumeAll+0x218>)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00b      	beq.n	800342c <xTaskResumeAll+0x1e8>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003414:	2301      	movs	r3, #1
 8003416:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003418:	4b0f      	ldr	r3, [pc, #60]	@ (8003458 <xTaskResumeAll+0x214>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4b11      	ldr	r3, [pc, #68]	@ (8003464 <xTaskResumeAll+0x220>)
 800341e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800342c:	f001 f9a4 	bl	8004778 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	4619      	mov	r1, r3
 8003434:	20d0      	movs	r0, #208	@ 0xd0
 8003436:	f002 ffc3 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 800343a:	69bb      	ldr	r3, [r7, #24]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20001304 	.word	0x20001304
 8003448:	200012dc 	.word	0x200012dc
 800344c:	2000129c 	.word	0x2000129c
 8003450:	200012e4 	.word	0x200012e4
 8003454:	20000e0c 	.word	0x20000e0c
 8003458:	20000e08 	.word	0x20000e08
 800345c:	200012f0 	.word	0x200012f0
 8003460:	200012ec 	.word	0x200012ec
 8003464:	e000ed04 	.word	0xe000ed04

08003468 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800346e:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <xTaskGetTickCount+0x20>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	20d1      	movs	r0, #209	@ 0xd1
 8003478:	f002 ffa2 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 800347c:	687b      	ldr	r3, [r7, #4]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200012e0 	.word	0x200012e0

0800348c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003492:	f001 fa0d 	bl	80048b0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800349a:	4b06      	ldr	r3, [pc, #24]	@ (80034b4 <xTaskGetTickCountFromISR+0x28>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80034a0:	6839      	ldr	r1, [r7, #0]
 80034a2:	20d2      	movs	r0, #210	@ 0xd2
 80034a4:	f002 ff8c 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80034a8:	683b      	ldr	r3, [r7, #0]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	200012e0 	.word	0x200012e0

080034b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	@ 0x28
 80034bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80034c2:	4b84      	ldr	r3, [pc, #528]	@ (80036d4 <xTaskIncrementTick+0x21c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 80f4 	bne.w	80036b4 <xTaskIncrementTick+0x1fc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034cc:	4b82      	ldr	r3, [pc, #520]	@ (80036d8 <xTaskIncrementTick+0x220>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80034d4:	4a80      	ldr	r2, [pc, #512]	@ (80036d8 <xTaskIncrementTick+0x220>)
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d121      	bne.n	8003524 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80034e0:	4b7e      	ldr	r3, [pc, #504]	@ (80036dc <xTaskIncrementTick+0x224>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <xTaskIncrementTick+0x4a>
    __asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	607b      	str	r3, [r7, #4]
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	e7fd      	b.n	80034fe <xTaskIncrementTick+0x46>
 8003502:	4b76      	ldr	r3, [pc, #472]	@ (80036dc <xTaskIncrementTick+0x224>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	4b75      	ldr	r3, [pc, #468]	@ (80036e0 <xTaskIncrementTick+0x228>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a73      	ldr	r2, [pc, #460]	@ (80036dc <xTaskIncrementTick+0x224>)
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	4a73      	ldr	r2, [pc, #460]	@ (80036e0 <xTaskIncrementTick+0x228>)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b73      	ldr	r3, [pc, #460]	@ (80036e4 <xTaskIncrementTick+0x22c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3301      	adds	r3, #1
 800351c:	4a71      	ldr	r2, [pc, #452]	@ (80036e4 <xTaskIncrementTick+0x22c>)
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	f000 fc32 	bl	8003d88 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003524:	4b70      	ldr	r3, [pc, #448]	@ (80036e8 <xTaskIncrementTick+0x230>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6a3a      	ldr	r2, [r7, #32]
 800352a:	429a      	cmp	r2, r3
 800352c:	f0c0 80ad 	bcc.w	800368a <xTaskIncrementTick+0x1d2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003530:	4b6a      	ldr	r3, [pc, #424]	@ (80036dc <xTaskIncrementTick+0x224>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d104      	bne.n	8003544 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800353a:	4b6b      	ldr	r3, [pc, #428]	@ (80036e8 <xTaskIncrementTick+0x230>)
 800353c:	f04f 32ff 	mov.w	r2, #4294967295
 8003540:	601a      	str	r2, [r3, #0]
                    break;
 8003542:	e0a2      	b.n	800368a <xTaskIncrementTick+0x1d2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003544:	4b65      	ldr	r3, [pc, #404]	@ (80036dc <xTaskIncrementTick+0x224>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003554:	6a3a      	ldr	r2, [r7, #32]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	429a      	cmp	r2, r3
 800355a:	d203      	bcs.n	8003564 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800355c:	4a62      	ldr	r2, [pc, #392]	@ (80036e8 <xTaskIncrementTick+0x230>)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	6013      	str	r3, [r2, #0]
                        break;
 8003562:	e092      	b.n	800368a <xTaskIncrementTick+0x1d2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	68d2      	ldr	r2, [r2, #12]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	6892      	ldr	r2, [r2, #8]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	3304      	adds	r3, #4
 8003586:	429a      	cmp	r2, r3
 8003588:	d103      	bne.n	8003592 <xTaskIncrementTick+0xda>
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2200      	movs	r2, #0
 8003596:	615a      	str	r2, [r3, #20]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	1e5a      	subs	r2, r3, #1
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01e      	beq.n	80035e8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	6a12      	ldr	r2, [r2, #32]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	69d2      	ldr	r2, [r2, #28]
 80035c2:	605a      	str	r2, [r3, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	3318      	adds	r3, #24
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d103      	bne.n	80035d8 <xTaskIncrementTick+0x120>
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2200      	movs	r2, #0
 80035dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1e5a      	subs	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f002 ffe0 	bl	80065b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f4:	4b3d      	ldr	r3, [pc, #244]	@ (80036ec <xTaskIncrementTick+0x234>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d903      	bls.n	8003604 <xTaskIncrementTick+0x14c>
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	4a3a      	ldr	r2, [pc, #232]	@ (80036ec <xTaskIncrementTick+0x234>)
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003608:	4939      	ldr	r1, [pc, #228]	@ (80036f0 <xTaskIncrementTick+0x238>)
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	3304      	adds	r3, #4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	3204      	adds	r2, #4
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	1d1a      	adds	r2, r3, #4
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4a2a      	ldr	r2, [pc, #168]	@ (80036f0 <xTaskIncrementTick+0x238>)
 8003648:	441a      	add	r2, r3
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	615a      	str	r2, [r3, #20]
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003652:	4927      	ldr	r1, [pc, #156]	@ (80036f0 <xTaskIncrementTick+0x238>)
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003664:	1c59      	adds	r1, r3, #1
 8003666:	4822      	ldr	r0, [pc, #136]	@ (80036f0 <xTaskIncrementTick+0x238>)
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4403      	add	r3, r0
 8003672:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003678:	4b1e      	ldr	r3, [pc, #120]	@ (80036f4 <xTaskIncrementTick+0x23c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367e:	429a      	cmp	r2, r3
 8003680:	f67f af56 	bls.w	8003530 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8003684:	2301      	movs	r3, #1
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003688:	e752      	b.n	8003530 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800368a:	4b1a      	ldr	r3, [pc, #104]	@ (80036f4 <xTaskIncrementTick+0x23c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003690:	4917      	ldr	r1, [pc, #92]	@ (80036f0 <xTaskIncrementTick+0x238>)
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d901      	bls.n	80036a6 <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 80036a2:	2301      	movs	r3, #1
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80036a6:	4b14      	ldr	r3, [pc, #80]	@ (80036f8 <xTaskIncrementTick+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <xTaskIncrementTick+0x206>
                {
                    xSwitchRequired = pdTRUE;
 80036ae:	2301      	movs	r3, #1
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b2:	e004      	b.n	80036be <xTaskIncrementTick+0x206>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <xTaskIncrementTick+0x244>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	4a10      	ldr	r2, [pc, #64]	@ (80036fc <xTaskIncrementTick+0x244>)
 80036bc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	4619      	mov	r1, r3
 80036c2:	20db      	movs	r0, #219	@ 0xdb
 80036c4:	f002 fe7c 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3728      	adds	r7, #40	@ 0x28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20001304 	.word	0x20001304
 80036d8:	200012e0 	.word	0x200012e0
 80036dc:	20001294 	.word	0x20001294
 80036e0:	20001298 	.word	0x20001298
 80036e4:	200012f4 	.word	0x200012f4
 80036e8:	200012fc 	.word	0x200012fc
 80036ec:	200012e4 	.word	0x200012e4
 80036f0:	20000e0c 	.word	0x20000e0c
 80036f4:	20000e08 	.word	0x20000e08
 80036f8:	200012f0 	.word	0x200012f0
 80036fc:	200012ec 	.word	0x200012ec

08003700 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003706:	4b31      	ldr	r3, [pc, #196]	@ (80037cc <vTaskSwitchContext+0xcc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800370e:	4b30      	ldr	r3, [pc, #192]	@ (80037d0 <vTaskSwitchContext+0xd0>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003714:	e056      	b.n	80037c4 <vTaskSwitchContext+0xc4>
            xYieldPendings[ 0 ] = pdFALSE;
 8003716:	4b2e      	ldr	r3, [pc, #184]	@ (80037d0 <vTaskSwitchContext+0xd0>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800371c:	4b2d      	ldr	r3, [pc, #180]	@ (80037d4 <vTaskSwitchContext+0xd4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	e011      	b.n	8003748 <vTaskSwitchContext+0x48>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <vTaskSwitchContext+0x42>
    __asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	607b      	str	r3, [r7, #4]
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	e7fd      	b.n	800373e <vTaskSwitchContext+0x3e>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3b01      	subs	r3, #1
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	4923      	ldr	r1, [pc, #140]	@ (80037d8 <vTaskSwitchContext+0xd8>)
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0e3      	beq.n	8003724 <vTaskSwitchContext+0x24>
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4a1c      	ldr	r2, [pc, #112]	@ (80037d8 <vTaskSwitchContext+0xd8>)
 8003768:	4413      	add	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	3308      	adds	r3, #8
 800377e:	429a      	cmp	r2, r3
 8003780:	d103      	bne.n	800378a <vTaskSwitchContext+0x8a>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a12      	ldr	r2, [pc, #72]	@ (80037dc <vTaskSwitchContext+0xdc>)
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4a0f      	ldr	r2, [pc, #60]	@ (80037d4 <vTaskSwitchContext+0xd4>)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800379a:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <vTaskSwitchContext+0xdc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3334      	adds	r3, #52	@ 0x34
 80037a0:	2205      	movs	r2, #5
 80037a2:	490f      	ldr	r1, [pc, #60]	@ (80037e0 <vTaskSwitchContext+0xe0>)
 80037a4:	4618      	mov	r0, r3
 80037a6:	f003 fa4b 	bl	8006c40 <memcmp>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <vTaskSwitchContext+0xbc>
 80037b0:	4b0a      	ldr	r3, [pc, #40]	@ (80037dc <vTaskSwitchContext+0xdc>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f002 feb9 	bl	800652c <SEGGER_SYSVIEW_OnTaskStartExec>
 80037ba:	e001      	b.n	80037c0 <vTaskSwitchContext+0xc0>
 80037bc:	f002 fe58 	bl	8006470 <SEGGER_SYSVIEW_OnIdle>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80037c0:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <vTaskSwitchContext+0xdc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
    }
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20001304 	.word	0x20001304
 80037d0:	200012f0 	.word	0x200012f0
 80037d4:	200012e4 	.word	0x200012e4
 80037d8:	20000e0c 	.word	0x20000e0c
 80037dc:	20000e08 	.word	0x20000e08
 80037e0:	08007678 	.word	0x08007678

080037e4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	60fb      	str	r3, [r7, #12]
}
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800380c:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <vTaskPlaceOnEventList+0x4c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3318      	adds	r3, #24
 8003812:	4619      	mov	r1, r3
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7fe fd08 	bl	800222a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800381a:	2101      	movs	r1, #1
 800381c:	6838      	ldr	r0, [r7, #0]
 800381e:	f000 faef 	bl	8003e00 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003822:	20e1      	movs	r0, #225	@ 0xe1
 8003824:	f002 fd90 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000e08 	.word	0x20000e08

08003834 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10b      	bne.n	800385e <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8003846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	613b      	str	r3, [r7, #16]
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	e7fd      	b.n	800385a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	4b17      	ldr	r3, [pc, #92]	@ (80038c4 <vTaskPlaceOnEventListRestricted+0x90>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	61da      	str	r2, [r3, #28]
 800386c:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <vTaskPlaceOnEventListRestricted+0x90>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	6892      	ldr	r2, [r2, #8]
 8003874:	621a      	str	r2, [r3, #32]
 8003876:	4b13      	ldr	r3, [pc, #76]	@ (80038c4 <vTaskPlaceOnEventListRestricted+0x90>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	3218      	adds	r2, #24
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	4b10      	ldr	r3, [pc, #64]	@ (80038c4 <vTaskPlaceOnEventListRestricted+0x90>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f103 0218 	add.w	r2, r3, #24
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	609a      	str	r2, [r3, #8]
 800388e:	4b0d      	ldr	r3, [pc, #52]	@ (80038c4 <vTaskPlaceOnEventListRestricted+0x90>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	629a      	str	r2, [r3, #40]	@ 0x28
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80038a6:	f04f 33ff 	mov.w	r3, #4294967295
 80038aa:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	68b8      	ldr	r0, [r7, #8]
 80038b0:	f000 faa6 	bl	8003e00 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80038b4:	20e3      	movs	r0, #227	@ 0xe3
 80038b6:	f002 fd47 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80038ba:	bf00      	nop
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000e08 	.word	0x20000e08

080038c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	@ 0x28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	60fb      	str	r3, [r7, #12]
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	e7fd      	b.n	80038f2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	6a12      	ldr	r2, [r2, #32]
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	6a3a      	ldr	r2, [r7, #32]
 800390c:	69d2      	ldr	r2, [r2, #28]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	3318      	adds	r3, #24
 8003918:	429a      	cmp	r2, r3
 800391a:	d103      	bne.n	8003924 <xTaskRemoveFromEventList+0x5c>
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	6a1a      	ldr	r2, [r3, #32]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	2200      	movs	r2, #0
 8003928:	629a      	str	r2, [r3, #40]	@ 0x28
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	1e5a      	subs	r2, r3, #1
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003934:	4b4f      	ldr	r3, [pc, #316]	@ (8003a74 <xTaskRemoveFromEventList+0x1ac>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d165      	bne.n	8003a08 <xTaskRemoveFromEventList+0x140>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	6a3a      	ldr	r2, [r7, #32]
 8003948:	68d2      	ldr	r2, [r2, #12]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	6a3a      	ldr	r2, [r7, #32]
 8003952:	6892      	ldr	r2, [r2, #8]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	3304      	adds	r3, #4
 800395e:	429a      	cmp	r2, r3
 8003960:	d103      	bne.n	800396a <xTaskRemoveFromEventList+0xa2>
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	2200      	movs	r2, #0
 800396e:	615a      	str	r2, [r3, #20]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	1e5a      	subs	r2, r3, #1
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	4618      	mov	r0, r3
 800397e:	f002 fe17 	bl	80065b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003986:	4b3c      	ldr	r3, [pc, #240]	@ (8003a78 <xTaskRemoveFromEventList+0x1b0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d903      	bls.n	8003996 <xTaskRemoveFromEventList+0xce>
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003992:	4a39      	ldr	r2, [pc, #228]	@ (8003a78 <xTaskRemoveFromEventList+0x1b0>)
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399a:	4938      	ldr	r1, [pc, #224]	@ (8003a7c <xTaskRemoveFromEventList+0x1b4>)
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	3304      	adds	r3, #4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	60da      	str	r2, [r3, #12]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	6a3a      	ldr	r2, [r7, #32]
 80039c0:	3204      	adds	r2, #4
 80039c2:	605a      	str	r2, [r3, #4]
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	1d1a      	adds	r2, r3, #4
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4a28      	ldr	r2, [pc, #160]	@ (8003a7c <xTaskRemoveFromEventList+0x1b4>)
 80039da:	441a      	add	r2, r3
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	615a      	str	r2, [r3, #20]
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e4:	4925      	ldr	r1, [pc, #148]	@ (8003a7c <xTaskRemoveFromEventList+0x1b4>)
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a3a      	ldr	r2, [r7, #32]
 80039f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039f6:	1c59      	adds	r1, r3, #1
 80039f8:	4820      	ldr	r0, [pc, #128]	@ (8003a7c <xTaskRemoveFromEventList+0x1b4>)
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4403      	add	r3, r0
 8003a04:	6019      	str	r1, [r3, #0]
 8003a06:	e01b      	b.n	8003a40 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a08:	4b1d      	ldr	r3, [pc, #116]	@ (8003a80 <xTaskRemoveFromEventList+0x1b8>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	61da      	str	r2, [r3, #28]
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	621a      	str	r2, [r3, #32]
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	3218      	adds	r2, #24
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f103 0218 	add.w	r2, r3, #24
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	4a13      	ldr	r2, [pc, #76]	@ (8003a80 <xTaskRemoveFromEventList+0x1b8>)
 8003a34:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a36:	4b12      	ldr	r3, [pc, #72]	@ (8003a80 <xTaskRemoveFromEventList+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	4a10      	ldr	r2, [pc, #64]	@ (8003a80 <xTaskRemoveFromEventList+0x1b8>)
 8003a3e:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a44:	4b0f      	ldr	r3, [pc, #60]	@ (8003a84 <xTaskRemoveFromEventList+0x1bc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d905      	bls.n	8003a5a <xTaskRemoveFromEventList+0x192>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003a52:	4b0d      	ldr	r3, [pc, #52]	@ (8003a88 <xTaskRemoveFromEventList+0x1c0>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e001      	b.n	8003a5e <xTaskRemoveFromEventList+0x196>
        }
        else
        {
            xReturn = pdFALSE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	4619      	mov	r1, r3
 8003a62:	20e4      	movs	r0, #228	@ 0xe4
 8003a64:	f002 fcac 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3728      	adds	r7, #40	@ 0x28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20001304 	.word	0x20001304
 8003a78:	200012e4 	.word	0x200012e4
 8003a7c:	20000e0c 	.word	0x20000e0c
 8003a80:	2000129c 	.word	0x2000129c
 8003a84:	20000e08 	.word	0x20000e08
 8003a88:	200012f0 	.word	0x200012f0

08003a8c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a94:	4b07      	ldr	r3, [pc, #28]	@ (8003ab4 <vTaskInternalSetTimeOutState+0x28>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <vTaskInternalSetTimeOutState+0x2c>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003aa4:	20e7      	movs	r0, #231	@ 0xe7
 8003aa6:	f002 fc4f 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	200012f4 	.word	0x200012f4
 8003ab8:	200012e0 	.word	0x200012e0

08003abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	613b      	str	r3, [r7, #16]
}
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
 8003ae2:	e7fd      	b.n	8003ae0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10b      	bne.n	8003b02 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	60fb      	str	r3, [r7, #12]
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	e7fd      	b.n	8003afe <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003b02:	f000 fe09 	bl	8004718 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b06:	4b21      	ldr	r3, [pc, #132]	@ (8003b8c <xTaskCheckForTimeOut+0xd0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d102      	bne.n	8003b26 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	e026      	b.n	8003b74 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4b19      	ldr	r3, [pc, #100]	@ (8003b90 <xTaskCheckForTimeOut+0xd4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d00a      	beq.n	8003b48 <xTaskCheckForTimeOut+0x8c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d305      	bcc.n	8003b48 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e015      	b.n	8003b74 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d20b      	bcs.n	8003b6a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	1ad2      	subs	r2, r2, r3
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff ff94 	bl	8003a8c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	e004      	b.n	8003b74 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b70:	2301      	movs	r3, #1
 8003b72:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b74:	f000 fe00 	bl	8004778 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	20e8      	movs	r0, #232	@ 0xe8
 8003b7e:	f002 fc1f 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003b82:	69fb      	ldr	r3, [r7, #28]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	200012e0 	.word	0x200012e0
 8003b90:	200012f4 	.word	0x200012f4

08003b94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003b98:	4b03      	ldr	r3, [pc, #12]	@ (8003ba8 <vTaskMissedYield+0x14>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003b9e:	20e9      	movs	r0, #233	@ 0xe9
 8003ba0:	f002 fbd2 	bl	8006348 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	200012f0 	.word	0x200012f0

08003bac <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003bb4:	f000 f852 	bl	8003c5c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003bb8:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <prvIdleTask+0x28>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d9f9      	bls.n	8003bb4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003bc0:	4b05      	ldr	r3, [pc, #20]	@ (8003bd8 <prvIdleTask+0x2c>)
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003bd0:	e7f0      	b.n	8003bb4 <prvIdleTask+0x8>
 8003bd2:	bf00      	nop
 8003bd4:	20000e0c 	.word	0x20000e0c
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	e00c      	b.n	8003c02 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4a12      	ldr	r2, [pc, #72]	@ (8003c3c <prvInitialiseTaskLists+0x60>)
 8003bf4:	4413      	add	r3, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fac0 	bl	800217c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b37      	cmp	r3, #55	@ 0x37
 8003c06:	d9ef      	bls.n	8003be8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c08:	480d      	ldr	r0, [pc, #52]	@ (8003c40 <prvInitialiseTaskLists+0x64>)
 8003c0a:	f7fe fab7 	bl	800217c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c0e:	480d      	ldr	r0, [pc, #52]	@ (8003c44 <prvInitialiseTaskLists+0x68>)
 8003c10:	f7fe fab4 	bl	800217c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c14:	480c      	ldr	r0, [pc, #48]	@ (8003c48 <prvInitialiseTaskLists+0x6c>)
 8003c16:	f7fe fab1 	bl	800217c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003c1a:	480c      	ldr	r0, [pc, #48]	@ (8003c4c <prvInitialiseTaskLists+0x70>)
 8003c1c:	f7fe faae 	bl	800217c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003c20:	480b      	ldr	r0, [pc, #44]	@ (8003c50 <prvInitialiseTaskLists+0x74>)
 8003c22:	f7fe faab 	bl	800217c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c26:	4b0b      	ldr	r3, [pc, #44]	@ (8003c54 <prvInitialiseTaskLists+0x78>)
 8003c28:	4a05      	ldr	r2, [pc, #20]	@ (8003c40 <prvInitialiseTaskLists+0x64>)
 8003c2a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c58 <prvInitialiseTaskLists+0x7c>)
 8003c2e:	4a05      	ldr	r2, [pc, #20]	@ (8003c44 <prvInitialiseTaskLists+0x68>)
 8003c30:	601a      	str	r2, [r3, #0]
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000e0c 	.word	0x20000e0c
 8003c40:	2000126c 	.word	0x2000126c
 8003c44:	20001280 	.word	0x20001280
 8003c48:	2000129c 	.word	0x2000129c
 8003c4c:	200012b0 	.word	0x200012b0
 8003c50:	200012c8 	.word	0x200012c8
 8003c54:	20001294 	.word	0x20001294
 8003c58:	20001298 	.word	0x20001298

08003c5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c62:	e019      	b.n	8003c98 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003c64:	f000 fd58 	bl	8004718 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c68:	4b10      	ldr	r3, [pc, #64]	@ (8003cac <prvCheckTasksWaitingTermination+0x50>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe fb13 	bl	80022a0 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb0 <prvCheckTasksWaitingTermination+0x54>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	4a0b      	ldr	r2, [pc, #44]	@ (8003cb0 <prvCheckTasksWaitingTermination+0x54>)
 8003c82:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <prvCheckTasksWaitingTermination+0x58>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb4 <prvCheckTasksWaitingTermination+0x58>)
 8003c8c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003c8e:	f000 fd73 	bl	8004778 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f848 	bl	8003d28 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c98:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <prvCheckTasksWaitingTermination+0x58>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e1      	bne.n	8003c64 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	200012b0 	.word	0x200012b0
 8003cb0:	200012dc 	.word	0x200012dc
 8003cb4:	200012c4 	.word	0x200012c4

08003cb8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003cc4:	e005      	b.n	8003cd2 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	607b      	str	r3, [r7, #4]
            uxCount++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2ba5      	cmp	r3, #165	@ 0xa5
 8003cd8:	d0f5      	beq.n	8003cc6 <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	089b      	lsrs	r3, r3, #2
 8003cde:	60fb      	str	r3, [r7, #12]

        return uxCount;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        traceENTER_uxTaskGetStackHighWaterMark( xTask );

        pxTCB = prvGetTCBFromHandle( xTask );
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <uxTaskGetStackHighWaterMark+0x14>
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003d24 <uxTaskGetStackHighWaterMark+0x38>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	e000      	b.n	8003d02 <uxTaskGetStackHighWaterMark+0x16>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8003d0a:	6938      	ldr	r0, [r7, #16]
 8003d0c:	f7ff ffd4 	bl	8003cb8 <prvTaskCheckFreeStackSpace>
 8003d10:	60f8      	str	r0, [r7, #12]

        traceRETURN_uxTaskGetStackHighWaterMark( uxReturn );
 8003d12:	68f9      	ldr	r1, [r7, #12]
 8003d14:	20f2      	movs	r0, #242	@ 0xf2
 8003d16:	f002 fb53 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return uxReturn;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
    }
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000e08 	.word	0x20000e08

08003d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d108      	bne.n	8003d4c <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 ff28 	bl	8004b94 <vPortFree>
                vPortFree( pxTCB );
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 ff25 	bl	8004b94 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d4a:	e019      	b.n	8003d80 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d103      	bne.n	8003d5e <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 ff1c 	bl	8004b94 <vPortFree>
    }
 8003d5c:	e010      	b.n	8003d80 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d00b      	beq.n	8003d80 <prvDeleteTCB+0x58>
    __asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	60fb      	str	r3, [r7, #12]
}
 8003d7a:	bf00      	nop
 8003d7c:	bf00      	nop
 8003d7e:	e7fd      	b.n	8003d7c <prvDeleteTCB+0x54>
    }
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d8c:	4b09      	ldr	r3, [pc, #36]	@ (8003db4 <prvResetNextTaskUnblockTime+0x2c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d104      	bne.n	8003da0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d96:	4b08      	ldr	r3, [pc, #32]	@ (8003db8 <prvResetNextTaskUnblockTime+0x30>)
 8003d98:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d9e:	e005      	b.n	8003dac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003da0:	4b04      	ldr	r3, [pc, #16]	@ (8003db4 <prvResetNextTaskUnblockTime+0x2c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a03      	ldr	r2, [pc, #12]	@ (8003db8 <prvResetNextTaskUnblockTime+0x30>)
 8003daa:	6013      	str	r3, [r2, #0]
}
 8003dac:	bf00      	nop
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	20001294 	.word	0x20001294
 8003db8:	200012fc 	.word	0x200012fc

08003dbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003df8 <xTaskGetSchedulerState+0x3c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d102      	bne.n	8003dd0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	e008      	b.n	8003de2 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dfc <xTaskGetSchedulerState+0x40>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d102      	bne.n	8003dde <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	e001      	b.n	8003de2 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003dde:	2300      	movs	r3, #0
 8003de0:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4619      	mov	r1, r3
 8003de6:	20f5      	movs	r0, #245	@ 0xf5
 8003de8:	f002 faea 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003dec:	687b      	ldr	r3, [r7, #4]
    }
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	200012e8 	.word	0x200012e8
 8003dfc:	20001304 	.word	0x20001304

08003e00 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e0a:	4b35      	ldr	r3, [pc, #212]	@ (8003ee0 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003e10:	4b34      	ldr	r3, [pc, #208]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003e16:	4b34      	ldr	r3, [pc, #208]	@ (8003ee8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e1c:	4b33      	ldr	r3, [pc, #204]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xec>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fa3c 	bl	80022a0 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2e:	d124      	bne.n	8003e7a <prvAddCurrentTaskToDelayedList+0x7a>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d021      	beq.n	8003e7a <prvAddCurrentTaskToDelayedList+0x7a>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e36:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xec>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	4b29      	ldr	r3, [pc, #164]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xec>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	6892      	ldr	r2, [r2, #8]
 8003e4c:	60da      	str	r2, [r3, #12]
 8003e4e:	4b27      	ldr	r3, [pc, #156]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xec>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	3204      	adds	r2, #4
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	4b24      	ldr	r3, [pc, #144]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xec>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	1d1a      	adds	r2, r3, #4
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	4b21      	ldr	r3, [pc, #132]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xec>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a21      	ldr	r2, [pc, #132]	@ (8003ef0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e6a:	615a      	str	r2, [r3, #20]
 8003e6c:	4b20      	ldr	r3, [pc, #128]	@ (8003ef0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3301      	adds	r3, #1
 8003e72:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e78:	e02e      	b.n	8003ed8 <prvAddCurrentTaskToDelayedList+0xd8>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4413      	add	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e82:	4b1a      	ldr	r3, [pc, #104]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xec>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d20d      	bcs.n	8003eae <prvAddCurrentTaskToDelayedList+0xae>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003e92:	4b16      	ldr	r3, [pc, #88]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xec>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2104      	movs	r1, #4
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f002 fbcb 	bl	8006634 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003e9e:	4b13      	ldr	r3, [pc, #76]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xec>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6978      	ldr	r0, [r7, #20]
 8003ea8:	f7fe f9bf 	bl	800222a <vListInsert>
}
 8003eac:	e014      	b.n	8003ed8 <prvAddCurrentTaskToDelayedList+0xd8>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003eae:	4b0f      	ldr	r3, [pc, #60]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xec>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f002 fbbd 	bl	8006634 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003eba:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xec>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	69b8      	ldr	r0, [r7, #24]
 8003ec4:	f7fe f9b1 	bl	800222a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d202      	bcs.n	8003ed8 <prvAddCurrentTaskToDelayedList+0xd8>
                    xNextTaskUnblockTime = xTimeToWake;
 8003ed2:	4a08      	ldr	r2, [pc, #32]	@ (8003ef4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6013      	str	r3, [r2, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	200012e0 	.word	0x200012e0
 8003ee4:	20001294 	.word	0x20001294
 8003ee8:	20001298 	.word	0x20001298
 8003eec:	20000e08 	.word	0x20000e08
 8003ef0:	200012c8 	.word	0x200012c8
 8003ef4:	200012fc 	.word	0x200012fc

08003ef8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	@ 0x28
 8003efc:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f02:	f000 fa8b 	bl	800441c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f06:	4b20      	ldr	r3, [pc, #128]	@ (8003f88 <xTimerCreateTimerTask+0x90>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d021      	beq.n	8003f52 <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 8003f16:	1d3a      	adds	r2, r7, #4
 8003f18:	f107 0108 	add.w	r1, r7, #8
 8003f1c:	f107 030c 	add.w	r3, r7, #12
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe f911 	bl	8002148 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	9202      	str	r2, [sp, #8]
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	2302      	movs	r3, #2
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	2300      	movs	r3, #0
 8003f36:	460a      	mov	r2, r1
 8003f38:	4914      	ldr	r1, [pc, #80]	@ (8003f8c <xTimerCreateTimerTask+0x94>)
 8003f3a:	4815      	ldr	r0, [pc, #84]	@ (8003f90 <xTimerCreateTimerTask+0x98>)
 8003f3c:	f7fe fd68 	bl	8002a10 <xTaskCreateStatic>
 8003f40:	4603      	mov	r3, r0
 8003f42:	4a14      	ldr	r2, [pc, #80]	@ (8003f94 <xTimerCreateTimerTask+0x9c>)
 8003f44:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8003f46:	4b13      	ldr	r3, [pc, #76]	@ (8003f94 <xTimerCreateTimerTask+0x9c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <xTimerCreateTimerTask+0x78>
    __asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	613b      	str	r3, [r7, #16]
}
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4619      	mov	r1, r3
 8003f74:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003f78:	f002 fa22 	bl	80063c0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003f7c:	697b      	ldr	r3, [r7, #20]
    }
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20001338 	.word	0x20001338
 8003f8c:	08007680 	.word	0x08007680
 8003f90:	0800403d 	.word	0x0800403d
 8003f94:	2000133c 	.word	0x2000133c

08003f98 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fa4:	e008      	b.n	8003fb8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4413      	add	r3, r2
 8003fae:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	18d1      	adds	r1, r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f8dd 	bl	8004184 <prvInsertTimerInActiveList>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ea      	bne.n	8003fa6 <prvReloadTimer+0xe>
        }
    }
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fe6:	4b14      	ldr	r3, [pc, #80]	@ (8004038 <prvProcessExpiredTimer+0x5c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe f953 	bl	80022a0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f7ff ffc3 	bl	8003f98 <prvReloadTimer>
 8004012:	e008      	b.n	8004026 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	b2da      	uxtb	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	4798      	blx	r3
    }
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20001330 	.word	0x20001330

0800403c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004044:	f107 0308 	add.w	r3, r7, #8
 8004048:	4618      	mov	r0, r3
 800404a:	f000 f859 	bl	8004100 <prvGetNextExpireTime>
 800404e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4619      	mov	r1, r3
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f805 	bl	8004064 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800405a:	f000 f8d5 	bl	8004208 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800405e:	bf00      	nop
 8004060:	e7f0      	b.n	8004044 <prvTimerTask+0x8>
	...

08004064 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800406e:	f7ff f8db 	bl	8003228 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004072:	f107 0308 	add.w	r3, r7, #8
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f864 	bl	8004144 <prvSampleTimeNow>
 800407c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d130      	bne.n	80040e6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <prvProcessTimerOrBlockTask+0x3c>
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	429a      	cmp	r2, r3
 8004090:	d806      	bhi.n	80040a0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004092:	f7ff f8d7 	bl	8003244 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ff9f 	bl	8003fdc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800409e:	e024      	b.n	80040ea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040a6:	4b13      	ldr	r3, [pc, #76]	@ (80040f4 <prvProcessTimerOrBlockTask+0x90>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <prvProcessTimerOrBlockTask+0x50>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <prvProcessTimerOrBlockTask+0x52>
 80040b4:	2300      	movs	r3, #0
 80040b6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040b8:	4b0f      	ldr	r3, [pc, #60]	@ (80040f8 <prvProcessTimerOrBlockTask+0x94>)
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	4619      	mov	r1, r3
 80040c6:	f7fe fc0b 	bl	80028e0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80040ca:	f7ff f8bb 	bl	8003244 <xTaskResumeAll>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80040d4:	4b09      	ldr	r3, [pc, #36]	@ (80040fc <prvProcessTimerOrBlockTask+0x98>)
 80040d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	f3bf 8f6f 	isb	sy
    }
 80040e4:	e001      	b.n	80040ea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80040e6:	f7ff f8ad 	bl	8003244 <xTaskResumeAll>
    }
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20001334 	.word	0x20001334
 80040f8:	20001338 	.word	0x20001338
 80040fc:	e000ed04 	.word	0xe000ed04

08004100 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004108:	4b0d      	ldr	r3, [pc, #52]	@ (8004140 <prvGetNextExpireTime+0x40>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <prvGetNextExpireTime+0x16>
 8004112:	2201      	movs	r2, #1
 8004114:	e000      	b.n	8004118 <prvGetNextExpireTime+0x18>
 8004116:	2200      	movs	r2, #0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d105      	bne.n	8004130 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004124:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <prvGetNextExpireTime+0x40>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	e001      	b.n	8004134 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004134:	68fb      	ldr	r3, [r7, #12]
    }
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	20001330 	.word	0x20001330

08004144 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800414c:	f7ff f98c 	bl	8003468 <xTaskGetTickCount>
 8004150:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004152:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <prvSampleTimeNow+0x3c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	429a      	cmp	r2, r3
 800415a:	d205      	bcs.n	8004168 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800415c:	f000 f938 	bl	80043d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e002      	b.n	800416e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800416e:	4a04      	ldr	r2, [pc, #16]	@ (8004180 <prvSampleTimeNow+0x3c>)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004174:	68fb      	ldr	r3, [r7, #12]
    }
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20001340 	.word	0x20001340

08004184 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d812      	bhi.n	80041d0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	1ad2      	subs	r2, r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80041b8:	2301      	movs	r3, #1
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	e01b      	b.n	80041f6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041be:	4b10      	ldr	r3, [pc, #64]	@ (8004200 <prvInsertTimerInActiveList+0x7c>)
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f7fe f82e 	bl	800222a <vListInsert>
 80041ce:	e012      	b.n	80041f6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d206      	bcs.n	80041e6 <prvInsertTimerInActiveList+0x62>
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d302      	bcc.n	80041e6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80041e0:	2301      	movs	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	e007      	b.n	80041f6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041e6:	4b07      	ldr	r3, [pc, #28]	@ (8004204 <prvInsertTimerInActiveList+0x80>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f7fe f81a 	bl	800222a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80041f6:	697b      	ldr	r3, [r7, #20]
    }
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20001334 	.word	0x20001334
 8004204:	20001330 	.word	0x20001330

08004208 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	@ 0x28
 800420c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800420e:	1d3b      	adds	r3, r7, #4
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800421a:	e0c7      	b.n	80043ac <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	da19      	bge.n	8004256 <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004222:	1d3b      	adds	r3, r7, #4
 8004224:	3304      	adds	r3, #4
 8004226:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10b      	bne.n	8004246 <prvProcessReceivedCommands+0x3e>
    __asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	61bb      	str	r3, [r7, #24]
}
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	e7fd      	b.n	8004242 <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800424c:	6850      	ldr	r0, [r2, #4]
 800424e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004250:	6892      	ldr	r2, [r2, #8]
 8004252:	4611      	mov	r1, r2
 8004254:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	f2c0 80a7 	blt.w	80043ac <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d004      	beq.n	8004274 <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	3304      	adds	r3, #4
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe f816 	bl	80022a0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004274:	463b      	mov	r3, r7
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff ff64 	bl	8004144 <prvSampleTimeNow>
 800427c:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3b01      	subs	r3, #1
 8004282:	2b08      	cmp	r3, #8
 8004284:	f200 808f 	bhi.w	80043a6 <prvProcessReceivedCommands+0x19e>
 8004288:	a201      	add	r2, pc, #4	@ (adr r2, 8004290 <prvProcessReceivedCommands+0x88>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	080042b5 	.word	0x080042b5
 8004294:	080042b5 	.word	0x080042b5
 8004298:	0800431d 	.word	0x0800431d
 800429c:	08004331 	.word	0x08004331
 80042a0:	0800437d 	.word	0x0800437d
 80042a4:	080042b5 	.word	0x080042b5
 80042a8:	080042b5 	.word	0x080042b5
 80042ac:	0800431d 	.word	0x0800431d
 80042b0:	08004331 	.word	0x08004331
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	18d1      	adds	r1, r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	6a38      	ldr	r0, [r7, #32]
 80042d4:	f7ff ff56 	bl	8004184 <prvInsertTimerInActiveList>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d065      	beq.n	80043aa <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d009      	beq.n	8004300 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	4413      	add	r3, r2
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	4619      	mov	r1, r3
 80042f8:	6a38      	ldr	r0, [r7, #32]
 80042fa:	f7ff fe4d 	bl	8003f98 <prvReloadTimer>
 80042fe:	e008      	b.n	8004312 <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	b2da      	uxtb	r2, r3
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	6a38      	ldr	r0, [r7, #32]
 8004318:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800431a:	e046      	b.n	80043aa <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	b2da      	uxtb	r2, r3
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800432e:	e03d      	b.n	80043ac <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	b2da      	uxtb	r2, r3
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <prvProcessReceivedCommands+0x160>
    __asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	617b      	str	r3, [r7, #20]
}
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	e7fd      	b.n	8004364 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	699a      	ldr	r2, [r3, #24]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	18d1      	adds	r1, r2, r3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	69fa      	ldr	r2, [r7, #28]
 8004374:	6a38      	ldr	r0, [r7, #32]
 8004376:	f7ff ff05 	bl	8004184 <prvInsertTimerInActiveList>
                        break;
 800437a:	e017      	b.n	80043ac <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 800438a:	6a38      	ldr	r0, [r7, #32]
 800438c:	f000 fc02 	bl	8004b94 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004390:	e00c      	b.n	80043ac <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	b2da      	uxtb	r2, r3
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80043a4:	e002      	b.n	80043ac <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 80043a6:	bf00      	nop
 80043a8:	e000      	b.n	80043ac <prvProcessReceivedCommands+0x1a4>
                        break;
 80043aa:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80043ac:	4b07      	ldr	r3, [pc, #28]	@ (80043cc <prvProcessReceivedCommands+0x1c4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	1d39      	adds	r1, r7, #4
 80043b2:	2200      	movs	r2, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe f8c7 	bl	8002548 <xQueueReceive>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f47f af2d 	bne.w	800421c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80043c2:	bf00      	nop
 80043c4:	bf00      	nop
 80043c6:	3728      	adds	r7, #40	@ 0x28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20001338 	.word	0x20001338

080043d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043d6:	e009      	b.n	80043ec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004414 <prvSwitchTimerLists+0x44>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80043e2:	f04f 31ff 	mov.w	r1, #4294967295
 80043e6:	6838      	ldr	r0, [r7, #0]
 80043e8:	f7ff fdf8 	bl	8003fdc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043ec:	4b09      	ldr	r3, [pc, #36]	@ (8004414 <prvSwitchTimerLists+0x44>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80043f6:	4b07      	ldr	r3, [pc, #28]	@ (8004414 <prvSwitchTimerLists+0x44>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80043fc:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <prvSwitchTimerLists+0x48>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a04      	ldr	r2, [pc, #16]	@ (8004414 <prvSwitchTimerLists+0x44>)
 8004402:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004404:	4a04      	ldr	r2, [pc, #16]	@ (8004418 <prvSwitchTimerLists+0x48>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6013      	str	r3, [r2, #0]
    }
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20001330 	.word	0x20001330
 8004418:	20001334 	.word	0x20001334

0800441c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004422:	f000 f979 	bl	8004718 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004426:	4b15      	ldr	r3, [pc, #84]	@ (800447c <prvCheckForValidListAndQueue+0x60>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d120      	bne.n	8004470 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800442e:	4814      	ldr	r0, [pc, #80]	@ (8004480 <prvCheckForValidListAndQueue+0x64>)
 8004430:	f7fd fea4 	bl	800217c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004434:	4813      	ldr	r0, [pc, #76]	@ (8004484 <prvCheckForValidListAndQueue+0x68>)
 8004436:	f7fd fea1 	bl	800217c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800443a:	4b13      	ldr	r3, [pc, #76]	@ (8004488 <prvCheckForValidListAndQueue+0x6c>)
 800443c:	4a10      	ldr	r2, [pc, #64]	@ (8004480 <prvCheckForValidListAndQueue+0x64>)
 800443e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004440:	4b12      	ldr	r3, [pc, #72]	@ (800448c <prvCheckForValidListAndQueue+0x70>)
 8004442:	4a10      	ldr	r2, [pc, #64]	@ (8004484 <prvCheckForValidListAndQueue+0x68>)
 8004444:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004446:	2300      	movs	r3, #0
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	4b11      	ldr	r3, [pc, #68]	@ (8004490 <prvCheckForValidListAndQueue+0x74>)
 800444c:	4a11      	ldr	r2, [pc, #68]	@ (8004494 <prvCheckForValidListAndQueue+0x78>)
 800444e:	2110      	movs	r1, #16
 8004450:	200a      	movs	r0, #10
 8004452:	f7fd ffeb 	bl	800242c <xQueueGenericCreateStatic>
 8004456:	4603      	mov	r3, r0
 8004458:	4a08      	ldr	r2, [pc, #32]	@ (800447c <prvCheckForValidListAndQueue+0x60>)
 800445a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800445c:	4b07      	ldr	r3, [pc, #28]	@ (800447c <prvCheckForValidListAndQueue+0x60>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004464:	4b05      	ldr	r3, [pc, #20]	@ (800447c <prvCheckForValidListAndQueue+0x60>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	490b      	ldr	r1, [pc, #44]	@ (8004498 <prvCheckForValidListAndQueue+0x7c>)
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe f9e8 	bl	8002840 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004470:	f000 f982 	bl	8004778 <vPortExitCritical>
    }
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20001338 	.word	0x20001338
 8004480:	20001308 	.word	0x20001308
 8004484:	2000131c 	.word	0x2000131c
 8004488:	20001330 	.word	0x20001330
 800448c:	20001334 	.word	0x20001334
 8004490:	200013e4 	.word	0x200013e4
 8004494:	20001344 	.word	0x20001344
 8004498:	08007688 	.word	0x08007688

0800449c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3b04      	subs	r3, #4
 80044ac:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3b04      	subs	r3, #4
 80044ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f023 0201 	bic.w	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b04      	subs	r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80044cc:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <pxPortInitialiseStack+0x54>)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3b14      	subs	r3, #20
 80044d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b20      	subs	r3, #32
 80044e2:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80044e4:	68fb      	ldr	r3, [r7, #12]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	080044f5 	.word	0x080044f5

080044f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80044fe:	4b12      	ldr	r3, [pc, #72]	@ (8004548 <prvTaskExitError+0x54>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004506:	d00b      	beq.n	8004520 <prvTaskExitError+0x2c>
    __asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	60fb      	str	r3, [r7, #12]
}
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	e7fd      	b.n	800451c <prvTaskExitError+0x28>
    __asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	60bb      	str	r3, [r7, #8]
}
 8004532:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004534:	bf00      	nop
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0fc      	beq.n	8004536 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	20000010 	.word	0x20000010
 800454c:	00000000 	.word	0x00000000

08004550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004550:	4b07      	ldr	r3, [pc, #28]	@ (8004570 <pxCurrentTCBConst2>)
 8004552:	6819      	ldr	r1, [r3, #0]
 8004554:	6808      	ldr	r0, [r1, #0]
 8004556:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800455a:	f380 8809 	msr	PSP, r0
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	f380 8811 	msr	BASEPRI, r0
 800456a:	f04e 0e0d 	orr.w	lr, lr, #13
 800456e:	4770      	bx	lr

08004570 <pxCurrentTCBConst2>:
 8004570:	20000e08 	.word	0x20000e08
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop

08004578 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8004578:	4806      	ldr	r0, [pc, #24]	@ (8004594 <prvPortStartFirstTask+0x1c>)
 800457a:	6800      	ldr	r0, [r0, #0]
 800457c:	6800      	ldr	r0, [r0, #0]
 800457e:	f380 8808 	msr	MSP, r0
 8004582:	b662      	cpsie	i
 8004584:	b661      	cpsie	f
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	df00      	svc	0
 8004590:	bf00      	nop
 8004592:	0000      	.short	0x0000
 8004594:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop

0800459c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	@ 0x28
 80045a0:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80045a2:	4b54      	ldr	r3, [pc, #336]	@ (80046f4 <xPortStartScheduler+0x158>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	332c      	adds	r3, #44	@ 0x2c
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a52      	ldr	r2, [pc, #328]	@ (80046f8 <xPortStartScheduler+0x15c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00b      	beq.n	80045cc <xPortStartScheduler+0x30>
    __asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	61bb      	str	r3, [r7, #24]
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <xPortStartScheduler+0x2c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	3338      	adds	r3, #56	@ 0x38
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a4a      	ldr	r2, [pc, #296]	@ (80046fc <xPortStartScheduler+0x160>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00b      	beq.n	80045f0 <xPortStartScheduler+0x54>
    __asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	61fb      	str	r3, [r7, #28]
}
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <xPortStartScheduler+0x50>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045f4:	4b42      	ldr	r3, [pc, #264]	@ (8004700 <xPortStartScheduler+0x164>)
 80045f6:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	22ff      	movs	r2, #255	@ 0xff
 8004604:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004616:	b2da      	uxtb	r2, r3
 8004618:	4b3a      	ldr	r3, [pc, #232]	@ (8004704 <xPortStartScheduler+0x168>)
 800461a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800461c:	4b39      	ldr	r3, [pc, #228]	@ (8004704 <xPortStartScheduler+0x168>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <xPortStartScheduler+0xa0>
    __asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	617b      	str	r3, [r7, #20]
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	e7fd      	b.n	8004638 <xPortStartScheduler+0x9c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004646:	2b00      	cmp	r3, #0
 8004648:	d013      	beq.n	8004672 <xPortStartScheduler+0xd6>
    __asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	613b      	str	r3, [r7, #16]
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <xPortStartScheduler+0xc2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	3301      	adds	r3, #1
 8004666:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467a:	2b80      	cmp	r3, #128	@ 0x80
 800467c:	d0f1      	beq.n	8004662 <xPortStartScheduler+0xc6>
        }

        if( ulImplementedPrioBits == 8 )
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b08      	cmp	r3, #8
 8004682:	d103      	bne.n	800468c <xPortStartScheduler+0xf0>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004684:	4b20      	ldr	r3, [pc, #128]	@ (8004708 <xPortStartScheduler+0x16c>)
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e004      	b.n	8004696 <xPortStartScheduler+0xfa>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f1c3 0307 	rsb	r3, r3, #7
 8004692:	4a1d      	ldr	r2, [pc, #116]	@ (8004708 <xPortStartScheduler+0x16c>)
 8004694:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004696:	4b1c      	ldr	r3, [pc, #112]	@ (8004708 <xPortStartScheduler+0x16c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	4a1a      	ldr	r2, [pc, #104]	@ (8004708 <xPortStartScheduler+0x16c>)
 800469e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046a0:	4b19      	ldr	r3, [pc, #100]	@ (8004708 <xPortStartScheduler+0x16c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046a8:	4a17      	ldr	r2, [pc, #92]	@ (8004708 <xPortStartScheduler+0x16c>)
 80046aa:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80046b4:	4b15      	ldr	r3, [pc, #84]	@ (800470c <xPortStartScheduler+0x170>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a14      	ldr	r2, [pc, #80]	@ (800470c <xPortStartScheduler+0x170>)
 80046ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046be:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80046c0:	4b12      	ldr	r3, [pc, #72]	@ (800470c <xPortStartScheduler+0x170>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a11      	ldr	r2, [pc, #68]	@ (800470c <xPortStartScheduler+0x170>)
 80046c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80046cc:	4b10      	ldr	r3, [pc, #64]	@ (8004710 <xPortStartScheduler+0x174>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80046d2:	f000 f8cb 	bl	800486c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80046d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004714 <xPortStartScheduler+0x178>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80046dc:	f7ff ff4c 	bl	8004578 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80046e0:	f7ff f80e 	bl	8003700 <vTaskSwitchContext>
    prvTaskExitError();
 80046e4:	f7ff ff06 	bl	80044f4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3728      	adds	r7, #40	@ 0x28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	e000ed08 	.word	0xe000ed08
 80046f8:	08004551 	.word	0x08004551
 80046fc:	080047d1 	.word	0x080047d1
 8004700:	e000e400 	.word	0xe000e400
 8004704:	20001434 	.word	0x20001434
 8004708:	20001438 	.word	0x20001438
 800470c:	e000ed20 	.word	0xe000ed20
 8004710:	e000ed1c 	.word	0xe000ed1c
 8004714:	20000010 	.word	0x20000010

08004718 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
    __asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	607b      	str	r3, [r7, #4]
}
 8004730:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004732:	4b0f      	ldr	r3, [pc, #60]	@ (8004770 <vPortEnterCritical+0x58>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3301      	adds	r3, #1
 8004738:	4a0d      	ldr	r2, [pc, #52]	@ (8004770 <vPortEnterCritical+0x58>)
 800473a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800473c:	4b0c      	ldr	r3, [pc, #48]	@ (8004770 <vPortEnterCritical+0x58>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d110      	bne.n	8004766 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004744:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <vPortEnterCritical+0x5c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <vPortEnterCritical+0x4e>
    __asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	603b      	str	r3, [r7, #0]
}
 8004760:	bf00      	nop
 8004762:	bf00      	nop
 8004764:	e7fd      	b.n	8004762 <vPortEnterCritical+0x4a>
    }
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	20000010 	.word	0x20000010
 8004774:	e000ed04 	.word	0xe000ed04

08004778 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800477e:	4b12      	ldr	r3, [pc, #72]	@ (80047c8 <vPortExitCritical+0x50>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10b      	bne.n	800479e <vPortExitCritical+0x26>
    __asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	607b      	str	r3, [r7, #4]
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop
 800479c:	e7fd      	b.n	800479a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800479e:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <vPortExitCritical+0x50>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	4a08      	ldr	r2, [pc, #32]	@ (80047c8 <vPortExitCritical+0x50>)
 80047a6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80047a8:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <vPortExitCritical+0x50>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <vPortExitCritical+0x44>
 80047b0:	2300      	movs	r3, #0
 80047b2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80047ba:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	20000010 	.word	0x20000010
 80047cc:	00000000 	.word	0x00000000

080047d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047d0:	f3ef 8009 	mrs	r0, PSP
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004810 <pxCurrentTCBConst>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80047e0:	6010      	str	r0, [r2, #0]
 80047e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80047e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80047ea:	f380 8811 	msr	BASEPRI, r0
 80047ee:	f7fe ff87 	bl	8003700 <vTaskSwitchContext>
 80047f2:	f04f 0000 	mov.w	r0, #0
 80047f6:	f380 8811 	msr	BASEPRI, r0
 80047fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	6808      	ldr	r0, [r1, #0]
 8004802:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004806:	f380 8809 	msr	PSP, r0
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	4770      	bx	lr

08004810 <pxCurrentTCBConst>:
 8004810:	20000e08 	.word	0x20000e08
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop

08004818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
    __asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	607b      	str	r3, [r7, #4]
}
 8004830:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004832:	f001 fd0f 	bl	8006254 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004836:	f7fe fe3f 	bl	80034b8 <xTaskIncrementTick>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d006      	beq.n	800484e <xPortSysTickHandler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004840:	f001 fd66 	bl	8006310 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004844:	4b08      	ldr	r3, [pc, #32]	@ (8004868 <xPortSysTickHandler+0x50>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e001      	b.n	8004852 <xPortSysTickHandler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800484e:	f001 fd43 	bl	80062d8 <SEGGER_SYSVIEW_RecordExitISR>
 8004852:	2300      	movs	r3, #0
 8004854:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f383 8811 	msr	BASEPRI, r3
}
 800485c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004870:	4b0a      	ldr	r3, [pc, #40]	@ (800489c <vPortSetupTimerInterrupt+0x30>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004876:	4b0a      	ldr	r3, [pc, #40]	@ (80048a0 <vPortSetupTimerInterrupt+0x34>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800487c:	4b09      	ldr	r3, [pc, #36]	@ (80048a4 <vPortSetupTimerInterrupt+0x38>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a09      	ldr	r2, [pc, #36]	@ (80048a8 <vPortSetupTimerInterrupt+0x3c>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	099b      	lsrs	r3, r3, #6
 8004888:	4a08      	ldr	r2, [pc, #32]	@ (80048ac <vPortSetupTimerInterrupt+0x40>)
 800488a:	3b01      	subs	r3, #1
 800488c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800488e:	4b03      	ldr	r3, [pc, #12]	@ (800489c <vPortSetupTimerInterrupt+0x30>)
 8004890:	2207      	movs	r2, #7
 8004892:	601a      	str	r2, [r3, #0]
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	e000e010 	.word	0xe000e010
 80048a0:	e000e018 	.word	0xe000e018
 80048a4:	20000004 	.word	0x20000004
 80048a8:	10624dd3 	.word	0x10624dd3
 80048ac:	e000e014 	.word	0xe000e014

080048b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048b6:	f3ef 8305 	mrs	r3, IPSR
 80048ba:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b0f      	cmp	r3, #15
 80048c0:	d915      	bls.n	80048ee <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048c2:	4a17      	ldr	r2, [pc, #92]	@ (8004920 <vPortValidateInterruptPriority+0x70>)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048cc:	4b15      	ldr	r3, [pc, #84]	@ (8004924 <vPortValidateInterruptPriority+0x74>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	7afa      	ldrb	r2, [r7, #11]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d20b      	bcs.n	80048ee <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	607b      	str	r3, [r7, #4]
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	e7fd      	b.n	80048ea <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004928 <vPortValidateInterruptPriority+0x78>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048f6:	4b0d      	ldr	r3, [pc, #52]	@ (800492c <vPortValidateInterruptPriority+0x7c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d90b      	bls.n	8004916 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	603b      	str	r3, [r7, #0]
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	e7fd      	b.n	8004912 <vPortValidateInterruptPriority+0x62>
    }
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	e000e3f0 	.word	0xe000e3f0
 8004924:	20001434 	.word	0x20001434
 8004928:	e000ed0c 	.word	0xe000ed0c
 800492c:	20001438 	.word	0x20001438

08004930 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08e      	sub	sp, #56	@ 0x38
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004938:	2300      	movs	r3, #0
 800493a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d022      	beq.n	8004988 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004942:	2308      	movs	r3, #8
 8004944:	43db      	mvns	r3, r3
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d81b      	bhi.n	8004984 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800494c:	2208      	movs	r2, #8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4413      	add	r3, r2
 8004952:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	2b00      	cmp	r3, #0
 800495c:	d014      	beq.n	8004988 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	f1c3 0308 	rsb	r3, r3, #8
 8004968:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800496a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496c:	43db      	mvns	r3, r3
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d804      	bhi.n	800497e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004978:	4413      	add	r3, r2
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	e004      	b.n	8004988 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	e001      	b.n	8004988 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004988:	f7fe fc4e 	bl	8003228 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800498c:	4b7a      	ldr	r3, [pc, #488]	@ (8004b78 <pvPortMalloc+0x248>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004994:	f000 f974 	bl	8004c80 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f2c0 80d3 	blt.w	8004b46 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80cf 	beq.w	8004b46 <pvPortMalloc+0x216>
 80049a8:	4b74      	ldr	r3, [pc, #464]	@ (8004b7c <pvPortMalloc+0x24c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	f200 80c9 	bhi.w	8004b46 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049b4:	4b72      	ldr	r3, [pc, #456]	@ (8004b80 <pvPortMalloc+0x250>)
 80049b6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80049b8:	4b71      	ldr	r3, [pc, #452]	@ (8004b80 <pvPortMalloc+0x250>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80049be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c0:	4a70      	ldr	r2, [pc, #448]	@ (8004b84 <pvPortMalloc+0x254>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d305      	bcc.n	80049d2 <pvPortMalloc+0xa2>
 80049c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c8:	4a6f      	ldr	r2, [pc, #444]	@ (8004b88 <pvPortMalloc+0x258>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d801      	bhi.n	80049d2 <pvPortMalloc+0xa2>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <pvPortMalloc+0xa4>
 80049d2:	2300      	movs	r3, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d129      	bne.n	8004a2c <pvPortMalloc+0xfc>
    __asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	623b      	str	r3, [r7, #32]
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80049f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80049f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80049fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fc:	4a61      	ldr	r2, [pc, #388]	@ (8004b84 <pvPortMalloc+0x254>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d305      	bcc.n	8004a0e <pvPortMalloc+0xde>
 8004a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a04:	4a60      	ldr	r2, [pc, #384]	@ (8004b88 <pvPortMalloc+0x258>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d801      	bhi.n	8004a0e <pvPortMalloc+0xde>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <pvPortMalloc+0xe0>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10b      	bne.n	8004a2c <pvPortMalloc+0xfc>
    __asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	61fb      	str	r3, [r7, #28]
}
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	e7fd      	b.n	8004a28 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d903      	bls.n	8004a3e <pvPortMalloc+0x10e>
 8004a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1d8      	bne.n	80049f0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a3e:	4b4e      	ldr	r3, [pc, #312]	@ (8004b78 <pvPortMalloc+0x248>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d07e      	beq.n	8004b46 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	4413      	add	r3, r2
 8004a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a54:	4a4b      	ldr	r2, [pc, #300]	@ (8004b84 <pvPortMalloc+0x254>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d305      	bcc.n	8004a66 <pvPortMalloc+0x136>
 8004a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b88 <pvPortMalloc+0x258>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d801      	bhi.n	8004a66 <pvPortMalloc+0x136>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <pvPortMalloc+0x138>
 8004a66:	2300      	movs	r3, #0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10b      	bne.n	8004a84 <pvPortMalloc+0x154>
    __asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	61bb      	str	r3, [r7, #24]
}
 8004a7e:	bf00      	nop
 8004a80:	bf00      	nop
 8004a82:	e7fd      	b.n	8004a80 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d90b      	bls.n	8004aae <pvPortMalloc+0x17e>
    __asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	617b      	str	r3, [r7, #20]
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	e7fd      	b.n	8004aaa <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	1ad2      	subs	r2, r2, r3
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d924      	bls.n	8004b08 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004abe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00b      	beq.n	8004ae8 <pvPortMalloc+0x1b8>
    __asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	613b      	str	r3, [r7, #16]
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	1ad2      	subs	r2, r2, r3
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8004afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b06:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b08:	4b1c      	ldr	r3, [pc, #112]	@ (8004b7c <pvPortMalloc+0x24c>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	4a1a      	ldr	r2, [pc, #104]	@ (8004b7c <pvPortMalloc+0x24c>)
 8004b14:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b16:	4b19      	ldr	r3, [pc, #100]	@ (8004b7c <pvPortMalloc+0x24c>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004b8c <pvPortMalloc+0x25c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d203      	bcs.n	8004b2a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b22:	4b16      	ldr	r3, [pc, #88]	@ (8004b7c <pvPortMalloc+0x24c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a19      	ldr	r2, [pc, #100]	@ (8004b8c <pvPortMalloc+0x25c>)
 8004b28:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b34:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b3c:	4b14      	ldr	r3, [pc, #80]	@ (8004b90 <pvPortMalloc+0x260>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3301      	adds	r3, #1
 8004b42:	4a13      	ldr	r2, [pc, #76]	@ (8004b90 <pvPortMalloc+0x260>)
 8004b44:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b46:	f7fe fb7d 	bl	8003244 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <pvPortMalloc+0x23c>
    __asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	60fb      	str	r3, [r7, #12]
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	e7fd      	b.n	8004b68 <pvPortMalloc+0x238>
    return pvReturn;
 8004b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3738      	adds	r7, #56	@ 0x38
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20003b54 	.word	0x20003b54
 8004b7c:	20003b58 	.word	0x20003b58
 8004b80:	20003b4c 	.word	0x20003b4c
 8004b84:	2000143c 	.word	0x2000143c
 8004b88:	20003b4b 	.word	0x20003b4b
 8004b8c:	20003b5c 	.word	0x20003b5c
 8004b90:	20003b60 	.word	0x20003b60

08004b94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d060      	beq.n	8004c68 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	425b      	negs	r3, r3
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	4a2e      	ldr	r2, [pc, #184]	@ (8004c70 <vPortFree+0xdc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d305      	bcc.n	8004bc8 <vPortFree+0x34>
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	4a2d      	ldr	r2, [pc, #180]	@ (8004c74 <vPortFree+0xe0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d801      	bhi.n	8004bc8 <vPortFree+0x34>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <vPortFree+0x36>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <vPortFree+0x52>
    __asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	617b      	str	r3, [r7, #20]
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	e7fd      	b.n	8004be2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	db0b      	blt.n	8004c06 <vPortFree+0x72>
    __asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	613b      	str	r3, [r7, #16]
}
 8004c00:	bf00      	nop
 8004c02:	bf00      	nop
 8004c04:	e7fd      	b.n	8004c02 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <vPortFree+0x92>
    __asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	60fb      	str	r3, [r7, #12]
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	e7fd      	b.n	8004c22 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	da1c      	bge.n	8004c68 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d118      	bne.n	8004c68 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8004c42:	f7fe faf1 	bl	8003228 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c78 <vPortFree+0xe4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4413      	add	r3, r2
 8004c50:	4a09      	ldr	r2, [pc, #36]	@ (8004c78 <vPortFree+0xe4>)
 8004c52:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c54:	69b8      	ldr	r0, [r7, #24]
 8004c56:	f000 f86d 	bl	8004d34 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c5a:	4b08      	ldr	r3, [pc, #32]	@ (8004c7c <vPortFree+0xe8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	4a06      	ldr	r2, [pc, #24]	@ (8004c7c <vPortFree+0xe8>)
 8004c62:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c64:	f7fe faee 	bl	8003244 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c68:	bf00      	nop
 8004c6a:	3720      	adds	r7, #32
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	2000143c 	.word	0x2000143c
 8004c74:	20003b4b 	.word	0x20003b4b
 8004c78:	20003b58 	.word	0x20003b58
 8004c7c:	20003b64 	.word	0x20003b64

08004c80 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c86:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004c8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c8c:	4b24      	ldr	r3, [pc, #144]	@ (8004d20 <prvHeapInit+0xa0>)
 8004c8e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00c      	beq.n	8004cb4 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3307      	adds	r3, #7
 8004c9e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0307 	bic.w	r3, r3, #7
 8004ca6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	4a1c      	ldr	r2, [pc, #112]	@ (8004d20 <prvHeapInit+0xa0>)
 8004cb0:	4413      	add	r3, r2
 8004cb2:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d24 <prvHeapInit+0xa4>)
 8004cb8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004cba:	4b1a      	ldr	r3, [pc, #104]	@ (8004d24 <prvHeapInit+0xa4>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004cc8:	2208      	movs	r2, #8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f023 0307 	bic.w	r3, r3, #7
 8004cd6:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a13      	ldr	r2, [pc, #76]	@ (8004d28 <prvHeapInit+0xa8>)
 8004cdc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004cde:	4b12      	ldr	r3, [pc, #72]	@ (8004d28 <prvHeapInit+0xa8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004ce6:	4b10      	ldr	r3, [pc, #64]	@ (8004d28 <prvHeapInit+0xa8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	1ad2      	subs	r2, r2, r3
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <prvHeapInit+0xa8>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4a08      	ldr	r2, [pc, #32]	@ (8004d2c <prvHeapInit+0xac>)
 8004d0a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a07      	ldr	r2, [pc, #28]	@ (8004d30 <prvHeapInit+0xb0>)
 8004d12:	6013      	str	r3, [r2, #0]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	2000143c 	.word	0x2000143c
 8004d24:	20003b4c 	.word	0x20003b4c
 8004d28:	20003b54 	.word	0x20003b54
 8004d2c:	20003b5c 	.word	0x20003b5c
 8004d30:	20003b58 	.word	0x20003b58

08004d34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004d3c:	4b36      	ldr	r3, [pc, #216]	@ (8004e18 <prvInsertBlockIntoFreeList+0xe4>)
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e002      	b.n	8004d48 <prvInsertBlockIntoFreeList+0x14>
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d8f7      	bhi.n	8004d42 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4a30      	ldr	r2, [pc, #192]	@ (8004e18 <prvInsertBlockIntoFreeList+0xe4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d018      	beq.n	8004d8c <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	4a2f      	ldr	r2, [pc, #188]	@ (8004e1c <prvInsertBlockIntoFreeList+0xe8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d305      	bcc.n	8004d6e <prvInsertBlockIntoFreeList+0x3a>
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	4a2e      	ldr	r2, [pc, #184]	@ (8004e20 <prvInsertBlockIntoFreeList+0xec>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d801      	bhi.n	8004d6e <prvInsertBlockIntoFreeList+0x3a>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <prvInsertBlockIntoFreeList+0x3c>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10b      	bne.n	8004d8c <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	60fb      	str	r3, [r7, #12]
}
 8004d86:	bf00      	nop
 8004d88:	bf00      	nop
 8004d8a:	e7fd      	b.n	8004d88 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4413      	add	r3, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d108      	bne.n	8004db0 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	441a      	add	r2, r3
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	441a      	add	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d118      	bne.n	8004df6 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4b16      	ldr	r3, [pc, #88]	@ (8004e24 <prvInsertBlockIntoFreeList+0xf0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d00d      	beq.n	8004dec <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	441a      	add	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e008      	b.n	8004dfe <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004dec:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <prvInsertBlockIntoFreeList+0xf0>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e003      	b.n	8004dfe <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d002      	beq.n	8004e0c <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20003b4c 	.word	0x20003b4c
 8004e1c:	2000143c 	.word	0x2000143c
 8004e20:	20003b4b 	.word	0x20003b4b
 8004e24:	20003b54 	.word	0x20003b54

08004e28 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004e2c:	4803      	ldr	r0, [pc, #12]	@ (8004e3c <_cbSendSystemDesc+0x14>)
 8004e2e:	f001 f9bb 	bl	80061a8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004e32:	4803      	ldr	r0, [pc, #12]	@ (8004e40 <_cbSendSystemDesc+0x18>)
 8004e34:	f001 f9b8 	bl	80061a8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004e38:	bf00      	nop
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	08007690 	.word	0x08007690
 8004e40:	080076c4 	.word	0x080076c4

08004e44 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004e48:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	4b05      	ldr	r3, [pc, #20]	@ (8004e68 <SEGGER_SYSVIEW_Conf+0x24>)
 8004e52:	4a06      	ldr	r2, [pc, #24]	@ (8004e6c <SEGGER_SYSVIEW_Conf+0x28>)
 8004e54:	f000 fe30 	bl	8005ab8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004e58:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8004e5c:	f000 fe70 	bl	8005b40 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004e60:	bf00      	nop
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000004 	.word	0x20000004
 8004e68:	08004e29 	.word	0x08004e29
 8004e6c:	0800782c 	.word	0x0800782c

08004e70 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e76:	2300      	movs	r3, #0
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	e048      	b.n	8004f0e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8004e7c:	4929      	ldr	r1, [pc, #164]	@ (8004f24 <_cbSendTaskList+0xb4>)
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe ff2d 	bl	8003cec <uxTaskGetStackHighWaterMark>
 8004e92:	4601      	mov	r1, r0
 8004e94:	4823      	ldr	r0, [pc, #140]	@ (8004f24 <_cbSendTaskList+0xb4>)
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4403      	add	r3, r0
 8004ea2:	3310      	adds	r3, #16
 8004ea4:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004ea6:	491f      	ldr	r1, [pc, #124]	@ (8004f24 <_cbSendTaskList+0xb4>)
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	491b      	ldr	r1, [pc, #108]	@ (8004f24 <_cbSendTaskList+0xb4>)
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	6819      	ldr	r1, [r3, #0]
 8004ec8:	4c16      	ldr	r4, [pc, #88]	@ (8004f24 <_cbSendTaskList+0xb4>)
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4423      	add	r3, r4
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	681c      	ldr	r4, [r3, #0]
 8004eda:	4d12      	ldr	r5, [pc, #72]	@ (8004f24 <_cbSendTaskList+0xb4>)
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	442b      	add	r3, r5
 8004ee8:	330c      	adds	r3, #12
 8004eea:	681d      	ldr	r5, [r3, #0]
 8004eec:	4e0d      	ldr	r6, [pc, #52]	@ (8004f24 <_cbSendTaskList+0xb4>)
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4433      	add	r3, r6
 8004efa:	3310      	adds	r3, #16
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	462b      	mov	r3, r5
 8004f02:	4622      	mov	r2, r4
 8004f04:	f000 f97a 	bl	80051fc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	607b      	str	r3, [r7, #4]
 8004f0e:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <_cbSendTaskList+0xb8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d3b1      	bcc.n	8004e7c <_cbSendTaskList+0xc>
  }
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20003b68 	.word	0x20003b68
 8004f28:	20003c08 	.word	0x20003c08

08004f2c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004f34:	f7fe faaa 	bl	800348c <xTaskGetTickCountFromISR>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	469a      	mov	sl, r3
 8004f3e:	4693      	mov	fp, r2
 8004f40:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004f44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	f04f 0a00 	mov.w	sl, #0
 8004f50:	f04f 0b00 	mov.w	fp, #0
 8004f54:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004f58:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004f5c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004f60:	4652      	mov	r2, sl
 8004f62:	465b      	mov	r3, fp
 8004f64:	1a14      	subs	r4, r2, r0
 8004f66:	eb63 0501 	sbc.w	r5, r3, r1
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	00ab      	lsls	r3, r5, #2
 8004f74:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004f78:	00a2      	lsls	r2, r4, #2
 8004f7a:	4614      	mov	r4, r2
 8004f7c:	461d      	mov	r5, r3
 8004f7e:	eb14 0800 	adds.w	r8, r4, r0
 8004f82:	eb45 0901 	adc.w	r9, r5, r1
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f9a:	4690      	mov	r8, r2
 8004f9c:	4699      	mov	r9, r3
 8004f9e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004fb4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004fc2:	2205      	movs	r2, #5
 8004fc4:	492b      	ldr	r1, [pc, #172]	@ (8005074 <SYSVIEW_AddTask+0xc0>)
 8004fc6:	68b8      	ldr	r0, [r7, #8]
 8004fc8:	f001 fe3a 	bl	8006c40 <memcmp>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d04b      	beq.n	800506a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004fd2:	4b29      	ldr	r3, [pc, #164]	@ (8005078 <SYSVIEW_AddTask+0xc4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b07      	cmp	r3, #7
 8004fd8:	d903      	bls.n	8004fe2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004fda:	4828      	ldr	r0, [pc, #160]	@ (800507c <SYSVIEW_AddTask+0xc8>)
 8004fdc:	f001 fdb2 	bl	8006b44 <SEGGER_SYSVIEW_Warn>
    return;
 8004fe0:	e044      	b.n	800506c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004fe2:	4b25      	ldr	r3, [pc, #148]	@ (8005078 <SYSVIEW_AddTask+0xc4>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4926      	ldr	r1, [pc, #152]	@ (8005080 <SYSVIEW_AddTask+0xcc>)
 8004fe8:	4613      	mov	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ff6:	4b20      	ldr	r3, [pc, #128]	@ (8005078 <SYSVIEW_AddTask+0xc4>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4921      	ldr	r1, [pc, #132]	@ (8005080 <SYSVIEW_AddTask+0xcc>)
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	3304      	adds	r3, #4
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800500c:	4b1a      	ldr	r3, [pc, #104]	@ (8005078 <SYSVIEW_AddTask+0xc4>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	491b      	ldr	r1, [pc, #108]	@ (8005080 <SYSVIEW_AddTask+0xcc>)
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	3308      	adds	r3, #8
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005022:	4b15      	ldr	r3, [pc, #84]	@ (8005078 <SYSVIEW_AddTask+0xc4>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4916      	ldr	r1, [pc, #88]	@ (8005080 <SYSVIEW_AddTask+0xcc>)
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	330c      	adds	r3, #12
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005038:	4b0f      	ldr	r3, [pc, #60]	@ (8005078 <SYSVIEW_AddTask+0xc4>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	4910      	ldr	r1, [pc, #64]	@ (8005080 <SYSVIEW_AddTask+0xcc>)
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	3310      	adds	r3, #16
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800504e:	4b0a      	ldr	r3, [pc, #40]	@ (8005078 <SYSVIEW_AddTask+0xc4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <SYSVIEW_AddTask+0xc4>)
 8005056:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f8ca 	bl	80051fc <SYSVIEW_SendTaskInfo>
 8005068:	e000      	b.n	800506c <SYSVIEW_AddTask+0xb8>
    return;
 800506a:	bf00      	nop

}
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	080076d4 	.word	0x080076d4
 8005078:	20003c08 	.word	0x20003c08
 800507c:	080076dc 	.word	0x080076dc
 8005080:	20003b68 	.word	0x20003b68

08005084 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800508c:	4b59      	ldr	r3, [pc, #356]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80ab 	beq.w	80051ec <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	e00d      	b.n	80050b8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800509c:	4956      	ldr	r1, [pc, #344]	@ (80051f8 <SYSVIEW_DeleteTask+0x174>)
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d008      	beq.n	80050c4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3301      	adds	r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	4b4e      	ldr	r3, [pc, #312]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d3ec      	bcc.n	800509c <SYSVIEW_DeleteTask+0x18>
 80050c2:	e000      	b.n	80050c6 <SYSVIEW_DeleteTask+0x42>
      break;
 80050c4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80050c6:	4b4b      	ldr	r3, [pc, #300]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d111      	bne.n	80050f6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4a46      	ldr	r2, [pc, #280]	@ (80051f8 <SYSVIEW_DeleteTask+0x174>)
 80050de:	4413      	add	r3, r2
 80050e0:	2214      	movs	r2, #20
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f001 fdbb 	bl	8006c60 <memset>
    _NumTasks--;
 80050ea:	4b42      	ldr	r3, [pc, #264]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	4a40      	ldr	r2, [pc, #256]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	e07b      	b.n	80051ee <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80050f6:	4b3f      	ldr	r3, [pc, #252]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d276      	bcs.n	80051ee <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005100:	4b3c      	ldr	r3, [pc, #240]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	1e5a      	subs	r2, r3, #1
 8005106:	493c      	ldr	r1, [pc, #240]	@ (80051f8 <SYSVIEW_DeleteTask+0x174>)
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	4838      	ldr	r0, [pc, #224]	@ (80051f8 <SYSVIEW_DeleteTask+0x174>)
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4403      	add	r3, r0
 8005122:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005124:	4b33      	ldr	r3, [pc, #204]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	1e5a      	subs	r2, r3, #1
 800512a:	4933      	ldr	r1, [pc, #204]	@ (80051f8 <SYSVIEW_DeleteTask+0x174>)
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	3304      	adds	r3, #4
 8005138:	6819      	ldr	r1, [r3, #0]
 800513a:	482f      	ldr	r0, [pc, #188]	@ (80051f8 <SYSVIEW_DeleteTask+0x174>)
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4403      	add	r3, r0
 8005148:	3304      	adds	r3, #4
 800514a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800514c:	4b29      	ldr	r3, [pc, #164]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	1e5a      	subs	r2, r3, #1
 8005152:	4929      	ldr	r1, [pc, #164]	@ (80051f8 <SYSVIEW_DeleteTask+0x174>)
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	3308      	adds	r3, #8
 8005160:	6819      	ldr	r1, [r3, #0]
 8005162:	4825      	ldr	r0, [pc, #148]	@ (80051f8 <SYSVIEW_DeleteTask+0x174>)
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4403      	add	r3, r0
 8005170:	3308      	adds	r3, #8
 8005172:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005174:	4b1f      	ldr	r3, [pc, #124]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	1e5a      	subs	r2, r3, #1
 800517a:	491f      	ldr	r1, [pc, #124]	@ (80051f8 <SYSVIEW_DeleteTask+0x174>)
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	330c      	adds	r3, #12
 8005188:	6819      	ldr	r1, [r3, #0]
 800518a:	481b      	ldr	r0, [pc, #108]	@ (80051f8 <SYSVIEW_DeleteTask+0x174>)
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4403      	add	r3, r0
 8005198:	330c      	adds	r3, #12
 800519a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800519c:	4b15      	ldr	r3, [pc, #84]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	1e5a      	subs	r2, r3, #1
 80051a2:	4915      	ldr	r1, [pc, #84]	@ (80051f8 <SYSVIEW_DeleteTask+0x174>)
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	3310      	adds	r3, #16
 80051b0:	6819      	ldr	r1, [r3, #0]
 80051b2:	4811      	ldr	r0, [pc, #68]	@ (80051f8 <SYSVIEW_DeleteTask+0x174>)
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4403      	add	r3, r0
 80051c0:	3310      	adds	r3, #16
 80051c2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80051c4:	4b0b      	ldr	r3, [pc, #44]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	1e5a      	subs	r2, r3, #1
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4a09      	ldr	r2, [pc, #36]	@ (80051f8 <SYSVIEW_DeleteTask+0x174>)
 80051d4:	4413      	add	r3, r2
 80051d6:	2214      	movs	r2, #20
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f001 fd40 	bl	8006c60 <memset>
    _NumTasks--;
 80051e0:	4b04      	ldr	r3, [pc, #16]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	4a03      	ldr	r2, [pc, #12]	@ (80051f4 <SYSVIEW_DeleteTask+0x170>)
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	e000      	b.n	80051ee <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80051ec:	bf00      	nop
  }
}
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	20003c08 	.word	0x20003c08
 80051f8:	20003b68 	.word	0x20003b68

080051fc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	@ 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800520a:	f107 0310 	add.w	r3, r7, #16
 800520e:	2218      	movs	r2, #24
 8005210:	2100      	movs	r1, #0
 8005212:	4618      	mov	r0, r3
 8005214:	f001 fd24 	bl	8006c60 <memset>
  TaskInfo.TaskID     = TaskID;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800522c:	f107 0310 	add.w	r3, r7, #16
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fec1 	bl	8005fb8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005236:	bf00      	nop
 8005238:	3728      	adds	r7, #40	@ 0x28
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005246:	4b25      	ldr	r3, [pc, #148]	@ (80052dc <_DoInit+0x9c>)
 8005248:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800524a:	22a8      	movs	r2, #168	@ 0xa8
 800524c:	2100      	movs	r1, #0
 800524e:	6838      	ldr	r0, [r7, #0]
 8005250:	f001 fd06 	bl	8006c60 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2203      	movs	r2, #3
 8005258:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2203      	movs	r2, #3
 800525e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	4a1f      	ldr	r2, [pc, #124]	@ (80052e0 <_DoInit+0xa0>)
 8005264:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	4a1e      	ldr	r2, [pc, #120]	@ (80052e4 <_DoInit+0xa4>)
 800526a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005272:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2200      	movs	r2, #0
 8005278:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2200      	movs	r2, #0
 800527e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2200      	movs	r2, #0
 8005284:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	4a15      	ldr	r2, [pc, #84]	@ (80052e0 <_DoInit+0xa0>)
 800528a:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	4a16      	ldr	r2, [pc, #88]	@ (80052e8 <_DoInit+0xa8>)
 8005290:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2210      	movs	r2, #16
 8005296:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2200      	movs	r2, #0
 80052a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80052aa:	2300      	movs	r3, #0
 80052ac:	607b      	str	r3, [r7, #4]
 80052ae:	e00c      	b.n	80052ca <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f1c3 030f 	rsb	r3, r3, #15
 80052b6:	4a0d      	ldr	r2, [pc, #52]	@ (80052ec <_DoInit+0xac>)
 80052b8:	5cd1      	ldrb	r1, [r2, r3]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4413      	add	r3, r2
 80052c0:	460a      	mov	r2, r1
 80052c2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3301      	adds	r3, #1
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b0f      	cmp	r3, #15
 80052ce:	d9ef      	bls.n	80052b0 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 80052d0:	bf00      	nop
 80052d2:	bf00      	nop
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20003c0c 	.word	0x20003c0c
 80052e0:	0800772c 	.word	0x0800772c
 80052e4:	20003cb4 	.word	0x20003cb4
 80052e8:	200040b4 	.word	0x200040b4
 80052ec:	08007834 	.word	0x08007834

080052f0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	@ 0x30
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80052fc:	4b3e      	ldr	r3, [pc, #248]	@ (80053f8 <SEGGER_RTT_ReadNoLock+0x108>)
 80052fe:	623b      	str	r3, [r7, #32]
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b53      	cmp	r3, #83	@ 0x53
 8005308:	d001      	beq.n	800530e <SEGGER_RTT_ReadNoLock+0x1e>
 800530a:	f7ff ff99 	bl	8005240 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4613      	mov	r3, r2
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	4413      	add	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	3360      	adds	r3, #96	@ 0x60
 800531a:	4a37      	ldr	r2, [pc, #220]	@ (80053f8 <SEGGER_RTT_ReadNoLock+0x108>)
 800531c:	4413      	add	r3, r2
 800531e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005330:	2300      	movs	r3, #0
 8005332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	429a      	cmp	r2, r3
 800533a:	d92b      	bls.n	8005394 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4293      	cmp	r3, r2
 800534c:	bf28      	it	cs
 800534e:	4613      	movcs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	4413      	add	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	6939      	ldr	r1, [r7, #16]
 8005360:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005362:	f001 fcb1 	bl	8006cc8 <memcpy>
    NumBytesRead += NumBytesRem;
 8005366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800536e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	4413      	add	r3, r2
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800537e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	4413      	add	r3, r2
 8005384:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800538c:	429a      	cmp	r2, r3
 800538e:	d101      	bne.n	8005394 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005390:	2300      	movs	r3, #0
 8005392:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4293      	cmp	r3, r2
 80053a2:	bf28      	it	cs
 80053a4:	4613      	movcs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d019      	beq.n	80053e2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b4:	4413      	add	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	6939      	ldr	r1, [r7, #16]
 80053bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053be:	f001 fc83 	bl	8006cc8 <memcpy>
    NumBytesRead += NumBytesRem;
 80053c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4413      	add	r3, r2
 80053c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80053ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	4413      	add	r3, r2
 80053d0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80053e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053ec:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80053ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3730      	adds	r7, #48	@ 0x30
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20003c0c 	.word	0x20003c0c

080053fc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800540a:	4b3c      	ldr	r3, [pc, #240]	@ (80054fc <SEGGER_RTT_AllocUpBuffer+0x100>)
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b53      	cmp	r3, #83	@ 0x53
 8005416:	d001      	beq.n	800541c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005418:	f7ff ff12 	bl	8005240 <_DoInit>
  SEGGER_RTT_LOCK();
 800541c:	f3ef 8311 	mrs	r3, BASEPRI
 8005420:	f04f 0120 	mov.w	r1, #32
 8005424:	f381 8811 	msr	BASEPRI, r1
 8005428:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800542a:	4b34      	ldr	r3, [pc, #208]	@ (80054fc <SEGGER_RTT_AllocUpBuffer+0x100>)
 800542c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005432:	6939      	ldr	r1, [r7, #16]
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	4613      	mov	r3, r2
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	4413      	add	r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	440b      	add	r3, r1
 8005442:	3304      	adds	r3, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d008      	beq.n	800545c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	3301      	adds	r3, #1
 800544e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	429a      	cmp	r2, r3
 8005458:	dbeb      	blt.n	8005432 <SEGGER_RTT_AllocUpBuffer+0x36>
 800545a:	e000      	b.n	800545e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800545c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	429a      	cmp	r2, r3
 8005466:	da3d      	bge.n	80054e4 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005468:	6939      	ldr	r1, [r7, #16]
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	4613      	mov	r3, r2
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	4413      	add	r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	440b      	add	r3, r1
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800547c:	6939      	ldr	r1, [r7, #16]
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	4613      	mov	r3, r2
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	4413      	add	r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	440b      	add	r3, r1
 800548c:	3304      	adds	r3, #4
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005492:	6939      	ldr	r1, [r7, #16]
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	4613      	mov	r3, r2
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	4413      	add	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	440b      	add	r3, r1
 80054a0:	3320      	adds	r3, #32
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80054a6:	6939      	ldr	r1, [r7, #16]
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	4613      	mov	r3, r2
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	4413      	add	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	440b      	add	r3, r1
 80054b4:	3328      	adds	r3, #40	@ 0x28
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80054ba:	6939      	ldr	r1, [r7, #16]
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	4613      	mov	r3, r2
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	4413      	add	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	440b      	add	r3, r1
 80054c8:	3324      	adds	r3, #36	@ 0x24
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80054ce:	6939      	ldr	r1, [r7, #16]
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	4613      	mov	r3, r2
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	4413      	add	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	440b      	add	r3, r1
 80054dc:	332c      	adds	r3, #44	@ 0x2c
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	e002      	b.n	80054ea <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 80054e4:	f04f 33ff 	mov.w	r3, #4294967295
 80054e8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80054f0:	69fb      	ldr	r3, [r7, #28]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3720      	adds	r7, #32
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20003c0c 	.word	0x20003c0c

08005500 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	@ 0x28
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800550e:	4b20      	ldr	r3, [pc, #128]	@ (8005590 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8005510:	623b      	str	r3, [r7, #32]
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b53      	cmp	r3, #83	@ 0x53
 800551a:	d001      	beq.n	8005520 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800551c:	f7ff fe90 	bl	8005240 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005520:	4b1b      	ldr	r3, [pc, #108]	@ (8005590 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8005522:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d82a      	bhi.n	8005580 <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 800552a:	f3ef 8311 	mrs	r3, BASEPRI
 800552e:	f04f 0120 	mov.w	r1, #32
 8005532:	f381 8811 	msr	BASEPRI, r1
 8005536:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4613      	mov	r3, r2
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	4413      	add	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	3360      	adds	r3, #96	@ 0x60
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	4413      	add	r3, r2
 8005548:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00e      	beq.n	800556e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2200      	movs	r2, #0
 8005566:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2200      	movs	r2, #0
 800556c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005572:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800557a:	2300      	movs	r3, #0
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
 800557e:	e002      	b.n	8005586 <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 8005580:	f04f 33ff 	mov.w	r3, #4294967295
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005588:	4618      	mov	r0, r3
 800558a:	3728      	adds	r7, #40	@ 0x28
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20003c0c 	.word	0x20003c0c

08005594 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d105      	bne.n	80055b2 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	60fa      	str	r2, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
 80055b0:	e022      	b.n	80055f8 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	60fa      	str	r2, [r7, #12]
 80055bc:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b80      	cmp	r3, #128	@ 0x80
 80055c2:	d90a      	bls.n	80055da <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80055c4:	2380      	movs	r3, #128	@ 0x80
 80055c6:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80055c8:	e007      	b.n	80055da <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	1c53      	adds	r3, r2, #1
 80055ce:	60bb      	str	r3, [r7, #8]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	1c59      	adds	r1, r3, #1
 80055d4:	60f9      	str	r1, [r7, #12]
 80055d6:	7812      	ldrb	r2, [r2, #0]
 80055d8:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	1e5a      	subs	r2, r3, #1
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <_EncodeStr+0x58>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1ee      	bne.n	80055ca <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80055f8:	68fb      	ldr	r3, [r7, #12]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3307      	adds	r3, #7
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr
	...

0800561c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005622:	4b34      	ldr	r3, [pc, #208]	@ (80056f4 <_HandleIncomingPacket+0xd8>)
 8005624:	7e1b      	ldrb	r3, [r3, #24]
 8005626:	4618      	mov	r0, r3
 8005628:	1cfb      	adds	r3, r7, #3
 800562a:	2201      	movs	r2, #1
 800562c:	4619      	mov	r1, r3
 800562e:	f7ff fe5f 	bl	80052f0 <SEGGER_RTT_ReadNoLock>
 8005632:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d057      	beq.n	80056ea <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	2b80      	cmp	r3, #128	@ 0x80
 800563e:	d031      	beq.n	80056a4 <_HandleIncomingPacket+0x88>
 8005640:	2b80      	cmp	r3, #128	@ 0x80
 8005642:	dc40      	bgt.n	80056c6 <_HandleIncomingPacket+0xaa>
 8005644:	2b07      	cmp	r3, #7
 8005646:	dc15      	bgt.n	8005674 <_HandleIncomingPacket+0x58>
 8005648:	2b00      	cmp	r3, #0
 800564a:	dd3c      	ble.n	80056c6 <_HandleIncomingPacket+0xaa>
 800564c:	3b01      	subs	r3, #1
 800564e:	2b06      	cmp	r3, #6
 8005650:	d839      	bhi.n	80056c6 <_HandleIncomingPacket+0xaa>
 8005652:	a201      	add	r2, pc, #4	@ (adr r2, 8005658 <_HandleIncomingPacket+0x3c>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	0800567b 	.word	0x0800567b
 800565c:	08005681 	.word	0x08005681
 8005660:	08005687 	.word	0x08005687
 8005664:	0800568d 	.word	0x0800568d
 8005668:	08005693 	.word	0x08005693
 800566c:	08005699 	.word	0x08005699
 8005670:	0800569f 	.word	0x0800569f
 8005674:	2b7f      	cmp	r3, #127	@ 0x7f
 8005676:	d033      	beq.n	80056e0 <_HandleIncomingPacket+0xc4>
 8005678:	e025      	b.n	80056c6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800567a:	f000 fb23 	bl	8005cc4 <SEGGER_SYSVIEW_Start>
      break;
 800567e:	e034      	b.n	80056ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005680:	f000 fbda 	bl	8005e38 <SEGGER_SYSVIEW_Stop>
      break;
 8005684:	e031      	b.n	80056ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005686:	f000 fdb3 	bl	80061f0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800568a:	e02e      	b.n	80056ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800568c:	f000 fd78 	bl	8006180 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005690:	e02b      	b.n	80056ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005692:	f000 fbf7 	bl	8005e84 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005696:	e028      	b.n	80056ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005698:	f001 f9ba 	bl	8006a10 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800569c:	e025      	b.n	80056ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800569e:	f001 f999 	bl	80069d4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80056a2:	e022      	b.n	80056ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80056a4:	4b13      	ldr	r3, [pc, #76]	@ (80056f4 <_HandleIncomingPacket+0xd8>)
 80056a6:	7e1b      	ldrb	r3, [r3, #24]
 80056a8:	4618      	mov	r0, r3
 80056aa:	1cfb      	adds	r3, r7, #3
 80056ac:	2201      	movs	r2, #1
 80056ae:	4619      	mov	r1, r3
 80056b0:	f7ff fe1e 	bl	80052f0 <SEGGER_RTT_ReadNoLock>
 80056b4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d013      	beq.n	80056e4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 f8fe 	bl	80068c0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80056c4:	e00e      	b.n	80056e4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	b25b      	sxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	da0c      	bge.n	80056e8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80056ce:	4b09      	ldr	r3, [pc, #36]	@ (80056f4 <_HandleIncomingPacket+0xd8>)
 80056d0:	7e1b      	ldrb	r3, [r3, #24]
 80056d2:	4618      	mov	r0, r3
 80056d4:	1cfb      	adds	r3, r7, #3
 80056d6:	2201      	movs	r2, #1
 80056d8:	4619      	mov	r1, r3
 80056da:	f7ff fe09 	bl	80052f0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80056de:	e003      	b.n	80056e8 <_HandleIncomingPacket+0xcc>
      break;
 80056e0:	bf00      	nop
 80056e2:	e002      	b.n	80056ea <_HandleIncomingPacket+0xce>
      break;
 80056e4:	bf00      	nop
 80056e6:	e000      	b.n	80056ea <_HandleIncomingPacket+0xce>
      break;
 80056e8:	bf00      	nop
    }
  }
}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	200046a8 	.word	0x200046a8

080056f8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08c      	sub	sp, #48	@ 0x30
 80056fc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80056fe:	2301      	movs	r3, #1
 8005700:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005702:	1d3b      	adds	r3, r7, #4
 8005704:	3301      	adds	r3, #1
 8005706:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800570c:	4b31      	ldr	r3, [pc, #196]	@ (80057d4 <_TrySendOverflowPacket+0xdc>)
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005712:	e00b      	b.n	800572c <_TrySendOverflowPacket+0x34>
 8005714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005716:	b2da      	uxtb	r2, r3
 8005718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571a:	1c59      	adds	r1, r3, #1
 800571c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800571e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005728:	09db      	lsrs	r3, r3, #7
 800572a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800572c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005730:	d8f0      	bhi.n	8005714 <_TrySendOverflowPacket+0x1c>
 8005732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]
 800573e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005740:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005742:	4b25      	ldr	r3, [pc, #148]	@ (80057d8 <_TrySendOverflowPacket+0xe0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005748:	4b22      	ldr	r3, [pc, #136]	@ (80057d4 <_TrySendOverflowPacket+0xdc>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	623b      	str	r3, [r7, #32]
 800575a:	e00b      	b.n	8005774 <_TrySendOverflowPacket+0x7c>
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	b2da      	uxtb	r2, r3
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	1c59      	adds	r1, r3, #1
 8005764:	6279      	str	r1, [r7, #36]	@ 0x24
 8005766:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	09db      	lsrs	r3, r3, #7
 8005772:	623b      	str	r3, [r7, #32]
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	2b7f      	cmp	r3, #127	@ 0x7f
 8005778:	d8f0      	bhi.n	800575c <_TrySendOverflowPacket+0x64>
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005780:	6a3a      	ldr	r2, [r7, #32]
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800578a:	4b12      	ldr	r3, [pc, #72]	@ (80057d4 <_TrySendOverflowPacket+0xdc>)
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	4618      	mov	r0, r3
 8005790:	1d3b      	adds	r3, r7, #4
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	461a      	mov	r2, r3
 8005798:	1d3b      	adds	r3, r7, #4
 800579a:	4619      	mov	r1, r3
 800579c:	f7fa fcd8 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80057a0:	4603      	mov	r3, r0
 80057a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80057aa:	4a0a      	ldr	r2, [pc, #40]	@ (80057d4 <_TrySendOverflowPacket+0xdc>)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80057b0:	4b08      	ldr	r3, [pc, #32]	@ (80057d4 <_TrySendOverflowPacket+0xdc>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	4b06      	ldr	r3, [pc, #24]	@ (80057d4 <_TrySendOverflowPacket+0xdc>)
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	e004      	b.n	80057c8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80057be:	4b05      	ldr	r3, [pc, #20]	@ (80057d4 <_TrySendOverflowPacket+0xdc>)
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	3301      	adds	r3, #1
 80057c4:	4a03      	ldr	r2, [pc, #12]	@ (80057d4 <_TrySendOverflowPacket+0xdc>)
 80057c6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80057c8:	693b      	ldr	r3, [r7, #16]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3730      	adds	r7, #48	@ 0x30
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	200046a8 	.word	0x200046a8
 80057d8:	e0001004 	.word	0xe0001004

080057dc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	@ 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80057e8:	4b98      	ldr	r3, [pc, #608]	@ (8005a4c <_SendPacket+0x270>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d010      	beq.n	8005812 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80057f0:	4b96      	ldr	r3, [pc, #600]	@ (8005a4c <_SendPacket+0x270>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 812d 	beq.w	8005a54 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80057fa:	4b94      	ldr	r3, [pc, #592]	@ (8005a4c <_SendPacket+0x270>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d109      	bne.n	8005816 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005802:	f7ff ff79 	bl	80056f8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005806:	4b91      	ldr	r3, [pc, #580]	@ (8005a4c <_SendPacket+0x270>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b01      	cmp	r3, #1
 800580c:	f040 8124 	bne.w	8005a58 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005810:	e001      	b.n	8005816 <_SendPacket+0x3a>
    goto Send;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <_SendPacket+0x3c>
Send:
 8005816:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b1f      	cmp	r3, #31
 800581c:	d809      	bhi.n	8005832 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800581e:	4b8b      	ldr	r3, [pc, #556]	@ (8005a4c <_SendPacket+0x270>)
 8005820:	69da      	ldr	r2, [r3, #28]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	fa22 f303 	lsr.w	r3, r2, r3
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	f040 8115 	bne.w	8005a5c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b17      	cmp	r3, #23
 8005836:	d807      	bhi.n	8005848 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3b01      	subs	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	e0c4      	b.n	80059d2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b7f      	cmp	r3, #127	@ 0x7f
 8005854:	d912      	bls.n	800587c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	09da      	lsrs	r2, r3, #7
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3b01      	subs	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	3a01      	subs	r2, #1
 800586e:	60fa      	str	r2, [r7, #12]
 8005870:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005874:	b2da      	uxtb	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	e006      	b.n	800588a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3b01      	subs	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	b2da      	uxtb	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b7e      	cmp	r3, #126	@ 0x7e
 800588e:	d807      	bhi.n	80058a0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3b01      	subs	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	e098      	b.n	80059d2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058a6:	d212      	bcs.n	80058ce <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	09da      	lsrs	r2, r3, #7
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	3a01      	subs	r2, #1
 80058c0:	60fa      	str	r2, [r7, #12]
 80058c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	e081      	b.n	80059d2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058d4:	d21d      	bcs.n	8005912 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	0b9a      	lsrs	r2, r3, #14
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3b01      	subs	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	09db      	lsrs	r3, r3, #7
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	3a01      	subs	r2, #1
 80058f0:	60fa      	str	r2, [r7, #12]
 80058f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	3a01      	subs	r2, #1
 8005904:	60fa      	str	r2, [r7, #12]
 8005906:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800590a:	b2da      	uxtb	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	701a      	strb	r2, [r3, #0]
 8005910:	e05f      	b.n	80059d2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005918:	d228      	bcs.n	800596c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	0d5a      	lsrs	r2, r3, #21
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3b01      	subs	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	0b9b      	lsrs	r3, r3, #14
 800592e:	b2db      	uxtb	r3, r3
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	3a01      	subs	r2, #1
 8005934:	60fa      	str	r2, [r7, #12]
 8005936:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800593a:	b2da      	uxtb	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	09db      	lsrs	r3, r3, #7
 8005944:	b2db      	uxtb	r3, r3
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	3a01      	subs	r2, #1
 800594a:	60fa      	str	r2, [r7, #12]
 800594c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005950:	b2da      	uxtb	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	3a01      	subs	r2, #1
 800595e:	60fa      	str	r2, [r7, #12]
 8005960:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005964:	b2da      	uxtb	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	e032      	b.n	80059d2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	0f1a      	lsrs	r2, r3, #28
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3b01      	subs	r3, #1
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	0d5b      	lsrs	r3, r3, #21
 8005980:	b2db      	uxtb	r3, r3
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	3a01      	subs	r2, #1
 8005986:	60fa      	str	r2, [r7, #12]
 8005988:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800598c:	b2da      	uxtb	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	0b9b      	lsrs	r3, r3, #14
 8005996:	b2db      	uxtb	r3, r3
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	3a01      	subs	r2, #1
 800599c:	60fa      	str	r2, [r7, #12]
 800599e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	09db      	lsrs	r3, r3, #7
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	3a01      	subs	r2, #1
 80059b2:	60fa      	str	r2, [r7, #12]
 80059b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	3a01      	subs	r2, #1
 80059c6:	60fa      	str	r2, [r7, #12]
 80059c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80059d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005a50 <_SendPacket+0x274>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80059d8:	4b1c      	ldr	r3, [pc, #112]	@ (8005a4c <_SendPacket+0x270>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	623b      	str	r3, [r7, #32]
 80059ea:	e00b      	b.n	8005a04 <_SendPacket+0x228>
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	1c59      	adds	r1, r3, #1
 80059f4:	6279      	str	r1, [r7, #36]	@ 0x24
 80059f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	09db      	lsrs	r3, r3, #7
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a08:	d8f0      	bhi.n	80059ec <_SendPacket+0x210>
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a10:	6a3a      	ldr	r2, [r7, #32]
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a4c <_SendPacket+0x270>)
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	68f9      	ldr	r1, [r7, #12]
 8005a2a:	f7fa fb91 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a2e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a36:	4a05      	ldr	r2, [pc, #20]	@ (8005a4c <_SendPacket+0x270>)
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	60d3      	str	r3, [r2, #12]
 8005a3c:	e00f      	b.n	8005a5e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005a3e:	4b03      	ldr	r3, [pc, #12]	@ (8005a4c <_SendPacket+0x270>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	3301      	adds	r3, #1
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	4b01      	ldr	r3, [pc, #4]	@ (8005a4c <_SendPacket+0x270>)
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	e008      	b.n	8005a5e <_SendPacket+0x282>
 8005a4c:	200046a8 	.word	0x200046a8
 8005a50:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005a54:	bf00      	nop
 8005a56:	e002      	b.n	8005a5e <_SendPacket+0x282>
      goto SendDone;
 8005a58:	bf00      	nop
 8005a5a:	e000      	b.n	8005a5e <_SendPacket+0x282>
      goto SendDone;
 8005a5c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005a5e:	4b14      	ldr	r3, [pc, #80]	@ (8005ab0 <_SendPacket+0x2d4>)
 8005a60:	7e1b      	ldrb	r3, [r3, #24]
 8005a62:	4619      	mov	r1, r3
 8005a64:	4a13      	ldr	r2, [pc, #76]	@ (8005ab4 <_SendPacket+0x2d8>)
 8005a66:	460b      	mov	r3, r1
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	440b      	add	r3, r1
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	336c      	adds	r3, #108	@ 0x6c
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab0 <_SendPacket+0x2d4>)
 8005a76:	7e1b      	ldrb	r3, [r3, #24]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	490e      	ldr	r1, [pc, #56]	@ (8005ab4 <_SendPacket+0x2d8>)
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	4403      	add	r3, r0
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	440b      	add	r3, r1
 8005a86:	3370      	adds	r3, #112	@ 0x70
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d00b      	beq.n	8005aa6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005a8e:	4b08      	ldr	r3, [pc, #32]	@ (8005ab0 <_SendPacket+0x2d4>)
 8005a90:	789b      	ldrb	r3, [r3, #2]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d107      	bne.n	8005aa6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005a96:	4b06      	ldr	r3, [pc, #24]	@ (8005ab0 <_SendPacket+0x2d4>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005a9c:	f7ff fdbe 	bl	800561c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005aa0:	4b03      	ldr	r3, [pc, #12]	@ (8005ab0 <_SendPacket+0x2d4>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005aa6:	bf00      	nop
 8005aa8:	3728      	adds	r7, #40	@ 0x28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	200046a8 	.word	0x200046a8
 8005ab4:	20003c0c 	.word	0x20003c0c

08005ab8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005acc:	4917      	ldr	r1, [pc, #92]	@ (8005b2c <SEGGER_SYSVIEW_Init+0x74>)
 8005ace:	4818      	ldr	r0, [pc, #96]	@ (8005b30 <SEGGER_SYSVIEW_Init+0x78>)
 8005ad0:	f7ff fc94 	bl	80053fc <SEGGER_RTT_AllocUpBuffer>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	4b16      	ldr	r3, [pc, #88]	@ (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ada:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005adc:	4b15      	ldr	r3, [pc, #84]	@ (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ade:	785a      	ldrb	r2, [r3, #1]
 8005ae0:	4b14      	ldr	r3, [pc, #80]	@ (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ae2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ae4:	4b13      	ldr	r3, [pc, #76]	@ (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ae6:	7e1b      	ldrb	r3, [r3, #24]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	2308      	movs	r3, #8
 8005af0:	4a11      	ldr	r2, [pc, #68]	@ (8005b38 <SEGGER_SYSVIEW_Init+0x80>)
 8005af2:	490f      	ldr	r1, [pc, #60]	@ (8005b30 <SEGGER_SYSVIEW_Init+0x78>)
 8005af4:	f7ff fd04 	bl	8005500 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005af8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005afe:	4b0f      	ldr	r3, [pc, #60]	@ (8005b3c <SEGGER_SYSVIEW_Init+0x84>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a0c      	ldr	r2, [pc, #48]	@ (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b04:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005b06:	4a0b      	ldr	r2, [pc, #44]	@ (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005b0c:	4a09      	ldr	r2, [pc, #36]	@ (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005b12:	4a08      	ldr	r2, [pc, #32]	@ (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005b18:	4a06      	ldr	r2, [pc, #24]	@ (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005b1e:	4b05      	ldr	r3, [pc, #20]	@ (8005b34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	200040c4 	.word	0x200040c4
 8005b30:	08007740 	.word	0x08007740
 8005b34:	200046a8 	.word	0x200046a8
 8005b38:	200046a0 	.word	0x200046a0
 8005b3c:	e0001004 	.word	0xe0001004

08005b40 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005b48:	4a03      	ldr	r2, [pc, #12]	@ (8005b58 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6113      	str	r3, [r2, #16]
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr
 8005b58:	200046a8 	.word	0x200046a8

08005b5c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b64:	f3ef 8311 	mrs	r3, BASEPRI
 8005b68:	f04f 0120 	mov.w	r1, #32
 8005b6c:	f381 8811 	msr	BASEPRI, r1
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	4808      	ldr	r0, [pc, #32]	@ (8005b94 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005b74:	f7ff fd46 	bl	8005604 <_PreparePacket>
 8005b78:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	68b8      	ldr	r0, [r7, #8]
 8005b80:	f7ff fe2c 	bl	80057dc <_SendPacket>
  RECORD_END();
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f383 8811 	msr	BASEPRI, r3
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	200046d8 	.word	0x200046d8

08005b98 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ba6:	f04f 0120 	mov.w	r1, #32
 8005baa:	f381 8811 	msr	BASEPRI, r1
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	4816      	ldr	r0, [pc, #88]	@ (8005c0c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005bb2:	f7ff fd27 	bl	8005604 <_PreparePacket>
 8005bb6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	61fb      	str	r3, [r7, #28]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	e00b      	b.n	8005bde <SEGGER_SYSVIEW_RecordU32+0x46>
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	1c59      	adds	r1, r3, #1
 8005bce:	61f9      	str	r1, [r7, #28]
 8005bd0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	09db      	lsrs	r3, r3, #7
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005be2:	d8f0      	bhi.n	8005bc6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	61fa      	str	r2, [r7, #28]
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	6938      	ldr	r0, [r7, #16]
 8005bfa:	f7ff fdef 	bl	80057dc <_SendPacket>
  RECORD_END();
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f383 8811 	msr	BASEPRI, r3
}
 8005c04:	bf00      	nop
 8005c06:	3720      	adds	r7, #32
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	200046d8 	.word	0x200046d8

08005c10 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08c      	sub	sp, #48	@ 0x30
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c20:	f04f 0120 	mov.w	r1, #32
 8005c24:	f381 8811 	msr	BASEPRI, r1
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	4825      	ldr	r0, [pc, #148]	@ (8005cc0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005c2c:	f7ff fcea 	bl	8005604 <_PreparePacket>
 8005c30:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c3e:	e00b      	b.n	8005c58 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c46:	1c59      	adds	r1, r3, #1
 8005c48:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005c4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c54:	09db      	lsrs	r3, r3, #7
 8005c56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c5c:	d8f0      	bhi.n	8005c40 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	623b      	str	r3, [r7, #32]
 8005c76:	e00b      	b.n	8005c90 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	1c59      	adds	r1, r3, #1
 8005c80:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	09db      	lsrs	r3, r3, #7
 8005c8e:	623b      	str	r3, [r7, #32]
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c94:	d8f0      	bhi.n	8005c78 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c9c:	6a3a      	ldr	r2, [r7, #32]
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	6979      	ldr	r1, [r7, #20]
 8005caa:	69b8      	ldr	r0, [r7, #24]
 8005cac:	f7ff fd96 	bl	80057dc <_SendPacket>
  RECORD_END();
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f383 8811 	msr	BASEPRI, r3
}
 8005cb6:	bf00      	nop
 8005cb8:	3730      	adds	r7, #48	@ 0x30
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	200046d8 	.word	0x200046d8

08005cc4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08c      	sub	sp, #48	@ 0x30
 8005cc8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005cca:	4b58      	ldr	r3, [pc, #352]	@ (8005e2c <SEGGER_SYSVIEW_Start+0x168>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005cd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd4:	f04f 0120 	mov.w	r1, #32
 8005cd8:	f381 8811 	msr	BASEPRI, r1
 8005cdc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005cde:	4b53      	ldr	r3, [pc, #332]	@ (8005e2c <SEGGER_SYSVIEW_Start+0x168>)
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	220a      	movs	r2, #10
 8005ce4:	4952      	ldr	r1, [pc, #328]	@ (8005e30 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fa fa32 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005cf2:	200a      	movs	r0, #10
 8005cf4:	f7ff ff32 	bl	8005b5c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cf8:	f3ef 8311 	mrs	r3, BASEPRI
 8005cfc:	f04f 0120 	mov.w	r1, #32
 8005d00:	f381 8811 	msr	BASEPRI, r1
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	484b      	ldr	r0, [pc, #300]	@ (8005e34 <SEGGER_SYSVIEW_Start+0x170>)
 8005d08:	f7ff fc7c 	bl	8005604 <_PreparePacket>
 8005d0c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d16:	4b45      	ldr	r3, [pc, #276]	@ (8005e2c <SEGGER_SYSVIEW_Start+0x168>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d1c:	e00b      	b.n	8005d36 <SEGGER_SYSVIEW_Start+0x72>
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d24:	1c59      	adds	r1, r3, #1
 8005d26:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d32:	09db      	lsrs	r3, r3, #7
 8005d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d38:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d3a:	d8f0      	bhi.n	8005d1e <SEGGER_SYSVIEW_Start+0x5a>
 8005d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	701a      	strb	r2, [r3, #0]
 8005d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d50:	4b36      	ldr	r3, [pc, #216]	@ (8005e2c <SEGGER_SYSVIEW_Start+0x168>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	623b      	str	r3, [r7, #32]
 8005d56:	e00b      	b.n	8005d70 <SEGGER_SYSVIEW_Start+0xac>
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	09db      	lsrs	r3, r3, #7
 8005d6e:	623b      	str	r3, [r7, #32]
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d74:	d8f0      	bhi.n	8005d58 <SEGGER_SYSVIEW_Start+0x94>
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d7c:	6a3a      	ldr	r2, [r7, #32]
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	61fb      	str	r3, [r7, #28]
 8005d8a:	4b28      	ldr	r3, [pc, #160]	@ (8005e2c <SEGGER_SYSVIEW_Start+0x168>)
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	61bb      	str	r3, [r7, #24]
 8005d90:	e00b      	b.n	8005daa <SEGGER_SYSVIEW_Start+0xe6>
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	1c59      	adds	r1, r3, #1
 8005d9a:	61f9      	str	r1, [r7, #28]
 8005d9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	09db      	lsrs	r3, r3, #7
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dae:	d8f0      	bhi.n	8005d92 <SEGGER_SYSVIEW_Start+0xce>
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	61fa      	str	r2, [r7, #28]
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	e00b      	b.n	8005de2 <SEGGER_SYSVIEW_Start+0x11e>
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	1c59      	adds	r1, r3, #1
 8005dd2:	6179      	str	r1, [r7, #20]
 8005dd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	09db      	lsrs	r3, r3, #7
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005de6:	d8f0      	bhi.n	8005dca <SEGGER_SYSVIEW_Start+0x106>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	617a      	str	r2, [r7, #20]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005df8:	2218      	movs	r2, #24
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff fced 	bl	80057dc <_SendPacket>
      RECORD_END();
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005e08:	4b08      	ldr	r3, [pc, #32]	@ (8005e2c <SEGGER_SYSVIEW_Start+0x168>)
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005e10:	4b06      	ldr	r3, [pc, #24]	@ (8005e2c <SEGGER_SYSVIEW_Start+0x168>)
 8005e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e14:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005e16:	f000 f9eb 	bl	80061f0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005e1a:	f000 f9b1 	bl	8006180 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005e1e:	f000 fdf7 	bl	8006a10 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005e22:	bf00      	nop
 8005e24:	3730      	adds	r7, #48	@ 0x30
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200046a8 	.word	0x200046a8
 8005e30:	08007848 	.word	0x08007848
 8005e34:	200046d8 	.word	0x200046d8

08005e38 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e3e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e42:	f04f 0120 	mov.w	r1, #32
 8005e46:	f381 8811 	msr	BASEPRI, r1
 8005e4a:	607b      	str	r3, [r7, #4]
 8005e4c:	480b      	ldr	r0, [pc, #44]	@ (8005e7c <SEGGER_SYSVIEW_Stop+0x44>)
 8005e4e:	f7ff fbd9 	bl	8005604 <_PreparePacket>
 8005e52:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005e54:	4b0a      	ldr	r3, [pc, #40]	@ (8005e80 <SEGGER_SYSVIEW_Stop+0x48>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d007      	beq.n	8005e6c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005e5c:	220b      	movs	r2, #11
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6838      	ldr	r0, [r7, #0]
 8005e62:	f7ff fcbb 	bl	80057dc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005e66:	4b06      	ldr	r3, [pc, #24]	@ (8005e80 <SEGGER_SYSVIEW_Stop+0x48>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f383 8811 	msr	BASEPRI, r3
}
 8005e72:	bf00      	nop
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	200046d8 	.word	0x200046d8
 8005e80:	200046a8 	.word	0x200046a8

08005e84 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08c      	sub	sp, #48	@ 0x30
 8005e88:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e8e:	f04f 0120 	mov.w	r1, #32
 8005e92:	f381 8811 	msr	BASEPRI, r1
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	4845      	ldr	r0, [pc, #276]	@ (8005fb0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005e9a:	f7ff fbb3 	bl	8005604 <_PreparePacket>
 8005e9e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ea8:	4b42      	ldr	r3, [pc, #264]	@ (8005fb4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eae:	e00b      	b.n	8005ec8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb6:	1c59      	adds	r1, r3, #1
 8005eb8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005eba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec4:	09db      	lsrs	r3, r3, #7
 8005ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ecc:	d8f0      	bhi.n	8005eb0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ed4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005edc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ee2:	4b34      	ldr	r3, [pc, #208]	@ (8005fb4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	623b      	str	r3, [r7, #32]
 8005ee8:	e00b      	b.n	8005f02 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	1c59      	adds	r1, r3, #1
 8005ef2:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ef4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	09db      	lsrs	r3, r3, #7
 8005f00:	623b      	str	r3, [r7, #32]
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f06:	d8f0      	bhi.n	8005eea <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f0e:	6a3a      	ldr	r2, [r7, #32]
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	61fb      	str	r3, [r7, #28]
 8005f1c:	4b25      	ldr	r3, [pc, #148]	@ (8005fb4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	61bb      	str	r3, [r7, #24]
 8005f22:	e00b      	b.n	8005f3c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	1c59      	adds	r1, r3, #1
 8005f2c:	61f9      	str	r1, [r7, #28]
 8005f2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	09db      	lsrs	r3, r3, #7
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f40:	d8f0      	bhi.n	8005f24 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	61fa      	str	r2, [r7, #28]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	2300      	movs	r3, #0
 8005f58:	613b      	str	r3, [r7, #16]
 8005f5a:	e00b      	b.n	8005f74 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	1c59      	adds	r1, r3, #1
 8005f64:	6179      	str	r1, [r7, #20]
 8005f66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	09db      	lsrs	r3, r3, #7
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f78:	d8f0      	bhi.n	8005f5c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	617a      	str	r2, [r7, #20]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005f8a:	2218      	movs	r2, #24
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	68b8      	ldr	r0, [r7, #8]
 8005f90:	f7ff fc24 	bl	80057dc <_SendPacket>
  RECORD_END();
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005f9a:	4b06      	ldr	r3, [pc, #24]	@ (8005fb4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005fa2:	4b04      	ldr	r3, [pc, #16]	@ (8005fb4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	4798      	blx	r3
  }
}
 8005fa8:	bf00      	nop
 8005faa:	3730      	adds	r7, #48	@ 0x30
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	200046d8 	.word	0x200046d8
 8005fb4:	200046a8 	.word	0x200046a8

08005fb8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b092      	sub	sp, #72	@ 0x48
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005fc0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc4:	f04f 0120 	mov.w	r1, #32
 8005fc8:	f381 8811 	msr	BASEPRI, r1
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	486a      	ldr	r0, [pc, #424]	@ (8006178 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005fd0:	f7ff fb18 	bl	8005604 <_PreparePacket>
 8005fd4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b66      	ldr	r3, [pc, #408]	@ (800617c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fea:	e00b      	b.n	8006004 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ff2:	1c59      	adds	r1, r3, #1
 8005ff4:	6479      	str	r1, [r7, #68]	@ 0x44
 8005ff6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006000:	09db      	lsrs	r3, r3, #7
 8006002:	643b      	str	r3, [r7, #64]	@ 0x40
 8006004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006006:	2b7f      	cmp	r3, #127	@ 0x7f
 8006008:	d8f0      	bhi.n	8005fec <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800600a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006010:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006018:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006024:	e00b      	b.n	800603e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006028:	b2da      	uxtb	r2, r3
 800602a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800602c:	1c59      	adds	r1, r3, #1
 800602e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006030:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603a:	09db      	lsrs	r3, r3, #7
 800603c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800603e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006040:	2b7f      	cmp	r3, #127	@ 0x7f
 8006042:	d8f0      	bhi.n	8006026 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800604a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006052:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	4619      	mov	r1, r3
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff fa99 	bl	8005594 <_EncodeStr>
 8006062:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006064:	2209      	movs	r2, #9
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	6938      	ldr	r0, [r7, #16]
 800606a:	f7ff fbb7 	bl	80057dc <_SendPacket>
  //
  pPayload = pPayloadStart;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	637b      	str	r3, [r7, #52]	@ 0x34
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4b40      	ldr	r3, [pc, #256]	@ (800617c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	633b      	str	r3, [r7, #48]	@ 0x30
 8006082:	e00b      	b.n	800609c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006086:	b2da      	uxtb	r2, r3
 8006088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608a:	1c59      	adds	r1, r3, #1
 800608c:	6379      	str	r1, [r7, #52]	@ 0x34
 800608e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006098:	09db      	lsrs	r3, r3, #7
 800609a:	633b      	str	r3, [r7, #48]	@ 0x30
 800609c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609e:	2b7f      	cmp	r3, #127	@ 0x7f
 80060a0:	d8f0      	bhi.n	8006084 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80060a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80060a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060bc:	e00b      	b.n	80060d6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80060be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c4:	1c59      	adds	r1, r3, #1
 80060c6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80060c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d2:	09db      	lsrs	r3, r3, #7
 80060d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80060da:	d8f0      	bhi.n	80060be <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80060dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	623b      	str	r3, [r7, #32]
 80060f6:	e00b      	b.n	8006110 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	1c59      	adds	r1, r3, #1
 8006100:	6279      	str	r1, [r7, #36]	@ 0x24
 8006102:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	09db      	lsrs	r3, r3, #7
 800610e:	623b      	str	r3, [r7, #32]
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	2b7f      	cmp	r3, #127	@ 0x7f
 8006114:	d8f0      	bhi.n	80060f8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	627a      	str	r2, [r7, #36]	@ 0x24
 800611c:	6a3a      	ldr	r2, [r7, #32]
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	61fb      	str	r3, [r7, #28]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e00b      	b.n	800614a <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	b2da      	uxtb	r2, r3
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	1c59      	adds	r1, r3, #1
 800613a:	61f9      	str	r1, [r7, #28]
 800613c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	09db      	lsrs	r3, r3, #7
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b7f      	cmp	r3, #127	@ 0x7f
 800614e:	d8f0      	bhi.n	8006132 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	61fa      	str	r2, [r7, #28]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006160:	2215      	movs	r2, #21
 8006162:	68f9      	ldr	r1, [r7, #12]
 8006164:	6938      	ldr	r0, [r7, #16]
 8006166:	f7ff fb39 	bl	80057dc <_SendPacket>
  RECORD_END();
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f383 8811 	msr	BASEPRI, r3
}
 8006170:	bf00      	nop
 8006172:	3748      	adds	r7, #72	@ 0x48
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	200046d8 	.word	0x200046d8
 800617c:	200046a8 	.word	0x200046a8

08006180 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006184:	4b07      	ldr	r3, [pc, #28]	@ (80061a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d008      	beq.n	800619e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800618c:	4b05      	ldr	r3, [pc, #20]	@ (80061a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006196:	4b03      	ldr	r3, [pc, #12]	@ (80061a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	4798      	blx	r3
  }
}
 800619e:	bf00      	nop
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	200046a8 	.word	0x200046a8

080061a8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061b0:	f3ef 8311 	mrs	r3, BASEPRI
 80061b4:	f04f 0120 	mov.w	r1, #32
 80061b8:	f381 8811 	msr	BASEPRI, r1
 80061bc:	617b      	str	r3, [r7, #20]
 80061be:	480b      	ldr	r0, [pc, #44]	@ (80061ec <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80061c0:	f7ff fa20 	bl	8005604 <_PreparePacket>
 80061c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061c6:	2280      	movs	r2, #128	@ 0x80
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	6938      	ldr	r0, [r7, #16]
 80061cc:	f7ff f9e2 	bl	8005594 <_EncodeStr>
 80061d0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80061d2:	220e      	movs	r2, #14
 80061d4:	68f9      	ldr	r1, [r7, #12]
 80061d6:	6938      	ldr	r0, [r7, #16]
 80061d8:	f7ff fb00 	bl	80057dc <_SendPacket>
  RECORD_END();
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f383 8811 	msr	BASEPRI, r3
}
 80061e2:	bf00      	nop
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	200046d8 	.word	0x200046d8

080061f0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80061f0:	b590      	push	{r4, r7, lr}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80061f6:	4b15      	ldr	r3, [pc, #84]	@ (800624c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d01a      	beq.n	8006234 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80061fe:	4b13      	ldr	r3, [pc, #76]	@ (800624c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d015      	beq.n	8006234 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006208:	4b10      	ldr	r3, [pc, #64]	@ (800624c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4798      	blx	r3
 8006210:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006214:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006216:	e9d7 0100 	ldrd	r0, r1, [r7]
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	000a      	movs	r2, r1
 8006224:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006226:	4613      	mov	r3, r2
 8006228:	461a      	mov	r2, r3
 800622a:	4621      	mov	r1, r4
 800622c:	200d      	movs	r0, #13
 800622e:	f7ff fcef 	bl	8005c10 <SEGGER_SYSVIEW_RecordU32x2>
 8006232:	e006      	b.n	8006242 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006234:	4b06      	ldr	r3, [pc, #24]	@ (8006250 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4619      	mov	r1, r3
 800623a:	200c      	movs	r0, #12
 800623c:	f7ff fcac 	bl	8005b98 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	bd90      	pop	{r4, r7, pc}
 800624a:	bf00      	nop
 800624c:	200046a8 	.word	0x200046a8
 8006250:	e0001004 	.word	0xe0001004

08006254 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800625a:	f3ef 8311 	mrs	r3, BASEPRI
 800625e:	f04f 0120 	mov.w	r1, #32
 8006262:	f381 8811 	msr	BASEPRI, r1
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	4819      	ldr	r0, [pc, #100]	@ (80062d0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800626a:	f7ff f9cb 	bl	8005604 <_PreparePacket>
 800626e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006274:	4b17      	ldr	r3, [pc, #92]	@ (80062d4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	e00b      	b.n	80062a0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	b2da      	uxtb	r2, r3
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	1c59      	adds	r1, r3, #1
 8006290:	6179      	str	r1, [r7, #20]
 8006292:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	09db      	lsrs	r3, r3, #7
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062a4:	d8f0      	bhi.n	8006288 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	617a      	str	r2, [r7, #20]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80062b6:	2202      	movs	r2, #2
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	68b8      	ldr	r0, [r7, #8]
 80062bc:	f7ff fa8e 	bl	80057dc <_SendPacket>
  RECORD_END();
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f383 8811 	msr	BASEPRI, r3
}
 80062c6:	bf00      	nop
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	200046d8 	.word	0x200046d8
 80062d4:	e000ed04 	.word	0xe000ed04

080062d8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062de:	f3ef 8311 	mrs	r3, BASEPRI
 80062e2:	f04f 0120 	mov.w	r1, #32
 80062e6:	f381 8811 	msr	BASEPRI, r1
 80062ea:	607b      	str	r3, [r7, #4]
 80062ec:	4807      	ldr	r0, [pc, #28]	@ (800630c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80062ee:	f7ff f989 	bl	8005604 <_PreparePacket>
 80062f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80062f4:	2203      	movs	r2, #3
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6838      	ldr	r0, [r7, #0]
 80062fa:	f7ff fa6f 	bl	80057dc <_SendPacket>
  RECORD_END();
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f383 8811 	msr	BASEPRI, r3
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	200046d8 	.word	0x200046d8

08006310 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006316:	f3ef 8311 	mrs	r3, BASEPRI
 800631a:	f04f 0120 	mov.w	r1, #32
 800631e:	f381 8811 	msr	BASEPRI, r1
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	4807      	ldr	r0, [pc, #28]	@ (8006344 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006326:	f7ff f96d 	bl	8005604 <_PreparePacket>
 800632a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800632c:	2212      	movs	r2, #18
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6838      	ldr	r0, [r7, #0]
 8006332:	f7ff fa53 	bl	80057dc <_SendPacket>
  RECORD_END();
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f383 8811 	msr	BASEPRI, r3
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	200046d8 	.word	0x200046d8

08006348 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006350:	f3ef 8311 	mrs	r3, BASEPRI
 8006354:	f04f 0120 	mov.w	r1, #32
 8006358:	f381 8811 	msr	BASEPRI, r1
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	4817      	ldr	r0, [pc, #92]	@ (80063bc <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006360:	f7ff f950 	bl	8005604 <_PreparePacket>
 8006364:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	61fb      	str	r3, [r7, #28]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	61bb      	str	r3, [r7, #24]
 8006372:	e00b      	b.n	800638c <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	1c59      	adds	r1, r3, #1
 800637c:	61f9      	str	r1, [r7, #28]
 800637e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	09db      	lsrs	r3, r3, #7
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006390:	d8f0      	bhi.n	8006374 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	61fa      	str	r2, [r7, #28]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80063a2:	221c      	movs	r2, #28
 80063a4:	68f9      	ldr	r1, [r7, #12]
 80063a6:	6938      	ldr	r0, [r7, #16]
 80063a8:	f7ff fa18 	bl	80057dc <_SendPacket>
  RECORD_END();
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f383 8811 	msr	BASEPRI, r3
}
 80063b2:	bf00      	nop
 80063b4:	3720      	adds	r7, #32
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	200046d8 	.word	0x200046d8

080063c0 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08a      	sub	sp, #40	@ 0x28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80063ca:	f3ef 8311 	mrs	r3, BASEPRI
 80063ce:	f04f 0120 	mov.w	r1, #32
 80063d2:	f381 8811 	msr	BASEPRI, r1
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	4824      	ldr	r0, [pc, #144]	@ (800646c <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 80063da:	f7ff f913 	bl	8005604 <_PreparePacket>
 80063de:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	623b      	str	r3, [r7, #32]
 80063ec:	e00b      	b.n	8006406 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	1c59      	adds	r1, r3, #1
 80063f6:	6279      	str	r1, [r7, #36]	@ 0x24
 80063f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	09db      	lsrs	r3, r3, #7
 8006404:	623b      	str	r3, [r7, #32]
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	2b7f      	cmp	r3, #127	@ 0x7f
 800640a:	d8f0      	bhi.n	80063ee <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	627a      	str	r2, [r7, #36]	@ 0x24
 8006412:	6a3a      	ldr	r2, [r7, #32]
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	e00b      	b.n	800643e <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	b2da      	uxtb	r2, r3
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	1c59      	adds	r1, r3, #1
 800642e:	61f9      	str	r1, [r7, #28]
 8006430:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	09db      	lsrs	r3, r3, #7
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b7f      	cmp	r3, #127	@ 0x7f
 8006442:	d8f0      	bhi.n	8006426 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	61fa      	str	r2, [r7, #28]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006454:	221c      	movs	r2, #28
 8006456:	68f9      	ldr	r1, [r7, #12]
 8006458:	6938      	ldr	r0, [r7, #16]
 800645a:	f7ff f9bf 	bl	80057dc <_SendPacket>
  RECORD_END();
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f383 8811 	msr	BASEPRI, r3
}
 8006464:	bf00      	nop
 8006466:	3728      	adds	r7, #40	@ 0x28
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	200046d8 	.word	0x200046d8

08006470 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006476:	f3ef 8311 	mrs	r3, BASEPRI
 800647a:	f04f 0120 	mov.w	r1, #32
 800647e:	f381 8811 	msr	BASEPRI, r1
 8006482:	607b      	str	r3, [r7, #4]
 8006484:	4807      	ldr	r0, [pc, #28]	@ (80064a4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006486:	f7ff f8bd 	bl	8005604 <_PreparePacket>
 800648a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800648c:	2211      	movs	r2, #17
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6838      	ldr	r0, [r7, #0]
 8006492:	f7ff f9a3 	bl	80057dc <_SendPacket>
  RECORD_END();
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f383 8811 	msr	BASEPRI, r3
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	200046d8 	.word	0x200046d8

080064a8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064b0:	f3ef 8311 	mrs	r3, BASEPRI
 80064b4:	f04f 0120 	mov.w	r1, #32
 80064b8:	f381 8811 	msr	BASEPRI, r1
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	4819      	ldr	r0, [pc, #100]	@ (8006524 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80064c0:	f7ff f8a0 	bl	8005604 <_PreparePacket>
 80064c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80064ca:	4b17      	ldr	r3, [pc, #92]	@ (8006528 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	e00b      	b.n	80064f6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	1c59      	adds	r1, r3, #1
 80064e6:	61f9      	str	r1, [r7, #28]
 80064e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	09db      	lsrs	r3, r3, #7
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80064fa:	d8f0      	bhi.n	80064de <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	61fa      	str	r2, [r7, #28]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800650c:	2208      	movs	r2, #8
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	6938      	ldr	r0, [r7, #16]
 8006512:	f7ff f963 	bl	80057dc <_SendPacket>
  RECORD_END();
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f383 8811 	msr	BASEPRI, r3
}
 800651c:	bf00      	nop
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	200046d8 	.word	0x200046d8
 8006528:	200046a8 	.word	0x200046a8

0800652c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006534:	f3ef 8311 	mrs	r3, BASEPRI
 8006538:	f04f 0120 	mov.w	r1, #32
 800653c:	f381 8811 	msr	BASEPRI, r1
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	4819      	ldr	r0, [pc, #100]	@ (80065a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006544:	f7ff f85e 	bl	8005604 <_PreparePacket>
 8006548:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800654e:	4b17      	ldr	r3, [pc, #92]	@ (80065ac <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	61fb      	str	r3, [r7, #28]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	61bb      	str	r3, [r7, #24]
 8006560:	e00b      	b.n	800657a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	b2da      	uxtb	r2, r3
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	1c59      	adds	r1, r3, #1
 800656a:	61f9      	str	r1, [r7, #28]
 800656c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	09db      	lsrs	r3, r3, #7
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b7f      	cmp	r3, #127	@ 0x7f
 800657e:	d8f0      	bhi.n	8006562 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	61fa      	str	r2, [r7, #28]
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006590:	2204      	movs	r2, #4
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	6938      	ldr	r0, [r7, #16]
 8006596:	f7ff f921 	bl	80057dc <_SendPacket>
  RECORD_END();
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f383 8811 	msr	BASEPRI, r3
}
 80065a0:	bf00      	nop
 80065a2:	3720      	adds	r7, #32
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	200046d8 	.word	0x200046d8
 80065ac:	200046a8 	.word	0x200046a8

080065b0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065b8:	f3ef 8311 	mrs	r3, BASEPRI
 80065bc:	f04f 0120 	mov.w	r1, #32
 80065c0:	f381 8811 	msr	BASEPRI, r1
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	4819      	ldr	r0, [pc, #100]	@ (800662c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80065c8:	f7ff f81c 	bl	8005604 <_PreparePacket>
 80065cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80065d2:	4b17      	ldr	r3, [pc, #92]	@ (8006630 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	61bb      	str	r3, [r7, #24]
 80065e4:	e00b      	b.n	80065fe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	1c59      	adds	r1, r3, #1
 80065ee:	61f9      	str	r1, [r7, #28]
 80065f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065f4:	b2d2      	uxtb	r2, r2
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	09db      	lsrs	r3, r3, #7
 80065fc:	61bb      	str	r3, [r7, #24]
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	2b7f      	cmp	r3, #127	@ 0x7f
 8006602:	d8f0      	bhi.n	80065e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	61fa      	str	r2, [r7, #28]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006614:	2206      	movs	r2, #6
 8006616:	68f9      	ldr	r1, [r7, #12]
 8006618:	6938      	ldr	r0, [r7, #16]
 800661a:	f7ff f8df 	bl	80057dc <_SendPacket>
  RECORD_END();
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f383 8811 	msr	BASEPRI, r3
}
 8006624:	bf00      	nop
 8006626:	3720      	adds	r7, #32
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	200046d8 	.word	0x200046d8
 8006630:	200046a8 	.word	0x200046a8

08006634 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b08a      	sub	sp, #40	@ 0x28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800663e:	f3ef 8311 	mrs	r3, BASEPRI
 8006642:	f04f 0120 	mov.w	r1, #32
 8006646:	f381 8811 	msr	BASEPRI, r1
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	4827      	ldr	r0, [pc, #156]	@ (80066ec <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800664e:	f7fe ffd9 	bl	8005604 <_PreparePacket>
 8006652:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006658:	4b25      	ldr	r3, [pc, #148]	@ (80066f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	627b      	str	r3, [r7, #36]	@ 0x24
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	623b      	str	r3, [r7, #32]
 800666a:	e00b      	b.n	8006684 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	b2da      	uxtb	r2, r3
 8006670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006672:	1c59      	adds	r1, r3, #1
 8006674:	6279      	str	r1, [r7, #36]	@ 0x24
 8006676:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	09db      	lsrs	r3, r3, #7
 8006682:	623b      	str	r3, [r7, #32]
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	2b7f      	cmp	r3, #127	@ 0x7f
 8006688:	d8f0      	bhi.n	800666c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006690:	6a3a      	ldr	r2, [r7, #32]
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	61fb      	str	r3, [r7, #28]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	e00b      	b.n	80066bc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	61f9      	str	r1, [r7, #28]
 80066ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	09db      	lsrs	r3, r3, #7
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	2b7f      	cmp	r3, #127	@ 0x7f
 80066c0:	d8f0      	bhi.n	80066a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	61fa      	str	r2, [r7, #28]
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80066d2:	2207      	movs	r2, #7
 80066d4:	68f9      	ldr	r1, [r7, #12]
 80066d6:	6938      	ldr	r0, [r7, #16]
 80066d8:	f7ff f880 	bl	80057dc <_SendPacket>
  RECORD_END();
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f383 8811 	msr	BASEPRI, r3
}
 80066e2:	bf00      	nop
 80066e4:	3728      	adds	r7, #40	@ 0x28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	200046d8 	.word	0x200046d8
 80066f0:	200046a8 	.word	0x200046a8

080066f4 <SEGGER_SYSVIEW_MarkStart>:
*    Record a Performance Marker Start event to start measuring runtime.
*
*  Parameters
*    MarkerId  - User defined ID for the marker.
*/
void SEGGER_SYSVIEW_MarkStart(unsigned MarkerId) {
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006700:	f04f 0120 	mov.w	r1, #32
 8006704:	f381 8811 	msr	BASEPRI, r1
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	4817      	ldr	r0, [pc, #92]	@ (8006768 <SEGGER_SYSVIEW_MarkStart+0x74>)
 800670c:	f7fe ff7a 	bl	8005604 <_PreparePacket>
 8006710:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, MarkerId);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	61fb      	str	r3, [r7, #28]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	e00b      	b.n	8006738 <SEGGER_SYSVIEW_MarkStart+0x44>
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	b2da      	uxtb	r2, r3
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	1c59      	adds	r1, r3, #1
 8006728:	61f9      	str	r1, [r7, #28]
 800672a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	09db      	lsrs	r3, r3, #7
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	2b7f      	cmp	r3, #127	@ 0x7f
 800673c:	d8f0      	bhi.n	8006720 <SEGGER_SYSVIEW_MarkStart+0x2c>
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	61fa      	str	r2, [r7, #28]
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MARK_START);
 800674e:	220f      	movs	r2, #15
 8006750:	68f9      	ldr	r1, [r7, #12]
 8006752:	6938      	ldr	r0, [r7, #16]
 8006754:	f7ff f842 	bl	80057dc <_SendPacket>
  RECORD_END();
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f383 8811 	msr	BASEPRI, r3
}
 800675e:	bf00      	nop
 8006760:	3720      	adds	r7, #32
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	200046d8 	.word	0x200046d8

0800676c <SEGGER_SYSVIEW_MarkStop>:
*    Record a Performance Marker Stop event to stop measuring runtime.
*
*  Parameters
*    MarkerId  - User defined ID for the marker.
*/
void SEGGER_SYSVIEW_MarkStop(unsigned MarkerId) {
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  U8 * pPayload;
  U8 * pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006774:	f3ef 8311 	mrs	r3, BASEPRI
 8006778:	f04f 0120 	mov.w	r1, #32
 800677c:	f381 8811 	msr	BASEPRI, r1
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	4817      	ldr	r0, [pc, #92]	@ (80067e0 <SEGGER_SYSVIEW_MarkStop+0x74>)
 8006784:	f7fe ff3e 	bl	8005604 <_PreparePacket>
 8006788:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, MarkerId);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	61fb      	str	r3, [r7, #28]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	e00b      	b.n	80067b0 <SEGGER_SYSVIEW_MarkStop+0x44>
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	b2da      	uxtb	r2, r3
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	1c59      	adds	r1, r3, #1
 80067a0:	61f9      	str	r1, [r7, #28]
 80067a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	09db      	lsrs	r3, r3, #7
 80067ae:	61bb      	str	r3, [r7, #24]
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80067b4:	d8f0      	bhi.n	8006798 <SEGGER_SYSVIEW_MarkStop+0x2c>
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	61fa      	str	r2, [r7, #28]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MARK_STOP);
 80067c6:	2210      	movs	r2, #16
 80067c8:	68f9      	ldr	r1, [r7, #12]
 80067ca:	6938      	ldr	r0, [r7, #16]
 80067cc:	f7ff f806 	bl	80057dc <_SendPacket>
  RECORD_END();
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f383 8811 	msr	BASEPRI, r3
}
 80067d6:	bf00      	nop
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	200046d8 	.word	0x200046d8

080067e4 <SEGGER_SYSVIEW_NameMarker>:
*
*  Parameters
*    MarkerId   - User defined ID for the marker.
*    sName      - Pointer to the marker name. (Max. SEGGER_SYSVIEW_MAX_STRING_LEN Bytes)
*/
void SEGGER_SYSVIEW_NameMarker(unsigned int MarkerId, const char* sName) {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08a      	sub	sp, #40	@ 0x28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067ee:	f3ef 8311 	mrs	r3, BASEPRI
 80067f2:	f04f 0120 	mov.w	r1, #32
 80067f6:	f381 8811 	msr	BASEPRI, r1
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	4827      	ldr	r0, [pc, #156]	@ (800689c <SEGGER_SYSVIEW_NameMarker+0xb8>)
 80067fe:	f7fe ff01 	bl	8005604 <_PreparePacket>
 8006802:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SYSVIEW_EVTID_EX_NAME_MARKER);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	627b      	str	r3, [r7, #36]	@ 0x24
 800680c:	2301      	movs	r3, #1
 800680e:	623b      	str	r3, [r7, #32]
 8006810:	e00b      	b.n	800682a <SEGGER_SYSVIEW_NameMarker+0x46>
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	b2da      	uxtb	r2, r3
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	1c59      	adds	r1, r3, #1
 800681a:	6279      	str	r1, [r7, #36]	@ 0x24
 800681c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	09db      	lsrs	r3, r3, #7
 8006828:	623b      	str	r3, [r7, #32]
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	2b7f      	cmp	r3, #127	@ 0x7f
 800682e:	d8f0      	bhi.n	8006812 <SEGGER_SYSVIEW_NameMarker+0x2e>
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	627a      	str	r2, [r7, #36]	@ 0x24
 8006836:	6a3a      	ldr	r2, [r7, #32]
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, MarkerId);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	e00b      	b.n	8006862 <SEGGER_SYSVIEW_NameMarker+0x7e>
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	b2da      	uxtb	r2, r3
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	1c59      	adds	r1, r3, #1
 8006852:	61f9      	str	r1, [r7, #28]
 8006854:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	09db      	lsrs	r3, r3, #7
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b7f      	cmp	r3, #127	@ 0x7f
 8006866:	d8f0      	bhi.n	800684a <SEGGER_SYSVIEW_NameMarker+0x66>
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	61fa      	str	r2, [r7, #28]
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, sName, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006878:	2280      	movs	r2, #128	@ 0x80
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7fe fe89 	bl	8005594 <_EncodeStr>
 8006882:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_EX);
 8006884:	221f      	movs	r2, #31
 8006886:	68f9      	ldr	r1, [r7, #12]
 8006888:	6938      	ldr	r0, [r7, #16]
 800688a:	f7fe ffa7 	bl	80057dc <_SendPacket>
  RECORD_END();
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f383 8811 	msr	BASEPRI, r3
}
 8006894:	bf00      	nop
 8006896:	3728      	adds	r7, #40	@ 0x28
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	200046d8 	.word	0x200046d8

080068a0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80068a8:	4b04      	ldr	r3, [pc, #16]	@ (80068bc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	1ad3      	subs	r3, r2, r3
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc80      	pop	{r7}
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	200046a8 	.word	0x200046a8

080068c0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08c      	sub	sp, #48	@ 0x30
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4603      	mov	r3, r0
 80068c8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80068ca:	4b40      	ldr	r3, [pc, #256]	@ (80069cc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d077      	beq.n	80069c2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80068d2:	4b3e      	ldr	r3, [pc, #248]	@ (80069cc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80068d8:	2300      	movs	r3, #0
 80068da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068dc:	e008      	b.n	80068f0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80068de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80068e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d007      	beq.n	80068fa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80068ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ec:	3301      	adds	r3, #1
 80068ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d3f2      	bcc.n	80068de <SEGGER_SYSVIEW_SendModule+0x1e>
 80068f8:	e000      	b.n	80068fc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80068fa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80068fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d055      	beq.n	80069ae <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006902:	f3ef 8311 	mrs	r3, BASEPRI
 8006906:	f04f 0120 	mov.w	r1, #32
 800690a:	f381 8811 	msr	BASEPRI, r1
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	482f      	ldr	r0, [pc, #188]	@ (80069d0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006912:	f7fe fe77 	bl	8005604 <_PreparePacket>
 8006916:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	623b      	str	r3, [r7, #32]
 8006924:	e00b      	b.n	800693e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	b2da      	uxtb	r2, r3
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	1c59      	adds	r1, r3, #1
 800692e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006930:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	09db      	lsrs	r3, r3, #7
 800693c:	623b      	str	r3, [r7, #32]
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	2b7f      	cmp	r3, #127	@ 0x7f
 8006942:	d8f0      	bhi.n	8006926 <SEGGER_SYSVIEW_SendModule+0x66>
 8006944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	627a      	str	r2, [r7, #36]	@ 0x24
 800694a:	6a3a      	ldr	r2, [r7, #32]
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	61fb      	str	r3, [r7, #28]
 8006958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	e00b      	b.n	8006978 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	b2da      	uxtb	r2, r3
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	1c59      	adds	r1, r3, #1
 8006968:	61f9      	str	r1, [r7, #28]
 800696a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	09db      	lsrs	r3, r3, #7
 8006976:	61bb      	str	r3, [r7, #24]
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	2b7f      	cmp	r3, #127	@ 0x7f
 800697c:	d8f0      	bhi.n	8006960 <SEGGER_SYSVIEW_SendModule+0xa0>
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	61fa      	str	r2, [r7, #28]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800698e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2280      	movs	r2, #128	@ 0x80
 8006994:	4619      	mov	r1, r3
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f7fe fdfc 	bl	8005594 <_EncodeStr>
 800699c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800699e:	2216      	movs	r2, #22
 80069a0:	68f9      	ldr	r1, [r7, #12]
 80069a2:	6938      	ldr	r0, [r7, #16]
 80069a4:	f7fe ff1a 	bl	80057dc <_SendPacket>
      RECORD_END();
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80069ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d006      	beq.n	80069c2 <SEGGER_SYSVIEW_SendModule+0x102>
 80069b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80069bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	4798      	blx	r3
    }
  }
}
 80069c2:	bf00      	nop
 80069c4:	3730      	adds	r7, #48	@ 0x30
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	200046d0 	.word	0x200046d0
 80069d0:	200046d8 	.word	0x200046d8

080069d4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80069da:	4b0c      	ldr	r3, [pc, #48]	@ (8006a0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00f      	beq.n	8006a02 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80069e2:	4b0a      	ldr	r3, [pc, #40]	@ (8006a0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f2      	bne.n	80069e8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	200046d0 	.word	0x200046d0

08006a10 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006a16:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1a:	f04f 0120 	mov.w	r1, #32
 8006a1e:	f381 8811 	msr	BASEPRI, r1
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	4817      	ldr	r0, [pc, #92]	@ (8006a84 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006a26:	f7fe fded 	bl	8005604 <_PreparePacket>
 8006a2a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	4b14      	ldr	r3, [pc, #80]	@ (8006a88 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	613b      	str	r3, [r7, #16]
 8006a3a:	e00b      	b.n	8006a54 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	1c59      	adds	r1, r3, #1
 8006a44:	6179      	str	r1, [r7, #20]
 8006a46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	09db      	lsrs	r3, r3, #7
 8006a52:	613b      	str	r3, [r7, #16]
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a58:	d8f0      	bhi.n	8006a3c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	617a      	str	r2, [r7, #20]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006a6a:	221b      	movs	r2, #27
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	68b8      	ldr	r0, [r7, #8]
 8006a70:	f7fe feb4 	bl	80057dc <_SendPacket>
  RECORD_END();
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f383 8811 	msr	BASEPRI, r3
}
 8006a7a:	bf00      	nop
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	200046d8 	.word	0x200046d8
 8006a88:	200046d4 	.word	0x200046d4

08006a8c <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	@ 0x28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a94:	f3ef 8311 	mrs	r3, BASEPRI
 8006a98:	f04f 0120 	mov.w	r1, #32
 8006a9c:	f381 8811 	msr	BASEPRI, r1
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	4827      	ldr	r0, [pc, #156]	@ (8006b40 <SEGGER_SYSVIEW_Print+0xb4>)
 8006aa4:	f7fe fdae 	bl	8005604 <_PreparePacket>
 8006aa8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006aaa:	2280      	movs	r2, #128	@ 0x80
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	6938      	ldr	r0, [r7, #16]
 8006ab0:	f7fe fd70 	bl	8005594 <_EncodeStr>
 8006ab4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aba:	2300      	movs	r3, #0
 8006abc:	623b      	str	r3, [r7, #32]
 8006abe:	e00b      	b.n	8006ad8 <SEGGER_SYSVIEW_Print+0x4c>
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	1c59      	adds	r1, r3, #1
 8006ac8:	6279      	str	r1, [r7, #36]	@ 0x24
 8006aca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	09db      	lsrs	r3, r3, #7
 8006ad6:	623b      	str	r3, [r7, #32]
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	2b7f      	cmp	r3, #127	@ 0x7f
 8006adc:	d8f0      	bhi.n	8006ac0 <SEGGER_SYSVIEW_Print+0x34>
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ae4:	6a3a      	ldr	r2, [r7, #32]
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	61fb      	str	r3, [r7, #28]
 8006af2:	2300      	movs	r3, #0
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	e00b      	b.n	8006b10 <SEGGER_SYSVIEW_Print+0x84>
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	1c59      	adds	r1, r3, #1
 8006b00:	61f9      	str	r1, [r7, #28]
 8006b02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b06:	b2d2      	uxtb	r2, r2
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	09db      	lsrs	r3, r3, #7
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b14:	d8f0      	bhi.n	8006af8 <SEGGER_SYSVIEW_Print+0x6c>
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	61fa      	str	r2, [r7, #28]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006b26:	221a      	movs	r2, #26
 8006b28:	68f9      	ldr	r1, [r7, #12]
 8006b2a:	6938      	ldr	r0, [r7, #16]
 8006b2c:	f7fe fe56 	bl	80057dc <_SendPacket>
  RECORD_END();
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f383 8811 	msr	BASEPRI, r3
}
 8006b36:	bf00      	nop
 8006b38:	3728      	adds	r7, #40	@ 0x28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	200046d8 	.word	0x200046d8

08006b44 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08a      	sub	sp, #40	@ 0x28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b50:	f04f 0120 	mov.w	r1, #32
 8006b54:	f381 8811 	msr	BASEPRI, r1
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	4827      	ldr	r0, [pc, #156]	@ (8006bf8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006b5c:	f7fe fd52 	bl	8005604 <_PreparePacket>
 8006b60:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b62:	2280      	movs	r2, #128	@ 0x80
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	6938      	ldr	r0, [r7, #16]
 8006b68:	f7fe fd14 	bl	8005594 <_EncodeStr>
 8006b6c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b72:	2301      	movs	r3, #1
 8006b74:	623b      	str	r3, [r7, #32]
 8006b76:	e00b      	b.n	8006b90 <SEGGER_SYSVIEW_Warn+0x4c>
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7e:	1c59      	adds	r1, r3, #1
 8006b80:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	09db      	lsrs	r3, r3, #7
 8006b8e:	623b      	str	r3, [r7, #32]
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b94:	d8f0      	bhi.n	8006b78 <SEGGER_SYSVIEW_Warn+0x34>
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b9c:	6a3a      	ldr	r2, [r7, #32]
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	61fb      	str	r3, [r7, #28]
 8006baa:	2300      	movs	r3, #0
 8006bac:	61bb      	str	r3, [r7, #24]
 8006bae:	e00b      	b.n	8006bc8 <SEGGER_SYSVIEW_Warn+0x84>
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	1c59      	adds	r1, r3, #1
 8006bb8:	61f9      	str	r1, [r7, #28]
 8006bba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	09db      	lsrs	r3, r3, #7
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bcc:	d8f0      	bhi.n	8006bb0 <SEGGER_SYSVIEW_Warn+0x6c>
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	61fa      	str	r2, [r7, #28]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006bde:	221a      	movs	r2, #26
 8006be0:	68f9      	ldr	r1, [r7, #12]
 8006be2:	6938      	ldr	r0, [r7, #16]
 8006be4:	f7fe fdfa 	bl	80057dc <_SendPacket>
  RECORD_END();
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f383 8811 	msr	BASEPRI, r3
}
 8006bee:	bf00      	nop
 8006bf0:	3728      	adds	r7, #40	@ 0x28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	200046d8 	.word	0x200046d8

08006bfc <siprintf>:
 8006bfc:	b40e      	push	{r1, r2, r3}
 8006bfe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c02:	b510      	push	{r4, lr}
 8006c04:	2400      	movs	r4, #0
 8006c06:	b09d      	sub	sp, #116	@ 0x74
 8006c08:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006c0a:	9002      	str	r0, [sp, #8]
 8006c0c:	9006      	str	r0, [sp, #24]
 8006c0e:	9107      	str	r1, [sp, #28]
 8006c10:	9104      	str	r1, [sp, #16]
 8006c12:	4809      	ldr	r0, [pc, #36]	@ (8006c38 <siprintf+0x3c>)
 8006c14:	4909      	ldr	r1, [pc, #36]	@ (8006c3c <siprintf+0x40>)
 8006c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c1a:	9105      	str	r1, [sp, #20]
 8006c1c:	6800      	ldr	r0, [r0, #0]
 8006c1e:	a902      	add	r1, sp, #8
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006c24:	f000 f9b0 	bl	8006f88 <_svfiprintf_r>
 8006c28:	9b02      	ldr	r3, [sp, #8]
 8006c2a:	701c      	strb	r4, [r3, #0]
 8006c2c:	b01d      	add	sp, #116	@ 0x74
 8006c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c32:	b003      	add	sp, #12
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20000014 	.word	0x20000014
 8006c3c:	ffff0208 	.word	0xffff0208

08006c40 <memcmp>:
 8006c40:	b510      	push	{r4, lr}
 8006c42:	3901      	subs	r1, #1
 8006c44:	4402      	add	r2, r0
 8006c46:	4290      	cmp	r0, r2
 8006c48:	d101      	bne.n	8006c4e <memcmp+0xe>
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	e005      	b.n	8006c5a <memcmp+0x1a>
 8006c4e:	7803      	ldrb	r3, [r0, #0]
 8006c50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006c54:	42a3      	cmp	r3, r4
 8006c56:	d001      	beq.n	8006c5c <memcmp+0x1c>
 8006c58:	1b18      	subs	r0, r3, r4
 8006c5a:	bd10      	pop	{r4, pc}
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	e7f2      	b.n	8006c46 <memcmp+0x6>

08006c60 <memset>:
 8006c60:	4603      	mov	r3, r0
 8006c62:	4402      	add	r2, r0
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d100      	bne.n	8006c6a <memset+0xa>
 8006c68:	4770      	bx	lr
 8006c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c6e:	e7f9      	b.n	8006c64 <memset+0x4>

08006c70 <__errno>:
 8006c70:	4b01      	ldr	r3, [pc, #4]	@ (8006c78 <__errno+0x8>)
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	20000014 	.word	0x20000014

08006c7c <__libc_init_array>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	2600      	movs	r6, #0
 8006c80:	4d0c      	ldr	r5, [pc, #48]	@ (8006cb4 <__libc_init_array+0x38>)
 8006c82:	4c0d      	ldr	r4, [pc, #52]	@ (8006cb8 <__libc_init_array+0x3c>)
 8006c84:	1b64      	subs	r4, r4, r5
 8006c86:	10a4      	asrs	r4, r4, #2
 8006c88:	42a6      	cmp	r6, r4
 8006c8a:	d109      	bne.n	8006ca0 <__libc_init_array+0x24>
 8006c8c:	f000 fc76 	bl	800757c <_init>
 8006c90:	2600      	movs	r6, #0
 8006c92:	4d0a      	ldr	r5, [pc, #40]	@ (8006cbc <__libc_init_array+0x40>)
 8006c94:	4c0a      	ldr	r4, [pc, #40]	@ (8006cc0 <__libc_init_array+0x44>)
 8006c96:	1b64      	subs	r4, r4, r5
 8006c98:	10a4      	asrs	r4, r4, #2
 8006c9a:	42a6      	cmp	r6, r4
 8006c9c:	d105      	bne.n	8006caa <__libc_init_array+0x2e>
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca4:	4798      	blx	r3
 8006ca6:	3601      	adds	r6, #1
 8006ca8:	e7ee      	b.n	8006c88 <__libc_init_array+0xc>
 8006caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cae:	4798      	blx	r3
 8006cb0:	3601      	adds	r6, #1
 8006cb2:	e7f2      	b.n	8006c9a <__libc_init_array+0x1e>
 8006cb4:	08007888 	.word	0x08007888
 8006cb8:	08007888 	.word	0x08007888
 8006cbc:	08007888 	.word	0x08007888
 8006cc0:	0800788c 	.word	0x0800788c

08006cc4 <__retarget_lock_acquire_recursive>:
 8006cc4:	4770      	bx	lr

08006cc6 <__retarget_lock_release_recursive>:
 8006cc6:	4770      	bx	lr

08006cc8 <memcpy>:
 8006cc8:	440a      	add	r2, r1
 8006cca:	4291      	cmp	r1, r2
 8006ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cd0:	d100      	bne.n	8006cd4 <memcpy+0xc>
 8006cd2:	4770      	bx	lr
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cda:	4291      	cmp	r1, r2
 8006cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ce0:	d1f9      	bne.n	8006cd6 <memcpy+0xe>
 8006ce2:	bd10      	pop	{r4, pc}

08006ce4 <_free_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	d040      	beq.n	8006d6e <_free_r+0x8a>
 8006cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cf0:	1f0c      	subs	r4, r1, #4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	bfb8      	it	lt
 8006cf6:	18e4      	addlt	r4, r4, r3
 8006cf8:	f000 f8de 	bl	8006eb8 <__malloc_lock>
 8006cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8006d70 <_free_r+0x8c>)
 8006cfe:	6813      	ldr	r3, [r2, #0]
 8006d00:	b933      	cbnz	r3, 8006d10 <_free_r+0x2c>
 8006d02:	6063      	str	r3, [r4, #4]
 8006d04:	6014      	str	r4, [r2, #0]
 8006d06:	4628      	mov	r0, r5
 8006d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d0c:	f000 b8da 	b.w	8006ec4 <__malloc_unlock>
 8006d10:	42a3      	cmp	r3, r4
 8006d12:	d908      	bls.n	8006d26 <_free_r+0x42>
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	1821      	adds	r1, r4, r0
 8006d18:	428b      	cmp	r3, r1
 8006d1a:	bf01      	itttt	eq
 8006d1c:	6819      	ldreq	r1, [r3, #0]
 8006d1e:	685b      	ldreq	r3, [r3, #4]
 8006d20:	1809      	addeq	r1, r1, r0
 8006d22:	6021      	streq	r1, [r4, #0]
 8006d24:	e7ed      	b.n	8006d02 <_free_r+0x1e>
 8006d26:	461a      	mov	r2, r3
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	b10b      	cbz	r3, 8006d30 <_free_r+0x4c>
 8006d2c:	42a3      	cmp	r3, r4
 8006d2e:	d9fa      	bls.n	8006d26 <_free_r+0x42>
 8006d30:	6811      	ldr	r1, [r2, #0]
 8006d32:	1850      	adds	r0, r2, r1
 8006d34:	42a0      	cmp	r0, r4
 8006d36:	d10b      	bne.n	8006d50 <_free_r+0x6c>
 8006d38:	6820      	ldr	r0, [r4, #0]
 8006d3a:	4401      	add	r1, r0
 8006d3c:	1850      	adds	r0, r2, r1
 8006d3e:	4283      	cmp	r3, r0
 8006d40:	6011      	str	r1, [r2, #0]
 8006d42:	d1e0      	bne.n	8006d06 <_free_r+0x22>
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	4408      	add	r0, r1
 8006d4a:	6010      	str	r0, [r2, #0]
 8006d4c:	6053      	str	r3, [r2, #4]
 8006d4e:	e7da      	b.n	8006d06 <_free_r+0x22>
 8006d50:	d902      	bls.n	8006d58 <_free_r+0x74>
 8006d52:	230c      	movs	r3, #12
 8006d54:	602b      	str	r3, [r5, #0]
 8006d56:	e7d6      	b.n	8006d06 <_free_r+0x22>
 8006d58:	6820      	ldr	r0, [r4, #0]
 8006d5a:	1821      	adds	r1, r4, r0
 8006d5c:	428b      	cmp	r3, r1
 8006d5e:	bf01      	itttt	eq
 8006d60:	6819      	ldreq	r1, [r3, #0]
 8006d62:	685b      	ldreq	r3, [r3, #4]
 8006d64:	1809      	addeq	r1, r1, r0
 8006d66:	6021      	streq	r1, [r4, #0]
 8006d68:	6063      	str	r3, [r4, #4]
 8006d6a:	6054      	str	r4, [r2, #4]
 8006d6c:	e7cb      	b.n	8006d06 <_free_r+0x22>
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	20004900 	.word	0x20004900

08006d74 <sbrk_aligned>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	4e0f      	ldr	r6, [pc, #60]	@ (8006db4 <sbrk_aligned+0x40>)
 8006d78:	460c      	mov	r4, r1
 8006d7a:	6831      	ldr	r1, [r6, #0]
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	b911      	cbnz	r1, 8006d86 <sbrk_aligned+0x12>
 8006d80:	f000 fba8 	bl	80074d4 <_sbrk_r>
 8006d84:	6030      	str	r0, [r6, #0]
 8006d86:	4621      	mov	r1, r4
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f000 fba3 	bl	80074d4 <_sbrk_r>
 8006d8e:	1c43      	adds	r3, r0, #1
 8006d90:	d103      	bne.n	8006d9a <sbrk_aligned+0x26>
 8006d92:	f04f 34ff 	mov.w	r4, #4294967295
 8006d96:	4620      	mov	r0, r4
 8006d98:	bd70      	pop	{r4, r5, r6, pc}
 8006d9a:	1cc4      	adds	r4, r0, #3
 8006d9c:	f024 0403 	bic.w	r4, r4, #3
 8006da0:	42a0      	cmp	r0, r4
 8006da2:	d0f8      	beq.n	8006d96 <sbrk_aligned+0x22>
 8006da4:	1a21      	subs	r1, r4, r0
 8006da6:	4628      	mov	r0, r5
 8006da8:	f000 fb94 	bl	80074d4 <_sbrk_r>
 8006dac:	3001      	adds	r0, #1
 8006dae:	d1f2      	bne.n	8006d96 <sbrk_aligned+0x22>
 8006db0:	e7ef      	b.n	8006d92 <sbrk_aligned+0x1e>
 8006db2:	bf00      	nop
 8006db4:	200048fc 	.word	0x200048fc

08006db8 <_malloc_r>:
 8006db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dbc:	1ccd      	adds	r5, r1, #3
 8006dbe:	f025 0503 	bic.w	r5, r5, #3
 8006dc2:	3508      	adds	r5, #8
 8006dc4:	2d0c      	cmp	r5, #12
 8006dc6:	bf38      	it	cc
 8006dc8:	250c      	movcc	r5, #12
 8006dca:	2d00      	cmp	r5, #0
 8006dcc:	4606      	mov	r6, r0
 8006dce:	db01      	blt.n	8006dd4 <_malloc_r+0x1c>
 8006dd0:	42a9      	cmp	r1, r5
 8006dd2:	d904      	bls.n	8006dde <_malloc_r+0x26>
 8006dd4:	230c      	movs	r3, #12
 8006dd6:	6033      	str	r3, [r6, #0]
 8006dd8:	2000      	movs	r0, #0
 8006dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006eb4 <_malloc_r+0xfc>
 8006de2:	f000 f869 	bl	8006eb8 <__malloc_lock>
 8006de6:	f8d8 3000 	ldr.w	r3, [r8]
 8006dea:	461c      	mov	r4, r3
 8006dec:	bb44      	cbnz	r4, 8006e40 <_malloc_r+0x88>
 8006dee:	4629      	mov	r1, r5
 8006df0:	4630      	mov	r0, r6
 8006df2:	f7ff ffbf 	bl	8006d74 <sbrk_aligned>
 8006df6:	1c43      	adds	r3, r0, #1
 8006df8:	4604      	mov	r4, r0
 8006dfa:	d158      	bne.n	8006eae <_malloc_r+0xf6>
 8006dfc:	f8d8 4000 	ldr.w	r4, [r8]
 8006e00:	4627      	mov	r7, r4
 8006e02:	2f00      	cmp	r7, #0
 8006e04:	d143      	bne.n	8006e8e <_malloc_r+0xd6>
 8006e06:	2c00      	cmp	r4, #0
 8006e08:	d04b      	beq.n	8006ea2 <_malloc_r+0xea>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	4630      	mov	r0, r6
 8006e10:	eb04 0903 	add.w	r9, r4, r3
 8006e14:	f000 fb5e 	bl	80074d4 <_sbrk_r>
 8006e18:	4581      	cmp	r9, r0
 8006e1a:	d142      	bne.n	8006ea2 <_malloc_r+0xea>
 8006e1c:	6821      	ldr	r1, [r4, #0]
 8006e1e:	4630      	mov	r0, r6
 8006e20:	1a6d      	subs	r5, r5, r1
 8006e22:	4629      	mov	r1, r5
 8006e24:	f7ff ffa6 	bl	8006d74 <sbrk_aligned>
 8006e28:	3001      	adds	r0, #1
 8006e2a:	d03a      	beq.n	8006ea2 <_malloc_r+0xea>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	442b      	add	r3, r5
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	f8d8 3000 	ldr.w	r3, [r8]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	bb62      	cbnz	r2, 8006e94 <_malloc_r+0xdc>
 8006e3a:	f8c8 7000 	str.w	r7, [r8]
 8006e3e:	e00f      	b.n	8006e60 <_malloc_r+0xa8>
 8006e40:	6822      	ldr	r2, [r4, #0]
 8006e42:	1b52      	subs	r2, r2, r5
 8006e44:	d420      	bmi.n	8006e88 <_malloc_r+0xd0>
 8006e46:	2a0b      	cmp	r2, #11
 8006e48:	d917      	bls.n	8006e7a <_malloc_r+0xc2>
 8006e4a:	1961      	adds	r1, r4, r5
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	6025      	str	r5, [r4, #0]
 8006e50:	bf18      	it	ne
 8006e52:	6059      	strne	r1, [r3, #4]
 8006e54:	6863      	ldr	r3, [r4, #4]
 8006e56:	bf08      	it	eq
 8006e58:	f8c8 1000 	streq.w	r1, [r8]
 8006e5c:	5162      	str	r2, [r4, r5]
 8006e5e:	604b      	str	r3, [r1, #4]
 8006e60:	4630      	mov	r0, r6
 8006e62:	f000 f82f 	bl	8006ec4 <__malloc_unlock>
 8006e66:	f104 000b 	add.w	r0, r4, #11
 8006e6a:	1d23      	adds	r3, r4, #4
 8006e6c:	f020 0007 	bic.w	r0, r0, #7
 8006e70:	1ac2      	subs	r2, r0, r3
 8006e72:	bf1c      	itt	ne
 8006e74:	1a1b      	subne	r3, r3, r0
 8006e76:	50a3      	strne	r3, [r4, r2]
 8006e78:	e7af      	b.n	8006dda <_malloc_r+0x22>
 8006e7a:	6862      	ldr	r2, [r4, #4]
 8006e7c:	42a3      	cmp	r3, r4
 8006e7e:	bf0c      	ite	eq
 8006e80:	f8c8 2000 	streq.w	r2, [r8]
 8006e84:	605a      	strne	r2, [r3, #4]
 8006e86:	e7eb      	b.n	8006e60 <_malloc_r+0xa8>
 8006e88:	4623      	mov	r3, r4
 8006e8a:	6864      	ldr	r4, [r4, #4]
 8006e8c:	e7ae      	b.n	8006dec <_malloc_r+0x34>
 8006e8e:	463c      	mov	r4, r7
 8006e90:	687f      	ldr	r7, [r7, #4]
 8006e92:	e7b6      	b.n	8006e02 <_malloc_r+0x4a>
 8006e94:	461a      	mov	r2, r3
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	d1fb      	bne.n	8006e94 <_malloc_r+0xdc>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	6053      	str	r3, [r2, #4]
 8006ea0:	e7de      	b.n	8006e60 <_malloc_r+0xa8>
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	6033      	str	r3, [r6, #0]
 8006ea8:	f000 f80c 	bl	8006ec4 <__malloc_unlock>
 8006eac:	e794      	b.n	8006dd8 <_malloc_r+0x20>
 8006eae:	6005      	str	r5, [r0, #0]
 8006eb0:	e7d6      	b.n	8006e60 <_malloc_r+0xa8>
 8006eb2:	bf00      	nop
 8006eb4:	20004900 	.word	0x20004900

08006eb8 <__malloc_lock>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	@ (8006ec0 <__malloc_lock+0x8>)
 8006eba:	f7ff bf03 	b.w	8006cc4 <__retarget_lock_acquire_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	200048f8 	.word	0x200048f8

08006ec4 <__malloc_unlock>:
 8006ec4:	4801      	ldr	r0, [pc, #4]	@ (8006ecc <__malloc_unlock+0x8>)
 8006ec6:	f7ff befe 	b.w	8006cc6 <__retarget_lock_release_recursive>
 8006eca:	bf00      	nop
 8006ecc:	200048f8 	.word	0x200048f8

08006ed0 <__ssputs_r>:
 8006ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed4:	461f      	mov	r7, r3
 8006ed6:	688e      	ldr	r6, [r1, #8]
 8006ed8:	4682      	mov	sl, r0
 8006eda:	42be      	cmp	r6, r7
 8006edc:	460c      	mov	r4, r1
 8006ede:	4690      	mov	r8, r2
 8006ee0:	680b      	ldr	r3, [r1, #0]
 8006ee2:	d82d      	bhi.n	8006f40 <__ssputs_r+0x70>
 8006ee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ee8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006eec:	d026      	beq.n	8006f3c <__ssputs_r+0x6c>
 8006eee:	6965      	ldr	r5, [r4, #20]
 8006ef0:	6909      	ldr	r1, [r1, #16]
 8006ef2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ef6:	eba3 0901 	sub.w	r9, r3, r1
 8006efa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006efe:	1c7b      	adds	r3, r7, #1
 8006f00:	444b      	add	r3, r9
 8006f02:	106d      	asrs	r5, r5, #1
 8006f04:	429d      	cmp	r5, r3
 8006f06:	bf38      	it	cc
 8006f08:	461d      	movcc	r5, r3
 8006f0a:	0553      	lsls	r3, r2, #21
 8006f0c:	d527      	bpl.n	8006f5e <__ssputs_r+0x8e>
 8006f0e:	4629      	mov	r1, r5
 8006f10:	f7ff ff52 	bl	8006db8 <_malloc_r>
 8006f14:	4606      	mov	r6, r0
 8006f16:	b360      	cbz	r0, 8006f72 <__ssputs_r+0xa2>
 8006f18:	464a      	mov	r2, r9
 8006f1a:	6921      	ldr	r1, [r4, #16]
 8006f1c:	f7ff fed4 	bl	8006cc8 <memcpy>
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f2a:	81a3      	strh	r3, [r4, #12]
 8006f2c:	6126      	str	r6, [r4, #16]
 8006f2e:	444e      	add	r6, r9
 8006f30:	6026      	str	r6, [r4, #0]
 8006f32:	463e      	mov	r6, r7
 8006f34:	6165      	str	r5, [r4, #20]
 8006f36:	eba5 0509 	sub.w	r5, r5, r9
 8006f3a:	60a5      	str	r5, [r4, #8]
 8006f3c:	42be      	cmp	r6, r7
 8006f3e:	d900      	bls.n	8006f42 <__ssputs_r+0x72>
 8006f40:	463e      	mov	r6, r7
 8006f42:	4632      	mov	r2, r6
 8006f44:	4641      	mov	r1, r8
 8006f46:	6820      	ldr	r0, [r4, #0]
 8006f48:	f000 faaa 	bl	80074a0 <memmove>
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	68a3      	ldr	r3, [r4, #8]
 8006f50:	1b9b      	subs	r3, r3, r6
 8006f52:	60a3      	str	r3, [r4, #8]
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	4433      	add	r3, r6
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5e:	462a      	mov	r2, r5
 8006f60:	f000 fad6 	bl	8007510 <_realloc_r>
 8006f64:	4606      	mov	r6, r0
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d1e0      	bne.n	8006f2c <__ssputs_r+0x5c>
 8006f6a:	4650      	mov	r0, sl
 8006f6c:	6921      	ldr	r1, [r4, #16]
 8006f6e:	f7ff feb9 	bl	8006ce4 <_free_r>
 8006f72:	230c      	movs	r3, #12
 8006f74:	f8ca 3000 	str.w	r3, [sl]
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f82:	81a3      	strh	r3, [r4, #12]
 8006f84:	e7e9      	b.n	8006f5a <__ssputs_r+0x8a>
	...

08006f88 <_svfiprintf_r>:
 8006f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8c:	4698      	mov	r8, r3
 8006f8e:	898b      	ldrh	r3, [r1, #12]
 8006f90:	4607      	mov	r7, r0
 8006f92:	061b      	lsls	r3, r3, #24
 8006f94:	460d      	mov	r5, r1
 8006f96:	4614      	mov	r4, r2
 8006f98:	b09d      	sub	sp, #116	@ 0x74
 8006f9a:	d510      	bpl.n	8006fbe <_svfiprintf_r+0x36>
 8006f9c:	690b      	ldr	r3, [r1, #16]
 8006f9e:	b973      	cbnz	r3, 8006fbe <_svfiprintf_r+0x36>
 8006fa0:	2140      	movs	r1, #64	@ 0x40
 8006fa2:	f7ff ff09 	bl	8006db8 <_malloc_r>
 8006fa6:	6028      	str	r0, [r5, #0]
 8006fa8:	6128      	str	r0, [r5, #16]
 8006faa:	b930      	cbnz	r0, 8006fba <_svfiprintf_r+0x32>
 8006fac:	230c      	movs	r3, #12
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	b01d      	add	sp, #116	@ 0x74
 8006fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fba:	2340      	movs	r3, #64	@ 0x40
 8006fbc:	616b      	str	r3, [r5, #20]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fc2:	2320      	movs	r3, #32
 8006fc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fc8:	2330      	movs	r3, #48	@ 0x30
 8006fca:	f04f 0901 	mov.w	r9, #1
 8006fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fd2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800716c <_svfiprintf_r+0x1e4>
 8006fd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fda:	4623      	mov	r3, r4
 8006fdc:	469a      	mov	sl, r3
 8006fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe2:	b10a      	cbz	r2, 8006fe8 <_svfiprintf_r+0x60>
 8006fe4:	2a25      	cmp	r2, #37	@ 0x25
 8006fe6:	d1f9      	bne.n	8006fdc <_svfiprintf_r+0x54>
 8006fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8006fec:	d00b      	beq.n	8007006 <_svfiprintf_r+0x7e>
 8006fee:	465b      	mov	r3, fp
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f7ff ff6b 	bl	8006ed0 <__ssputs_r>
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	f000 80a7 	beq.w	800714e <_svfiprintf_r+0x1c6>
 8007000:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007002:	445a      	add	r2, fp
 8007004:	9209      	str	r2, [sp, #36]	@ 0x24
 8007006:	f89a 3000 	ldrb.w	r3, [sl]
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 809f 	beq.w	800714e <_svfiprintf_r+0x1c6>
 8007010:	2300      	movs	r3, #0
 8007012:	f04f 32ff 	mov.w	r2, #4294967295
 8007016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800701a:	f10a 0a01 	add.w	sl, sl, #1
 800701e:	9304      	str	r3, [sp, #16]
 8007020:	9307      	str	r3, [sp, #28]
 8007022:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007026:	931a      	str	r3, [sp, #104]	@ 0x68
 8007028:	4654      	mov	r4, sl
 800702a:	2205      	movs	r2, #5
 800702c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007030:	484e      	ldr	r0, [pc, #312]	@ (800716c <_svfiprintf_r+0x1e4>)
 8007032:	f000 fa5f 	bl	80074f4 <memchr>
 8007036:	9a04      	ldr	r2, [sp, #16]
 8007038:	b9d8      	cbnz	r0, 8007072 <_svfiprintf_r+0xea>
 800703a:	06d0      	lsls	r0, r2, #27
 800703c:	bf44      	itt	mi
 800703e:	2320      	movmi	r3, #32
 8007040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007044:	0711      	lsls	r1, r2, #28
 8007046:	bf44      	itt	mi
 8007048:	232b      	movmi	r3, #43	@ 0x2b
 800704a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800704e:	f89a 3000 	ldrb.w	r3, [sl]
 8007052:	2b2a      	cmp	r3, #42	@ 0x2a
 8007054:	d015      	beq.n	8007082 <_svfiprintf_r+0xfa>
 8007056:	4654      	mov	r4, sl
 8007058:	2000      	movs	r0, #0
 800705a:	f04f 0c0a 	mov.w	ip, #10
 800705e:	9a07      	ldr	r2, [sp, #28]
 8007060:	4621      	mov	r1, r4
 8007062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007066:	3b30      	subs	r3, #48	@ 0x30
 8007068:	2b09      	cmp	r3, #9
 800706a:	d94b      	bls.n	8007104 <_svfiprintf_r+0x17c>
 800706c:	b1b0      	cbz	r0, 800709c <_svfiprintf_r+0x114>
 800706e:	9207      	str	r2, [sp, #28]
 8007070:	e014      	b.n	800709c <_svfiprintf_r+0x114>
 8007072:	eba0 0308 	sub.w	r3, r0, r8
 8007076:	fa09 f303 	lsl.w	r3, r9, r3
 800707a:	4313      	orrs	r3, r2
 800707c:	46a2      	mov	sl, r4
 800707e:	9304      	str	r3, [sp, #16]
 8007080:	e7d2      	b.n	8007028 <_svfiprintf_r+0xa0>
 8007082:	9b03      	ldr	r3, [sp, #12]
 8007084:	1d19      	adds	r1, r3, #4
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	9103      	str	r1, [sp, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	bfbb      	ittet	lt
 800708e:	425b      	neglt	r3, r3
 8007090:	f042 0202 	orrlt.w	r2, r2, #2
 8007094:	9307      	strge	r3, [sp, #28]
 8007096:	9307      	strlt	r3, [sp, #28]
 8007098:	bfb8      	it	lt
 800709a:	9204      	strlt	r2, [sp, #16]
 800709c:	7823      	ldrb	r3, [r4, #0]
 800709e:	2b2e      	cmp	r3, #46	@ 0x2e
 80070a0:	d10a      	bne.n	80070b8 <_svfiprintf_r+0x130>
 80070a2:	7863      	ldrb	r3, [r4, #1]
 80070a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80070a6:	d132      	bne.n	800710e <_svfiprintf_r+0x186>
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	3402      	adds	r4, #2
 80070ac:	1d1a      	adds	r2, r3, #4
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	9203      	str	r2, [sp, #12]
 80070b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070b6:	9305      	str	r3, [sp, #20]
 80070b8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007170 <_svfiprintf_r+0x1e8>
 80070bc:	2203      	movs	r2, #3
 80070be:	4650      	mov	r0, sl
 80070c0:	7821      	ldrb	r1, [r4, #0]
 80070c2:	f000 fa17 	bl	80074f4 <memchr>
 80070c6:	b138      	cbz	r0, 80070d8 <_svfiprintf_r+0x150>
 80070c8:	2240      	movs	r2, #64	@ 0x40
 80070ca:	9b04      	ldr	r3, [sp, #16]
 80070cc:	eba0 000a 	sub.w	r0, r0, sl
 80070d0:	4082      	lsls	r2, r0
 80070d2:	4313      	orrs	r3, r2
 80070d4:	3401      	adds	r4, #1
 80070d6:	9304      	str	r3, [sp, #16]
 80070d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070dc:	2206      	movs	r2, #6
 80070de:	4825      	ldr	r0, [pc, #148]	@ (8007174 <_svfiprintf_r+0x1ec>)
 80070e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070e4:	f000 fa06 	bl	80074f4 <memchr>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d036      	beq.n	800715a <_svfiprintf_r+0x1d2>
 80070ec:	4b22      	ldr	r3, [pc, #136]	@ (8007178 <_svfiprintf_r+0x1f0>)
 80070ee:	bb1b      	cbnz	r3, 8007138 <_svfiprintf_r+0x1b0>
 80070f0:	9b03      	ldr	r3, [sp, #12]
 80070f2:	3307      	adds	r3, #7
 80070f4:	f023 0307 	bic.w	r3, r3, #7
 80070f8:	3308      	adds	r3, #8
 80070fa:	9303      	str	r3, [sp, #12]
 80070fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070fe:	4433      	add	r3, r6
 8007100:	9309      	str	r3, [sp, #36]	@ 0x24
 8007102:	e76a      	b.n	8006fda <_svfiprintf_r+0x52>
 8007104:	460c      	mov	r4, r1
 8007106:	2001      	movs	r0, #1
 8007108:	fb0c 3202 	mla	r2, ip, r2, r3
 800710c:	e7a8      	b.n	8007060 <_svfiprintf_r+0xd8>
 800710e:	2300      	movs	r3, #0
 8007110:	f04f 0c0a 	mov.w	ip, #10
 8007114:	4619      	mov	r1, r3
 8007116:	3401      	adds	r4, #1
 8007118:	9305      	str	r3, [sp, #20]
 800711a:	4620      	mov	r0, r4
 800711c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007120:	3a30      	subs	r2, #48	@ 0x30
 8007122:	2a09      	cmp	r2, #9
 8007124:	d903      	bls.n	800712e <_svfiprintf_r+0x1a6>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0c6      	beq.n	80070b8 <_svfiprintf_r+0x130>
 800712a:	9105      	str	r1, [sp, #20]
 800712c:	e7c4      	b.n	80070b8 <_svfiprintf_r+0x130>
 800712e:	4604      	mov	r4, r0
 8007130:	2301      	movs	r3, #1
 8007132:	fb0c 2101 	mla	r1, ip, r1, r2
 8007136:	e7f0      	b.n	800711a <_svfiprintf_r+0x192>
 8007138:	ab03      	add	r3, sp, #12
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	462a      	mov	r2, r5
 800713e:	4638      	mov	r0, r7
 8007140:	4b0e      	ldr	r3, [pc, #56]	@ (800717c <_svfiprintf_r+0x1f4>)
 8007142:	a904      	add	r1, sp, #16
 8007144:	f3af 8000 	nop.w
 8007148:	1c42      	adds	r2, r0, #1
 800714a:	4606      	mov	r6, r0
 800714c:	d1d6      	bne.n	80070fc <_svfiprintf_r+0x174>
 800714e:	89ab      	ldrh	r3, [r5, #12]
 8007150:	065b      	lsls	r3, r3, #25
 8007152:	f53f af2d 	bmi.w	8006fb0 <_svfiprintf_r+0x28>
 8007156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007158:	e72c      	b.n	8006fb4 <_svfiprintf_r+0x2c>
 800715a:	ab03      	add	r3, sp, #12
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	462a      	mov	r2, r5
 8007160:	4638      	mov	r0, r7
 8007162:	4b06      	ldr	r3, [pc, #24]	@ (800717c <_svfiprintf_r+0x1f4>)
 8007164:	a904      	add	r1, sp, #16
 8007166:	f000 f87d 	bl	8007264 <_printf_i>
 800716a:	e7ed      	b.n	8007148 <_svfiprintf_r+0x1c0>
 800716c:	08007852 	.word	0x08007852
 8007170:	08007858 	.word	0x08007858
 8007174:	0800785c 	.word	0x0800785c
 8007178:	00000000 	.word	0x00000000
 800717c:	08006ed1 	.word	0x08006ed1

08007180 <_printf_common>:
 8007180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007184:	4616      	mov	r6, r2
 8007186:	4698      	mov	r8, r3
 8007188:	688a      	ldr	r2, [r1, #8]
 800718a:	690b      	ldr	r3, [r1, #16]
 800718c:	4607      	mov	r7, r0
 800718e:	4293      	cmp	r3, r2
 8007190:	bfb8      	it	lt
 8007192:	4613      	movlt	r3, r2
 8007194:	6033      	str	r3, [r6, #0]
 8007196:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800719a:	460c      	mov	r4, r1
 800719c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071a0:	b10a      	cbz	r2, 80071a6 <_printf_common+0x26>
 80071a2:	3301      	adds	r3, #1
 80071a4:	6033      	str	r3, [r6, #0]
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	0699      	lsls	r1, r3, #26
 80071aa:	bf42      	ittt	mi
 80071ac:	6833      	ldrmi	r3, [r6, #0]
 80071ae:	3302      	addmi	r3, #2
 80071b0:	6033      	strmi	r3, [r6, #0]
 80071b2:	6825      	ldr	r5, [r4, #0]
 80071b4:	f015 0506 	ands.w	r5, r5, #6
 80071b8:	d106      	bne.n	80071c8 <_printf_common+0x48>
 80071ba:	f104 0a19 	add.w	sl, r4, #25
 80071be:	68e3      	ldr	r3, [r4, #12]
 80071c0:	6832      	ldr	r2, [r6, #0]
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	42ab      	cmp	r3, r5
 80071c6:	dc2b      	bgt.n	8007220 <_printf_common+0xa0>
 80071c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071cc:	6822      	ldr	r2, [r4, #0]
 80071ce:	3b00      	subs	r3, #0
 80071d0:	bf18      	it	ne
 80071d2:	2301      	movne	r3, #1
 80071d4:	0692      	lsls	r2, r2, #26
 80071d6:	d430      	bmi.n	800723a <_printf_common+0xba>
 80071d8:	4641      	mov	r1, r8
 80071da:	4638      	mov	r0, r7
 80071dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071e0:	47c8      	blx	r9
 80071e2:	3001      	adds	r0, #1
 80071e4:	d023      	beq.n	800722e <_printf_common+0xae>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	6922      	ldr	r2, [r4, #16]
 80071ea:	f003 0306 	and.w	r3, r3, #6
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	bf14      	ite	ne
 80071f2:	2500      	movne	r5, #0
 80071f4:	6833      	ldreq	r3, [r6, #0]
 80071f6:	f04f 0600 	mov.w	r6, #0
 80071fa:	bf08      	it	eq
 80071fc:	68e5      	ldreq	r5, [r4, #12]
 80071fe:	f104 041a 	add.w	r4, r4, #26
 8007202:	bf08      	it	eq
 8007204:	1aed      	subeq	r5, r5, r3
 8007206:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800720a:	bf08      	it	eq
 800720c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007210:	4293      	cmp	r3, r2
 8007212:	bfc4      	itt	gt
 8007214:	1a9b      	subgt	r3, r3, r2
 8007216:	18ed      	addgt	r5, r5, r3
 8007218:	42b5      	cmp	r5, r6
 800721a:	d11a      	bne.n	8007252 <_printf_common+0xd2>
 800721c:	2000      	movs	r0, #0
 800721e:	e008      	b.n	8007232 <_printf_common+0xb2>
 8007220:	2301      	movs	r3, #1
 8007222:	4652      	mov	r2, sl
 8007224:	4641      	mov	r1, r8
 8007226:	4638      	mov	r0, r7
 8007228:	47c8      	blx	r9
 800722a:	3001      	adds	r0, #1
 800722c:	d103      	bne.n	8007236 <_printf_common+0xb6>
 800722e:	f04f 30ff 	mov.w	r0, #4294967295
 8007232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007236:	3501      	adds	r5, #1
 8007238:	e7c1      	b.n	80071be <_printf_common+0x3e>
 800723a:	2030      	movs	r0, #48	@ 0x30
 800723c:	18e1      	adds	r1, r4, r3
 800723e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007248:	4422      	add	r2, r4
 800724a:	3302      	adds	r3, #2
 800724c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007250:	e7c2      	b.n	80071d8 <_printf_common+0x58>
 8007252:	2301      	movs	r3, #1
 8007254:	4622      	mov	r2, r4
 8007256:	4641      	mov	r1, r8
 8007258:	4638      	mov	r0, r7
 800725a:	47c8      	blx	r9
 800725c:	3001      	adds	r0, #1
 800725e:	d0e6      	beq.n	800722e <_printf_common+0xae>
 8007260:	3601      	adds	r6, #1
 8007262:	e7d9      	b.n	8007218 <_printf_common+0x98>

08007264 <_printf_i>:
 8007264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007268:	7e0f      	ldrb	r7, [r1, #24]
 800726a:	4691      	mov	r9, r2
 800726c:	2f78      	cmp	r7, #120	@ 0x78
 800726e:	4680      	mov	r8, r0
 8007270:	460c      	mov	r4, r1
 8007272:	469a      	mov	sl, r3
 8007274:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007276:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800727a:	d807      	bhi.n	800728c <_printf_i+0x28>
 800727c:	2f62      	cmp	r7, #98	@ 0x62
 800727e:	d80a      	bhi.n	8007296 <_printf_i+0x32>
 8007280:	2f00      	cmp	r7, #0
 8007282:	f000 80d1 	beq.w	8007428 <_printf_i+0x1c4>
 8007286:	2f58      	cmp	r7, #88	@ 0x58
 8007288:	f000 80b8 	beq.w	80073fc <_printf_i+0x198>
 800728c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007290:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007294:	e03a      	b.n	800730c <_printf_i+0xa8>
 8007296:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800729a:	2b15      	cmp	r3, #21
 800729c:	d8f6      	bhi.n	800728c <_printf_i+0x28>
 800729e:	a101      	add	r1, pc, #4	@ (adr r1, 80072a4 <_printf_i+0x40>)
 80072a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072a4:	080072fd 	.word	0x080072fd
 80072a8:	08007311 	.word	0x08007311
 80072ac:	0800728d 	.word	0x0800728d
 80072b0:	0800728d 	.word	0x0800728d
 80072b4:	0800728d 	.word	0x0800728d
 80072b8:	0800728d 	.word	0x0800728d
 80072bc:	08007311 	.word	0x08007311
 80072c0:	0800728d 	.word	0x0800728d
 80072c4:	0800728d 	.word	0x0800728d
 80072c8:	0800728d 	.word	0x0800728d
 80072cc:	0800728d 	.word	0x0800728d
 80072d0:	0800740f 	.word	0x0800740f
 80072d4:	0800733b 	.word	0x0800733b
 80072d8:	080073c9 	.word	0x080073c9
 80072dc:	0800728d 	.word	0x0800728d
 80072e0:	0800728d 	.word	0x0800728d
 80072e4:	08007431 	.word	0x08007431
 80072e8:	0800728d 	.word	0x0800728d
 80072ec:	0800733b 	.word	0x0800733b
 80072f0:	0800728d 	.word	0x0800728d
 80072f4:	0800728d 	.word	0x0800728d
 80072f8:	080073d1 	.word	0x080073d1
 80072fc:	6833      	ldr	r3, [r6, #0]
 80072fe:	1d1a      	adds	r2, r3, #4
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6032      	str	r2, [r6, #0]
 8007304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007308:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800730c:	2301      	movs	r3, #1
 800730e:	e09c      	b.n	800744a <_printf_i+0x1e6>
 8007310:	6833      	ldr	r3, [r6, #0]
 8007312:	6820      	ldr	r0, [r4, #0]
 8007314:	1d19      	adds	r1, r3, #4
 8007316:	6031      	str	r1, [r6, #0]
 8007318:	0606      	lsls	r6, r0, #24
 800731a:	d501      	bpl.n	8007320 <_printf_i+0xbc>
 800731c:	681d      	ldr	r5, [r3, #0]
 800731e:	e003      	b.n	8007328 <_printf_i+0xc4>
 8007320:	0645      	lsls	r5, r0, #25
 8007322:	d5fb      	bpl.n	800731c <_printf_i+0xb8>
 8007324:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007328:	2d00      	cmp	r5, #0
 800732a:	da03      	bge.n	8007334 <_printf_i+0xd0>
 800732c:	232d      	movs	r3, #45	@ 0x2d
 800732e:	426d      	negs	r5, r5
 8007330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007334:	230a      	movs	r3, #10
 8007336:	4858      	ldr	r0, [pc, #352]	@ (8007498 <_printf_i+0x234>)
 8007338:	e011      	b.n	800735e <_printf_i+0xfa>
 800733a:	6821      	ldr	r1, [r4, #0]
 800733c:	6833      	ldr	r3, [r6, #0]
 800733e:	0608      	lsls	r0, r1, #24
 8007340:	f853 5b04 	ldr.w	r5, [r3], #4
 8007344:	d402      	bmi.n	800734c <_printf_i+0xe8>
 8007346:	0649      	lsls	r1, r1, #25
 8007348:	bf48      	it	mi
 800734a:	b2ad      	uxthmi	r5, r5
 800734c:	2f6f      	cmp	r7, #111	@ 0x6f
 800734e:	6033      	str	r3, [r6, #0]
 8007350:	bf14      	ite	ne
 8007352:	230a      	movne	r3, #10
 8007354:	2308      	moveq	r3, #8
 8007356:	4850      	ldr	r0, [pc, #320]	@ (8007498 <_printf_i+0x234>)
 8007358:	2100      	movs	r1, #0
 800735a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800735e:	6866      	ldr	r6, [r4, #4]
 8007360:	2e00      	cmp	r6, #0
 8007362:	60a6      	str	r6, [r4, #8]
 8007364:	db05      	blt.n	8007372 <_printf_i+0x10e>
 8007366:	6821      	ldr	r1, [r4, #0]
 8007368:	432e      	orrs	r6, r5
 800736a:	f021 0104 	bic.w	r1, r1, #4
 800736e:	6021      	str	r1, [r4, #0]
 8007370:	d04b      	beq.n	800740a <_printf_i+0x1a6>
 8007372:	4616      	mov	r6, r2
 8007374:	fbb5 f1f3 	udiv	r1, r5, r3
 8007378:	fb03 5711 	mls	r7, r3, r1, r5
 800737c:	5dc7      	ldrb	r7, [r0, r7]
 800737e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007382:	462f      	mov	r7, r5
 8007384:	42bb      	cmp	r3, r7
 8007386:	460d      	mov	r5, r1
 8007388:	d9f4      	bls.n	8007374 <_printf_i+0x110>
 800738a:	2b08      	cmp	r3, #8
 800738c:	d10b      	bne.n	80073a6 <_printf_i+0x142>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	07df      	lsls	r7, r3, #31
 8007392:	d508      	bpl.n	80073a6 <_printf_i+0x142>
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	6861      	ldr	r1, [r4, #4]
 8007398:	4299      	cmp	r1, r3
 800739a:	bfde      	ittt	le
 800739c:	2330      	movle	r3, #48	@ 0x30
 800739e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073a6:	1b92      	subs	r2, r2, r6
 80073a8:	6122      	str	r2, [r4, #16]
 80073aa:	464b      	mov	r3, r9
 80073ac:	4621      	mov	r1, r4
 80073ae:	4640      	mov	r0, r8
 80073b0:	f8cd a000 	str.w	sl, [sp]
 80073b4:	aa03      	add	r2, sp, #12
 80073b6:	f7ff fee3 	bl	8007180 <_printf_common>
 80073ba:	3001      	adds	r0, #1
 80073bc:	d14a      	bne.n	8007454 <_printf_i+0x1f0>
 80073be:	f04f 30ff 	mov.w	r0, #4294967295
 80073c2:	b004      	add	sp, #16
 80073c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	f043 0320 	orr.w	r3, r3, #32
 80073ce:	6023      	str	r3, [r4, #0]
 80073d0:	2778      	movs	r7, #120	@ 0x78
 80073d2:	4832      	ldr	r0, [pc, #200]	@ (800749c <_printf_i+0x238>)
 80073d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	6831      	ldr	r1, [r6, #0]
 80073dc:	061f      	lsls	r7, r3, #24
 80073de:	f851 5b04 	ldr.w	r5, [r1], #4
 80073e2:	d402      	bmi.n	80073ea <_printf_i+0x186>
 80073e4:	065f      	lsls	r7, r3, #25
 80073e6:	bf48      	it	mi
 80073e8:	b2ad      	uxthmi	r5, r5
 80073ea:	6031      	str	r1, [r6, #0]
 80073ec:	07d9      	lsls	r1, r3, #31
 80073ee:	bf44      	itt	mi
 80073f0:	f043 0320 	orrmi.w	r3, r3, #32
 80073f4:	6023      	strmi	r3, [r4, #0]
 80073f6:	b11d      	cbz	r5, 8007400 <_printf_i+0x19c>
 80073f8:	2310      	movs	r3, #16
 80073fa:	e7ad      	b.n	8007358 <_printf_i+0xf4>
 80073fc:	4826      	ldr	r0, [pc, #152]	@ (8007498 <_printf_i+0x234>)
 80073fe:	e7e9      	b.n	80073d4 <_printf_i+0x170>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	f023 0320 	bic.w	r3, r3, #32
 8007406:	6023      	str	r3, [r4, #0]
 8007408:	e7f6      	b.n	80073f8 <_printf_i+0x194>
 800740a:	4616      	mov	r6, r2
 800740c:	e7bd      	b.n	800738a <_printf_i+0x126>
 800740e:	6833      	ldr	r3, [r6, #0]
 8007410:	6825      	ldr	r5, [r4, #0]
 8007412:	1d18      	adds	r0, r3, #4
 8007414:	6961      	ldr	r1, [r4, #20]
 8007416:	6030      	str	r0, [r6, #0]
 8007418:	062e      	lsls	r6, r5, #24
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	d501      	bpl.n	8007422 <_printf_i+0x1be>
 800741e:	6019      	str	r1, [r3, #0]
 8007420:	e002      	b.n	8007428 <_printf_i+0x1c4>
 8007422:	0668      	lsls	r0, r5, #25
 8007424:	d5fb      	bpl.n	800741e <_printf_i+0x1ba>
 8007426:	8019      	strh	r1, [r3, #0]
 8007428:	2300      	movs	r3, #0
 800742a:	4616      	mov	r6, r2
 800742c:	6123      	str	r3, [r4, #16]
 800742e:	e7bc      	b.n	80073aa <_printf_i+0x146>
 8007430:	6833      	ldr	r3, [r6, #0]
 8007432:	2100      	movs	r1, #0
 8007434:	1d1a      	adds	r2, r3, #4
 8007436:	6032      	str	r2, [r6, #0]
 8007438:	681e      	ldr	r6, [r3, #0]
 800743a:	6862      	ldr	r2, [r4, #4]
 800743c:	4630      	mov	r0, r6
 800743e:	f000 f859 	bl	80074f4 <memchr>
 8007442:	b108      	cbz	r0, 8007448 <_printf_i+0x1e4>
 8007444:	1b80      	subs	r0, r0, r6
 8007446:	6060      	str	r0, [r4, #4]
 8007448:	6863      	ldr	r3, [r4, #4]
 800744a:	6123      	str	r3, [r4, #16]
 800744c:	2300      	movs	r3, #0
 800744e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007452:	e7aa      	b.n	80073aa <_printf_i+0x146>
 8007454:	4632      	mov	r2, r6
 8007456:	4649      	mov	r1, r9
 8007458:	4640      	mov	r0, r8
 800745a:	6923      	ldr	r3, [r4, #16]
 800745c:	47d0      	blx	sl
 800745e:	3001      	adds	r0, #1
 8007460:	d0ad      	beq.n	80073be <_printf_i+0x15a>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	079b      	lsls	r3, r3, #30
 8007466:	d413      	bmi.n	8007490 <_printf_i+0x22c>
 8007468:	68e0      	ldr	r0, [r4, #12]
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	4298      	cmp	r0, r3
 800746e:	bfb8      	it	lt
 8007470:	4618      	movlt	r0, r3
 8007472:	e7a6      	b.n	80073c2 <_printf_i+0x15e>
 8007474:	2301      	movs	r3, #1
 8007476:	4632      	mov	r2, r6
 8007478:	4649      	mov	r1, r9
 800747a:	4640      	mov	r0, r8
 800747c:	47d0      	blx	sl
 800747e:	3001      	adds	r0, #1
 8007480:	d09d      	beq.n	80073be <_printf_i+0x15a>
 8007482:	3501      	adds	r5, #1
 8007484:	68e3      	ldr	r3, [r4, #12]
 8007486:	9903      	ldr	r1, [sp, #12]
 8007488:	1a5b      	subs	r3, r3, r1
 800748a:	42ab      	cmp	r3, r5
 800748c:	dcf2      	bgt.n	8007474 <_printf_i+0x210>
 800748e:	e7eb      	b.n	8007468 <_printf_i+0x204>
 8007490:	2500      	movs	r5, #0
 8007492:	f104 0619 	add.w	r6, r4, #25
 8007496:	e7f5      	b.n	8007484 <_printf_i+0x220>
 8007498:	08007863 	.word	0x08007863
 800749c:	08007874 	.word	0x08007874

080074a0 <memmove>:
 80074a0:	4288      	cmp	r0, r1
 80074a2:	b510      	push	{r4, lr}
 80074a4:	eb01 0402 	add.w	r4, r1, r2
 80074a8:	d902      	bls.n	80074b0 <memmove+0x10>
 80074aa:	4284      	cmp	r4, r0
 80074ac:	4623      	mov	r3, r4
 80074ae:	d807      	bhi.n	80074c0 <memmove+0x20>
 80074b0:	1e43      	subs	r3, r0, #1
 80074b2:	42a1      	cmp	r1, r4
 80074b4:	d008      	beq.n	80074c8 <memmove+0x28>
 80074b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074be:	e7f8      	b.n	80074b2 <memmove+0x12>
 80074c0:	4601      	mov	r1, r0
 80074c2:	4402      	add	r2, r0
 80074c4:	428a      	cmp	r2, r1
 80074c6:	d100      	bne.n	80074ca <memmove+0x2a>
 80074c8:	bd10      	pop	{r4, pc}
 80074ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074d2:	e7f7      	b.n	80074c4 <memmove+0x24>

080074d4 <_sbrk_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	2300      	movs	r3, #0
 80074d8:	4d05      	ldr	r5, [pc, #20]	@ (80074f0 <_sbrk_r+0x1c>)
 80074da:	4604      	mov	r4, r0
 80074dc:	4608      	mov	r0, r1
 80074de:	602b      	str	r3, [r5, #0]
 80074e0:	f7f9 faf8 	bl	8000ad4 <_sbrk>
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	d102      	bne.n	80074ee <_sbrk_r+0x1a>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	b103      	cbz	r3, 80074ee <_sbrk_r+0x1a>
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	200048f4 	.word	0x200048f4

080074f4 <memchr>:
 80074f4:	4603      	mov	r3, r0
 80074f6:	b510      	push	{r4, lr}
 80074f8:	b2c9      	uxtb	r1, r1
 80074fa:	4402      	add	r2, r0
 80074fc:	4293      	cmp	r3, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	d101      	bne.n	8007506 <memchr+0x12>
 8007502:	2000      	movs	r0, #0
 8007504:	e003      	b.n	800750e <memchr+0x1a>
 8007506:	7804      	ldrb	r4, [r0, #0]
 8007508:	3301      	adds	r3, #1
 800750a:	428c      	cmp	r4, r1
 800750c:	d1f6      	bne.n	80074fc <memchr+0x8>
 800750e:	bd10      	pop	{r4, pc}

08007510 <_realloc_r>:
 8007510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007514:	4607      	mov	r7, r0
 8007516:	4614      	mov	r4, r2
 8007518:	460d      	mov	r5, r1
 800751a:	b921      	cbnz	r1, 8007526 <_realloc_r+0x16>
 800751c:	4611      	mov	r1, r2
 800751e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007522:	f7ff bc49 	b.w	8006db8 <_malloc_r>
 8007526:	b92a      	cbnz	r2, 8007534 <_realloc_r+0x24>
 8007528:	f7ff fbdc 	bl	8006ce4 <_free_r>
 800752c:	4625      	mov	r5, r4
 800752e:	4628      	mov	r0, r5
 8007530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007534:	f000 f81a 	bl	800756c <_malloc_usable_size_r>
 8007538:	4284      	cmp	r4, r0
 800753a:	4606      	mov	r6, r0
 800753c:	d802      	bhi.n	8007544 <_realloc_r+0x34>
 800753e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007542:	d8f4      	bhi.n	800752e <_realloc_r+0x1e>
 8007544:	4621      	mov	r1, r4
 8007546:	4638      	mov	r0, r7
 8007548:	f7ff fc36 	bl	8006db8 <_malloc_r>
 800754c:	4680      	mov	r8, r0
 800754e:	b908      	cbnz	r0, 8007554 <_realloc_r+0x44>
 8007550:	4645      	mov	r5, r8
 8007552:	e7ec      	b.n	800752e <_realloc_r+0x1e>
 8007554:	42b4      	cmp	r4, r6
 8007556:	4622      	mov	r2, r4
 8007558:	4629      	mov	r1, r5
 800755a:	bf28      	it	cs
 800755c:	4632      	movcs	r2, r6
 800755e:	f7ff fbb3 	bl	8006cc8 <memcpy>
 8007562:	4629      	mov	r1, r5
 8007564:	4638      	mov	r0, r7
 8007566:	f7ff fbbd 	bl	8006ce4 <_free_r>
 800756a:	e7f1      	b.n	8007550 <_realloc_r+0x40>

0800756c <_malloc_usable_size_r>:
 800756c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007570:	1f18      	subs	r0, r3, #4
 8007572:	2b00      	cmp	r3, #0
 8007574:	bfbc      	itt	lt
 8007576:	580b      	ldrlt	r3, [r1, r0]
 8007578:	18c0      	addlt	r0, r0, r3
 800757a:	4770      	bx	lr

0800757c <_init>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	bf00      	nop
 8007580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007582:	bc08      	pop	{r3}
 8007584:	469e      	mov	lr, r3
 8007586:	4770      	bx	lr

08007588 <_fini>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	bf00      	nop
 800758c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758e:	bc08      	pop	{r3}
 8007590:	469e      	mov	lr, r3
 8007592:	4770      	bx	lr
