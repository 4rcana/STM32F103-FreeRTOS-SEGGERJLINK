
STM32F103-FreeRTOS-SEGGERJLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d584  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800d698  0800d698  0000e698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbc4  0800dbc4  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dbc4  0800dbc4  0000ebc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbcc  0800dbcc  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbcc  0800dbcc  0000ebcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbd0  0800dbd0  0000ebd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800dbd4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048d8  200001d8  0800ddac  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20004ab0  0800ddac  0000fab0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2e7  00000000  00000000  0000f201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e9  00000000  00000000  0002d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b60  00000000  00000000  000315d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000153e  00000000  00000000  00033138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005bff  00000000  00000000  00034676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb99  00000000  00000000  0003a275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2041  00000000  00000000  00058e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ae4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000836c  00000000  00000000  0010ae94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b6  00000000  00000000  00113200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d67c 	.word	0x0800d67c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800d67c 	.word	0x0800d67c

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	@ 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20003db4 	.word	0x20003db4

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fmul>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d06f      	beq.n	8000e28 <__aeabi_fmul+0xf8>
 8000d48:	441a      	add	r2, r3
 8000d4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4e:	0240      	lsls	r0, r0, #9
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d56:	d01e      	beq.n	8000d96 <__aeabi_fmul+0x66>
 8000d58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d64:	fba0 3101 	umull	r3, r1, r0, r1
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d6c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d70:	bf3e      	ittt	cc
 8000d72:	0049      	lslcc	r1, r1, #1
 8000d74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d78:	005b      	lslcc	r3, r3, #1
 8000d7a:	ea40 0001 	orr.w	r0, r0, r1
 8000d7e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d82:	2afd      	cmp	r2, #253	@ 0xfd
 8000d84:	d81d      	bhi.n	8000dc2 <__aeabi_fmul+0x92>
 8000d86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	0249      	lsleq	r1, r1, #9
 8000da2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000daa:	3a7f      	subs	r2, #127	@ 0x7f
 8000dac:	bfc2      	ittt	gt
 8000dae:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db6:	4770      	bxgt	lr
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	dc5d      	bgt.n	8000e80 <__aeabi_fmul+0x150>
 8000dc4:	f112 0f19 	cmn.w	r2, #25
 8000dc8:	bfdc      	itt	le
 8000dca:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dce:	4770      	bxle	lr
 8000dd0:	f1c2 0200 	rsb	r2, r2, #0
 8000dd4:	0041      	lsls	r1, r0, #1
 8000dd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dda:	f1c2 0220 	rsb	r2, r2, #32
 8000dde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de6:	f140 0000 	adc.w	r0, r0, #0
 8000dea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dee:	bf08      	it	eq
 8000df0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df4:	4770      	bx	lr
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0040      	lsleq	r0, r0, #1
 8000e02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e06:	3a01      	subeq	r2, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xce>
 8000e0a:	ea40 000c 	orr.w	r0, r0, ip
 8000e0e:	f093 0f00 	teq	r3, #0
 8000e12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0049      	lsleq	r1, r1, #1
 8000e1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e1e:	3b01      	subeq	r3, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xe6>
 8000e22:	ea41 010c 	orr.w	r1, r1, ip
 8000e26:	e78f      	b.n	8000d48 <__aeabi_fmul+0x18>
 8000e28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	bf18      	it	ne
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d00a      	beq.n	8000e4e <__aeabi_fmul+0x11e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e42:	d1d8      	bne.n	8000df6 <__aeabi_fmul+0xc6>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	bf17      	itett	ne
 8000e54:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e58:	4608      	moveq	r0, r1
 8000e5a:	f091 0f00 	teqne	r1, #0
 8000e5e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e62:	d014      	beq.n	8000e8e <__aeabi_fmul+0x15e>
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	d101      	bne.n	8000e6e <__aeabi_fmul+0x13e>
 8000e6a:	0242      	lsls	r2, r0, #9
 8000e6c:	d10f      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e6e:	ea93 0f0c 	teq	r3, ip
 8000e72:	d103      	bne.n	8000e7c <__aeabi_fmul+0x14c>
 8000e74:	024b      	lsls	r3, r1, #9
 8000e76:	bf18      	it	ne
 8000e78:	4608      	movne	r0, r1
 8000e7a:	d108      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e8c:	4770      	bx	lr
 8000e8e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e92:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e96:	4770      	bx	lr

08000e98 <__aeabi_fdiv>:
 8000e98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea0:	bf1e      	ittt	ne
 8000ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea6:	ea92 0f0c 	teqne	r2, ip
 8000eaa:	ea93 0f0c 	teqne	r3, ip
 8000eae:	d069      	beq.n	8000f84 <__aeabi_fdiv+0xec>
 8000eb0:	eba2 0203 	sub.w	r2, r2, r3
 8000eb4:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ebe:	d037      	beq.n	8000f30 <__aeabi_fdiv+0x98>
 8000ec0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ecc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf38      	it	cc
 8000ed4:	005b      	lslcc	r3, r3, #1
 8000ed6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eda:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	bf24      	itt	cs
 8000ee2:	1a5b      	subcs	r3, r3, r1
 8000ee4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efa:	bf24      	itt	cs
 8000efc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	bf18      	it	ne
 8000f16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1a:	d1e0      	bne.n	8000ede <__aeabi_fdiv+0x46>
 8000f1c:	2afd      	cmp	r2, #253	@ 0xfd
 8000f1e:	f63f af50 	bhi.w	8000dc2 <__aeabi_fmul+0x92>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f28:	bf08      	it	eq
 8000f2a:	f020 0001 	biceq.w	r0, r0, #1
 8000f2e:	4770      	bx	lr
 8000f30:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f38:	327f      	adds	r2, #127	@ 0x7f
 8000f3a:	bfc2      	ittt	gt
 8000f3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f44:	4770      	bxgt	lr
 8000f46:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	3a01      	subs	r2, #1
 8000f50:	e737      	b.n	8000dc2 <__aeabi_fmul+0x92>
 8000f52:	f092 0f00 	teq	r2, #0
 8000f56:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0040      	lsleq	r0, r0, #1
 8000f5e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f62:	3a01      	subeq	r2, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xc2>
 8000f66:	ea40 000c 	orr.w	r0, r0, ip
 8000f6a:	f093 0f00 	teq	r3, #0
 8000f6e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0049      	lsleq	r1, r1, #1
 8000f76:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7a:	3b01      	subeq	r3, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xda>
 8000f7e:	ea41 010c 	orr.w	r1, r1, ip
 8000f82:	e795      	b.n	8000eb0 <__aeabi_fdiv+0x18>
 8000f84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d108      	bne.n	8000fa0 <__aeabi_fdiv+0x108>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	f47f af7d 	bne.w	8000e8e <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	f47f af70 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e776      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	d104      	bne.n	8000fb0 <__aeabi_fdiv+0x118>
 8000fa6:	024b      	lsls	r3, r1, #9
 8000fa8:	f43f af4c 	beq.w	8000e44 <__aeabi_fmul+0x114>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e76e      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb4:	bf18      	it	ne
 8000fb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fba:	d1ca      	bne.n	8000f52 <__aeabi_fdiv+0xba>
 8000fbc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc0:	f47f af5c 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000fc4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fc8:	f47f af3c 	bne.w	8000e44 <__aeabi_fmul+0x114>
 8000fcc:	e75f      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fce:	bf00      	nop

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd4:	f000 fc28 	bl	8001828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd8:	f000 f83c 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f000 f8b2 	bl	8001144 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000fe0:	f000 f87a 	bl	80010d8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  LPS25HB_Initialise(&hi2c2);
 8000fe4:	4812      	ldr	r0, [pc, #72]	@ (8001030 <main+0x60>)
 8000fe6:	f004 fbf9 	bl	80057dc <LPS25HB_Initialise>
  /* USER CODE END 2 */

  /* Init scheduler */
  SEGGER_SYSVIEW_Conf();
 8000fea:	f008 f883 	bl	80090f4 <SEGGER_SYSVIEW_Conf>
  osKernelInitialize();
 8000fee:	f004 fd11 	bl	8005a14 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SensorRAWQueue */
  SensorRAWQueueHandle = osMessageQueueNew(3, sizeof(uint8_t), &SensorRAWQueue_attributes);
 8000ff2:	4a10      	ldr	r2, [pc, #64]	@ (8001034 <main+0x64>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	f004 fe04 	bl	8005c04 <osMessageQueueNew>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <main+0x68>)
 8001000:	6013      	str	r3, [r2, #0]

  /* creation of LedMUX
  LedMUXHandle = osThreadNew(StartLedMUX, NULL, &LedMUX_attributes);

   /* creation of SensorReadTask */
  SensorReadTaskHandle = osThreadNew(SensorRead, NULL, &SensorReadTask_attributes);
 8001002:	4a0e      	ldr	r2, [pc, #56]	@ (800103c <main+0x6c>)
 8001004:	2100      	movs	r1, #0
 8001006:	480e      	ldr	r0, [pc, #56]	@ (8001040 <main+0x70>)
 8001008:	f004 fd4c 	bl	8005aa4 <osThreadNew>
 800100c:	4603      	mov	r3, r0
 800100e:	4a0d      	ldr	r2, [pc, #52]	@ (8001044 <main+0x74>)
 8001010:	6013      	str	r3, [r2, #0]

  /* creation of DataTransferTask */
  DataTransferTaskHandle = osThreadNew(DataTransfer, NULL, &DataTransferTask_attributes);
 8001012:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <main+0x78>)
 8001014:	2100      	movs	r1, #0
 8001016:	480d      	ldr	r0, [pc, #52]	@ (800104c <main+0x7c>)
 8001018:	f004 fd44 	bl	8005aa4 <osThreadNew>
 800101c:	4603      	mov	r3, r0
 800101e:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <main+0x80>)
 8001020:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  SEGGER_SYSVIEW_Conf();
 8001022:	f008 f867 	bl	80090f4 <SEGGER_SYSVIEW_Conf>
  osKernelStart();
 8001026:	f004 fd17 	bl	8005a58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800102a:	bf00      	nop
 800102c:	e7fd      	b.n	800102a <main+0x5a>
 800102e:	bf00      	nop
 8001030:	200001f4 	.word	0x200001f4
 8001034:	0800d7e4 	.word	0x0800d7e4
 8001038:	20000250 	.word	0x20000250
 800103c:	0800d79c 	.word	0x0800d79c
 8001040:	08001279 	.word	0x08001279
 8001044:	20000248 	.word	0x20000248
 8001048:	0800d7c0 	.word	0x0800d7c0
 800104c:	080012b1 	.word	0x080012b1
 8001050:	2000024c 	.word	0x2000024c

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b090      	sub	sp, #64	@ 0x40
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	2228      	movs	r2, #40	@ 0x28
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f00a fbed 	bl	800b842 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107a:	2301      	movs	r3, #1
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107e:	2310      	movs	r3, #16
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001082:	2302      	movs	r3, #2
 8001084:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001086:	2300      	movs	r3, #0
 8001088:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800108a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800108e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001090:	f107 0318 	add.w	r3, r7, #24
 8001094:	4618      	mov	r0, r3
 8001096:	f003 fd37 	bl	8004b08 <HAL_RCC_OscConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80010a0:	f000 f9ac 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a4:	230f      	movs	r3, #15
 80010a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a8:	2302      	movs	r3, #2
 80010aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2102      	movs	r1, #2
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 ffa4 	bl	800500c <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010ca:	f000 f997 	bl	80013fc <Error_Handler>
  }
}
 80010ce:	bf00      	nop
 80010d0:	3740      	adds	r7, #64	@ 0x40
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010dc:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <MX_I2C2_Init+0x60>)
 80010de:	4a17      	ldr	r2, [pc, #92]	@ (800113c <MX_I2C2_Init+0x64>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <MX_I2C2_Init+0x60>)
 80010e4:	4a16      	ldr	r2, [pc, #88]	@ (8001140 <MX_I2C2_Init+0x68>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <MX_I2C2_Init+0x60>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010ee:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_I2C2_Init+0x60>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f4:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <MX_I2C2_Init+0x60>)
 80010f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <MX_I2C2_Init+0x60>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001102:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <MX_I2C2_Init+0x60>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <MX_I2C2_Init+0x60>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <MX_I2C2_Init+0x60>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001114:	4808      	ldr	r0, [pc, #32]	@ (8001138 <MX_I2C2_Init+0x60>)
 8001116:	f000 fed3 	bl	8001ec0 <HAL_I2C_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001120:	f000 f96c 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 40, 0); // Set priority
 8001124:	2200      	movs	r2, #0
 8001126:	2128      	movs	r1, #40	@ 0x28
 8001128:	2021      	movs	r0, #33	@ 0x21
 800112a:	f000 fc64 	bl	80019f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn); // Enable interrupt
 800112e:	2021      	movs	r0, #33	@ 0x21
 8001130:	f000 fc7d 	bl	8001a2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200001f4 	.word	0x200001f4
 800113c:	40005800 	.word	0x40005800
 8001140:	000186a0 	.word	0x000186a0

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001158:	4b42      	ldr	r3, [pc, #264]	@ (8001264 <MX_GPIO_Init+0x120>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a41      	ldr	r2, [pc, #260]	@ (8001264 <MX_GPIO_Init+0x120>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b3f      	ldr	r3, [pc, #252]	@ (8001264 <MX_GPIO_Init+0x120>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b3c      	ldr	r3, [pc, #240]	@ (8001264 <MX_GPIO_Init+0x120>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a3b      	ldr	r2, [pc, #236]	@ (8001264 <MX_GPIO_Init+0x120>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b39      	ldr	r3, [pc, #228]	@ (8001264 <MX_GPIO_Init+0x120>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b36      	ldr	r3, [pc, #216]	@ (8001264 <MX_GPIO_Init+0x120>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a35      	ldr	r2, [pc, #212]	@ (8001264 <MX_GPIO_Init+0x120>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b33      	ldr	r3, [pc, #204]	@ (8001264 <MX_GPIO_Init+0x120>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2120      	movs	r1, #32
 80011a4:	4830      	ldr	r0, [pc, #192]	@ (8001268 <MX_GPIO_Init+0x124>)
 80011a6:	f000 fe5b 	bl	8001e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80011b0:	482e      	ldr	r0, [pc, #184]	@ (800126c <MX_GPIO_Init+0x128>)
 80011b2:	f000 fe55 	bl	8001e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001270 <MX_GPIO_Init+0x12c>)
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	482a      	ldr	r0, [pc, #168]	@ (8001274 <MX_GPIO_Init+0x130>)
 80011cc:	f000 fcc4 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011d0:	2320      	movs	r3, #32
 80011d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2302      	movs	r3, #2
 80011de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	4820      	ldr	r0, [pc, #128]	@ (8001268 <MX_GPIO_Init+0x124>)
 80011e8:	f000 fcb6 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Left_Button_Pin */
  GPIO_InitStruct.Pin = Left_Button_Pin;
 80011ec:	2301      	movs	r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <MX_GPIO_Init+0x12c>)
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Left_Button_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4619      	mov	r1, r3
 80011fe:	481b      	ldr	r0, [pc, #108]	@ (800126c <MX_GPIO_Init+0x128>)
 8001200:	f000 fcaa 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin;
 8001204:	23c0      	movs	r3, #192	@ 0xc0
 8001206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	4815      	ldr	r0, [pc, #84]	@ (800126c <MX_GPIO_Init+0x128>)
 8001218:	f000 fc9e 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 800121c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2302      	movs	r3, #2
 800122c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	4619      	mov	r1, r3
 8001234:	480d      	ldr	r0, [pc, #52]	@ (800126c <MX_GPIO_Init+0x128>)
 8001236:	f000 fc8f 	bl	8001b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 13, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	210d      	movs	r1, #13
 800123e:	2006      	movs	r0, #6
 8001240:	f000 fbd9 	bl	80019f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001244:	2006      	movs	r0, #6
 8001246:	f000 fbf2 	bl	8001a2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 47, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	212f      	movs	r1, #47	@ 0x2f
 800124e:	2028      	movs	r0, #40	@ 0x28
 8001250:	f000 fbd1 	bl	80019f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001254:	2028      	movs	r0, #40	@ 0x28
 8001256:	f000 fbea 	bl	8001a2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800125a:	bf00      	nop
 800125c:	3720      	adds	r7, #32
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000
 8001268:	40010800 	.word	0x40010800
 800126c:	40010c00 	.word	0x40010c00
 8001270:	10210000 	.word	0x10210000
 8001274:	40011000 	.word	0x40011000

08001278 <SensorRead>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void SensorRead(void *argument)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    for(;;)
    {
	if(Left_Button_State == TEMP)
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <SensorRead+0x30>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d103      	bne.n	8001290 <SensorRead+0x18>
	{
	    LPS25HB_Measure_Temperature_IT(&hi2c2);
 8001288:	4808      	ldr	r0, [pc, #32]	@ (80012ac <SensorRead+0x34>)
 800128a:	f004 fadb 	bl	8005844 <LPS25HB_Measure_Temperature_IT>
 800128e:	e006      	b.n	800129e <SensorRead+0x26>
	}
	else if(Left_Button_State == PRESS)
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <SensorRead+0x30>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d102      	bne.n	800129e <SensorRead+0x26>
	{
	    LPS25HB_Measure_Pressure_IT(&hi2c2);
 8001298:	4804      	ldr	r0, [pc, #16]	@ (80012ac <SensorRead+0x34>)
 800129a:	f004 faff 	bl	800589c <LPS25HB_Measure_Pressure_IT>
	}
	osDelay(1000);
 800129e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012a2:	f004 fc94 	bl	8005bce <osDelay>
	if(Left_Button_State == TEMP)
 80012a6:	e7eb      	b.n	8001280 <SensorRead+0x8>
 80012a8:	20000254 	.word	0x20000254
 80012ac:	200001f4 	.word	0x200001f4

080012b0 <DataTransfer>:
    }
}

void DataTransfer(void *argument)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
    uint8_t ReceivedMSG = 0, counter = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	2300      	movs	r3, #0
 80012be:	77fb      	strb	r3, [r7, #31]
    int32_t temp = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
    float temperature = 0, pressure = 0;
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	f04f 0300 	mov.w	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
    for(;;)
    {
	if(osMessageQueueGet(SensorRAWQueueHandle, &ReceivedMSG, NULL, osWaitForever) == osOK){
 80012d0:	4b30      	ldr	r3, [pc, #192]	@ (8001394 <DataTransfer+0xe4>)
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	f107 010f 	add.w	r1, r7, #15
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	2200      	movs	r2, #0
 80012de:	f004 fd69 	bl	8005db4 <osMessageQueueGet>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f3      	bne.n	80012d0 <DataTransfer+0x20>
	    temp |= ReceivedMSG << (counter * 8);
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	461a      	mov	r2, r3
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
	    counter++;
 80012fa:	7ffb      	ldrb	r3, [r7, #31]
 80012fc:	3301      	adds	r3, #1
 80012fe:	77fb      	strb	r3, [r7, #31]
	    if(Left_Button_State == TEMP && counter == 2){
 8001300:	4b25      	ldr	r3, [pc, #148]	@ (8001398 <DataTransfer+0xe8>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d12e      	bne.n	8001366 <DataTransfer+0xb6>
 8001308:	7ffb      	ldrb	r3, [r7, #31]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d12b      	bne.n	8001366 <DataTransfer+0xb6>
		if(temp > 32767) { temperature = 42.5f + (temp - 65535) / 480.0f; }	// Because value should be interpreted in 2's complement and int32_t is being used
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001314:	db13      	blt.n	800133e <DataTransfer+0x8e>
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 800131c:	3bff      	subs	r3, #255	@ 0xff
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fcb2 	bl	8000c88 <__aeabi_i2f>
 8001324:	4603      	mov	r3, r0
 8001326:	491d      	ldr	r1, [pc, #116]	@ (800139c <DataTransfer+0xec>)
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fdb5 	bl	8000e98 <__aeabi_fdiv>
 800132e:	4603      	mov	r3, r0
 8001330:	491b      	ldr	r1, [pc, #108]	@ (80013a0 <DataTransfer+0xf0>)
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fbf4 	bl	8000b20 <__addsf3>
 8001338:	4603      	mov	r3, r0
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	e00e      	b.n	800135c <DataTransfer+0xac>
		else { temperature = 42.5f + temp / 480.0f; }				// Calculated temperature is in degrees celsius.
 800133e:	69b8      	ldr	r0, [r7, #24]
 8001340:	f7ff fca2 	bl	8000c88 <__aeabi_i2f>
 8001344:	4603      	mov	r3, r0
 8001346:	4915      	ldr	r1, [pc, #84]	@ (800139c <DataTransfer+0xec>)
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fda5 	bl	8000e98 <__aeabi_fdiv>
 800134e:	4603      	mov	r3, r0
 8001350:	4913      	ldr	r1, [pc, #76]	@ (80013a0 <DataTransfer+0xf0>)
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fbe4 	bl	8000b20 <__addsf3>
 8001358:	4603      	mov	r3, r0
 800135a:	617b      	str	r3, [r7, #20]
		temp = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
		counter = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	77fb      	strb	r3, [r7, #31]
 8001364:	e015      	b.n	8001392 <DataTransfer+0xe2>
	    }
	    else if(Left_Button_State == PRESS && counter == 3){
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <DataTransfer+0xe8>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d1b0      	bne.n	80012d0 <DataTransfer+0x20>
 800136e:	7ffb      	ldrb	r3, [r7, #31]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d1ad      	bne.n	80012d0 <DataTransfer+0x20>
		pressure =  temp / 4096.0f;						// Calculated pressure is in hPa
 8001374:	69b8      	ldr	r0, [r7, #24]
 8001376:	f7ff fc87 	bl	8000c88 <__aeabi_i2f>
 800137a:	4603      	mov	r3, r0
 800137c:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fd89 	bl	8000e98 <__aeabi_fdiv>
 8001386:	4603      	mov	r3, r0
 8001388:	613b      	str	r3, [r7, #16]
		temp = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
		counter = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	77fb      	strb	r3, [r7, #31]
	if(osMessageQueueGet(SensorRAWQueueHandle, &ReceivedMSG, NULL, osWaitForever) == osOK){
 8001392:	e79d      	b.n	80012d0 <DataTransfer+0x20>
 8001394:	20000250 	.word	0x20000250
 8001398:	20000254 	.word	0x20000254
 800139c:	43f00000 	.word	0x43f00000
 80013a0:	422a0000 	.word	0x422a0000

080013a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a04      	ldr	r2, [pc, #16]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d101      	bne.n	80013ba <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80013b6:	f000 fa4d 	bl	8001854 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40000800 	.word	0x40000800

080013c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);

	if(GPIO_Pin == Left_Button_Pin){
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d10a      	bne.n	80013ee <HAL_GPIO_EXTI_Callback+0x26>
		}
		else{
		    Left_Button_State = WAIT;
		}
		*/
		if(Left_Button_State == TEMP){
 80013d8:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <HAL_GPIO_EXTI_Callback+0x30>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d103      	bne.n	80013e8 <HAL_GPIO_EXTI_Callback+0x20>
		    Left_Button_State = PRESS;
 80013e0:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <HAL_GPIO_EXTI_Callback+0x30>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
		}
		else{
		    Left_Button_State = TEMP;
		}
	}
}
 80013e6:	e002      	b.n	80013ee <HAL_GPIO_EXTI_Callback+0x26>
		    Left_Button_State = TEMP;
 80013e8:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <HAL_GPIO_EXTI_Callback+0x30>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	20000254 	.word	0x20000254

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800140e:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <HAL_MspInit+0x68>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4a17      	ldr	r2, [pc, #92]	@ (8001470 <HAL_MspInit+0x68>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6193      	str	r3, [r2, #24]
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <HAL_MspInit+0x68>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <HAL_MspInit+0x68>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a11      	ldr	r2, [pc, #68]	@ (8001470 <HAL_MspInit+0x68>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001430:	61d3      	str	r3, [r2, #28]
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <HAL_MspInit+0x68>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	210f      	movs	r1, #15
 8001442:	f06f 0001 	mvn.w	r0, #1
 8001446:	f000 fad6 	bl	80019f6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800144a:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <HAL_MspInit+0x6c>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <HAL_MspInit+0x6c>)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	40010000 	.word	0x40010000

08001478 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a16      	ldr	r2, [pc, #88]	@ (80014ec <HAL_I2C_MspInit+0x74>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d124      	bne.n	80014e2 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_I2C_MspInit+0x78>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a14      	ldr	r2, [pc, #80]	@ (80014f0 <HAL_I2C_MspInit+0x78>)
 800149e:	f043 0308 	orr.w	r3, r3, #8
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_I2C_MspInit+0x78>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_LPS25HB_Pin|SDA_LPS25HB_Pin;
 80014b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b6:	2312      	movs	r3, #18
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	4619      	mov	r1, r3
 80014c4:	480b      	ldr	r0, [pc, #44]	@ (80014f4 <HAL_I2C_MspInit+0x7c>)
 80014c6:	f000 fb47 	bl	8001b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_I2C_MspInit+0x78>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a08      	ldr	r2, [pc, #32]	@ (80014f0 <HAL_I2C_MspInit+0x78>)
 80014d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_I2C_MspInit+0x78>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40005800 	.word	0x40005800
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010c00 	.word	0x40010c00

080014f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	@ 0x38
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800150e:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <HAL_InitTick+0xe8>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a33      	ldr	r2, [pc, #204]	@ (80015e0 <HAL_InitTick+0xe8>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <HAL_InitTick+0xe8>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001526:	f107 0210 	add.w	r2, r7, #16
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fec7 	bl	80052c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800153a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800153c:	2b00      	cmp	r3, #0
 800153e:	d103      	bne.n	8001548 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001540:	f003 feac 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8001544:	6378      	str	r0, [r7, #52]	@ 0x34
 8001546:	e004      	b.n	8001552 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001548:	f003 fea8 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 800154c:	4603      	mov	r3, r0
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001554:	4a23      	ldr	r2, [pc, #140]	@ (80015e4 <HAL_InitTick+0xec>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	0c9b      	lsrs	r3, r3, #18
 800155c:	3b01      	subs	r3, #1
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001560:	4b21      	ldr	r3, [pc, #132]	@ (80015e8 <HAL_InitTick+0xf0>)
 8001562:	4a22      	ldr	r2, [pc, #136]	@ (80015ec <HAL_InitTick+0xf4>)
 8001564:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_InitTick+0xf0>)
 8001568:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800156c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800156e:	4a1e      	ldr	r2, [pc, #120]	@ (80015e8 <HAL_InitTick+0xf0>)
 8001570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001572:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001574:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <HAL_InitTick+0xf0>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <HAL_InitTick+0xf0>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001580:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_InitTick+0xf0>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001586:	4818      	ldr	r0, [pc, #96]	@ (80015e8 <HAL_InitTick+0xf0>)
 8001588:	f003 feea 	bl	8005360 <HAL_TIM_Base_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001592:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001596:	2b00      	cmp	r3, #0
 8001598:	d11b      	bne.n	80015d2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800159a:	4813      	ldr	r0, [pc, #76]	@ (80015e8 <HAL_InitTick+0xf0>)
 800159c:	f003 ff38 	bl	8005410 <HAL_TIM_Base_Start_IT>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d111      	bne.n	80015d2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015ae:	201e      	movs	r0, #30
 80015b0:	f000 fa3d 	bl	8001a2e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	d808      	bhi.n	80015cc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80015ba:	2200      	movs	r2, #0
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	201e      	movs	r0, #30
 80015c0:	f000 fa19 	bl	80019f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c4:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <HAL_InitTick+0xf8>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e002      	b.n	80015d2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3738      	adds	r7, #56	@ 0x38
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	431bde83 	.word	0x431bde83
 80015e8:	20000258 	.word	0x20000258
 80015ec:	40000800 	.word	0x40000800
 80015f0:	20000004 	.word	0x20000004

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <NMI_Handler+0x4>

080015fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <MemManage_Handler+0x4>

0800160c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <UsageFault_Handler+0x4>

0800161c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_Button_Pin);
 800162c:	2001      	movs	r0, #1
 800162e:	f000 fc2f 	bl	8001e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <TIM4_IRQHandler+0x10>)
 800163e:	f003 ff39 	bl	80054b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000258 	.word	0x20000258

0800164c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001650:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001654:	f000 fc1c 	bl	8001e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <I2C2_EV_IRQHandler+0x10>)
 8001662:	f001 f9ab 	bl	80029bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200001f4 	.word	0x200001f4

08001670 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <I2C2_ER_IRQHandler+0x10>)
 8001676:	f001 fb12 	bl	8002c9e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200001f4 	.word	0x200001f4

08001684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return 1;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <_kill>:

int _kill(int pid, int sig)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800169c:	f00a f912 	bl	800b8c4 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2216      	movs	r2, #22
 80016a4:	601a      	str	r2, [r3, #0]
  return -1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_exit>:

void _exit (int status)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016ba:	f04f 31ff 	mov.w	r1, #4294967295
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffe7 	bl	8001692 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <_exit+0x12>

080016c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e00a      	b.n	80016f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016da:	f3af 8000 	nop.w
 80016de:	4601      	mov	r1, r0
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60ba      	str	r2, [r7, #8]
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dbf0      	blt.n	80016da <_read+0x12>
  }

  return len;
 80016f8:	687b      	ldr	r3, [r7, #4]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001728:	605a      	str	r2, [r3, #4]
  return 0;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <_isatty>:

int _isatty(int file)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800174a:	b480      	push	{r7}
 800174c:	b085      	sub	sp, #20
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
	...

08001764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800176c:	4a14      	ldr	r2, [pc, #80]	@ (80017c0 <_sbrk+0x5c>)
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <_sbrk+0x60>)
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001778:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001780:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <_sbrk+0x64>)
 8001782:	4a12      	ldr	r2, [pc, #72]	@ (80017cc <_sbrk+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001786:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d207      	bcs.n	80017a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001794:	f00a f896 	bl	800b8c4 <__errno>
 8001798:	4603      	mov	r3, r0
 800179a:	220c      	movs	r2, #12
 800179c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e009      	b.n	80017b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a4:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017aa:	4b07      	ldr	r3, [pc, #28]	@ (80017c8 <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a05      	ldr	r2, [pc, #20]	@ (80017c8 <_sbrk+0x64>)
 80017b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20005000 	.word	0x20005000
 80017c4:	00000300 	.word	0x00000300
 80017c8:	200002a0 	.word	0x200002a0
 80017cc:	20004ab0 	.word	0x20004ab0

080017d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017dc:	f7ff fff8 	bl	80017d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e0:	480b      	ldr	r0, [pc, #44]	@ (8001810 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017e2:	490c      	ldr	r1, [pc, #48]	@ (8001814 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001818 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a09      	ldr	r2, [pc, #36]	@ (800181c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017f8:	4c09      	ldr	r4, [pc, #36]	@ (8001820 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001806:	f00a f863 	bl	800b8d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800180a:	f7ff fbe1 	bl	8000fd0 <main>
  bx lr
 800180e:	4770      	bx	lr
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001814:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001818:	0800dbd4 	.word	0x0800dbd4
  ldr r2, =_sbss
 800181c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001820:	20004ab0 	.word	0x20004ab0

08001824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC1_2_IRQHandler>
	...

08001828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <HAL_Init+0x28>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	@ (8001850 <HAL_Init+0x28>)
 8001832:	f043 0310 	orr.w	r3, r3, #16
 8001836:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001838:	2003      	movs	r0, #3
 800183a:	f000 f8d1 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	200f      	movs	r0, #15
 8001840:	f7ff fe5a 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001844:	f7ff fde0 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40022000 	.word	0x40022000

08001854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001858:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <HAL_IncTick+0x1c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <HAL_IncTick+0x20>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
 8001864:	4a03      	ldr	r2, [pc, #12]	@ (8001874 <HAL_IncTick+0x20>)
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000008 	.word	0x20000008
 8001874:	200002a4 	.word	0x200002a4

08001878 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return uwTick;
 800187c:	4b02      	ldr	r3, [pc, #8]	@ (8001888 <HAL_GetTick+0x10>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	200002a4 	.word	0x200002a4

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4906      	ldr	r1, [pc, #24]	@ (8001924 <__NVIC_EnableIRQ+0x34>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100

08001928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	db0a      	blt.n	8001952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	490c      	ldr	r1, [pc, #48]	@ (8001974 <__NVIC_SetPriority+0x4c>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	440b      	add	r3, r1
 800194c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001950:	e00a      	b.n	8001968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4908      	ldr	r1, [pc, #32]	@ (8001978 <__NVIC_SetPriority+0x50>)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3b04      	subs	r3, #4
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	440b      	add	r3, r1
 8001966:	761a      	strb	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	@ 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f1c3 0307 	rsb	r3, r3, #7
 8001996:	2b04      	cmp	r3, #4
 8001998:	bf28      	it	cs
 800199a:	2304      	movcs	r3, #4
 800199c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3304      	adds	r3, #4
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d902      	bls.n	80019ac <NVIC_EncodePriority+0x30>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3b03      	subs	r3, #3
 80019aa:	e000      	b.n	80019ae <NVIC_EncodePriority+0x32>
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43da      	mvns	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	401a      	ands	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43d9      	mvns	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	4313      	orrs	r3, r2
         );
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3724      	adds	r7, #36	@ 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff4f 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff64 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ffb2 	bl	800197c <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff81 	bl	8001928 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff57 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d005      	beq.n	8001a70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2204      	movs	r2, #4
 8001a68:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	e051      	b.n	8001b14 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 020e 	bic.w	r2, r2, #14
 8001a7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a22      	ldr	r2, [pc, #136]	@ (8001b20 <HAL_DMA_Abort_IT+0xd4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d029      	beq.n	8001aee <HAL_DMA_Abort_IT+0xa2>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a21      	ldr	r2, [pc, #132]	@ (8001b24 <HAL_DMA_Abort_IT+0xd8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d022      	beq.n	8001aea <HAL_DMA_Abort_IT+0x9e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b28 <HAL_DMA_Abort_IT+0xdc>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d01a      	beq.n	8001ae4 <HAL_DMA_Abort_IT+0x98>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b2c <HAL_DMA_Abort_IT+0xe0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d012      	beq.n	8001ade <HAL_DMA_Abort_IT+0x92>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b30 <HAL_DMA_Abort_IT+0xe4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d00a      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0x8c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b34 <HAL_DMA_Abort_IT+0xe8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d102      	bne.n	8001ad2 <HAL_DMA_Abort_IT+0x86>
 8001acc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ad0:	e00e      	b.n	8001af0 <HAL_DMA_Abort_IT+0xa4>
 8001ad2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ad6:	e00b      	b.n	8001af0 <HAL_DMA_Abort_IT+0xa4>
 8001ad8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001adc:	e008      	b.n	8001af0 <HAL_DMA_Abort_IT+0xa4>
 8001ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae2:	e005      	b.n	8001af0 <HAL_DMA_Abort_IT+0xa4>
 8001ae4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ae8:	e002      	b.n	8001af0 <HAL_DMA_Abort_IT+0xa4>
 8001aea:	2310      	movs	r3, #16
 8001aec:	e000      	b.n	8001af0 <HAL_DMA_Abort_IT+0xa4>
 8001aee:	2301      	movs	r3, #1
 8001af0:	4a11      	ldr	r2, [pc, #68]	@ (8001b38 <HAL_DMA_Abort_IT+0xec>)
 8001af2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
    } 
  }
  return status;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40020008 	.word	0x40020008
 8001b24:	4002001c 	.word	0x4002001c
 8001b28:	40020030 	.word	0x40020030
 8001b2c:	40020044 	.word	0x40020044
 8001b30:	40020058 	.word	0x40020058
 8001b34:	4002006c 	.word	0x4002006c
 8001b38:	40020000 	.word	0x40020000

08001b3c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b4a:	b2db      	uxtb	r3, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b08b      	sub	sp, #44	@ 0x2c
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	e169      	b.n	8001e40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	f040 8158 	bne.w	8001e3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a9a      	ldr	r2, [pc, #616]	@ (8001df8 <HAL_GPIO_Init+0x2a0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d05e      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001b94:	4a98      	ldr	r2, [pc, #608]	@ (8001df8 <HAL_GPIO_Init+0x2a0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d875      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001b9a:	4a98      	ldr	r2, [pc, #608]	@ (8001dfc <HAL_GPIO_Init+0x2a4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d058      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001ba0:	4a96      	ldr	r2, [pc, #600]	@ (8001dfc <HAL_GPIO_Init+0x2a4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d86f      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001ba6:	4a96      	ldr	r2, [pc, #600]	@ (8001e00 <HAL_GPIO_Init+0x2a8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d052      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001bac:	4a94      	ldr	r2, [pc, #592]	@ (8001e00 <HAL_GPIO_Init+0x2a8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d869      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001bb2:	4a94      	ldr	r2, [pc, #592]	@ (8001e04 <HAL_GPIO_Init+0x2ac>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d04c      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001bb8:	4a92      	ldr	r2, [pc, #584]	@ (8001e04 <HAL_GPIO_Init+0x2ac>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d863      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001bbe:	4a92      	ldr	r2, [pc, #584]	@ (8001e08 <HAL_GPIO_Init+0x2b0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d046      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
 8001bc4:	4a90      	ldr	r2, [pc, #576]	@ (8001e08 <HAL_GPIO_Init+0x2b0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d85d      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001bca:	2b12      	cmp	r3, #18
 8001bcc:	d82a      	bhi.n	8001c24 <HAL_GPIO_Init+0xcc>
 8001bce:	2b12      	cmp	r3, #18
 8001bd0:	d859      	bhi.n	8001c86 <HAL_GPIO_Init+0x12e>
 8001bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd8 <HAL_GPIO_Init+0x80>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001c53 	.word	0x08001c53
 8001bdc:	08001c2d 	.word	0x08001c2d
 8001be0:	08001c3f 	.word	0x08001c3f
 8001be4:	08001c81 	.word	0x08001c81
 8001be8:	08001c87 	.word	0x08001c87
 8001bec:	08001c87 	.word	0x08001c87
 8001bf0:	08001c87 	.word	0x08001c87
 8001bf4:	08001c87 	.word	0x08001c87
 8001bf8:	08001c87 	.word	0x08001c87
 8001bfc:	08001c87 	.word	0x08001c87
 8001c00:	08001c87 	.word	0x08001c87
 8001c04:	08001c87 	.word	0x08001c87
 8001c08:	08001c87 	.word	0x08001c87
 8001c0c:	08001c87 	.word	0x08001c87
 8001c10:	08001c87 	.word	0x08001c87
 8001c14:	08001c87 	.word	0x08001c87
 8001c18:	08001c87 	.word	0x08001c87
 8001c1c:	08001c35 	.word	0x08001c35
 8001c20:	08001c49 	.word	0x08001c49
 8001c24:	4a79      	ldr	r2, [pc, #484]	@ (8001e0c <HAL_GPIO_Init+0x2b4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c2a:	e02c      	b.n	8001c86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	623b      	str	r3, [r7, #32]
          break;
 8001c32:	e029      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	623b      	str	r3, [r7, #32]
          break;
 8001c3c:	e024      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	3308      	adds	r3, #8
 8001c44:	623b      	str	r3, [r7, #32]
          break;
 8001c46:	e01f      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	330c      	adds	r3, #12
 8001c4e:	623b      	str	r3, [r7, #32]
          break;
 8001c50:	e01a      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	623b      	str	r3, [r7, #32]
          break;
 8001c5e:	e013      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d105      	bne.n	8001c74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	611a      	str	r2, [r3, #16]
          break;
 8001c72:	e009      	b.n	8001c88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c74:	2308      	movs	r3, #8
 8001c76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	615a      	str	r2, [r3, #20]
          break;
 8001c7e:	e003      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
          break;
 8001c84:	e000      	b.n	8001c88 <HAL_GPIO_Init+0x130>
          break;
 8001c86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2bff      	cmp	r3, #255	@ 0xff
 8001c8c:	d801      	bhi.n	8001c92 <HAL_GPIO_Init+0x13a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	e001      	b.n	8001c96 <HAL_GPIO_Init+0x13e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3304      	adds	r3, #4
 8001c96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2bff      	cmp	r3, #255	@ 0xff
 8001c9c:	d802      	bhi.n	8001ca4 <HAL_GPIO_Init+0x14c>
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	e002      	b.n	8001caa <HAL_GPIO_Init+0x152>
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	3b08      	subs	r3, #8
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	210f      	movs	r1, #15
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	401a      	ands	r2, r3
 8001cbc:	6a39      	ldr	r1, [r7, #32]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80b1 	beq.w	8001e3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8001e10 <HAL_GPIO_Init+0x2b8>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a4c      	ldr	r2, [pc, #304]	@ (8001e10 <HAL_GPIO_Init+0x2b8>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b4a      	ldr	r3, [pc, #296]	@ (8001e10 <HAL_GPIO_Init+0x2b8>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cf0:	4a48      	ldr	r2, [pc, #288]	@ (8001e14 <HAL_GPIO_Init+0x2bc>)
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a40      	ldr	r2, [pc, #256]	@ (8001e18 <HAL_GPIO_Init+0x2c0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_GPIO_Init+0x1ec>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e1c <HAL_GPIO_Init+0x2c4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00d      	beq.n	8001d40 <HAL_GPIO_Init+0x1e8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3e      	ldr	r2, [pc, #248]	@ (8001e20 <HAL_GPIO_Init+0x2c8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d007      	beq.n	8001d3c <HAL_GPIO_Init+0x1e4>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e24 <HAL_GPIO_Init+0x2cc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_GPIO_Init+0x1e0>
 8001d34:	2303      	movs	r3, #3
 8001d36:	e006      	b.n	8001d46 <HAL_GPIO_Init+0x1ee>
 8001d38:	2304      	movs	r3, #4
 8001d3a:	e004      	b.n	8001d46 <HAL_GPIO_Init+0x1ee>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e002      	b.n	8001d46 <HAL_GPIO_Init+0x1ee>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_GPIO_Init+0x1ee>
 8001d44:	2300      	movs	r3, #0
 8001d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d48:	f002 0203 	and.w	r2, r2, #3
 8001d4c:	0092      	lsls	r2, r2, #2
 8001d4e:	4093      	lsls	r3, r2
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d56:	492f      	ldr	r1, [pc, #188]	@ (8001e14 <HAL_GPIO_Init+0x2bc>)
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d70:	4b2d      	ldr	r3, [pc, #180]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	492c      	ldr	r1, [pc, #176]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	608b      	str	r3, [r1, #8]
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	4928      	ldr	r1, [pc, #160]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d006      	beq.n	8001da6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d98:	4b23      	ldr	r3, [pc, #140]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	4922      	ldr	r1, [pc, #136]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60cb      	str	r3, [r1, #12]
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001da6:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	491e      	ldr	r1, [pc, #120]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dc0:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4918      	ldr	r1, [pc, #96]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dce:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	4914      	ldr	r1, [pc, #80]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d021      	beq.n	8001e2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001de8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	490e      	ldr	r1, [pc, #56]	@ (8001e28 <HAL_GPIO_Init+0x2d0>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
 8001df4:	e021      	b.n	8001e3a <HAL_GPIO_Init+0x2e2>
 8001df6:	bf00      	nop
 8001df8:	10320000 	.word	0x10320000
 8001dfc:	10310000 	.word	0x10310000
 8001e00:	10220000 	.word	0x10220000
 8001e04:	10210000 	.word	0x10210000
 8001e08:	10120000 	.word	0x10120000
 8001e0c:	10110000 	.word	0x10110000
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010000 	.word	0x40010000
 8001e18:	40010800 	.word	0x40010800
 8001e1c:	40010c00 	.word	0x40010c00
 8001e20:	40011000 	.word	0x40011000
 8001e24:	40011400 	.word	0x40011400
 8001e28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <HAL_GPIO_Init+0x304>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	4909      	ldr	r1, [pc, #36]	@ (8001e5c <HAL_GPIO_Init+0x304>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e46:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f47f ae8e 	bne.w	8001b6c <HAL_GPIO_Init+0x14>
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	372c      	adds	r7, #44	@ 0x2c
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	40010400 	.word	0x40010400

08001e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e70:	787b      	ldrb	r3, [r7, #1]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e7c:	e003      	b.n	8001e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	041a      	lsls	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	611a      	str	r2, [r3, #16]
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e9a:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d006      	beq.n	8001eb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fa8a 	bl	80013c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e12b      	b.n	800212a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fac6 	bl	8001478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2224      	movs	r2, #36	@ 0x24
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f24:	f003 f9ba 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8001f28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4a81      	ldr	r2, [pc, #516]	@ (8002134 <HAL_I2C_Init+0x274>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d807      	bhi.n	8001f44 <HAL_I2C_Init+0x84>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4a80      	ldr	r2, [pc, #512]	@ (8002138 <HAL_I2C_Init+0x278>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	bf94      	ite	ls
 8001f3c:	2301      	movls	r3, #1
 8001f3e:	2300      	movhi	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	e006      	b.n	8001f52 <HAL_I2C_Init+0x92>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4a7d      	ldr	r2, [pc, #500]	@ (800213c <HAL_I2C_Init+0x27c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	bf94      	ite	ls
 8001f4c:	2301      	movls	r3, #1
 8001f4e:	2300      	movhi	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0e7      	b.n	800212a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4a78      	ldr	r2, [pc, #480]	@ (8002140 <HAL_I2C_Init+0x280>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0c9b      	lsrs	r3, r3, #18
 8001f64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4a6a      	ldr	r2, [pc, #424]	@ (8002134 <HAL_I2C_Init+0x274>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d802      	bhi.n	8001f94 <HAL_I2C_Init+0xd4>
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3301      	adds	r3, #1
 8001f92:	e009      	b.n	8001fa8 <HAL_I2C_Init+0xe8>
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	4a69      	ldr	r2, [pc, #420]	@ (8002144 <HAL_I2C_Init+0x284>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	495c      	ldr	r1, [pc, #368]	@ (8002134 <HAL_I2C_Init+0x274>)
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d819      	bhi.n	8001ffc <HAL_I2C_Init+0x13c>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1e59      	subs	r1, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd6:	1c59      	adds	r1, r3, #1
 8001fd8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fdc:	400b      	ands	r3, r1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_I2C_Init+0x138>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1e59      	subs	r1, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff6:	e051      	b.n	800209c <HAL_I2C_Init+0x1dc>
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	e04f      	b.n	800209c <HAL_I2C_Init+0x1dc>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d111      	bne.n	8002028 <HAL_I2C_Init+0x168>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e58      	subs	r0, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	440b      	add	r3, r1
 8002012:	fbb0 f3f3 	udiv	r3, r0, r3
 8002016:	3301      	adds	r3, #1
 8002018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	e012      	b.n	800204e <HAL_I2C_Init+0x18e>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1e58      	subs	r0, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	0099      	lsls	r1, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	fbb0 f3f3 	udiv	r3, r0, r3
 800203e:	3301      	adds	r3, #1
 8002040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf0c      	ite	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	2300      	movne	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_I2C_Init+0x196>
 8002052:	2301      	movs	r3, #1
 8002054:	e022      	b.n	800209c <HAL_I2C_Init+0x1dc>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10e      	bne.n	800207c <HAL_I2C_Init+0x1bc>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1e58      	subs	r0, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6859      	ldr	r1, [r3, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	440b      	add	r3, r1
 800206c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002070:	3301      	adds	r3, #1
 8002072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800207a:	e00f      	b.n	800209c <HAL_I2C_Init+0x1dc>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1e58      	subs	r0, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	0099      	lsls	r1, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002098:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	6809      	ldr	r1, [r1, #0]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6911      	ldr	r1, [r2, #16]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68d2      	ldr	r2, [r2, #12]
 80020d6:	4311      	orrs	r1, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	430b      	orrs	r3, r1
 80020de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	000186a0 	.word	0x000186a0
 8002138:	001e847f 	.word	0x001e847f
 800213c:	003d08ff 	.word	0x003d08ff
 8002140:	431bde83 	.word	0x431bde83
 8002144:	10624dd3 	.word	0x10624dd3

08002148 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215a:	2b80      	cmp	r3, #128	@ 0x80
 800215c:	d103      	bne.n	8002166 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  }
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	4608      	mov	r0, r1
 800217a:	4611      	mov	r1, r2
 800217c:	461a      	mov	r2, r3
 800217e:	4603      	mov	r3, r0
 8002180:	817b      	strh	r3, [r7, #10]
 8002182:	460b      	mov	r3, r1
 8002184:	813b      	strh	r3, [r7, #8]
 8002186:	4613      	mov	r3, r2
 8002188:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800218a:	f7ff fb75 	bl	8001878 <HAL_GetTick>
 800218e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b20      	cmp	r3, #32
 800219a:	f040 80d9 	bne.w	8002350 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2319      	movs	r3, #25
 80021a4:	2201      	movs	r2, #1
 80021a6:	496d      	ldr	r1, [pc, #436]	@ (800235c <HAL_I2C_Mem_Write+0x1ec>)
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f002 fa2b 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
 80021b6:	e0cc      	b.n	8002352 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_I2C_Mem_Write+0x56>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e0c5      	b.n	8002352 <HAL_I2C_Mem_Write+0x1e2>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d007      	beq.n	80021ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2221      	movs	r2, #33	@ 0x21
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2240      	movs	r2, #64	@ 0x40
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a3a      	ldr	r2, [r7, #32]
 8002216:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800221c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a4d      	ldr	r2, [pc, #308]	@ (8002360 <HAL_I2C_Mem_Write+0x1f0>)
 800222c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800222e:	88f8      	ldrh	r0, [r7, #6]
 8002230:	893a      	ldrh	r2, [r7, #8]
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	4603      	mov	r3, r0
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f001 ffba 	bl	80041b8 <I2C_RequestMemoryWrite>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d052      	beq.n	80022f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e081      	b.n	8002352 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f002 faf0 	bl	8004838 <I2C_WaitOnTXEFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00d      	beq.n	800227a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	2b04      	cmp	r3, #4
 8002264:	d107      	bne.n	8002276 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002274:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e06b      	b.n	8002352 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d11b      	bne.n	80022f0 <HAL_I2C_Mem_Write+0x180>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d017      	beq.n	80022f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1aa      	bne.n	800224e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f002 fae3 	bl	80048c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00d      	beq.n	8002324 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	2b04      	cmp	r3, #4
 800230e:	d107      	bne.n	8002320 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800231e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e016      	b.n	8002352 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	e000      	b.n	8002352 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002350:	2302      	movs	r3, #2
  }
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	00100002 	.word	0x00100002
 8002360:	ffff0000 	.word	0xffff0000

08002364 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08c      	sub	sp, #48	@ 0x30
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	4608      	mov	r0, r1
 800236e:	4611      	mov	r1, r2
 8002370:	461a      	mov	r2, r3
 8002372:	4603      	mov	r3, r0
 8002374:	817b      	strh	r3, [r7, #10]
 8002376:	460b      	mov	r3, r1
 8002378:	813b      	strh	r3, [r7, #8]
 800237a:	4613      	mov	r3, r2
 800237c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002382:	f7ff fa79 	bl	8001878 <HAL_GetTick>
 8002386:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b20      	cmp	r3, #32
 8002392:	f040 8250 	bne.w	8002836 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2319      	movs	r3, #25
 800239c:	2201      	movs	r2, #1
 800239e:	4982      	ldr	r1, [pc, #520]	@ (80025a8 <HAL_I2C_Mem_Read+0x244>)
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f002 f92f 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80023ac:	2302      	movs	r3, #2
 80023ae:	e243      	b.n	8002838 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_I2C_Mem_Read+0x5a>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e23c      	b.n	8002838 <HAL_I2C_Mem_Read+0x4d4>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d007      	beq.n	80023e4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2222      	movs	r2, #34	@ 0x22
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2240      	movs	r2, #64	@ 0x40
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002414:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a62      	ldr	r2, [pc, #392]	@ (80025ac <HAL_I2C_Mem_Read+0x248>)
 8002424:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002426:	88f8      	ldrh	r0, [r7, #6]
 8002428:	893a      	ldrh	r2, [r7, #8]
 800242a:	8979      	ldrh	r1, [r7, #10]
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	4603      	mov	r3, r0
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f001 ff54 	bl	80042e4 <I2C_RequestMemoryRead>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e1f8      	b.n	8002838 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244a:	2b00      	cmp	r3, #0
 800244c:	d113      	bne.n	8002476 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	e1cc      	b.n	8002810 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247a:	2b01      	cmp	r3, #1
 800247c:	d11e      	bne.n	80024bc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800248c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800248e:	b672      	cpsid	i
}
 8002490:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024b8:	b662      	cpsie	i
}
 80024ba:	e035      	b.n	8002528 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d11e      	bne.n	8002502 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024d4:	b672      	cpsid	i
}
 80024d6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024fe:	b662      	cpsie	i
}
 8002500:	e012      	b.n	8002528 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002510:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002528:	e172      	b.n	8002810 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252e:	2b03      	cmp	r3, #3
 8002530:	f200 811f 	bhi.w	8002772 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002538:	2b01      	cmp	r3, #1
 800253a:	d123      	bne.n	8002584 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800253e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f002 fa3b 	bl	80049bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e173      	b.n	8002838 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002582:	e145      	b.n	8002810 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002588:	2b02      	cmp	r3, #2
 800258a:	d152      	bne.n	8002632 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002592:	2200      	movs	r2, #0
 8002594:	4906      	ldr	r1, [pc, #24]	@ (80025b0 <HAL_I2C_Mem_Read+0x24c>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f002 f834 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e148      	b.n	8002838 <HAL_I2C_Mem_Read+0x4d4>
 80025a6:	bf00      	nop
 80025a8:	00100002 	.word	0x00100002
 80025ac:	ffff0000 	.word	0xffff0000
 80025b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025b4:	b672      	cpsid	i
}
 80025b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025fa:	b662      	cpsie	i
}
 80025fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002630:	e0ee      	b.n	8002810 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002638:	2200      	movs	r2, #0
 800263a:	4981      	ldr	r1, [pc, #516]	@ (8002840 <HAL_I2C_Mem_Read+0x4dc>)
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f001 ffe1 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0f5      	b.n	8002838 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800265a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800265c:	b672      	cpsid	i
}
 800265e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002692:	4b6c      	ldr	r3, [pc, #432]	@ (8002844 <HAL_I2C_Mem_Read+0x4e0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	08db      	lsrs	r3, r3, #3
 8002698:	4a6b      	ldr	r2, [pc, #428]	@ (8002848 <HAL_I2C_Mem_Read+0x4e4>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0a1a      	lsrs	r2, r3, #8
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00da      	lsls	r2, r3, #3
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d118      	bne.n	80026ea <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f043 0220 	orr.w	r2, r3, #32
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80026da:	b662      	cpsie	i
}
 80026dc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0a6      	b.n	8002838 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d1d9      	bne.n	80026ac <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800273a:	b662      	cpsie	i
}
 800273c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002770:	e04e      	b.n	8002810 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002774:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f002 f920 	bl	80049bc <I2C_WaitOnRXNEFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e058      	b.n	8002838 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d124      	bne.n	8002810 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d107      	bne.n	80027de <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002814:	2b00      	cmp	r3, #0
 8002816:	f47f ae88 	bne.w	800252a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002836:	2302      	movs	r3, #2
  }
}
 8002838:	4618      	mov	r0, r3
 800283a:	3728      	adds	r7, #40	@ 0x28
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	00010004 	.word	0x00010004
 8002844:	20000000 	.word	0x20000000
 8002848:	14f8b589 	.word	0x14f8b589

0800284c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	4608      	mov	r0, r1
 8002856:	4611      	mov	r1, r2
 8002858:	461a      	mov	r2, r3
 800285a:	4603      	mov	r3, r0
 800285c:	817b      	strh	r3, [r7, #10]
 800285e:	460b      	mov	r3, r1
 8002860:	813b      	strh	r3, [r7, #8]
 8002862:	4613      	mov	r3, r2
 8002864:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b20      	cmp	r3, #32
 8002874:	f040 8096 	bne.w	80029a4 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002878:	4b4d      	ldr	r3, [pc, #308]	@ (80029b0 <HAL_I2C_Mem_Read_IT+0x164>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	4a4d      	ldr	r2, [pc, #308]	@ (80029b4 <HAL_I2C_Mem_Read_IT+0x168>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	0a1a      	lsrs	r2, r3, #8
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009a      	lsls	r2, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3b01      	subs	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d112      	bne.n	80028c4 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b8:	f043 0220 	orr.w	r2, r3, #32
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
 80028c2:	e070      	b.n	80029a6 <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d0df      	beq.n	8002892 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_I2C_Mem_Read_IT+0x94>
 80028dc:	2302      	movs	r3, #2
 80028de:	e062      	b.n	80029a6 <HAL_I2C_Mem_Read_IT+0x15a>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d007      	beq.n	8002906 <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0201 	orr.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002914:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2222      	movs	r2, #34	@ 0x22
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2240      	movs	r2, #64	@ 0x40
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a3a      	ldr	r2, [r7, #32]
 8002930:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002936:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4a1c      	ldr	r2, [pc, #112]	@ (80029b8 <HAL_I2C_Mem_Read_IT+0x16c>)
 8002946:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002948:	897a      	ldrh	r2, [r7, #10]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800294e:	893a      	ldrh	r2, [r7, #8]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002954:	88fa      	ldrh	r2, [r7, #6]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800296e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800297e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800299e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e000      	b.n	80029a6 <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
  }
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	20000000 	.word	0x20000000
 80029b4:	14f8b589 	.word	0x14f8b589
 80029b8:	ffff0000 	.word	0xffff0000

080029bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d003      	beq.n	80029f4 <HAL_I2C_EV_IRQHandler+0x38>
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b40      	cmp	r3, #64	@ 0x40
 80029f0:	f040 80c1 	bne.w	8002b76 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10d      	bne.n	8002a2a <HAL_I2C_EV_IRQHandler+0x6e>
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002a14:	d003      	beq.n	8002a1e <HAL_I2C_EV_IRQHandler+0x62>
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002a1c:	d101      	bne.n	8002a22 <HAL_I2C_EV_IRQHandler+0x66>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_I2C_EV_IRQHandler+0x68>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	f000 8132 	beq.w	8002c8e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00c      	beq.n	8002a4e <HAL_I2C_EV_IRQHandler+0x92>
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	0a5b      	lsrs	r3, r3, #9
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f002 f846 	bl	8004ad2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fd90 	bl	800356c <I2C_Master_SB>
 8002a4c:	e092      	b.n	8002b74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	08db      	lsrs	r3, r3, #3
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_I2C_EV_IRQHandler+0xb2>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	0a5b      	lsrs	r3, r3, #9
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fe05 	bl	8003676 <I2C_Master_ADD10>
 8002a6c:	e082      	b.n	8002b74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_I2C_EV_IRQHandler+0xd2>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	0a5b      	lsrs	r3, r3, #9
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fe1e 	bl	80036c8 <I2C_Master_ADDR>
 8002a8c:	e072      	b.n	8002b74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	089b      	lsrs	r3, r3, #2
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d03b      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aa8:	f000 80f3 	beq.w	8002c92 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	09db      	lsrs	r3, r3, #7
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00f      	beq.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d009      	beq.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d103      	bne.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f9e8 	bl	8002ea6 <I2C_MasterTransmit_TXE>
 8002ad6:	e04d      	b.n	8002b74 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80d6 	beq.w	8002c92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	0a5b      	lsrs	r3, r3, #9
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80cf 	beq.w	8002c92 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002af4:	7bbb      	ldrb	r3, [r7, #14]
 8002af6:	2b21      	cmp	r3, #33	@ 0x21
 8002af8:	d103      	bne.n	8002b02 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fa6f 	bl	8002fde <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b00:	e0c7      	b.n	8002c92 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	2b40      	cmp	r3, #64	@ 0x40
 8002b06:	f040 80c4 	bne.w	8002c92 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fadd 	bl	80030ca <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b10:	e0bf      	b.n	8002c92 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b20:	f000 80b7 	beq.w	8002c92 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00f      	beq.n	8002b50 <HAL_I2C_EV_IRQHandler+0x194>
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	0a9b      	lsrs	r3, r3, #10
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <HAL_I2C_EV_IRQHandler+0x194>
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fb56 	bl	80031fa <I2C_MasterReceive_RXNE>
 8002b4e:	e011      	b.n	8002b74 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	089b      	lsrs	r3, r3, #2
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 809a 	beq.w	8002c92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	0a5b      	lsrs	r3, r3, #9
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8093 	beq.w	8002c92 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fc0c 	bl	800338a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b72:	e08e      	b.n	8002c92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b74:	e08d      	b.n	8002c92 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	e007      	b.n	8002b98 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	085b      	lsrs	r3, r3, #1
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <HAL_I2C_EV_IRQHandler+0x20e>
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	0a5b      	lsrs	r3, r3, #9
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00c      	beq.n	8002bca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002bc0:	69b9      	ldr	r1, [r7, #24]
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 ffd7 	bl	8003b76 <I2C_Slave_ADDR>
 8002bc8:	e066      	b.n	8002c98 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <HAL_I2C_EV_IRQHandler+0x22e>
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	0a5b      	lsrs	r3, r3, #9
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f001 f812 	bl	8003c0c <I2C_Slave_STOPF>
 8002be8:	e056      	b.n	8002c98 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bea:	7bbb      	ldrb	r3, [r7, #14]
 8002bec:	2b21      	cmp	r3, #33	@ 0x21
 8002bee:	d002      	beq.n	8002bf6 <HAL_I2C_EV_IRQHandler+0x23a>
 8002bf0:	7bbb      	ldrb	r3, [r7, #14]
 8002bf2:	2b29      	cmp	r3, #41	@ 0x29
 8002bf4:	d125      	bne.n	8002c42 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	09db      	lsrs	r3, r3, #7
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00f      	beq.n	8002c22 <HAL_I2C_EV_IRQHandler+0x266>
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	0a9b      	lsrs	r3, r3, #10
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_I2C_EV_IRQHandler+0x266>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 feef 	bl	80039fe <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c20:	e039      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d033      	beq.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2da>
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	0a5b      	lsrs	r3, r3, #9
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d02d      	beq.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 ff1c 	bl	8003a78 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c40:	e029      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00f      	beq.n	8002c6e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	0a9b      	lsrs	r3, r3, #10
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 ff26 	bl	8003ab8 <I2C_SlaveReceive_RXNE>
 8002c6c:	e014      	b.n	8002c98 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00e      	beq.n	8002c98 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	0a5b      	lsrs	r3, r3, #9
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 ff54 	bl	8003b34 <I2C_SlaveReceive_BTF>
 8002c8c:	e004      	b.n	8002c98 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002c8e:	bf00      	nop
 8002c90:	e002      	b.n	8002c98 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c96:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b08a      	sub	sp, #40	@ 0x28
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cc0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d016      	beq.n	8002cfc <HAL_I2C_ER_IRQHandler+0x5e>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d010      	beq.n	8002cfc <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002cea:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cfa:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	0a5b      	lsrs	r3, r3, #9
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <HAL_I2C_ER_IRQHandler+0x88>
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	f043 0302 	orr.w	r3, r3, #2
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002d24:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	0a9b      	lsrs	r3, r3, #10
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d03f      	beq.n	8002db2 <HAL_I2C_ER_IRQHandler+0x114>
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d039      	beq.n	8002db2 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002d3e:	7efb      	ldrb	r3, [r7, #27]
 8002d40:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d50:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002d58:	7ebb      	ldrb	r3, [r7, #26]
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d112      	bne.n	8002d84 <HAL_I2C_ER_IRQHandler+0xe6>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10f      	bne.n	8002d84 <HAL_I2C_ER_IRQHandler+0xe6>
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	2b21      	cmp	r3, #33	@ 0x21
 8002d68:	d008      	beq.n	8002d7c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b29      	cmp	r3, #41	@ 0x29
 8002d6e:	d005      	beq.n	8002d7c <HAL_I2C_ER_IRQHandler+0xde>
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	2b28      	cmp	r3, #40	@ 0x28
 8002d74:	d106      	bne.n	8002d84 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b21      	cmp	r3, #33	@ 0x21
 8002d7a:	d103      	bne.n	8002d84 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f001 f875 	bl	8003e6c <I2C_Slave_AF>
 8002d82:	e016      	b.n	8002db2 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d8c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d96:	7efb      	ldrb	r3, [r7, #27]
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d002      	beq.n	8002da2 <HAL_I2C_ER_IRQHandler+0x104>
 8002d9c:	7efb      	ldrb	r3, [r7, #27]
 8002d9e:	2b40      	cmp	r3, #64	@ 0x40
 8002da0:	d107      	bne.n	8002db2 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	0adb      	lsrs	r3, r3, #11
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00e      	beq.n	8002ddc <HAL_I2C_ER_IRQHandler+0x13e>
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	0a1b      	lsrs	r3, r3, #8
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	f043 0308 	orr.w	r3, r3, #8
 8002dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002dda:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f001 f8b0 	bl	8003f54 <I2C_ITError>
  }
}
 8002df4:	bf00      	nop
 8002df6:	3728      	adds	r7, #40	@ 0x28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	70fb      	strb	r3, [r7, #3]
 8002e50:	4613      	mov	r3, r2
 8002e52:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ebc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d150      	bne.n	8002f6e <I2C_MasterTransmit_TXE+0xc8>
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b21      	cmp	r3, #33	@ 0x21
 8002ed0:	d14d      	bne.n	8002f6e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d01d      	beq.n	8002f14 <I2C_MasterTransmit_TXE+0x6e>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d01a      	beq.n	8002f14 <I2C_MasterTransmit_TXE+0x6e>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ee4:	d016      	beq.n	8002f14 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ef4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2211      	movs	r2, #17
 8002efa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff75 	bl	8002dfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f12:	e060      	b.n	8002fd6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f22:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f32:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b40      	cmp	r3, #64	@ 0x40
 8002f4c:	d107      	bne.n	8002f5e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ff8a 	bl	8002e70 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f5c:	e03b      	b.n	8002fd6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff48 	bl	8002dfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f6c:	e033      	b.n	8002fd6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	2b21      	cmp	r3, #33	@ 0x21
 8002f72:	d005      	beq.n	8002f80 <I2C_MasterTransmit_TXE+0xda>
 8002f74:	7bbb      	ldrb	r3, [r7, #14]
 8002f76:	2b40      	cmp	r3, #64	@ 0x40
 8002f78:	d12d      	bne.n	8002fd6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	2b22      	cmp	r3, #34	@ 0x22
 8002f7e:	d12a      	bne.n	8002fd6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d108      	bne.n	8002f9c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f98:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002f9a:	e01c      	b.n	8002fd6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b40      	cmp	r3, #64	@ 0x40
 8002fa6:	d103      	bne.n	8002fb0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f88e 	bl	80030ca <I2C_MemoryTransmit_TXE_BTF>
}
 8002fae:	e012      	b.n	8002fd6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	781a      	ldrb	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002fd4:	e7ff      	b.n	8002fd6 <I2C_MasterTransmit_TXE+0x130>
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fea:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b21      	cmp	r3, #33	@ 0x21
 8002ff6:	d164      	bne.n	80030c2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d012      	beq.n	8003028 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	781a      	ldrb	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003026:	e04c      	b.n	80030c2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b08      	cmp	r3, #8
 800302c:	d01d      	beq.n	800306a <I2C_MasterTransmit_BTF+0x8c>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b20      	cmp	r3, #32
 8003032:	d01a      	beq.n	800306a <I2C_MasterTransmit_BTF+0x8c>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800303a:	d016      	beq.n	800306a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800304a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2211      	movs	r2, #17
 8003050:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff feca 	bl	8002dfc <HAL_I2C_MasterTxCpltCallback>
}
 8003068:	e02b      	b.n	80030c2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003078:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003088:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b40      	cmp	r3, #64	@ 0x40
 80030a2:	d107      	bne.n	80030b4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fedf 	bl	8002e70 <HAL_I2C_MemTxCpltCallback>
}
 80030b2:	e006      	b.n	80030c2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff fe9d 	bl	8002dfc <HAL_I2C_MasterTxCpltCallback>
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d11d      	bne.n	800311e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d10b      	bne.n	8003102 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fa:	1c9a      	adds	r2, r3, #2
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003100:	e077      	b.n	80031f2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003106:	b29b      	uxth	r3, r3
 8003108:	121b      	asrs	r3, r3, #8
 800310a:	b2da      	uxtb	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800311c:	e069      	b.n	80031f2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003122:	2b01      	cmp	r3, #1
 8003124:	d10b      	bne.n	800313e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800312a:	b2da      	uxtb	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800313c:	e059      	b.n	80031f2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003142:	2b02      	cmp	r3, #2
 8003144:	d152      	bne.n	80031ec <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b22      	cmp	r3, #34	@ 0x22
 800314a:	d10d      	bne.n	8003168 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800315a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003166:	e044      	b.n	80031f2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d015      	beq.n	800319e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b21      	cmp	r3, #33	@ 0x21
 8003176:	d112      	bne.n	800319e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800319c:	e029      	b.n	80031f2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d124      	bne.n	80031f2 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b21      	cmp	r3, #33	@ 0x21
 80031ac:	d121      	bne.n	80031f2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031bc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031cc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fe43 	bl	8002e70 <HAL_I2C_MemTxCpltCallback>
}
 80031ea:	e002      	b.n	80031f2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fe ffab 	bl	8002148 <I2C_Flush_DR>
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b22      	cmp	r3, #34	@ 0x22
 800320c:	f040 80b9 	bne.w	8003382 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003214:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d921      	bls.n	8003268 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b03      	cmp	r3, #3
 8003252:	f040 8096 	bne.w	8003382 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003264:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003266:	e08c      	b.n	8003382 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	2b02      	cmp	r3, #2
 800326e:	d07f      	beq.n	8003370 <I2C_MasterReceive_RXNE+0x176>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d002      	beq.n	800327c <I2C_MasterReceive_RXNE+0x82>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d179      	bne.n	8003370 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f001 fb6b 	bl	8004958 <I2C_WaitOnSTOPRequestThroughIT>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d14c      	bne.n	8003322 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003296:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b40      	cmp	r3, #64	@ 0x40
 80032e0:	d10a      	bne.n	80032f8 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f002 faff 	bl	80058f4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032f6:	e044      	b.n	8003382 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b08      	cmp	r3, #8
 8003304:	d002      	beq.n	800330c <I2C_MasterReceive_RXNE+0x112>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b20      	cmp	r3, #32
 800330a:	d103      	bne.n	8003314 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	@ 0x30
 8003312:	e002      	b.n	800331a <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2212      	movs	r2, #18
 8003318:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff fd77 	bl	8002e0e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003320:	e02f      	b.n	8003382 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003330:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff fd8a 	bl	8002e82 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800336e:	e008      	b.n	8003382 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800337e:	605a      	str	r2, [r3, #4]
}
 8003380:	e7ff      	b.n	8003382 <I2C_MasterReceive_RXNE+0x188>
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003396:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d11b      	bne.n	80033da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80033d8:	e0c4      	b.n	8003564 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d129      	bne.n	8003438 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d00a      	beq.n	8003410 <I2C_MasterReceive_BTF+0x86>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d007      	beq.n	8003410 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800340e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003436:	e095      	b.n	8003564 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d17d      	bne.n	800353e <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d002      	beq.n	800344e <I2C_MasterReceive_BTF+0xc4>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b10      	cmp	r3, #16
 800344c:	d108      	bne.n	8003460 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	e016      	b.n	800348e <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b04      	cmp	r3, #4
 8003464:	d002      	beq.n	800346c <I2C_MasterReceive_BTF+0xe2>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d108      	bne.n	800347e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	e007      	b.n	800348e <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800348c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80034e8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b40      	cmp	r3, #64	@ 0x40
 80034fc:	d10a      	bne.n	8003514 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f002 f9f1 	bl	80058f4 <HAL_I2C_MemRxCpltCallback>
}
 8003512:	e027      	b.n	8003564 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b08      	cmp	r3, #8
 8003520:	d002      	beq.n	8003528 <I2C_MasterReceive_BTF+0x19e>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b20      	cmp	r3, #32
 8003526:	d103      	bne.n	8003530 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	@ 0x30
 800352e:	e002      	b.n	8003536 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2212      	movs	r2, #18
 8003534:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff fc69 	bl	8002e0e <HAL_I2C_MasterRxCpltCallback>
}
 800353c:	e012      	b.n	8003564 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b40      	cmp	r3, #64	@ 0x40
 800357e:	d117      	bne.n	80035b0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003584:	2b00      	cmp	r3, #0
 8003586:	d109      	bne.n	800359c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003598:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800359a:	e067      	b.n	800366c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	611a      	str	r2, [r3, #16]
}
 80035ae:	e05d      	b.n	800366c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035b8:	d133      	bne.n	8003622 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b21      	cmp	r3, #33	@ 0x21
 80035c4:	d109      	bne.n	80035da <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035d6:	611a      	str	r2, [r3, #16]
 80035d8:	e008      	b.n	80035ec <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d004      	beq.n	80035fe <I2C_Master_SB+0x92>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d108      	bne.n	8003610 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003602:	2b00      	cmp	r3, #0
 8003604:	d032      	beq.n	800366c <I2C_Master_SB+0x100>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d02d      	beq.n	800366c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800361e:	605a      	str	r2, [r3, #4]
}
 8003620:	e024      	b.n	800366c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10e      	bne.n	8003648 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	b29b      	uxth	r3, r3
 8003630:	11db      	asrs	r3, r3, #7
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 0306 	and.w	r3, r3, #6
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f063 030f 	orn	r3, r3, #15
 800363e:	b2da      	uxtb	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	611a      	str	r2, [r3, #16]
}
 8003646:	e011      	b.n	800366c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800364c:	2b01      	cmp	r3, #1
 800364e:	d10d      	bne.n	800366c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003654:	b29b      	uxth	r3, r3
 8003656:	11db      	asrs	r3, r3, #7
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f003 0306 	and.w	r3, r3, #6
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f063 030e 	orn	r3, r3, #14
 8003664:	b2da      	uxtb	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	611a      	str	r2, [r3, #16]
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr

08003676 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	b2da      	uxtb	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <I2C_Master_ADD10+0x26>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	d108      	bne.n	80036ae <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00c      	beq.n	80036be <I2C_Master_ADD10+0x48>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036bc:	605a      	str	r2, [r3, #4]
  }
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b091      	sub	sp, #68	@ 0x44
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036de:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b22      	cmp	r3, #34	@ 0x22
 80036f0:	f040 8174 	bne.w	80039dc <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10f      	bne.n	800371c <I2C_Master_ADDR+0x54>
 80036fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003700:	2b40      	cmp	r3, #64	@ 0x40
 8003702:	d10b      	bne.n	800371c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003704:	2300      	movs	r3, #0
 8003706:	633b      	str	r3, [r7, #48]	@ 0x30
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	633b      	str	r3, [r7, #48]	@ 0x30
 8003718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371a:	e16b      	b.n	80039f4 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003720:	2b00      	cmp	r3, #0
 8003722:	d11d      	bne.n	8003760 <I2C_Master_ADDR+0x98>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800372c:	d118      	bne.n	8003760 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372e:	2300      	movs	r3, #0
 8003730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003752:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	651a      	str	r2, [r3, #80]	@ 0x50
 800375e:	e149      	b.n	80039f4 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d113      	bne.n	8003792 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800376a:	2300      	movs	r3, #0
 800376c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800377e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e120      	b.n	80039d4 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	f040 808a 	bne.w	80038b2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800379e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037a4:	d137      	bne.n	8003816 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037c4:	d113      	bne.n	80037ee <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037d4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d6:	2300      	movs	r3, #0
 80037d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	e0f2      	b.n	80039d4 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ee:	2300      	movs	r3, #0
 80037f0:	623b      	str	r3, [r7, #32]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	623b      	str	r3, [r7, #32]
 8003802:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	e0de      	b.n	80039d4 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003818:	2b08      	cmp	r3, #8
 800381a:	d02e      	beq.n	800387a <I2C_Master_ADDR+0x1b2>
 800381c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381e:	2b20      	cmp	r3, #32
 8003820:	d02b      	beq.n	800387a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003824:	2b12      	cmp	r3, #18
 8003826:	d102      	bne.n	800382e <I2C_Master_ADDR+0x166>
 8003828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382a:	2b01      	cmp	r3, #1
 800382c:	d125      	bne.n	800387a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800382e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003830:	2b04      	cmp	r3, #4
 8003832:	d00e      	beq.n	8003852 <I2C_Master_ADDR+0x18a>
 8003834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003836:	2b02      	cmp	r3, #2
 8003838:	d00b      	beq.n	8003852 <I2C_Master_ADDR+0x18a>
 800383a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383c:	2b10      	cmp	r3, #16
 800383e:	d008      	beq.n	8003852 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e007      	b.n	8003862 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003860:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	e0ac      	b.n	80039d4 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003888:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388a:	2300      	movs	r3, #0
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e090      	b.n	80039d4 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d158      	bne.n	800396e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80038bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d021      	beq.n	8003906 <I2C_Master_ADDR+0x23e>
 80038c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d01e      	beq.n	8003906 <I2C_Master_ADDR+0x23e>
 80038c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ca:	2b10      	cmp	r3, #16
 80038cc:	d01b      	beq.n	8003906 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038dc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	e012      	b.n	800392c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003914:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003936:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800393a:	d14b      	bne.n	80039d4 <I2C_Master_ADDR+0x30c>
 800393c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003942:	d00b      	beq.n	800395c <I2C_Master_ADDR+0x294>
 8003944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003946:	2b01      	cmp	r3, #1
 8003948:	d008      	beq.n	800395c <I2C_Master_ADDR+0x294>
 800394a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394c:	2b08      	cmp	r3, #8
 800394e:	d005      	beq.n	800395c <I2C_Master_ADDR+0x294>
 8003950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003952:	2b10      	cmp	r3, #16
 8003954:	d002      	beq.n	800395c <I2C_Master_ADDR+0x294>
 8003956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003958:	2b20      	cmp	r3, #32
 800395a:	d13b      	bne.n	80039d4 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800396a:	605a      	str	r2, [r3, #4]
 800396c:	e032      	b.n	80039d4 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800397c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800398c:	d117      	bne.n	80039be <I2C_Master_ADDR+0x2f6>
 800398e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003990:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003994:	d00b      	beq.n	80039ae <I2C_Master_ADDR+0x2e6>
 8003996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003998:	2b01      	cmp	r3, #1
 800399a:	d008      	beq.n	80039ae <I2C_Master_ADDR+0x2e6>
 800399c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d005      	beq.n	80039ae <I2C_Master_ADDR+0x2e6>
 80039a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d002      	beq.n	80039ae <I2C_Master_ADDR+0x2e6>
 80039a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d107      	bne.n	80039be <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80039da:	e00b      	b.n	80039f4 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039dc:	2300      	movs	r3, #0
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
}
 80039f2:	e7ff      	b.n	80039f4 <I2C_Master_ADDR+0x32c>
 80039f4:	bf00      	nop
 80039f6:	3744      	adds	r7, #68	@ 0x44
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a0c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d02b      	beq.n	8003a70 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d114      	bne.n	8003a70 <I2C_SlaveTransmit_TXE+0x72>
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	2b29      	cmp	r3, #41	@ 0x29
 8003a4a:	d111      	bne.n	8003a70 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a5a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2221      	movs	r2, #33	@ 0x21
 8003a60:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2228      	movs	r2, #40	@ 0x28
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff f9d8 	bl	8002e20 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d011      	beq.n	8003aae <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	781a      	ldrb	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d02c      	beq.n	8003b2c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d114      	bne.n	8003b2c <I2C_SlaveReceive_RXNE+0x74>
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b06:	d111      	bne.n	8003b2c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b16:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2222      	movs	r2, #34	@ 0x22
 8003b1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2228      	movs	r2, #40	@ 0x28
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff f983 	bl	8002e32 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d012      	beq.n	8003b6c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b90:	2b28      	cmp	r3, #40	@ 0x28
 8003b92:	d127      	bne.n	8003be4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	09db      	lsrs	r3, r3, #7
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d103      	bne.n	8003bc8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	81bb      	strh	r3, [r7, #12]
 8003bc6:	e002      	b.n	8003bce <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003bd6:	89ba      	ldrh	r2, [r7, #12]
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff f931 	bl	8002e44 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003be2:	e00e      	b.n	8003c02 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be4:	2300      	movs	r3, #0
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c1a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c58:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c68:	d172      	bne.n	8003d50 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	2b22      	cmp	r3, #34	@ 0x22
 8003c6e:	d002      	beq.n	8003c76 <I2C_Slave_STOPF+0x6a>
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c74:	d135      	bne.n	8003ce2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	f043 0204 	orr.w	r2, r3, #4
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ca8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fd ff44 	bl	8001b3c <HAL_DMA_GetState>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d049      	beq.n	8003d4e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cbe:	4a69      	ldr	r2, [pc, #420]	@ (8003e64 <I2C_Slave_STOPF+0x258>)
 8003cc0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fd fec0 	bl	8001a4c <HAL_DMA_Abort_IT>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d03d      	beq.n	8003d4e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ce0:	e035      	b.n	8003d4e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	f043 0204 	orr.w	r2, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd ff0e 	bl	8001b3c <HAL_DMA_GetState>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d014      	beq.n	8003d50 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2a:	4a4e      	ldr	r2, [pc, #312]	@ (8003e64 <I2C_Slave_STOPF+0x258>)
 8003d2c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fd fe8a 	bl	8001a4c <HAL_DMA_Abort_IT>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4798      	blx	r3
 8003d4c:	e000      	b.n	8003d50 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d4e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d03e      	beq.n	8003dd8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d112      	bne.n	8003d8e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d98:	2b40      	cmp	r3, #64	@ 0x40
 8003d9a:	d112      	bne.n	8003dc2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd0:	f043 0204 	orr.w	r2, r3, #4
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f8b7 	bl	8003f54 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003de6:	e039      	b.n	8003e5c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dec:	d109      	bne.n	8003e02 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2228      	movs	r2, #40	@ 0x28
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff f818 	bl	8002e32 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b28      	cmp	r3, #40	@ 0x28
 8003e0c:	d111      	bne.n	8003e32 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a15      	ldr	r2, [pc, #84]	@ (8003e68 <I2C_Slave_STOPF+0x25c>)
 8003e12:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff f817 	bl	8002e5e <HAL_I2C_ListenCpltCallback>
}
 8003e30:	e014      	b.n	8003e5c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e36:	2b22      	cmp	r3, #34	@ 0x22
 8003e38:	d002      	beq.n	8003e40 <I2C_Slave_STOPF+0x234>
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b22      	cmp	r3, #34	@ 0x22
 8003e3e:	d10d      	bne.n	8003e5c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fe ffeb 	bl	8002e32 <HAL_I2C_SlaveRxCpltCallback>
}
 8003e5c:	bf00      	nop
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	080044b5 	.word	0x080044b5
 8003e68:	ffff0000 	.word	0xffff0000

08003e6c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d002      	beq.n	8003e8e <I2C_Slave_AF+0x22>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d129      	bne.n	8003ee2 <I2C_Slave_AF+0x76>
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b28      	cmp	r3, #40	@ 0x28
 8003e92:	d126      	bne.n	8003ee2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a2e      	ldr	r2, [pc, #184]	@ (8003f50 <I2C_Slave_AF+0xe4>)
 8003e98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ea8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003eb2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ec2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fe ffbf 	bl	8002e5e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003ee0:	e031      	b.n	8003f46 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	2b21      	cmp	r3, #33	@ 0x21
 8003ee6:	d129      	bne.n	8003f3c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a19      	ldr	r2, [pc, #100]	@ (8003f50 <I2C_Slave_AF+0xe4>)
 8003eec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2221      	movs	r2, #33	@ 0x21
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f12:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f1c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f2c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fe f90a 	bl	8002148 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7fe ff73 	bl	8002e20 <HAL_I2C_SlaveTxCpltCallback>
}
 8003f3a:	e004      	b.n	8003f46 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f44:	615a      	str	r2, [r3, #20]
}
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	ffff0000 	.word	0xffff0000

08003f54 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f62:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f6a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f6c:	7bbb      	ldrb	r3, [r7, #14]
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d002      	beq.n	8003f78 <I2C_ITError+0x24>
 8003f72:	7bbb      	ldrb	r3, [r7, #14]
 8003f74:	2b40      	cmp	r3, #64	@ 0x40
 8003f76:	d10a      	bne.n	8003f8e <I2C_ITError+0x3a>
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b22      	cmp	r3, #34	@ 0x22
 8003f7c:	d107      	bne.n	8003f8e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f8c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f94:	2b28      	cmp	r3, #40	@ 0x28
 8003f96:	d107      	bne.n	8003fa8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2228      	movs	r2, #40	@ 0x28
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003fa6:	e015      	b.n	8003fd4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb6:	d00a      	beq.n	8003fce <I2C_ITError+0x7a>
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	2b60      	cmp	r3, #96	@ 0x60
 8003fbc:	d007      	beq.n	8003fce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fe2:	d162      	bne.n	80040aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ff2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d020      	beq.n	8004044 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004006:	4a6a      	ldr	r2, [pc, #424]	@ (80041b0 <I2C_ITError+0x25c>)
 8004008:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd fd1c 	bl	8001a4c <HAL_DMA_Abort_IT>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8089 	beq.w	800412e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800403e:	4610      	mov	r0, r2
 8004040:	4798      	blx	r3
 8004042:	e074      	b.n	800412e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	4a59      	ldr	r2, [pc, #356]	@ (80041b0 <I2C_ITError+0x25c>)
 800404a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fcfb 	bl	8001a4c <HAL_DMA_Abort_IT>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d068      	beq.n	800412e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004066:	2b40      	cmp	r3, #64	@ 0x40
 8004068:	d10b      	bne.n	8004082 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040a4:	4610      	mov	r0, r2
 80040a6:	4798      	blx	r3
 80040a8:	e041      	b.n	800412e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b60      	cmp	r3, #96	@ 0x60
 80040b4:	d125      	bne.n	8004102 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ce:	2b40      	cmp	r3, #64	@ 0x40
 80040d0:	d10b      	bne.n	80040ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0201 	bic.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fe feca 	bl	8002e94 <HAL_I2C_AbortCpltCallback>
 8004100:	e015      	b.n	800412e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410c:	2b40      	cmp	r3, #64	@ 0x40
 800410e:	d10b      	bne.n	8004128 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7fe feaa 	bl	8002e82 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10e      	bne.n	800415c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004144:	2b00      	cmp	r3, #0
 8004146:	d109      	bne.n	800415c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800416a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004172:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b04      	cmp	r3, #4
 800417e:	d113      	bne.n	80041a8 <I2C_ITError+0x254>
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	2b28      	cmp	r3, #40	@ 0x28
 8004184:	d110      	bne.n	80041a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a0a      	ldr	r2, [pc, #40]	@ (80041b4 <I2C_ITError+0x260>)
 800418a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fe fe5b 	bl	8002e5e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	080044b5 	.word	0x080044b5
 80041b4:	ffff0000 	.word	0xffff0000

080041b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	4608      	mov	r0, r1
 80041c2:	4611      	mov	r1, r2
 80041c4:	461a      	mov	r2, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	817b      	strh	r3, [r7, #10]
 80041ca:	460b      	mov	r3, r1
 80041cc:	813b      	strh	r3, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fa08 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00d      	beq.n	8004216 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004208:	d103      	bne.n	8004212 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004210:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e05f      	b.n	80042d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004216:	897b      	ldrh	r3, [r7, #10]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004224:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	6a3a      	ldr	r2, [r7, #32]
 800422a:	492d      	ldr	r1, [pc, #180]	@ (80042e0 <I2C_RequestMemoryWrite+0x128>)
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 fa63 	bl	80046f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e04c      	b.n	80042d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004254:	6a39      	ldr	r1, [r7, #32]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 faee 	bl	8004838 <I2C_WaitOnTXEFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00d      	beq.n	800427e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	2b04      	cmp	r3, #4
 8004268:	d107      	bne.n	800427a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004278:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e02b      	b.n	80042d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d105      	bne.n	8004290 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004284:	893b      	ldrh	r3, [r7, #8]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	611a      	str	r2, [r3, #16]
 800428e:	e021      	b.n	80042d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004290:	893b      	ldrh	r3, [r7, #8]
 8004292:	0a1b      	lsrs	r3, r3, #8
 8004294:	b29b      	uxth	r3, r3
 8004296:	b2da      	uxtb	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800429e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a0:	6a39      	ldr	r1, [r7, #32]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fac8 	bl	8004838 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d107      	bne.n	80042c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e005      	b.n	80042d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ca:	893b      	ldrh	r3, [r7, #8]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	00010002 	.word	0x00010002

080042e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	4608      	mov	r0, r1
 80042ee:	4611      	mov	r1, r2
 80042f0:	461a      	mov	r2, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	817b      	strh	r3, [r7, #10]
 80042f6:	460b      	mov	r3, r1
 80042f8:	813b      	strh	r3, [r7, #8]
 80042fa:	4613      	mov	r3, r2
 80042fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800430c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800431c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	2200      	movs	r2, #0
 8004326:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f96a 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00d      	beq.n	8004352 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004344:	d103      	bne.n	800434e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800434c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e0aa      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004352:	897b      	ldrh	r3, [r7, #10]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004360:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	6a3a      	ldr	r2, [r7, #32]
 8004366:	4952      	ldr	r1, [pc, #328]	@ (80044b0 <I2C_RequestMemoryRead+0x1cc>)
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f9c5 	bl	80046f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e097      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004390:	6a39      	ldr	r1, [r7, #32]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fa50 	bl	8004838 <I2C_WaitOnTXEFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d107      	bne.n	80043b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e076      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d105      	bne.n	80043cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043c0:	893b      	ldrh	r3, [r7, #8]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	611a      	str	r2, [r3, #16]
 80043ca:	e021      	b.n	8004410 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043cc:	893b      	ldrh	r3, [r7, #8]
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043dc:	6a39      	ldr	r1, [r7, #32]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fa2a 	bl	8004838 <I2C_WaitOnTXEFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00d      	beq.n	8004406 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d107      	bne.n	8004402 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004400:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e050      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004406:	893b      	ldrh	r3, [r7, #8]
 8004408:	b2da      	uxtb	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004412:	6a39      	ldr	r1, [r7, #32]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fa0f 	bl	8004838 <I2C_WaitOnTXEFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00d      	beq.n	800443c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	2b04      	cmp	r3, #4
 8004426:	d107      	bne.n	8004438 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004436:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e035      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800444a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	2200      	movs	r2, #0
 8004454:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f8d3 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004472:	d103      	bne.n	800447c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800447a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e013      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004480:	897b      	ldrh	r3, [r7, #10]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	b2da      	uxtb	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004492:	6a3a      	ldr	r2, [r7, #32]
 8004494:	4906      	ldr	r1, [pc, #24]	@ (80044b0 <I2C_RequestMemoryRead+0x1cc>)
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f92e 	bl	80046f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	00010002 	.word	0x00010002

080044b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044ce:	4b4b      	ldr	r3, [pc, #300]	@ (80045fc <I2C_DMAAbort+0x148>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	08db      	lsrs	r3, r3, #3
 80044d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004600 <I2C_DMAAbort+0x14c>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	0a1a      	lsrs	r2, r3, #8
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00da      	lsls	r2, r3, #3
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	f043 0220 	orr.w	r2, r3, #32
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80044fa:	e00a      	b.n	8004512 <I2C_DMAAbort+0x5e>
    }
    count--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3b01      	subs	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800450c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004510:	d0ea      	beq.n	80044e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451e:	2200      	movs	r2, #0
 8004520:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452e:	2200      	movs	r2, #0
 8004530:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004540:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2200      	movs	r2, #0
 8004546:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004554:	2200      	movs	r2, #0
 8004556:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	2200      	movs	r2, #0
 8004566:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b60      	cmp	r3, #96	@ 0x60
 8004582:	d10e      	bne.n	80045a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2200      	movs	r2, #0
 8004598:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800459a:	6978      	ldr	r0, [r7, #20]
 800459c:	f7fe fc7a 	bl	8002e94 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045a0:	e027      	b.n	80045f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045a2:	7cfb      	ldrb	r3, [r7, #19]
 80045a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045a8:	2b28      	cmp	r3, #40	@ 0x28
 80045aa:	d117      	bne.n	80045dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2228      	movs	r2, #40	@ 0x28
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80045da:	e007      	b.n	80045ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80045ec:	6978      	ldr	r0, [r7, #20]
 80045ee:	f7fe fc48 	bl	8002e82 <HAL_I2C_ErrorCallback>
}
 80045f2:	bf00      	nop
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000000 	.word	0x20000000
 8004600:	14f8b589 	.word	0x14f8b589

08004604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	4613      	mov	r3, r2
 8004612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004614:	e048      	b.n	80046a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	d044      	beq.n	80046a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461e:	f7fd f92b 	bl	8001878 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d302      	bcc.n	8004634 <I2C_WaitOnFlagUntilTimeout+0x30>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d139      	bne.n	80046a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	0c1b      	lsrs	r3, r3, #16
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b01      	cmp	r3, #1
 800463c:	d10d      	bne.n	800465a <I2C_WaitOnFlagUntilTimeout+0x56>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	43da      	mvns	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4013      	ands	r3, r2
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	e00c      	b.n	8004674 <I2C_WaitOnFlagUntilTimeout+0x70>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	43da      	mvns	r2, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4013      	ands	r3, r2
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	429a      	cmp	r2, r3
 8004678:	d116      	bne.n	80046a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	f043 0220 	orr.w	r2, r3, #32
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e023      	b.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	0c1b      	lsrs	r3, r3, #16
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d10d      	bne.n	80046ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	43da      	mvns	r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	4013      	ands	r3, r2
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf0c      	ite	eq
 80046c4:	2301      	moveq	r3, #1
 80046c6:	2300      	movne	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	e00c      	b.n	80046e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	43da      	mvns	r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4013      	ands	r3, r2
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bf0c      	ite	eq
 80046e0:	2301      	moveq	r3, #1
 80046e2:	2300      	movne	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d093      	beq.n	8004616 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004706:	e071      	b.n	80047ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004716:	d123      	bne.n	8004760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004726:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004730:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	f043 0204 	orr.w	r2, r3, #4
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e067      	b.n	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d041      	beq.n	80047ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004768:	f7fd f886 	bl	8001878 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	429a      	cmp	r2, r3
 8004776:	d302      	bcc.n	800477e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d136      	bne.n	80047ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	d10c      	bne.n	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	43da      	mvns	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4013      	ands	r3, r2
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	bf14      	ite	ne
 800479a:	2301      	movne	r3, #1
 800479c:	2300      	moveq	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	e00b      	b.n	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	43da      	mvns	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4013      	ands	r3, r2
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d016      	beq.n	80047ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	f043 0220 	orr.w	r2, r3, #32
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e021      	b.n	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	0c1b      	lsrs	r3, r3, #16
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d10c      	bne.n	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	43da      	mvns	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4013      	ands	r3, r2
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf14      	ite	ne
 8004808:	2301      	movne	r3, #1
 800480a:	2300      	moveq	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	e00b      	b.n	8004828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	43da      	mvns	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4013      	ands	r3, r2
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	bf14      	ite	ne
 8004822:	2301      	movne	r3, #1
 8004824:	2300      	moveq	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	f47f af6d 	bne.w	8004708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004844:	e034      	b.n	80048b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f915 	bl	8004a76 <I2C_IsAcknowledgeFailed>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e034      	b.n	80048c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d028      	beq.n	80048b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485e:	f7fd f80b 	bl	8001878 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d11d      	bne.n	80048b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487e:	2b80      	cmp	r3, #128	@ 0x80
 8004880:	d016      	beq.n	80048b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	f043 0220 	orr.w	r2, r3, #32
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e007      	b.n	80048c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ba:	2b80      	cmp	r3, #128	@ 0x80
 80048bc:	d1c3      	bne.n	8004846 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048d4:	e034      	b.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f8cd 	bl	8004a76 <I2C_IsAcknowledgeFailed>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e034      	b.n	8004950 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d028      	beq.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ee:	f7fc ffc3 	bl	8001878 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d11d      	bne.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b04      	cmp	r3, #4
 8004910:	d016      	beq.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e007      	b.n	8004950 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b04      	cmp	r3, #4
 800494c:	d1c3      	bne.n	80048d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004964:	4b13      	ldr	r3, [pc, #76]	@ (80049b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	08db      	lsrs	r3, r3, #3
 800496a:	4a13      	ldr	r2, [pc, #76]	@ (80049b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800496c:	fba2 2303 	umull	r2, r3, r2, r3
 8004970:	0a1a      	lsrs	r2, r3, #8
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3b01      	subs	r3, #1
 800497e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d107      	bne.n	8004996 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f043 0220 	orr.w	r2, r3, #32
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e008      	b.n	80049a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049a4:	d0e9      	beq.n	800497a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000000 	.word	0x20000000
 80049b8:	14f8b589 	.word	0x14f8b589

080049bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049c8:	e049      	b.n	8004a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d119      	bne.n	8004a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0210 	mvn.w	r2, #16
 80049e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e030      	b.n	8004a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0c:	f7fc ff34 	bl	8001878 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d302      	bcc.n	8004a22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d11d      	bne.n	8004a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2c:	2b40      	cmp	r3, #64	@ 0x40
 8004a2e:	d016      	beq.n	8004a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	f043 0220 	orr.w	r2, r3, #32
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e007      	b.n	8004a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a68:	2b40      	cmp	r3, #64	@ 0x40
 8004a6a:	d1ae      	bne.n	80049ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a8c:	d11b      	bne.n	8004ac6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a96:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	f043 0204 	orr.w	r2, r3, #4
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr

08004ad2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ade:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004ae2:	d103      	bne.n	8004aec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004aea:	e007      	b.n	8004afc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004af4:	d102      	bne.n	8004afc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2208      	movs	r2, #8
 8004afa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr
	...

08004b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e272      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 8087 	beq.w	8004c36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b28:	4b92      	ldr	r3, [pc, #584]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 030c 	and.w	r3, r3, #12
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d00c      	beq.n	8004b4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b34:	4b8f      	ldr	r3, [pc, #572]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 030c 	and.w	r3, r3, #12
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d112      	bne.n	8004b66 <HAL_RCC_OscConfig+0x5e>
 8004b40:	4b8c      	ldr	r3, [pc, #560]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b4c:	d10b      	bne.n	8004b66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4e:	4b89      	ldr	r3, [pc, #548]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d06c      	beq.n	8004c34 <HAL_RCC_OscConfig+0x12c>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d168      	bne.n	8004c34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e24c      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b6e:	d106      	bne.n	8004b7e <HAL_RCC_OscConfig+0x76>
 8004b70:	4b80      	ldr	r3, [pc, #512]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a7f      	ldr	r2, [pc, #508]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004b76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	e02e      	b.n	8004bdc <HAL_RCC_OscConfig+0xd4>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10c      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x98>
 8004b86:	4b7b      	ldr	r3, [pc, #492]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a7a      	ldr	r2, [pc, #488]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	4b78      	ldr	r3, [pc, #480]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a77      	ldr	r2, [pc, #476]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004b98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	e01d      	b.n	8004bdc <HAL_RCC_OscConfig+0xd4>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_RCC_OscConfig+0xbc>
 8004baa:	4b72      	ldr	r3, [pc, #456]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a71      	ldr	r2, [pc, #452]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	4b6f      	ldr	r3, [pc, #444]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a6e      	ldr	r2, [pc, #440]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e00b      	b.n	8004bdc <HAL_RCC_OscConfig+0xd4>
 8004bc4:	4b6b      	ldr	r3, [pc, #428]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a6a      	ldr	r2, [pc, #424]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	4b68      	ldr	r3, [pc, #416]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a67      	ldr	r2, [pc, #412]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d013      	beq.n	8004c0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7fc fe48 	bl	8001878 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bec:	f7fc fe44 	bl	8001878 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b64      	cmp	r3, #100	@ 0x64
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e200      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfe:	4b5d      	ldr	r3, [pc, #372]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0xe4>
 8004c0a:	e014      	b.n	8004c36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0c:	f7fc fe34 	bl	8001878 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c14:	f7fc fe30 	bl	8001878 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	@ 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e1ec      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c26:	4b53      	ldr	r3, [pc, #332]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0x10c>
 8004c32:	e000      	b.n	8004c36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d063      	beq.n	8004d0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c42:	4b4c      	ldr	r3, [pc, #304]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f003 030c 	and.w	r3, r3, #12
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c4e:	4b49      	ldr	r3, [pc, #292]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d11c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x18c>
 8004c5a:	4b46      	ldr	r3, [pc, #280]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d116      	bne.n	8004c94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c66:	4b43      	ldr	r3, [pc, #268]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_RCC_OscConfig+0x176>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d001      	beq.n	8004c7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e1c0      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4939      	ldr	r1, [pc, #228]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c92:	e03a      	b.n	8004d0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d020      	beq.n	8004cde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c9c:	4b36      	ldr	r3, [pc, #216]	@ (8004d78 <HAL_RCC_OscConfig+0x270>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca2:	f7fc fde9 	bl	8001878 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004caa:	f7fc fde5 	bl	8001878 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e1a1      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0f0      	beq.n	8004caa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	4927      	ldr	r1, [pc, #156]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	600b      	str	r3, [r1, #0]
 8004cdc:	e015      	b.n	8004d0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cde:	4b26      	ldr	r3, [pc, #152]	@ (8004d78 <HAL_RCC_OscConfig+0x270>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fc fdc8 	bl	8001878 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cec:	f7fc fdc4 	bl	8001878 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e180      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d03a      	beq.n	8004d8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d019      	beq.n	8004d52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d1e:	4b17      	ldr	r3, [pc, #92]	@ (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d24:	f7fc fda8 	bl	8001878 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2c:	f7fc fda4 	bl	8001878 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e160      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d74 <HAL_RCC_OscConfig+0x26c>)
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	f000 faea 	bl	8005324 <RCC_Delay>
 8004d50:	e01c      	b.n	8004d8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d52:	4b0a      	ldr	r3, [pc, #40]	@ (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d58:	f7fc fd8e 	bl	8001878 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d5e:	e00f      	b.n	8004d80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d60:	f7fc fd8a 	bl	8001878 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d908      	bls.n	8004d80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e146      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
 8004d72:	bf00      	nop
 8004d74:	40021000 	.word	0x40021000
 8004d78:	42420000 	.word	0x42420000
 8004d7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d80:	4b92      	ldr	r3, [pc, #584]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e9      	bne.n	8004d60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80a6 	beq.w	8004ee6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d9e:	4b8b      	ldr	r3, [pc, #556]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10d      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004daa:	4b88      	ldr	r3, [pc, #544]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	4a87      	ldr	r2, [pc, #540]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db4:	61d3      	str	r3, [r2, #28]
 8004db6:	4b85      	ldr	r3, [pc, #532]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc6:	4b82      	ldr	r3, [pc, #520]	@ (8004fd0 <HAL_RCC_OscConfig+0x4c8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d118      	bne.n	8004e04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dd2:	4b7f      	ldr	r3, [pc, #508]	@ (8004fd0 <HAL_RCC_OscConfig+0x4c8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a7e      	ldr	r2, [pc, #504]	@ (8004fd0 <HAL_RCC_OscConfig+0x4c8>)
 8004dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dde:	f7fc fd4b 	bl	8001878 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de6:	f7fc fd47 	bl	8001878 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b64      	cmp	r3, #100	@ 0x64
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e103      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df8:	4b75      	ldr	r3, [pc, #468]	@ (8004fd0 <HAL_RCC_OscConfig+0x4c8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d106      	bne.n	8004e1a <HAL_RCC_OscConfig+0x312>
 8004e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	4a6e      	ldr	r2, [pc, #440]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	6213      	str	r3, [r2, #32]
 8004e18:	e02d      	b.n	8004e76 <HAL_RCC_OscConfig+0x36e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCC_OscConfig+0x334>
 8004e22:	4b6a      	ldr	r3, [pc, #424]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	4a69      	ldr	r2, [pc, #420]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	6213      	str	r3, [r2, #32]
 8004e2e:	4b67      	ldr	r3, [pc, #412]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	4a66      	ldr	r2, [pc, #408]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e34:	f023 0304 	bic.w	r3, r3, #4
 8004e38:	6213      	str	r3, [r2, #32]
 8004e3a:	e01c      	b.n	8004e76 <HAL_RCC_OscConfig+0x36e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	2b05      	cmp	r3, #5
 8004e42:	d10c      	bne.n	8004e5e <HAL_RCC_OscConfig+0x356>
 8004e44:	4b61      	ldr	r3, [pc, #388]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	4a60      	ldr	r2, [pc, #384]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e4a:	f043 0304 	orr.w	r3, r3, #4
 8004e4e:	6213      	str	r3, [r2, #32]
 8004e50:	4b5e      	ldr	r3, [pc, #376]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	4a5d      	ldr	r2, [pc, #372]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	6213      	str	r3, [r2, #32]
 8004e5c:	e00b      	b.n	8004e76 <HAL_RCC_OscConfig+0x36e>
 8004e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	4a5a      	ldr	r2, [pc, #360]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	6213      	str	r3, [r2, #32]
 8004e6a:	4b58      	ldr	r3, [pc, #352]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	4a57      	ldr	r2, [pc, #348]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e70:	f023 0304 	bic.w	r3, r3, #4
 8004e74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d015      	beq.n	8004eaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7e:	f7fc fcfb 	bl	8001878 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e84:	e00a      	b.n	8004e9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e86:	f7fc fcf7 	bl	8001878 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e0b1      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9c:	4b4b      	ldr	r3, [pc, #300]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0ee      	beq.n	8004e86 <HAL_RCC_OscConfig+0x37e>
 8004ea8:	e014      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eaa:	f7fc fce5 	bl	8001878 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fc fce1 	bl	8001878 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e09b      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec8:	4b40      	ldr	r3, [pc, #256]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ee      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d105      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eda:	4b3c      	ldr	r3, [pc, #240]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	4a3b      	ldr	r2, [pc, #236]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004ee0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ee4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8087 	beq.w	8004ffe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ef0:	4b36      	ldr	r3, [pc, #216]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f003 030c 	and.w	r3, r3, #12
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d061      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d146      	bne.n	8004f92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f04:	4b33      	ldr	r3, [pc, #204]	@ (8004fd4 <HAL_RCC_OscConfig+0x4cc>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0a:	f7fc fcb5 	bl	8001878 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f12:	f7fc fcb1 	bl	8001878 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e06d      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f24:	4b29      	ldr	r3, [pc, #164]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f0      	bne.n	8004f12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f38:	d108      	bne.n	8004f4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f3a:	4b24      	ldr	r3, [pc, #144]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	4921      	ldr	r1, [pc, #132]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a19      	ldr	r1, [r3, #32]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	491b      	ldr	r1, [pc, #108]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f64:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd4 <HAL_RCC_OscConfig+0x4cc>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6a:	f7fc fc85 	bl	8001878 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f72:	f7fc fc81 	bl	8001878 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e03d      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f84:	4b11      	ldr	r3, [pc, #68]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_OscConfig+0x46a>
 8004f90:	e035      	b.n	8004ffe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f92:	4b10      	ldr	r3, [pc, #64]	@ (8004fd4 <HAL_RCC_OscConfig+0x4cc>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f98:	f7fc fc6e 	bl	8001878 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa0:	f7fc fc6a 	bl	8001878 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e026      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fb2:	4b06      	ldr	r3, [pc, #24]	@ (8004fcc <HAL_RCC_OscConfig+0x4c4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x498>
 8004fbe:	e01e      	b.n	8004ffe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d107      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e019      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40007000 	.word	0x40007000
 8004fd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <HAL_RCC_OscConfig+0x500>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d106      	bne.n	8004ffa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d001      	beq.n	8004ffe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40021000 	.word	0x40021000

0800500c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0d0      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005020:	4b6a      	ldr	r3, [pc, #424]	@ (80051cc <HAL_RCC_ClockConfig+0x1c0>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d910      	bls.n	8005050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b67      	ldr	r3, [pc, #412]	@ (80051cc <HAL_RCC_ClockConfig+0x1c0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 0207 	bic.w	r2, r3, #7
 8005036:	4965      	ldr	r1, [pc, #404]	@ (80051cc <HAL_RCC_ClockConfig+0x1c0>)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	4b63      	ldr	r3, [pc, #396]	@ (80051cc <HAL_RCC_ClockConfig+0x1c0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0b8      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d020      	beq.n	800509e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005068:	4b59      	ldr	r3, [pc, #356]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4a58      	ldr	r2, [pc, #352]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 800506e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005072:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005080:	4b53      	ldr	r3, [pc, #332]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4a52      	ldr	r2, [pc, #328]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005086:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800508a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800508c:	4b50      	ldr	r3, [pc, #320]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	494d      	ldr	r1, [pc, #308]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 800509a:	4313      	orrs	r3, r2
 800509c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d040      	beq.n	800512c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d107      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b2:	4b47      	ldr	r3, [pc, #284]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d115      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e07f      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d107      	bne.n	80050da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ca:	4b41      	ldr	r3, [pc, #260]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e073      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050da:	4b3d      	ldr	r3, [pc, #244]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e06b      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ea:	4b39      	ldr	r3, [pc, #228]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f023 0203 	bic.w	r2, r3, #3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	4936      	ldr	r1, [pc, #216]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050fc:	f7fc fbbc 	bl	8001878 <HAL_GetTick>
 8005100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	e00a      	b.n	800511a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005104:	f7fc fbb8 	bl	8001878 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e053      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511a:	4b2d      	ldr	r3, [pc, #180]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 020c 	and.w	r2, r3, #12
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	429a      	cmp	r2, r3
 800512a:	d1eb      	bne.n	8005104 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800512c:	4b27      	ldr	r3, [pc, #156]	@ (80051cc <HAL_RCC_ClockConfig+0x1c0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d210      	bcs.n	800515c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4b24      	ldr	r3, [pc, #144]	@ (80051cc <HAL_RCC_ClockConfig+0x1c0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 0207 	bic.w	r2, r3, #7
 8005142:	4922      	ldr	r1, [pc, #136]	@ (80051cc <HAL_RCC_ClockConfig+0x1c0>)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	4313      	orrs	r3, r2
 8005148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800514a:	4b20      	ldr	r3, [pc, #128]	@ (80051cc <HAL_RCC_ClockConfig+0x1c0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e032      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005168:	4b19      	ldr	r3, [pc, #100]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	4916      	ldr	r1, [pc, #88]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005176:	4313      	orrs	r3, r2
 8005178:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005186:	4b12      	ldr	r3, [pc, #72]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	490e      	ldr	r1, [pc, #56]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005196:	4313      	orrs	r3, r2
 8005198:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800519a:	f000 f821 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 800519e:	4602      	mov	r2, r0
 80051a0:	4b0b      	ldr	r3, [pc, #44]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	091b      	lsrs	r3, r3, #4
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	490a      	ldr	r1, [pc, #40]	@ (80051d4 <HAL_RCC_ClockConfig+0x1c8>)
 80051ac:	5ccb      	ldrb	r3, [r1, r3]
 80051ae:	fa22 f303 	lsr.w	r3, r2, r3
 80051b2:	4a09      	ldr	r2, [pc, #36]	@ (80051d8 <HAL_RCC_ClockConfig+0x1cc>)
 80051b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051b6:	4b09      	ldr	r3, [pc, #36]	@ (80051dc <HAL_RCC_ClockConfig+0x1d0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fc f99c 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40022000 	.word	0x40022000
 80051d0:	40021000 	.word	0x40021000
 80051d4:	0800d7fc 	.word	0x0800d7fc
 80051d8:	20000000 	.word	0x20000000
 80051dc:	20000004 	.word	0x20000004

080051e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	2300      	movs	r3, #0
 80051f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x94>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	2b04      	cmp	r3, #4
 8005208:	d002      	beq.n	8005210 <HAL_RCC_GetSysClockFreq+0x30>
 800520a:	2b08      	cmp	r3, #8
 800520c:	d003      	beq.n	8005216 <HAL_RCC_GetSysClockFreq+0x36>
 800520e:	e027      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005210:	4b19      	ldr	r3, [pc, #100]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x98>)
 8005212:	613b      	str	r3, [r7, #16]
      break;
 8005214:	e027      	b.n	8005266 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	0c9b      	lsrs	r3, r3, #18
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	4a17      	ldr	r2, [pc, #92]	@ (800527c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005220:	5cd3      	ldrb	r3, [r2, r3]
 8005222:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d010      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800522e:	4b11      	ldr	r3, [pc, #68]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x94>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	0c5b      	lsrs	r3, r3, #17
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	4a11      	ldr	r2, [pc, #68]	@ (8005280 <HAL_RCC_GetSysClockFreq+0xa0>)
 800523a:	5cd3      	ldrb	r3, [r2, r3]
 800523c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a0d      	ldr	r2, [pc, #52]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x98>)
 8005242:	fb03 f202 	mul.w	r2, r3, r2
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	e004      	b.n	800525a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a0c      	ldr	r2, [pc, #48]	@ (8005284 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005254:	fb02 f303 	mul.w	r3, r2, r3
 8005258:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	613b      	str	r3, [r7, #16]
      break;
 800525e:	e002      	b.n	8005266 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005260:	4b05      	ldr	r3, [pc, #20]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x98>)
 8005262:	613b      	str	r3, [r7, #16]
      break;
 8005264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005266:	693b      	ldr	r3, [r7, #16]
}
 8005268:	4618      	mov	r0, r3
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40021000 	.word	0x40021000
 8005278:	007a1200 	.word	0x007a1200
 800527c:	0800d814 	.word	0x0800d814
 8005280:	0800d824 	.word	0x0800d824
 8005284:	003d0900 	.word	0x003d0900

08005288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800528c:	4b02      	ldr	r3, [pc, #8]	@ (8005298 <HAL_RCC_GetHCLKFreq+0x10>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr
 8005298:	20000000 	.word	0x20000000

0800529c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052a0:	f7ff fff2 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b05      	ldr	r3, [pc, #20]	@ (80052bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4903      	ldr	r1, [pc, #12]	@ (80052c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40021000 	.word	0x40021000
 80052c0:	0800d80c 	.word	0x0800d80c

080052c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	220f      	movs	r2, #15
 80052d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052d4:	4b11      	ldr	r3, [pc, #68]	@ (800531c <HAL_RCC_GetClockConfig+0x58>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f003 0203 	and.w	r2, r3, #3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052e0:	4b0e      	ldr	r3, [pc, #56]	@ (800531c <HAL_RCC_GetClockConfig+0x58>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052ec:	4b0b      	ldr	r3, [pc, #44]	@ (800531c <HAL_RCC_GetClockConfig+0x58>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80052f8:	4b08      	ldr	r3, [pc, #32]	@ (800531c <HAL_RCC_GetClockConfig+0x58>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	08db      	lsrs	r3, r3, #3
 80052fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005306:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <HAL_RCC_GetClockConfig+0x5c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0207 	and.w	r2, r3, #7
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	40021000 	.word	0x40021000
 8005320:	40022000 	.word	0x40022000

08005324 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800532c:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <RCC_Delay+0x34>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0a      	ldr	r2, [pc, #40]	@ (800535c <RCC_Delay+0x38>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	0a5b      	lsrs	r3, r3, #9
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	fb02 f303 	mul.w	r3, r2, r3
 800533e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005340:	bf00      	nop
  }
  while (Delay --);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1e5a      	subs	r2, r3, #1
 8005346:	60fa      	str	r2, [r7, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f9      	bne.n	8005340 <RCC_Delay+0x1c>
}
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr
 8005358:	20000000 	.word	0x20000000
 800535c:	10624dd3 	.word	0x10624dd3

08005360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e041      	b.n	80053f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f839 	bl	80053fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f000 f99c 	bl	80056dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d001      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e03a      	b.n	800549e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a18      	ldr	r2, [pc, #96]	@ (80054a8 <HAL_TIM_Base_Start_IT+0x98>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00e      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x58>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005452:	d009      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x58>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a14      	ldr	r2, [pc, #80]	@ (80054ac <HAL_TIM_Base_Start_IT+0x9c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d004      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x58>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a13      	ldr	r2, [pc, #76]	@ (80054b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d111      	bne.n	800548c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b06      	cmp	r3, #6
 8005478:	d010      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0201 	orr.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548a:	e007      	b.n	800549c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	40000400 	.word	0x40000400
 80054b0:	40000800 	.word	0x40000800

080054b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d020      	beq.n	8005518 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01b      	beq.n	8005518 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0202 	mvn.w	r2, #2
 80054e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f8d1 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 8005504:	e005      	b.n	8005512 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f8c4 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f8d3 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d020      	beq.n	8005564 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01b      	beq.n	8005564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0204 	mvn.w	r2, #4
 8005534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f8ab 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 8005550:	e005      	b.n	800555e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f89e 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f8ad 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d020      	beq.n	80055b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01b      	beq.n	80055b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0208 	mvn.w	r2, #8
 8005580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2204      	movs	r2, #4
 8005586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f885 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 800559c:	e005      	b.n	80055aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f878 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f887 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d020      	beq.n	80055fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01b      	beq.n	80055fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0210 	mvn.w	r2, #16
 80055cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2208      	movs	r2, #8
 80055d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f85f 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 80055e8:	e005      	b.n	80055f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f852 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f861 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00c      	beq.n	8005620 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0201 	mvn.w	r2, #1
 8005618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fb fec2 	bl	80013a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00c      	beq.n	8005644 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005630:	2b00      	cmp	r3, #0
 8005632:	d007      	beq.n	8005644 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800563c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f8c3 	bl	80057ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00c      	beq.n	8005668 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f831 	bl	80056ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00c      	beq.n	800568c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0220 	mvn.w	r2, #32
 8005684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f896 	bl	80057b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr

080056a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a2f      	ldr	r2, [pc, #188]	@ (80057ac <TIM_Base_SetConfig+0xd0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_Base_SetConfig+0x30>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056fa:	d007      	beq.n	800570c <TIM_Base_SetConfig+0x30>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a2c      	ldr	r2, [pc, #176]	@ (80057b0 <TIM_Base_SetConfig+0xd4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0x30>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a2b      	ldr	r2, [pc, #172]	@ (80057b4 <TIM_Base_SetConfig+0xd8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d108      	bne.n	800571e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a22      	ldr	r2, [pc, #136]	@ (80057ac <TIM_Base_SetConfig+0xd0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00b      	beq.n	800573e <TIM_Base_SetConfig+0x62>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572c:	d007      	beq.n	800573e <TIM_Base_SetConfig+0x62>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a1f      	ldr	r2, [pc, #124]	@ (80057b0 <TIM_Base_SetConfig+0xd4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d003      	beq.n	800573e <TIM_Base_SetConfig+0x62>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a1e      	ldr	r2, [pc, #120]	@ (80057b4 <TIM_Base_SetConfig+0xd8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d108      	bne.n	8005750 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a0d      	ldr	r2, [pc, #52]	@ (80057ac <TIM_Base_SetConfig+0xd0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d103      	bne.n	8005784 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f023 0201 	bic.w	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	611a      	str	r2, [r3, #16]
  }
}
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40000800 	.word	0x40000800

080057b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr

080057ca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr

080057dc <LPS25HB_Initialise>:
/**
 * @brief Initialize the LPS25HB sensor.
 * @param i2cHandle The I2C handle to use.
 * @return 0 on success, 1 on error.
 */
uint8_t LPS25HB_Initialise(I2C_HandleTypeDef * i2cHandle) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af04      	add	r7, sp, #16
 80057e2:	6078      	str	r0, [r7, #4]

  // Check the ID of the sensor.
  HAL_I2C_Mem_Read(i2cHandle, LPS25HB_ADDRESS, LPS25HB_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, & chipID, 1, 100);
 80057e4:	2364      	movs	r3, #100	@ 0x64
 80057e6:	9302      	str	r3, [sp, #8]
 80057e8:	2301      	movs	r3, #1
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	4b13      	ldr	r3, [pc, #76]	@ (800583c <LPS25HB_Initialise+0x60>)
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	2301      	movs	r3, #1
 80057f2:	220f      	movs	r2, #15
 80057f4:	21b8      	movs	r1, #184	@ 0xb8
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fc fdb4 	bl	8002364 <HAL_I2C_Mem_Read>

  if (chipID != LPS25HB_DEVICE_ID) {
 80057fc:	4b0f      	ldr	r3, [pc, #60]	@ (800583c <LPS25HB_Initialise+0x60>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2bbd      	cmp	r3, #189	@ 0xbd
 8005802:	d001      	beq.n	8005808 <LPS25HB_Initialise+0x2c>
    return 1; // If the ID does not match, initialization is aborted.
 8005804:	2301      	movs	r3, #1
 8005806:	e014      	b.n	8005832 <LPS25HB_Initialise+0x56>
  } 

	// Power on the sensor.
  datatowrite = (0x01 << 7); //power on PD
 8005808:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <LPS25HB_Initialise+0x64>)
 800580a:	2280      	movs	r2, #128	@ 0x80
 800580c:	701a      	strb	r2, [r3, #0]
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 800580e:	2364      	movs	r3, #100	@ 0x64
 8005810:	9302      	str	r3, [sp, #8]
 8005812:	2301      	movs	r3, #1
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	4b0a      	ldr	r3, [pc, #40]	@ (8005840 <LPS25HB_Initialise+0x64>)
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	2301      	movs	r3, #1
 800581c:	2220      	movs	r2, #32
 800581e:	21b8      	movs	r1, #184	@ 0xb8
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7fc fca5 	bl	8002170 <HAL_I2C_Mem_Write>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <LPS25HB_Initialise+0x54>
    return 1;
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <LPS25HB_Initialise+0x56>
  }
  return 0;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	200002a8 	.word	0x200002a8
 8005840:	200002a9 	.word	0x200002a9

08005844 <LPS25HB_Measure_Temperature_IT>:
/**
 * @brief Measure the temperature using the LPS25HB sensor.
 * @param i2cHandle The I2C handle to use.
 * @return 0 on success, 1 on error.
 */
uint8_t LPS25HB_Measure_Temperature_IT(I2C_HandleTypeDef * i2cHandle) {
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af04      	add	r7, sp, #16
 800584a:	6078      	str	r0, [r7, #4]
	// Set one shot mode.
  datatowrite = (0x01 << 0); // One shot mode
 800584c:	4b11      	ldr	r3, [pc, #68]	@ (8005894 <LPS25HB_Measure_Temperature_IT+0x50>)
 800584e:	2201      	movs	r2, #1
 8005850:	701a      	strb	r2, [r3, #0]
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 8005852:	2364      	movs	r3, #100	@ 0x64
 8005854:	9302      	str	r3, [sp, #8]
 8005856:	2301      	movs	r3, #1
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	4b0e      	ldr	r3, [pc, #56]	@ (8005894 <LPS25HB_Measure_Temperature_IT+0x50>)
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	2301      	movs	r3, #1
 8005860:	2221      	movs	r2, #33	@ 0x21
 8005862:	21b8      	movs	r1, #184	@ 0xb8
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7fc fc83 	bl	8002170 <HAL_I2C_Mem_Write>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <LPS25HB_Measure_Temperature_IT+0x30>
    return 1;
 8005870:	2301      	movs	r3, #1
 8005872:	e00a      	b.n	800588a <LPS25HB_Measure_Temperature_IT+0x46>
  }
	
  // Start the temperature measurement.
  HAL_I2C_Mem_Read_IT(i2cHandle, LPS25HB_ADDRESS, LPS25HB_TEMP_OUT_L | 0x80, I2C_MEMADD_SIZE_8BIT, Temp_RAW, 2);
 8005874:	2302      	movs	r3, #2
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	4b07      	ldr	r3, [pc, #28]	@ (8005898 <LPS25HB_Measure_Temperature_IT+0x54>)
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	2301      	movs	r3, #1
 800587e:	22ab      	movs	r2, #171	@ 0xab
 8005880:	21b8      	movs	r1, #184	@ 0xb8
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fc ffe2 	bl	800284c <HAL_I2C_Mem_Read_IT>

	return 0;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	200002a9 	.word	0x200002a9
 8005898:	200002ac 	.word	0x200002ac

0800589c <LPS25HB_Measure_Pressure_IT>:

uint8_t	LPS25HB_Measure_Pressure_IT(I2C_HandleTypeDef *i2cHandle) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af04      	add	r7, sp, #16
 80058a2:	6078      	str	r0, [r7, #4]
	// Set one shot mode.
  datatowrite = (0x01 << 0); // One shot mode
 80058a4:	4b11      	ldr	r3, [pc, #68]	@ (80058ec <LPS25HB_Measure_Pressure_IT+0x50>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	701a      	strb	r2, [r3, #0]
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 80058aa:	2364      	movs	r3, #100	@ 0x64
 80058ac:	9302      	str	r3, [sp, #8]
 80058ae:	2301      	movs	r3, #1
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	4b0e      	ldr	r3, [pc, #56]	@ (80058ec <LPS25HB_Measure_Pressure_IT+0x50>)
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	2301      	movs	r3, #1
 80058b8:	2221      	movs	r2, #33	@ 0x21
 80058ba:	21b8      	movs	r1, #184	@ 0xb8
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fc fc57 	bl	8002170 <HAL_I2C_Mem_Write>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <LPS25HB_Measure_Pressure_IT+0x30>
    return 1;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e00a      	b.n	80058e2 <LPS25HB_Measure_Pressure_IT+0x46>
  }

  // Start the pressure measurement.
  HAL_I2C_Mem_Read_IT(i2cHandle, LPS25HB_ADDRESS, LPS25HB_PRESS_OUT_XL | 0x80, I2C_MEMADD_SIZE_8BIT, Press_RAW, 3);
 80058cc:	2303      	movs	r3, #3
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	4b07      	ldr	r3, [pc, #28]	@ (80058f0 <LPS25HB_Measure_Pressure_IT+0x54>)
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2301      	movs	r3, #1
 80058d6:	22a8      	movs	r2, #168	@ 0xa8
 80058d8:	21b8      	movs	r1, #184	@ 0xb8
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fc ffb6 	bl	800284c <HAL_I2C_Mem_Read_IT>

	return 0;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	200002a9 	.word	0x200002a9
 80058f0:	200002b0 	.word	0x200002b0

080058f4 <HAL_I2C_MemRxCpltCallback>:

/**
 * @brief This function is called when the I2C read operation is complete.
 * @param hi2c The I2C handle.
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C2) {
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1d      	ldr	r2, [pc, #116]	@ (8005978 <HAL_I2C_MemRxCpltCallback+0x84>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d134      	bne.n	8005970 <HAL_I2C_MemRxCpltCallback+0x7c>
      uint8_t msg;
    // The read operation for I2C2 is complete.
	if (Left_Button_State == TEMP){
 8005906:	4b1d      	ldr	r3, [pc, #116]	@ (800597c <HAL_I2C_MemRxCpltCallback+0x88>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d116      	bne.n	800593c <HAL_I2C_MemRxCpltCallback+0x48>
	    for(int i=0; i<2; i++){
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e00f      	b.n	8005934 <HAL_I2C_MemRxCpltCallback+0x40>
		msg = Temp_RAW[i];
 8005914:	4a1a      	ldr	r2, [pc, #104]	@ (8005980 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	4413      	add	r3, r2
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	73fb      	strb	r3, [r7, #15]
		osMessageQueuePut(SensorRAWQueueHandle, &msg, 0, 0);
 800591e:	4b19      	ldr	r3, [pc, #100]	@ (8005984 <HAL_I2C_MemRxCpltCallback+0x90>)
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	f107 010f 	add.w	r1, r7, #15
 8005926:	2300      	movs	r3, #0
 8005928:	2200      	movs	r2, #0
 800592a:	f000 f9df 	bl	8005cec <osMessageQueuePut>
	    for(int i=0; i<2; i++){
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	3301      	adds	r3, #1
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2b01      	cmp	r3, #1
 8005938:	ddec      	ble.n	8005914 <HAL_I2C_MemRxCpltCallback+0x20>
		msg = Press_RAW[i];
		osMessageQueuePut(SensorRAWQueueHandle, &msg, 0, 0);
	    }
	}
  }
}
 800593a:	e019      	b.n	8005970 <HAL_I2C_MemRxCpltCallback+0x7c>
	else if(Left_Button_State == PRESS){
 800593c:	4b0f      	ldr	r3, [pc, #60]	@ (800597c <HAL_I2C_MemRxCpltCallback+0x88>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d115      	bne.n	8005970 <HAL_I2C_MemRxCpltCallback+0x7c>
	    for(int i=0; i<3; i++){
 8005944:	2300      	movs	r3, #0
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	e00f      	b.n	800596a <HAL_I2C_MemRxCpltCallback+0x76>
		msg = Press_RAW[i];
 800594a:	4a0f      	ldr	r2, [pc, #60]	@ (8005988 <HAL_I2C_MemRxCpltCallback+0x94>)
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4413      	add	r3, r2
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	73fb      	strb	r3, [r7, #15]
		osMessageQueuePut(SensorRAWQueueHandle, &msg, 0, 0);
 8005954:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <HAL_I2C_MemRxCpltCallback+0x90>)
 8005956:	6818      	ldr	r0, [r3, #0]
 8005958:	f107 010f 	add.w	r1, r7, #15
 800595c:	2300      	movs	r3, #0
 800595e:	2200      	movs	r2, #0
 8005960:	f000 f9c4 	bl	8005cec <osMessageQueuePut>
	    for(int i=0; i<3; i++){
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	3301      	adds	r3, #1
 8005968:	613b      	str	r3, [r7, #16]
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b02      	cmp	r3, #2
 800596e:	ddec      	ble.n	800594a <HAL_I2C_MemRxCpltCallback+0x56>
}
 8005970:	bf00      	nop
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40005800 	.word	0x40005800
 800597c:	20000254 	.word	0x20000254
 8005980:	200002ac 	.word	0x200002ac
 8005984:	20000250 	.word	0x20000250
 8005988:	200002b0 	.word	0x200002b0

0800598c <__NVIC_SetPriority>:
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	4603      	mov	r3, r0
 8005994:	6039      	str	r1, [r7, #0]
 8005996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800599c:	2b00      	cmp	r3, #0
 800599e:	db0a      	blt.n	80059b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	490c      	ldr	r1, [pc, #48]	@ (80059d8 <__NVIC_SetPriority+0x4c>)
 80059a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059aa:	0112      	lsls	r2, r2, #4
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	440b      	add	r3, r1
 80059b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80059b4:	e00a      	b.n	80059cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	4908      	ldr	r1, [pc, #32]	@ (80059dc <__NVIC_SetPriority+0x50>)
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	3b04      	subs	r3, #4
 80059c4:	0112      	lsls	r2, r2, #4
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	440b      	add	r3, r1
 80059ca:	761a      	strb	r2, [r3, #24]
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	e000e100 	.word	0xe000e100
 80059dc:	e000ed00 	.word	0xe000ed00

080059e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80059e4:	4b05      	ldr	r3, [pc, #20]	@ (80059fc <SysTick_Handler+0x1c>)
 80059e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80059e8:	f002 fa9a 	bl	8007f20 <xTaskGetSchedulerState>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d001      	beq.n	80059f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80059f2:	f003 f869 	bl	8008ac8 <xPortSysTickHandler>
  }
}
 80059f6:	bf00      	nop
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	e000e010 	.word	0xe000e010

08005a00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005a04:	2100      	movs	r1, #0
 8005a06:	f06f 0004 	mvn.w	r0, #4
 8005a0a:	f7ff ffbf 	bl	800598c <__NVIC_SetPriority>
#endif
}
 8005a0e:	bf00      	nop
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a1a:	f3ef 8305 	mrs	r3, IPSR
 8005a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8005a20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a26:	f06f 0305 	mvn.w	r3, #5
 8005a2a:	607b      	str	r3, [r7, #4]
 8005a2c:	e00c      	b.n	8005a48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a2e:	4b09      	ldr	r3, [pc, #36]	@ (8005a54 <osKernelInitialize+0x40>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d105      	bne.n	8005a42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a36:	4b07      	ldr	r3, [pc, #28]	@ (8005a54 <osKernelInitialize+0x40>)
 8005a38:	2201      	movs	r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	607b      	str	r3, [r7, #4]
 8005a40:	e002      	b.n	8005a48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005a42:	f04f 33ff 	mov.w	r3, #4294967295
 8005a46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a48:	687b      	ldr	r3, [r7, #4]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr
 8005a54:	200002b4 	.word	0x200002b4

08005a58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a5e:	f3ef 8305 	mrs	r3, IPSR
 8005a62:	603b      	str	r3, [r7, #0]
  return(result);
 8005a64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a6a:	f06f 0305 	mvn.w	r3, #5
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	e010      	b.n	8005a94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a72:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa0 <osKernelStart+0x48>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d109      	bne.n	8005a8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a7a:	f7ff ffc1 	bl	8005a00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a7e:	4b08      	ldr	r3, [pc, #32]	@ (8005aa0 <osKernelStart+0x48>)
 8005a80:	2202      	movs	r2, #2
 8005a82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a84:	f001 fc16 	bl	80072b4 <vTaskStartScheduler>
      stat = osOK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	607b      	str	r3, [r7, #4]
 8005a8c:	e002      	b.n	8005a94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a94:	687b      	ldr	r3, [r7, #4]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	200002b4 	.word	0x200002b4

08005aa4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08e      	sub	sp, #56	@ 0x38
 8005aa8:	af04      	add	r7, sp, #16
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ab4:	f3ef 8305 	mrs	r3, IPSR
 8005ab8:	617b      	str	r3, [r7, #20]
  return(result);
 8005aba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 8081 	bne.w	8005bc4 <osThreadNew+0x120>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d07d      	beq.n	8005bc4 <osThreadNew+0x120>
    stack = configMINIMAL_STACK_SIZE;
 8005ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005acc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005ace:	2318      	movs	r3, #24
 8005ad0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8005ada:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d045      	beq.n	8005b6e <osThreadNew+0xca>
      if (attr->name != NULL) {
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <osThreadNew+0x4c>
        name = attr->name;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <osThreadNew+0x72>
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	2b38      	cmp	r3, #56	@ 0x38
 8005b08:	d805      	bhi.n	8005b16 <osThreadNew+0x72>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <osThreadNew+0x76>
        return (NULL);
 8005b16:	2300      	movs	r3, #0
 8005b18:	e055      	b.n	8005bc6 <osThreadNew+0x122>
      }

      if (attr->stack_size > 0U) {
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <osThreadNew+0x86>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	089b      	lsrs	r3, r3, #2
 8005b28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <osThreadNew+0xac>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	2b5b      	cmp	r3, #91	@ 0x5b
 8005b38:	d90a      	bls.n	8005b50 <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d006      	beq.n	8005b50 <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <osThreadNew+0xac>
        mem = 1;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	e010      	b.n	8005b72 <osThreadNew+0xce>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10c      	bne.n	8005b72 <osThreadNew+0xce>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d108      	bne.n	8005b72 <osThreadNew+0xce>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d104      	bne.n	8005b72 <osThreadNew+0xce>
          mem = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61bb      	str	r3, [r7, #24]
 8005b6c:	e001      	b.n	8005b72 <osThreadNew+0xce>
        }
      }
    }
    else {
      mem = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d110      	bne.n	8005b9a <osThreadNew+0xf6>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b80:	9202      	str	r2, [sp, #8]
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	6a3a      	ldr	r2, [r7, #32]
 8005b8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f001 f912 	bl	8006db8 <xTaskCreateStatic>
 8005b94:	4603      	mov	r3, r0
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	e014      	b.n	8005bc4 <osThreadNew+0x120>
      #endif
    }
    else {
      if (mem == 0) {
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d111      	bne.n	8005bc4 <osThreadNew+0x120>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f107 0310 	add.w	r3, r7, #16
 8005baa:	9301      	str	r3, [sp, #4]
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f001 f96c 	bl	8006e92 <xTaskCreate>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d001      	beq.n	8005bc4 <osThreadNew+0x120>
            hTask = NULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005bc4:	693b      	ldr	r3, [r7, #16]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3728      	adds	r7, #40	@ 0x28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd6:	f3ef 8305 	mrs	r3, IPSR
 8005bda:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <osDelay+0x1c>
    stat = osErrorISR;
 8005be2:	f06f 0305 	mvn.w	r3, #5
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	e007      	b.n	8005bfa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <osDelay+0x2c>
      vTaskDelay(ticks);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 fabd 	bl	8007174 <vTaskDelay>
    }
  }

  return (stat);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	@ 0x28
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c14:	f3ef 8305 	mrs	r3, IPSR
 8005c18:	613b      	str	r3, [r7, #16]
  return(result);
 8005c1a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d15f      	bne.n	8005ce0 <osMessageQueueNew+0xdc>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d05c      	beq.n	8005ce0 <osMessageQueueNew+0xdc>
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d059      	beq.n	8005ce0 <osMessageQueueNew+0xdc>
    mem = -1;
 8005c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d029      	beq.n	8005c8c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d012      	beq.n	8005c66 <osMessageQueueNew+0x62>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	2b4f      	cmp	r3, #79	@ 0x4f
 8005c46:	d90e      	bls.n	8005c66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695a      	ldr	r2, [r3, #20]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d302      	bcc.n	8005c66 <osMessageQueueNew+0x62>
        mem = 1;
 8005c60:	2301      	movs	r3, #1
 8005c62:	61bb      	str	r3, [r7, #24]
 8005c64:	e014      	b.n	8005c90 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d110      	bne.n	8005c90 <osMessageQueueNew+0x8c>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10c      	bne.n	8005c90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d108      	bne.n	8005c90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d104      	bne.n	8005c90 <osMessageQueueNew+0x8c>
          mem = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	e001      	b.n	8005c90 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d10b      	bne.n	8005cae <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	9100      	str	r1, [sp, #0]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fa4d 	bl	8006144 <xQueueGenericCreateStatic>
 8005caa:	61f8      	str	r0, [r7, #28]
 8005cac:	e008      	b.n	8005cc0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d105      	bne.n	8005cc0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 faad 	bl	8006218 <xQueueGenericCreate>
 8005cbe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	e001      	b.n	8005cd8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005cd8:	6979      	ldr	r1, [r7, #20]
 8005cda:	69f8      	ldr	r0, [r7, #28]
 8005cdc:	f000 ff84 	bl	8006be8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005ce0:	69fb      	ldr	r3, [r7, #28]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3720      	adds	r7, #32
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d04:	f3ef 8305 	mrs	r3, IPSR
 8005d08:	617b      	str	r3, [r7, #20]
  return(result);
 8005d0a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d02d      	beq.n	8005d6c <osMessageQueuePut+0x80>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d005      	beq.n	8005d22 <osMessageQueuePut+0x36>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <osMessageQueuePut+0x36>
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005d22:	f06f 0303 	mvn.w	r3, #3
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	e03d      	b.n	8005da6 <osMessageQueuePut+0xba>
    }
    else {
      yield = pdFALSE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005d2e:	f107 0210 	add.w	r2, r7, #16
 8005d32:	2300      	movs	r3, #0
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	69b8      	ldr	r0, [r7, #24]
 8005d38:	f000 fbfc 	bl	8006534 <xQueueGenericSendFromISR>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d003      	beq.n	8005d4a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005d42:	f06f 0302 	mvn.w	r3, #2
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	e02d      	b.n	8005da6 <osMessageQueuePut+0xba>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <osMessageQueuePut+0x7a>
 8005d50:	f004 fcb2 	bl	800a6b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8005d54:	4b16      	ldr	r3, [pc, #88]	@ (8005db0 <osMessageQueuePut+0xc4>)
 8005d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	e01f      	b.n	8005da6 <osMessageQueuePut+0xba>
 8005d66:	f004 fc8b 	bl	800a680 <SEGGER_SYSVIEW_RecordExitISR>
 8005d6a:	e01c      	b.n	8005da6 <osMessageQueuePut+0xba>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <osMessageQueuePut+0x8c>
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d103      	bne.n	8005d80 <osMessageQueuePut+0x94>
      stat = osErrorParameter;
 8005d78:	f06f 0303 	mvn.w	r3, #3
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	e012      	b.n	8005da6 <osMessageQueuePut+0xba>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d80:	2300      	movs	r3, #0
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	69b8      	ldr	r0, [r7, #24]
 8005d88:	f000 fac6 	bl	8006318 <xQueueGenericSend>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d009      	beq.n	8005da6 <osMessageQueuePut+0xba>
        if (timeout != 0U) {
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <osMessageQueuePut+0xb4>
          stat = osErrorTimeout;
 8005d98:	f06f 0301 	mvn.w	r3, #1
 8005d9c:	61fb      	str	r3, [r7, #28]
 8005d9e:	e002      	b.n	8005da6 <osMessageQueuePut+0xba>
        } else {
          stat = osErrorResource;
 8005da0:	f06f 0302 	mvn.w	r3, #2
 8005da4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005da6:	69fb      	ldr	r3, [r7, #28]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3720      	adds	r7, #32
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	e000ed04 	.word	0xe000ed04

08005db4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dca:	f3ef 8305 	mrs	r3, IPSR
 8005dce:	617b      	str	r3, [r7, #20]
  return(result);
 8005dd0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d02d      	beq.n	8005e32 <osMessageQueueGet+0x7e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <osMessageQueueGet+0x34>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <osMessageQueueGet+0x34>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005de8:	f06f 0303 	mvn.w	r3, #3
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	e03c      	b.n	8005e6a <osMessageQueueGet+0xb6>
    }
    else {
      yield = pdFALSE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005df4:	f107 0310 	add.w	r3, r7, #16
 8005df8:	461a      	mov	r2, r3
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	69b8      	ldr	r0, [r7, #24]
 8005dfe:	f000 fd43 	bl	8006888 <xQueueReceiveFromISR>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d003      	beq.n	8005e10 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005e08:	f06f 0302 	mvn.w	r3, #2
 8005e0c:	61fb      	str	r3, [r7, #28]
 8005e0e:	e02c      	b.n	8005e6a <osMessageQueueGet+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <osMessageQueueGet+0x78>
 8005e16:	f004 fc4f 	bl	800a6b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8005e1a:	4b16      	ldr	r3, [pc, #88]	@ (8005e74 <osMessageQueueGet+0xc0>)
 8005e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	e01e      	b.n	8005e6a <osMessageQueueGet+0xb6>
 8005e2c:	f004 fc28 	bl	800a680 <SEGGER_SYSVIEW_RecordExitISR>
 8005e30:	e01b      	b.n	8005e6a <osMessageQueueGet+0xb6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <osMessageQueueGet+0x8a>
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <osMessageQueueGet+0x92>
      stat = osErrorParameter;
 8005e3e:	f06f 0303 	mvn.w	r3, #3
 8005e42:	61fb      	str	r3, [r7, #28]
 8005e44:	e011      	b.n	8005e6a <osMessageQueueGet+0xb6>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	69b8      	ldr	r0, [r7, #24]
 8005e4c:	f000 fc2e 	bl	80066ac <xQueueReceive>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d009      	beq.n	8005e6a <osMessageQueueGet+0xb6>
        if (timeout != 0U) {
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <osMessageQueueGet+0xb0>
          stat = osErrorTimeout;
 8005e5c:	f06f 0301 	mvn.w	r3, #1
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	e002      	b.n	8005e6a <osMessageQueueGet+0xb6>
        } else {
          stat = osErrorResource;
 8005e64:	f06f 0302 	mvn.w	r3, #2
 8005e68:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005e6a:	69fb      	ldr	r3, [r7, #28]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3720      	adds	r7, #32
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a07      	ldr	r2, [pc, #28]	@ (8005ea4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	4a06      	ldr	r2, [pc, #24]	@ (8005ea8 <vApplicationGetIdleTaskMemory+0x30>)
 8005e8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e96:	601a      	str	r2, [r3, #0]
}
 8005e98:	bf00      	nop
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	200002b8 	.word	0x200002b8
 8005ea8:	20000314 	.word	0x20000314

08005eac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4a07      	ldr	r2, [pc, #28]	@ (8005ed8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ebc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4a06      	ldr	r2, [pc, #24]	@ (8005edc <vApplicationGetTimerTaskMemory+0x30>)
 8005ec2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eca:	601a      	str	r2, [r3, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	20000714 	.word	0x20000714
 8005edc:	20000770 	.word	0x20000770

08005ee0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f103 0208 	add.w	r2, r3, #8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f103 0208 	add.w	r2, r3, #8
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f103 0208 	add.w	r2, r3, #8
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8005f14:	f240 1019 	movw	r0, #281	@ 0x119
 8005f18:	f004 fbea 	bl	800a6f0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8005f1c:	bf00      	nop
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8005f32:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8005f36:	f004 fbdb 	bl	800a6f0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f58:	d103      	bne.n	8005f62 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	e00c      	b.n	8005f7c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3308      	adds	r3, #8
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e002      	b.n	8005f70 <vListInsert+0x2e>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d2f6      	bcs.n	8005f6a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8005fa8:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8005fac:	f004 fba0 	bl	800a6f0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8005fb0:	bf00      	nop
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6892      	ldr	r2, [r2, #8]
 8005fce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6852      	ldr	r2, [r2, #4]
 8005fd8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d103      	bne.n	8005fec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	1e5a      	subs	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4619      	mov	r1, r3
 8006002:	f240 101d 	movw	r0, #285	@ 0x11d
 8006006:	f004 fbaf 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8006022:	2301      	movs	r3, #1
 8006024:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10b      	bne.n	8006048 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8006042:	bf00      	nop
 8006044:	bf00      	nop
 8006046:	e7fd      	b.n	8006044 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d05d      	beq.n	800610a <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8006052:	2b00      	cmp	r3, #0
 8006054:	d059      	beq.n	800610a <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605e:	2100      	movs	r1, #0
 8006060:	fba3 2302 	umull	r2, r3, r3, r2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d000      	beq.n	800606a <xQueueGenericReset+0x52>
 8006068:	2101      	movs	r1, #1
 800606a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800606c:	2b00      	cmp	r3, #0
 800606e:	d14c      	bne.n	800610a <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8006070:	f002 fcaa 	bl	80089c8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607c:	6939      	ldr	r1, [r7, #16]
 800607e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	441a      	add	r2, r3
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2200      	movs	r2, #0
 800608e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a0:	3b01      	subs	r3, #1
 80060a2:	6939      	ldr	r1, [r7, #16]
 80060a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	441a      	add	r2, r3
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	22ff      	movs	r2, #255	@ 0xff
 80060b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	22ff      	movs	r2, #255	@ 0xff
 80060bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d114      	bne.n	80060f0 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d01a      	beq.n	8006104 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	3310      	adds	r3, #16
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 fcaa 	bl	8007a2c <xTaskRemoveFromEventList>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d012      	beq.n	8006104 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80060de:	4b18      	ldr	r3, [pc, #96]	@ (8006140 <xQueueGenericReset+0x128>)
 80060e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	e009      	b.n	8006104 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	3310      	adds	r3, #16
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff fef3 	bl	8005ee0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	3324      	adds	r3, #36	@ 0x24
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff feee 	bl	8005ee0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8006104:	f002 fc90 	bl	8008a28 <vPortExitCritical>
 8006108:	e001      	b.n	800610e <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10b      	bne.n	800612c <xQueueGenericReset+0x114>
    __asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	60bb      	str	r3, [r7, #8]
}
 8006126:	bf00      	nop
 8006128:	bf00      	nop
 800612a:	e7fd      	b.n	8006128 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	4619      	mov	r1, r3
 8006130:	2096      	movs	r0, #150	@ 0x96
 8006132:	f004 fb19 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8006136:	697b      	ldr	r3, [r7, #20]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8006144:	b580      	push	{r7, lr}
 8006146:	b08c      	sub	sp, #48	@ 0x30
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10b      	bne.n	8006174 <xQueueGenericCreateStatic+0x30>
    __asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	623b      	str	r3, [r7, #32]
}
 800616e:	bf00      	nop
 8006170:	bf00      	nop
 8006172:	e7fd      	b.n	8006170 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d031      	beq.n	80061de <xQueueGenericCreateStatic+0x9a>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d02e      	beq.n	80061de <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d028      	beq.n	80061de <xQueueGenericCreateStatic+0x9a>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d102      	bne.n	8006198 <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d122      	bne.n	80061de <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8006198:	2350      	movs	r3, #80	@ 0x50
 800619a:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2b50      	cmp	r3, #80	@ 0x50
 80061a0:	d00b      	beq.n	80061ba <xQueueGenericCreateStatic+0x76>
    __asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	61fb      	str	r3, [r7, #28]
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop
 80061b8:	e7fd      	b.n	80061b6 <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 80061ba:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061c8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80061cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	4613      	mov	r3, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f87a 	bl	80062d0 <prvInitialiseNewQueue>
 80061dc:	e00e      	b.n	80061fc <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10b      	bne.n	80061fc <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	61bb      	str	r3, [r7, #24]
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	e7fd      	b.n	80061f8 <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	4618      	mov	r0, r3
 8006200:	f004 fc4c 	bl	800aa9c <SEGGER_SYSVIEW_ShrinkId>
 8006204:	4603      	mov	r3, r0
 8006206:	4619      	mov	r1, r3
 8006208:	2097      	movs	r0, #151	@ 0x97
 800620a:	f004 faad 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006210:	4618      	mov	r0, r3
 8006212:	3728      	adds	r7, #40	@ 0x28
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006218:	b580      	push	{r7, lr}
 800621a:	b08a      	sub	sp, #40	@ 0x28
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8006226:	2300      	movs	r3, #0
 8006228:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d032      	beq.n	8006296 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8006230:	2100      	movs	r1, #0
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	fba3 2302 	umull	r2, r3, r3, r2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d000      	beq.n	8006240 <xQueueGenericCreate+0x28>
 800623e:	2101      	movs	r1, #1
 8006240:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8006242:	2b00      	cmp	r3, #0
 8006244:	d127      	bne.n	8006296 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800624e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8006252:	d820      	bhi.n	8006296 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	3350      	adds	r3, #80	@ 0x50
 8006262:	4618      	mov	r0, r3
 8006264:	f002 fcbc 	bl	8008be0 <pvPortMalloc>
 8006268:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d021      	beq.n	80062b4 <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	3350      	adds	r3, #80	@ 0x50
 8006278:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006282:	79fa      	ldrb	r2, [r7, #7]
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	4613      	mov	r3, r2
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f81e 	bl	80062d0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8006294:	e00e      	b.n	80062b4 <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10b      	bne.n	80062b4 <xQueueGenericCreate+0x9c>
    __asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	613b      	str	r3, [r7, #16]
}
 80062ae:	bf00      	nop
 80062b0:	bf00      	nop
 80062b2:	e7fd      	b.n	80062b0 <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f004 fbf0 	bl	800aa9c <SEGGER_SYSVIEW_ShrinkId>
 80062bc:	4603      	mov	r3, r0
 80062be:	4619      	mov	r1, r3
 80062c0:	2098      	movs	r0, #152	@ 0x98
 80062c2:	f004 fa51 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 80062c6:	69fb      	ldr	r3, [r7, #28]
    }
 80062c8:	4618      	mov	r0, r3
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d103      	bne.n	80062ec <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	e002      	b.n	80062f2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062fe:	2101      	movs	r1, #1
 8006300:	69b8      	ldr	r0, [r7, #24]
 8006302:	f7ff fe89 	bl	8006018 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	78fa      	ldrb	r2, [r7, #3]
 800630a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08e      	sub	sp, #56	@ 0x38
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006326:	2300      	movs	r3, #0
 8006328:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800632e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10b      	bne.n	800634c <xQueueGenericSend+0x34>
    __asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006346:	bf00      	nop
 8006348:	bf00      	nop
 800634a:	e7fd      	b.n	8006348 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <xQueueGenericSend+0x42>
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <xQueueGenericSend+0x46>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <xQueueGenericSend+0x48>
 800635e:	2300      	movs	r3, #0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10b      	bne.n	800637c <xQueueGenericSend+0x64>
    __asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006376:	bf00      	nop
 8006378:	bf00      	nop
 800637a:	e7fd      	b.n	8006378 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d103      	bne.n	800638a <xQueueGenericSend+0x72>
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <xQueueGenericSend+0x76>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <xQueueGenericSend+0x78>
 800638e:	2300      	movs	r3, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10b      	bne.n	80063ac <xQueueGenericSend+0x94>
    __asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	623b      	str	r3, [r7, #32]
}
 80063a6:	bf00      	nop
 80063a8:	bf00      	nop
 80063aa:	e7fd      	b.n	80063a8 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063ac:	f001 fdb8 	bl	8007f20 <xTaskGetSchedulerState>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d102      	bne.n	80063bc <xQueueGenericSend+0xa4>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <xQueueGenericSend+0xa8>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <xQueueGenericSend+0xaa>
 80063c0:	2300      	movs	r3, #0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <xQueueGenericSend+0xc6>
    __asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	61fb      	str	r3, [r7, #28]
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	e7fd      	b.n	80063da <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80063de:	f002 faf3 	bl	80089c8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d302      	bcc.n	80063f4 <xQueueGenericSend+0xdc>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d12d      	bne.n	8006450 <xQueueGenericSend+0x138>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063fa:	f000 fae4 	bl	80069c6 <prvCopyDataToQueue>
 80063fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006404:	2b00      	cmp	r3, #0
 8006406:	d010      	beq.n	800642a <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	3324      	adds	r3, #36	@ 0x24
 800640c:	4618      	mov	r0, r3
 800640e:	f001 fb0d 	bl	8007a2c <xTaskRemoveFromEventList>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d013      	beq.n	8006440 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006418:	4b45      	ldr	r3, [pc, #276]	@ (8006530 <xQueueGenericSend+0x218>)
 800641a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	e00a      	b.n	8006440 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800642a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d007      	beq.n	8006440 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8006430:	4b3f      	ldr	r3, [pc, #252]	@ (8006530 <xQueueGenericSend+0x218>)
 8006432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006440:	f002 faf2 	bl	8008a28 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );
 8006444:	2101      	movs	r1, #1
 8006446:	20a1      	movs	r0, #161	@ 0xa1
 8006448:	f004 f98e 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 800644c:	2301      	movs	r3, #1
 800644e:	e06b      	b.n	8006528 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006456:	f002 fae7 	bl	8008a28 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 800645a:	2100      	movs	r1, #0
 800645c:	20a1      	movs	r0, #161	@ 0xa1
 800645e:	f004 f983 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_FULL;
 8006462:	2300      	movs	r3, #0
 8006464:	e060      	b.n	8006528 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	4618      	mov	r0, r3
 8006472:	f001 fbbd 	bl	8007bf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006476:	2301      	movs	r3, #1
 8006478:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800647a:	f002 fad5 	bl	8008a28 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800647e:	f000 ff77 	bl	8007370 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006482:	f002 faa1 	bl	80089c8 <vPortEnterCritical>
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800648c:	b25b      	sxtb	r3, r3
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d103      	bne.n	800649c <xQueueGenericSend+0x184>
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064a2:	b25b      	sxtb	r3, r3
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d103      	bne.n	80064b2 <xQueueGenericSend+0x19a>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064b2:	f002 fab9 	bl	8008a28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064b6:	1d3a      	adds	r2, r7, #4
 80064b8:	f107 0314 	add.w	r3, r7, #20
 80064bc:	4611      	mov	r1, r2
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 fbae 	bl	8007c20 <xTaskCheckForTimeOut>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d124      	bne.n	8006514 <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064cc:	f000 fb73 	bl	8006bb6 <prvIsQueueFull>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d018      	beq.n	8006508 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d8:	3310      	adds	r3, #16
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 fa32 	bl	8007948 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80064e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064e6:	f000 fafe 	bl	8006ae6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80064ea:	f000 ff4f 	bl	800738c <xTaskResumeAll>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f47f af74 	bne.w	80063de <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 80064f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006530 <xQueueGenericSend+0x218>)
 80064f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	e76a      	b.n	80063de <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800650a:	f000 faec 	bl	8006ae6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800650e:	f000 ff3d 	bl	800738c <xTaskResumeAll>
 8006512:	e764      	b.n	80063de <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006516:	f000 fae6 	bl	8006ae6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800651a:	f000 ff37 	bl	800738c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 800651e:	2100      	movs	r1, #0
 8006520:	20a1      	movs	r0, #161	@ 0xa1
 8006522:	f004 f921 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

            return errQUEUE_FULL;
 8006526:	2300      	movs	r3, #0
        }
    }
}
 8006528:	4618      	mov	r0, r3
 800652a:	3738      	adds	r7, #56	@ 0x38
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	e000ed04 	.word	0xe000ed04

08006534 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b092      	sub	sp, #72	@ 0x48
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 8006546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10b      	bne.n	8006564 <xQueueGenericSendFromISR+0x30>
    __asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 800655e:	bf00      	nop
 8006560:	bf00      	nop
 8006562:	e7fd      	b.n	8006560 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d103      	bne.n	8006572 <xQueueGenericSendFromISR+0x3e>
 800656a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800656c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <xQueueGenericSendFromISR+0x42>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <xQueueGenericSendFromISR+0x44>
 8006576:	2300      	movs	r3, #0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10b      	bne.n	8006594 <xQueueGenericSendFromISR+0x60>
    __asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800658e:	bf00      	nop
 8006590:	bf00      	nop
 8006592:	e7fd      	b.n	8006590 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d103      	bne.n	80065a2 <xQueueGenericSendFromISR+0x6e>
 800659a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800659c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <xQueueGenericSendFromISR+0x72>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <xQueueGenericSendFromISR+0x74>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10b      	bne.n	80065c4 <xQueueGenericSendFromISR+0x90>
    __asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80065be:	bf00      	nop
 80065c0:	bf00      	nop
 80065c2:	e7fd      	b.n	80065c0 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065c4:	f002 facc 	bl	8008b60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 80065c8:	f3ef 8211 	mrs	r2, BASEPRI
 80065cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	623a      	str	r2, [r7, #32]
 80065de:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 80065e0:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80065e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d302      	bcc.n	80065f6 <xQueueGenericSendFromISR+0xc2>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d147      	bne.n	8006686 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80065f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065fc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006604:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800660c:	f000 f9db 	bl	80069c6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006610:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8006614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006618:	d112      	bne.n	8006640 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800661a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	d02e      	beq.n	8006680 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006624:	3324      	adds	r3, #36	@ 0x24
 8006626:	4618      	mov	r0, r3
 8006628:	f001 fa00 	bl	8007a2c <xTaskRemoveFromEventList>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d026      	beq.n	8006680 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d023      	beq.n	8006680 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e01f      	b.n	8006680 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8006640:	f000 ffde 	bl	8007600 <uxTaskGetNumberOfTasks>
 8006644:	6338      	str	r0, [r7, #48]	@ 0x30
 8006646:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800664a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800664c:	429a      	cmp	r2, r3
 800664e:	d917      	bls.n	8006680 <xQueueGenericSendFromISR+0x14c>
 8006650:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8006654:	2b7f      	cmp	r3, #127	@ 0x7f
 8006656:	d10b      	bne.n	8006670 <xQueueGenericSendFromISR+0x13c>
    __asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	61bb      	str	r3, [r7, #24]
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	e7fd      	b.n	800666c <xQueueGenericSendFromISR+0x138>
 8006670:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006674:	3301      	adds	r3, #1
 8006676:	b2db      	uxtb	r3, r3
 8006678:	b25a      	sxtb	r2, r3
 800667a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800667c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8006680:	2301      	movs	r3, #1
 8006682:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8006684:	e001      	b.n	800668a <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006686:	2300      	movs	r3, #0
 8006688:	647b      	str	r3, [r7, #68]	@ 0x44
 800668a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800668c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8006694:	bf00      	nop
        }
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );
 8006696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006698:	4619      	mov	r1, r3
 800669a:	20a2      	movs	r0, #162	@ 0xa2
 800669c:	f004 f864 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80066a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3748      	adds	r7, #72	@ 0x48
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	@ 0x30
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80066c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10b      	bne.n	80066de <xQueueReceive+0x32>
    __asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	623b      	str	r3, [r7, #32]
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop
 80066dc:	e7fd      	b.n	80066da <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <xQueueReceive+0x40>
 80066e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <xQueueReceive+0x44>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <xQueueReceive+0x46>
 80066f0:	2300      	movs	r3, #0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10b      	bne.n	800670e <xQueueReceive+0x62>
    __asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	61fb      	str	r3, [r7, #28]
}
 8006708:	bf00      	nop
 800670a:	bf00      	nop
 800670c:	e7fd      	b.n	800670a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800670e:	f001 fc07 	bl	8007f20 <xTaskGetSchedulerState>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <xQueueReceive+0x72>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <xQueueReceive+0x76>
 800671e:	2301      	movs	r3, #1
 8006720:	e000      	b.n	8006724 <xQueueReceive+0x78>
 8006722:	2300      	movs	r3, #0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <xQueueReceive+0x94>
    __asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	61bb      	str	r3, [r7, #24]
}
 800673a:	bf00      	nop
 800673c:	bf00      	nop
 800673e:	e7fd      	b.n	800673c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006740:	f002 f942 	bl	80089c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006748:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	d023      	beq.n	8006798 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006754:	f000 f9a1 	bl	8006a9a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	1e5a      	subs	r2, r3, #1
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00f      	beq.n	8006788 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676a:	3310      	adds	r3, #16
 800676c:	4618      	mov	r0, r3
 800676e:	f001 f95d 	bl	8007a2c <xTaskRemoveFromEventList>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006778:	4b42      	ldr	r3, [pc, #264]	@ (8006884 <xQueueReceive+0x1d8>)
 800677a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006788:	f002 f94e 	bl	8008a28 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 800678c:	2101      	movs	r1, #1
 800678e:	20a4      	movs	r0, #164	@ 0xa4
 8006790:	f003 ffea 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8006794:	2301      	movs	r3, #1
 8006796:	e071      	b.n	800687c <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d107      	bne.n	80067ae <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800679e:	f002 f943 	bl	8008a28 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80067a2:	2100      	movs	r1, #0
 80067a4:	20a4      	movs	r0, #164	@ 0xa4
 80067a6:	f003 ffdf 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80067aa:	2300      	movs	r3, #0
 80067ac:	e066      	b.n	800687c <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80067ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d106      	bne.n	80067c2 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80067b4:	f107 0310 	add.w	r3, r7, #16
 80067b8:	4618      	mov	r0, r3
 80067ba:	f001 fa19 	bl	8007bf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80067be:	2301      	movs	r3, #1
 80067c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80067c2:	f002 f931 	bl	8008a28 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80067c6:	f000 fdd3 	bl	8007370 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80067ca:	f002 f8fd 	bl	80089c8 <vPortEnterCritical>
 80067ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067d4:	b25b      	sxtb	r3, r3
 80067d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067da:	d103      	bne.n	80067e4 <xQueueReceive+0x138>
 80067dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067ea:	b25b      	sxtb	r3, r3
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d103      	bne.n	80067fa <xQueueReceive+0x14e>
 80067f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067fa:	f002 f915 	bl	8008a28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067fe:	1d3a      	adds	r2, r7, #4
 8006800:	f107 0310 	add.w	r3, r7, #16
 8006804:	4611      	mov	r1, r2
 8006806:	4618      	mov	r0, r3
 8006808:	f001 fa0a 	bl	8007c20 <xTaskCheckForTimeOut>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d123      	bne.n	800685a <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006814:	f000 f9b9 	bl	8006b8a <prvIsQueueEmpty>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d017      	beq.n	800684e <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800681e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006820:	3324      	adds	r3, #36	@ 0x24
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	4611      	mov	r1, r2
 8006826:	4618      	mov	r0, r3
 8006828:	f001 f88e 	bl	8007948 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800682c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800682e:	f000 f95a 	bl	8006ae6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006832:	f000 fdab 	bl	800738c <xTaskResumeAll>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d181      	bne.n	8006740 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 800683c:	4b11      	ldr	r3, [pc, #68]	@ (8006884 <xQueueReceive+0x1d8>)
 800683e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	e778      	b.n	8006740 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800684e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006850:	f000 f949 	bl	8006ae6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006854:	f000 fd9a 	bl	800738c <xTaskResumeAll>
 8006858:	e772      	b.n	8006740 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800685a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800685c:	f000 f943 	bl	8006ae6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006860:	f000 fd94 	bl	800738c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006864:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006866:	f000 f990 	bl	8006b8a <prvIsQueueEmpty>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	f43f af67 	beq.w	8006740 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8006872:	2100      	movs	r1, #0
 8006874:	20a4      	movs	r0, #164	@ 0xa4
 8006876:	f003 ff77 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 800687a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800687c:	4618      	mov	r0, r3
 800687e:	3730      	adds	r7, #48	@ 0x30
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b090      	sub	sp, #64	@ 0x40
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	63bb      	str	r3, [r7, #56]	@ 0x38

    traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );

    configASSERT( pxQueue );
 8006898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <xQueueReceiveFromISR+0x2e>
    __asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068b0:	bf00      	nop
 80068b2:	bf00      	nop
 80068b4:	e7fd      	b.n	80068b2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d103      	bne.n	80068c4 <xQueueReceiveFromISR+0x3c>
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <xQueueReceiveFromISR+0x40>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <xQueueReceiveFromISR+0x42>
 80068c8:	2300      	movs	r3, #0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10b      	bne.n	80068e6 <xQueueReceiveFromISR+0x5e>
    __asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	623b      	str	r3, [r7, #32]
}
 80068e0:	bf00      	nop
 80068e2:	bf00      	nop
 80068e4:	e7fd      	b.n	80068e2 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068e6:	f002 f93b 	bl	8008b60 <vPortValidateInterruptPriority>
    __asm volatile
 80068ea:	f3ef 8211 	mrs	r2, BASEPRI
 80068ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	61fa      	str	r2, [r7, #28]
 8006900:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8006902:	69fb      	ldr	r3, [r7, #28]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8006904:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800690c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690e:	2b00      	cmp	r3, #0
 8006910:	d047      	beq.n	80069a2 <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8006912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006914:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006918:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006920:	f000 f8bb 	bl	8006a9a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	1e5a      	subs	r2, r3, #1
 8006928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800692c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006934:	d112      	bne.n	800695c <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d02e      	beq.n	800699c <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800693e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006940:	3310      	adds	r3, #16
 8006942:	4618      	mov	r0, r3
 8006944:	f001 f872 	bl	8007a2c <xTaskRemoveFromEventList>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d026      	beq.n	800699c <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d023      	beq.n	800699c <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	e01f      	b.n	800699c <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800695c:	f000 fe50 	bl	8007600 <uxTaskGetNumberOfTasks>
 8006960:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006962:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006968:	429a      	cmp	r2, r3
 800696a:	d917      	bls.n	800699c <xQueueReceiveFromISR+0x114>
 800696c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006970:	2b7f      	cmp	r3, #127	@ 0x7f
 8006972:	d10b      	bne.n	800698c <xQueueReceiveFromISR+0x104>
    __asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	617b      	str	r3, [r7, #20]
}
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	e7fd      	b.n	8006988 <xQueueReceiveFromISR+0x100>
 800698c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006990:	3301      	adds	r3, #1
 8006992:	b2db      	uxtb	r3, r3
 8006994:	b25a      	sxtb	r2, r3
 8006996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800699c:	2301      	movs	r3, #1
 800699e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069a0:	e001      	b.n	80069a6 <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a8:	613b      	str	r3, [r7, #16]
    __asm volatile
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f383 8811 	msr	BASEPRI, r3
}
 80069b0:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );
 80069b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b4:	4619      	mov	r1, r3
 80069b6:	20a7      	movs	r0, #167	@ 0xa7
 80069b8:	f003 fed6 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80069bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3740      	adds	r7, #64	@ 0x40
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b086      	sub	sp, #24
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069da:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10d      	bne.n	8006a00 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d14d      	bne.n	8006a88 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 fab7 	bl	8007f64 <xTaskPriorityDisinherit>
 80069f6:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	609a      	str	r2, [r3, #8]
 80069fe:	e043      	b.n	8006a88 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d119      	bne.n	8006a3a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6858      	ldr	r0, [r3, #4]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	f004 ff92 	bl	800b93a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1e:	441a      	add	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d32b      	bcc.n	8006a88 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	605a      	str	r2, [r3, #4]
 8006a38:	e026      	b.n	8006a88 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	68d8      	ldr	r0, [r3, #12]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a42:	461a      	mov	r2, r3
 8006a44:	68b9      	ldr	r1, [r7, #8]
 8006a46:	f004 ff78 	bl	800b93a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a52:	425b      	negs	r3, r3
 8006a54:	441a      	add	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d207      	bcs.n	8006a76 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6e:	425b      	negs	r3, r3
 8006a70:	441a      	add	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d105      	bne.n	8006a88 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8006a90:	697b      	ldr	r3, [r7, #20]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d018      	beq.n	8006ade <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68da      	ldr	r2, [r3, #12]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab4:	441a      	add	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d303      	bcc.n	8006ace <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68d9      	ldr	r1, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6838      	ldr	r0, [r7, #0]
 8006ada:	f004 ff2e 	bl	800b93a <memcpy>
    }
}
 8006ade:	bf00      	nop
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006aee:	f001 ff6b 	bl	80089c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006af8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006afa:	e011      	b.n	8006b20 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d012      	beq.n	8006b2a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3324      	adds	r3, #36	@ 0x24
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 ff8f 	bl	8007a2c <xTaskRemoveFromEventList>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006b14:	f001 f8f0 	bl	8007cf8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	dce9      	bgt.n	8006afc <prvUnlockQueue+0x16>
 8006b28:	e000      	b.n	8006b2c <prvUnlockQueue+0x46>
                    break;
 8006b2a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	22ff      	movs	r2, #255	@ 0xff
 8006b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8006b34:	f001 ff78 	bl	8008a28 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006b38:	f001 ff46 	bl	80089c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b42:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b44:	e011      	b.n	8006b6a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d012      	beq.n	8006b74 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	3310      	adds	r3, #16
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 ff6a 	bl	8007a2c <xTaskRemoveFromEventList>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006b5e:	f001 f8cb 	bl	8007cf8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	dce9      	bgt.n	8006b46 <prvUnlockQueue+0x60>
 8006b72:	e000      	b.n	8006b76 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006b74:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	22ff      	movs	r2, #255	@ 0xff
 8006b7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8006b7e:	f001 ff53 	bl	8008a28 <vPortExitCritical>
}
 8006b82:	bf00      	nop
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006b92:	f001 ff19 	bl	80089c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	e001      	b.n	8006ba8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006ba8:	f001 ff3e 	bl	8008a28 <vPortExitCritical>

    return xReturn;
 8006bac:	68fb      	ldr	r3, [r7, #12]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006bbe:	f001 ff03 	bl	80089c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d102      	bne.n	8006bd4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	e001      	b.n	8006bd8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006bd8:	f001 ff26 	bl	8008a28 <vPortExitCritical>

    return xReturn;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10b      	bne.n	8006c14 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	60fb      	str	r3, [r7, #12]
}
 8006c0e:	bf00      	nop
 8006c10:	bf00      	nop
 8006c12:	e7fd      	b.n	8006c10 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d024      	beq.n	8006c64 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	e01e      	b.n	8006c5e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8006c20:	4a18      	ldr	r2, [pc, #96]	@ (8006c84 <vQueueAddToRegistry+0x9c>)
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	4413      	add	r3, r2
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d105      	bne.n	8006c3c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	4a13      	ldr	r2, [pc, #76]	@ (8006c84 <vQueueAddToRegistry+0x9c>)
 8006c36:	4413      	add	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]
                    break;
 8006c3a:	e013      	b.n	8006c64 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <vQueueAddToRegistry+0x70>
 8006c42:	4a10      	ldr	r2, [pc, #64]	@ (8006c84 <vQueueAddToRegistry+0x9c>)
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d104      	bne.n	8006c58 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	00db      	lsls	r3, r3, #3
 8006c52:	4a0c      	ldr	r2, [pc, #48]	@ (8006c84 <vQueueAddToRegistry+0x9c>)
 8006c54:	4413      	add	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b07      	cmp	r3, #7
 8006c62:	d9dd      	bls.n	8006c20 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8006c76:	20b6      	movs	r0, #182	@ 0xb6
 8006c78:	f003 fd3a 	bl	800a6f0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8006c7c:	bf00      	nop
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000f70 	.word	0x20000f70

08006c88 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006c98:	f001 fe96 	bl	80089c8 <vPortEnterCritical>
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ca2:	b25b      	sxtb	r3, r3
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca8:	d103      	bne.n	8006cb2 <vQueueWaitForMessageRestricted+0x2a>
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cb8:	b25b      	sxtb	r3, r3
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbe:	d103      	bne.n	8006cc8 <vQueueWaitForMessageRestricted+0x40>
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cc8:	f001 feae 	bl	8008a28 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d106      	bne.n	8006ce2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	3324      	adds	r3, #36	@ 0x24
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	68b9      	ldr	r1, [r7, #8]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fe5b 	bl	8007998 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006ce2:	6978      	ldr	r0, [r7, #20]
 8006ce4:	f7ff feff 	bl	8006ae6 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8006ce8:	20b9      	movs	r0, #185	@ 0xb9
 8006cea:	f003 fd01 	bl	800a6f0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8006cee:	bf00      	nop
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b08e      	sub	sp, #56	@ 0x38
 8006cfa:	af04      	add	r7, sp, #16
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
 8006d02:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8006d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10b      	bne.n	8006d22 <prvCreateStaticTask+0x2c>
    __asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	623b      	str	r3, [r7, #32]
}
 8006d1c:	bf00      	nop
 8006d1e:	bf00      	nop
 8006d20:	e7fd      	b.n	8006d1e <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8006d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10b      	bne.n	8006d40 <prvCreateStaticTask+0x4a>
    __asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	61fb      	str	r3, [r7, #28]
}
 8006d3a:	bf00      	nop
 8006d3c:	bf00      	nop
 8006d3e:	e7fd      	b.n	8006d3c <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8006d40:	235c      	movs	r3, #92	@ 0x5c
 8006d42:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d48:	d00b      	beq.n	8006d62 <prvCreateStaticTask+0x6c>
    __asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	61bb      	str	r3, [r7, #24]
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	e7fd      	b.n	8006d5e <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8006d62:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01f      	beq.n	8006daa <prvCreateStaticTask+0xb4>
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01c      	beq.n	8006daa <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8006d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d72:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006d74:	225c      	movs	r2, #92	@ 0x5c
 8006d76:	2100      	movs	r1, #0
 8006d78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006d7a:	f004 fd62 	bl	800b842 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d82:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9303      	str	r3, [sp, #12]
 8006d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d92:	9302      	str	r3, [sp, #8]
 8006d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 f89d 	bl	8006ee2 <prvInitialiseNewTask>
 8006da8:	e001      	b.n	8006dae <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006db0:	4618      	mov	r0, r3
 8006db2:	3728      	adds	r7, #40	@ 0x28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08a      	sub	sp, #40	@ 0x28
 8006dbc:	af04      	add	r7, sp, #16
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8006dca:	f107 0310 	add.w	r3, r7, #16
 8006dce:	9303      	str	r3, [sp, #12]
 8006dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd2:	9302      	str	r3, [sp, #8]
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f7ff ff87 	bl	8006cf6 <prvCreateStaticTask>
 8006de8:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8006df0:	6978      	ldr	r0, [r7, #20]
 8006df2:	f000 f907 	bl	8007004 <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f003 fe4f 	bl	800aa9c <SEGGER_SYSVIEW_ShrinkId>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	4619      	mov	r1, r3
 8006e02:	20bf      	movs	r0, #191	@ 0xbf
 8006e04:	f003 fcb0 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8006e08:	693b      	ldr	r3, [r7, #16]
    }
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b08a      	sub	sp, #40	@ 0x28
 8006e16:	af04      	add	r7, sp, #16
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	607a      	str	r2, [r7, #4]
 8006e1e:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4618      	mov	r0, r3
 8006e26:	f001 fedb 	bl	8008be0 <pvPortMalloc>
 8006e2a:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d013      	beq.n	8006e5a <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8006e32:	205c      	movs	r0, #92	@ 0x5c
 8006e34:	f001 fed4 	bl	8008be0 <pvPortMalloc>
 8006e38:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d008      	beq.n	8006e52 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006e40:	225c      	movs	r2, #92	@ 0x5c
 8006e42:	2100      	movs	r1, #0
 8006e44:	6978      	ldr	r0, [r7, #20]
 8006e46:	f004 fcfc 	bl	800b842 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e50:	e005      	b.n	8006e5e <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8006e52:	6938      	ldr	r0, [r7, #16]
 8006e54:	f001 fff6 	bl	8008e44 <vPortFree>
 8006e58:	e001      	b.n	8006e5e <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d011      	beq.n	8006e88 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9303      	str	r3, [sp, #12]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	9302      	str	r3, [sp, #8]
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	68b9      	ldr	r1, [r7, #8]
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 f82d 	bl	8006ee2 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8006e88:	697b      	ldr	r3, [r7, #20]
    }
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b088      	sub	sp, #32
 8006e96:	af02      	add	r7, sp, #8
 8006e98:	60f8      	str	r0, [r7, #12]
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	607a      	str	r2, [r7, #4]
 8006e9e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea2:	9301      	str	r3, [sp, #4]
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	68b9      	ldr	r1, [r7, #8]
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f7ff ffaf 	bl	8006e12 <prvCreateTask>
 8006eb4:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d005      	beq.n	8006ec8 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8006ebc:	6938      	ldr	r0, [r7, #16]
 8006ebe:	f000 f8a1 	bl	8007004 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	617b      	str	r3, [r7, #20]
 8006ec6:	e002      	b.n	8006ece <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ecc:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	20c2      	movs	r0, #194	@ 0xc2
 8006ed4:	f003 fc48 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8006ed8:	697b      	ldr	r3, [r7, #20]
    }
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b088      	sub	sp, #32
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	607a      	str	r2, [r7, #4]
 8006eee:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	461a      	mov	r2, r3
 8006efa:	21a5      	movs	r1, #165	@ 0xa5
 8006efc:	f004 fca1 	bl	800b842 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8006f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f023 0307 	bic.w	r3, r3, #7
 8006f18:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <prvInitialiseNewTask+0x5a>
    __asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	617b      	str	r3, [r7, #20]
}
 8006f36:	bf00      	nop
 8006f38:	bf00      	nop
 8006f3a:	e7fd      	b.n	8006f38 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d01e      	beq.n	8006f80 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f42:	2300      	movs	r3, #0
 8006f44:	61fb      	str	r3, [r7, #28]
 8006f46:	e012      	b.n	8006f6e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	7819      	ldrb	r1, [r3, #0]
 8006f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	4413      	add	r3, r2
 8006f56:	3334      	adds	r3, #52	@ 0x34
 8006f58:	460a      	mov	r2, r1
 8006f5a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	4413      	add	r3, r2
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d006      	beq.n	8006f76 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	61fb      	str	r3, [r7, #28]
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	2b0f      	cmp	r3, #15
 8006f72:	d9e9      	bls.n	8006f48 <prvInitialiseNewTask+0x66>
 8006f74:	e000      	b.n	8006f78 <prvInitialiseNewTask+0x96>
            {
                break;
 8006f76:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8006f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8006f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f82:	2b37      	cmp	r3, #55	@ 0x37
 8006f84:	d90b      	bls.n	8006f9e <prvInitialiseNewTask+0xbc>
    __asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	613b      	str	r3, [r7, #16]
}
 8006f98:	bf00      	nop
 8006f9a:	bf00      	nop
 8006f9c:	e7fd      	b.n	8006f9a <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa0:	2b37      	cmp	r3, #55	@ 0x37
 8006fa2:	d901      	bls.n	8006fa8 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006fa4:	2337      	movs	r3, #55	@ 0x37
 8006fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006faa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fac:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fb2:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fe ffb3 	bl	8005f24 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc0:	3318      	adds	r3, #24
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe ffae 	bl	8005f24 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fcc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8006fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fdc:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	68f9      	ldr	r1, [r7, #12]
 8006fe2:	69b8      	ldr	r0, [r7, #24]
 8006fe4:	f001 fbb0 	bl	8008748 <pxPortInitialiseStack>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fec:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8006fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ff8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006ffa:	bf00      	nop
 8006ffc:	3720      	adds	r7, #32
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8007004:	b5b0      	push	{r4, r5, r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af02      	add	r7, sp, #8
 800700a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800700c:	f001 fcdc 	bl	80089c8 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8007010:	4b51      	ldr	r3, [pc, #324]	@ (8007158 <prvAddNewTaskToReadyList+0x154>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3301      	adds	r3, #1
 8007016:	4a50      	ldr	r2, [pc, #320]	@ (8007158 <prvAddNewTaskToReadyList+0x154>)
 8007018:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800701a:	4b50      	ldr	r3, [pc, #320]	@ (800715c <prvAddNewTaskToReadyList+0x158>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d109      	bne.n	8007036 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8007022:	4a4e      	ldr	r2, [pc, #312]	@ (800715c <prvAddNewTaskToReadyList+0x158>)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007028:	4b4b      	ldr	r3, [pc, #300]	@ (8007158 <prvAddNewTaskToReadyList+0x154>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d110      	bne.n	8007052 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8007030:	f000 fe86 	bl	8007d40 <prvInitialiseTaskLists>
 8007034:	e00d      	b.n	8007052 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8007036:	4b4a      	ldr	r3, [pc, #296]	@ (8007160 <prvAddNewTaskToReadyList+0x15c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d109      	bne.n	8007052 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800703e:	4b47      	ldr	r3, [pc, #284]	@ (800715c <prvAddNewTaskToReadyList+0x158>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007048:	429a      	cmp	r2, r3
 800704a:	d802      	bhi.n	8007052 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800704c:	4a43      	ldr	r2, [pc, #268]	@ (800715c <prvAddNewTaskToReadyList+0x158>)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8007052:	4b44      	ldr	r3, [pc, #272]	@ (8007164 <prvAddNewTaskToReadyList+0x160>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3301      	adds	r3, #1
 8007058:	4a42      	ldr	r2, [pc, #264]	@ (8007164 <prvAddNewTaskToReadyList+0x160>)
 800705a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800705c:	4b41      	ldr	r3, [pc, #260]	@ (8007164 <prvAddNewTaskToReadyList+0x160>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d016      	beq.n	8007098 <prvAddNewTaskToReadyList+0x94>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4618      	mov	r0, r3
 800706e:	f003 fbef 	bl	800a850 <SEGGER_SYSVIEW_OnTaskCreate>
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007082:	461d      	mov	r5, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461c      	mov	r4, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708e:	1ae3      	subs	r3, r4, r3
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	462b      	mov	r3, r5
 8007094:	f002 f8e6 	bl	8009264 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4618      	mov	r0, r3
 800709c:	f003 fc5c 	bl	800a958 <SEGGER_SYSVIEW_OnTaskStartReady>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a4:	4b30      	ldr	r3, [pc, #192]	@ (8007168 <prvAddNewTaskToReadyList+0x164>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d903      	bls.n	80070b4 <prvAddNewTaskToReadyList+0xb0>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007168 <prvAddNewTaskToReadyList+0x164>)
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b8:	492c      	ldr	r1, [pc, #176]	@ (800716c <prvAddNewTaskToReadyList+0x168>)
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	440b      	add	r3, r1
 80070c4:	3304      	adds	r3, #4
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	609a      	str	r2, [r3, #8]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60da      	str	r2, [r3, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	3204      	adds	r2, #4
 80070e0:	605a      	str	r2, [r3, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	1d1a      	adds	r2, r3, #4
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	609a      	str	r2, [r3, #8]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4a1d      	ldr	r2, [pc, #116]	@ (800716c <prvAddNewTaskToReadyList+0x168>)
 80070f8:	441a      	add	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	615a      	str	r2, [r3, #20]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007102:	491a      	ldr	r1, [pc, #104]	@ (800716c <prvAddNewTaskToReadyList+0x168>)
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007114:	1c59      	adds	r1, r3, #1
 8007116:	4815      	ldr	r0, [pc, #84]	@ (800716c <prvAddNewTaskToReadyList+0x168>)
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4403      	add	r3, r0
 8007122:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8007124:	f001 fc80 	bl	8008a28 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8007128:	4b0d      	ldr	r3, [pc, #52]	@ (8007160 <prvAddNewTaskToReadyList+0x15c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00e      	beq.n	800714e <prvAddNewTaskToReadyList+0x14a>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8007130:	4b0a      	ldr	r3, [pc, #40]	@ (800715c <prvAddNewTaskToReadyList+0x158>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713a:	429a      	cmp	r2, r3
 800713c:	d207      	bcs.n	800714e <prvAddNewTaskToReadyList+0x14a>
 800713e:	4b0c      	ldr	r3, [pc, #48]	@ (8007170 <prvAddNewTaskToReadyList+0x16c>)
 8007140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800714e:	bf00      	nop
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bdb0      	pop	{r4, r5, r7, pc}
 8007156:	bf00      	nop
 8007158:	20001484 	.word	0x20001484
 800715c:	20000fb0 	.word	0x20000fb0
 8007160:	20001490 	.word	0x20001490
 8007164:	200014a0 	.word	0x200014a0
 8007168:	2000148c 	.word	0x2000148c
 800716c:	20000fb4 	.word	0x20000fb4
 8007170:	e000ed04 	.word	0xe000ed04

08007174 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d018      	beq.n	80071b8 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8007186:	f000 f8f3 	bl	8007370 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800718a:	4b14      	ldr	r3, [pc, #80]	@ (80071dc <vTaskDelay+0x68>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d00b      	beq.n	80071aa <vTaskDelay+0x36>
    __asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	60bb      	str	r3, [r7, #8]
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	e7fd      	b.n	80071a6 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80071aa:	2100      	movs	r1, #0
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 ff7d 	bl	80080ac <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80071b2:	f000 f8eb 	bl	800738c <xTaskResumeAll>
 80071b6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d107      	bne.n	80071ce <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 80071be:	4b08      	ldr	r3, [pc, #32]	@ (80071e0 <vTaskDelay+0x6c>)
 80071c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 80071ce:	20c5      	movs	r0, #197	@ 0xc5
 80071d0:	f003 fa8e 	bl	800a6f0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80071d4:	bf00      	nop
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	200014ac 	.word	0x200014ac
 80071e0:	e000ed04 	.word	0xe000ed04

080071e4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b090      	sub	sp, #64	@ 0x40
 80071e8:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 80071ea:	2301      	movs	r3, #1
 80071ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80071f2:	2300      	movs	r3, #0
 80071f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071f6:	e013      	b.n	8007220 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80071f8:	4a2b      	ldr	r2, [pc, #172]	@ (80072a8 <prvCreateIdleTasks+0xc4>)
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	4413      	add	r3, r2
 80071fe:	7819      	ldrb	r1, [r3, #0]
 8007200:	f107 0210 	add.w	r2, r7, #16
 8007204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007206:	4413      	add	r3, r2
 8007208:	460a      	mov	r2, r1
 800720a:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800720c:	f107 0210 	add.w	r2, r7, #16
 8007210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007212:	4413      	add	r3, r2
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d006      	beq.n	8007228 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	3301      	adds	r3, #1
 800721e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	2b0f      	cmp	r3, #15
 8007224:	dde8      	ble.n	80071f8 <prvCreateIdleTasks+0x14>
 8007226:	e000      	b.n	800722a <prvCreateIdleTasks+0x46>
        {
            break;
 8007228:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800722a:	2300      	movs	r3, #0
 800722c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800722e:	e031      	b.n	8007294 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8007230:	4b1e      	ldr	r3, [pc, #120]	@ (80072ac <prvCreateIdleTasks+0xc8>)
 8007232:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8007238:	2300      	movs	r3, #0
 800723a:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 800723c:	1d3a      	adds	r2, r7, #4
 800723e:	f107 0108 	add.w	r1, r7, #8
 8007242:	f107 030c 	add.w	r3, r7, #12
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fe16 	bl	8005e78 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	f107 0110 	add.w	r1, r7, #16
 8007256:	9202      	str	r2, [sp, #8]
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	2300      	movs	r3, #0
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	2300      	movs	r3, #0
 8007260:	4602      	mov	r2, r0
 8007262:	6a38      	ldr	r0, [r7, #32]
 8007264:	f7ff fda8 	bl	8006db8 <xTaskCreateStatic>
 8007268:	4602      	mov	r2, r0
 800726a:	4911      	ldr	r1, [pc, #68]	@ (80072b0 <prvCreateIdleTasks+0xcc>)
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8007272:	4a0f      	ldr	r2, [pc, #60]	@ (80072b0 <prvCreateIdleTasks+0xcc>)
 8007274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 800727e:	2301      	movs	r3, #1
 8007280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007282:	e001      	b.n	8007288 <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 8007284:	2300      	movs	r3, #0
 8007286:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8007288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d006      	beq.n	800729c <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800728e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007290:	3301      	adds	r3, #1
 8007292:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007296:	2b00      	cmp	r3, #0
 8007298:	ddca      	ble.n	8007230 <prvCreateIdleTasks+0x4c>
 800729a:	e000      	b.n	800729e <prvCreateIdleTasks+0xba>
        {
            break;
 800729c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800729e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3730      	adds	r7, #48	@ 0x30
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	0800d6cc 	.word	0x0800d6cc
 80072ac:	08007d11 	.word	0x08007d11
 80072b0:	200014a8 	.word	0x200014a8

080072b4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80072ba:	f7ff ff93 	bl	80071e4 <prvCreateIdleTasks>
 80072be:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d102      	bne.n	80072cc <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80072c6:	f000 ff6d 	bl	80081a4 <xTimerCreateTimerTask>
 80072ca:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d129      	bne.n	8007326 <vTaskStartScheduler+0x72>
    __asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	60bb      	str	r3, [r7, #8]
}
 80072e4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80072e6:	4b1c      	ldr	r3, [pc, #112]	@ (8007358 <vTaskStartScheduler+0xa4>)
 80072e8:	f04f 32ff 	mov.w	r2, #4294967295
 80072ec:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80072ee:	4b1b      	ldr	r3, [pc, #108]	@ (800735c <vTaskStartScheduler+0xa8>)
 80072f0:	2201      	movs	r2, #1
 80072f2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007360 <vTaskStartScheduler+0xac>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80072fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007364 <vTaskStartScheduler+0xb0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3334      	adds	r3, #52	@ 0x34
 8007300:	2205      	movs	r2, #5
 8007302:	4919      	ldr	r1, [pc, #100]	@ (8007368 <vTaskStartScheduler+0xb4>)
 8007304:	4618      	mov	r0, r3
 8007306:	f004 fa8c 	bl	800b822 <memcmp>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <vTaskStartScheduler+0x68>
 8007310:	4b14      	ldr	r3, [pc, #80]	@ (8007364 <vTaskStartScheduler+0xb0>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4618      	mov	r0, r3
 8007316:	f003 fadd 	bl	800a8d4 <SEGGER_SYSVIEW_OnTaskStartExec>
 800731a:	e001      	b.n	8007320 <vTaskStartScheduler+0x6c>
 800731c:	f003 fa7c 	bl	800a818 <SEGGER_SYSVIEW_OnIdle>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8007320:	f001 fa94 	bl	800884c <xPortStartScheduler>
 8007324:	e00f      	b.n	8007346 <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732c:	d10b      	bne.n	8007346 <vTaskStartScheduler+0x92>
    __asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	607b      	str	r3, [r7, #4]
}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	e7fd      	b.n	8007342 <vTaskStartScheduler+0x8e>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007346:	4b09      	ldr	r3, [pc, #36]	@ (800736c <vTaskStartScheduler+0xb8>)
 8007348:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 800734a:	20cd      	movs	r0, #205	@ 0xcd
 800734c:	f003 f9d0 	bl	800a6f0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8007350:	bf00      	nop
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	200014a4 	.word	0x200014a4
 800735c:	20001490 	.word	0x20001490
 8007360:	20001488 	.word	0x20001488
 8007364:	20000fb0 	.word	0x20000fb0
 8007368:	0800d6cc 	.word	0x0800d6cc
 800736c:	0800d828 	.word	0x0800d828

08007370 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8007374:	4b04      	ldr	r3, [pc, #16]	@ (8007388 <vTaskSuspendAll+0x18>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3301      	adds	r3, #1
 800737a:	4a03      	ldr	r2, [pc, #12]	@ (8007388 <vTaskSuspendAll+0x18>)
 800737c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800737e:	20cf      	movs	r0, #207	@ 0xcf
 8007380:	f003 f9b6 	bl	800a6f0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8007384:	bf00      	nop
 8007386:	bd80      	pop	{r7, pc}
 8007388:	200014ac 	.word	0x200014ac

0800738c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007396:	2300      	movs	r3, #0
 8007398:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800739a:	f001 fb15 	bl	80089c8 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800739e:	2300      	movs	r3, #0
 80073a0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80073a2:	4b7a      	ldr	r3, [pc, #488]	@ (800758c <xTaskResumeAll+0x200>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10b      	bne.n	80073c2 <xTaskResumeAll+0x36>
    __asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	603b      	str	r3, [r7, #0]
}
 80073bc:	bf00      	nop
 80073be:	bf00      	nop
 80073c0:	e7fd      	b.n	80073be <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80073c2:	4b72      	ldr	r3, [pc, #456]	@ (800758c <xTaskResumeAll+0x200>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	4a70      	ldr	r2, [pc, #448]	@ (800758c <xTaskResumeAll+0x200>)
 80073ca:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80073cc:	4b6f      	ldr	r3, [pc, #444]	@ (800758c <xTaskResumeAll+0x200>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f040 80cf 	bne.w	8007574 <xTaskResumeAll+0x1e8>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007590 <xTaskResumeAll+0x204>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 80ca 	beq.w	8007574 <xTaskResumeAll+0x1e8>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073e0:	e093      	b.n	800750a <xTaskResumeAll+0x17e>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80073e2:	4b6c      	ldr	r3, [pc, #432]	@ (8007594 <xTaskResumeAll+0x208>)
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	6a12      	ldr	r2, [r2, #32]
 80073f8:	609a      	str	r2, [r3, #8]
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	69fa      	ldr	r2, [r7, #28]
 8007400:	69d2      	ldr	r2, [r2, #28]
 8007402:	605a      	str	r2, [r3, #4]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	3318      	adds	r3, #24
 800740c:	429a      	cmp	r2, r3
 800740e:	d103      	bne.n	8007418 <xTaskResumeAll+0x8c>
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	6a1a      	ldr	r2, [r3, #32]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	605a      	str	r2, [r3, #4]
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	2200      	movs	r2, #0
 800741c:	629a      	str	r2, [r3, #40]	@ 0x28
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	1e5a      	subs	r2, r3, #1
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	60bb      	str	r3, [r7, #8]
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	69fa      	ldr	r2, [r7, #28]
 8007434:	68d2      	ldr	r2, [r2, #12]
 8007436:	609a      	str	r2, [r3, #8]
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	6892      	ldr	r2, [r2, #8]
 8007440:	605a      	str	r2, [r3, #4]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	3304      	adds	r3, #4
 800744a:	429a      	cmp	r2, r3
 800744c:	d103      	bne.n	8007456 <xTaskResumeAll+0xca>
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	605a      	str	r2, [r3, #4]
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	2200      	movs	r2, #0
 800745a:	615a      	str	r2, [r3, #20]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	1e5a      	subs	r2, r3, #1
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	4618      	mov	r0, r3
 800746a:	f003 fa75 	bl	800a958 <SEGGER_SYSVIEW_OnTaskStartReady>
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007472:	4b49      	ldr	r3, [pc, #292]	@ (8007598 <xTaskResumeAll+0x20c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d903      	bls.n	8007482 <xTaskResumeAll+0xf6>
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747e:	4a46      	ldr	r2, [pc, #280]	@ (8007598 <xTaskResumeAll+0x20c>)
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007486:	4945      	ldr	r1, [pc, #276]	@ (800759c <xTaskResumeAll+0x210>)
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	3304      	adds	r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	607b      	str	r3, [r7, #4]
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	609a      	str	r2, [r3, #8]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	60da      	str	r2, [r3, #12]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	69fa      	ldr	r2, [r7, #28]
 80074ac:	3204      	adds	r2, #4
 80074ae:	605a      	str	r2, [r3, #4]
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	1d1a      	adds	r2, r3, #4
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	609a      	str	r2, [r3, #8]
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4a35      	ldr	r2, [pc, #212]	@ (800759c <xTaskResumeAll+0x210>)
 80074c6:	441a      	add	r2, r3
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	615a      	str	r2, [r3, #20]
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d0:	4932      	ldr	r1, [pc, #200]	@ (800759c <xTaskResumeAll+0x210>)
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	440b      	add	r3, r1
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074e2:	1c59      	adds	r1, r3, #1
 80074e4:	482d      	ldr	r0, [pc, #180]	@ (800759c <xTaskResumeAll+0x210>)
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4403      	add	r3, r0
 80074f0:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f6:	4b2a      	ldr	r3, [pc, #168]	@ (80075a0 <xTaskResumeAll+0x214>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d904      	bls.n	800750a <xTaskResumeAll+0x17e>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8007500:	4a28      	ldr	r2, [pc, #160]	@ (80075a4 <xTaskResumeAll+0x218>)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	2101      	movs	r1, #1
 8007506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800750a:	4b22      	ldr	r3, [pc, #136]	@ (8007594 <xTaskResumeAll+0x208>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	f47f af67 	bne.w	80073e2 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <xTaskResumeAll+0x192>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800751a:	f000 fce7 	bl	8007eec <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800751e:	4b22      	ldr	r3, [pc, #136]	@ (80075a8 <xTaskResumeAll+0x21c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d012      	beq.n	8007550 <xTaskResumeAll+0x1c4>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800752a:	f000 f877 	bl	800761c <xTaskIncrementTick>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d004      	beq.n	800753e <xTaskResumeAll+0x1b2>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8007534:	4a1b      	ldr	r2, [pc, #108]	@ (80075a4 <xTaskResumeAll+0x218>)
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2101      	movs	r1, #1
 800753a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	3b01      	subs	r3, #1
 8007542:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1ef      	bne.n	800752a <xTaskResumeAll+0x19e>

                            xPendedTicks = 0;
 800754a:	4b17      	ldr	r3, [pc, #92]	@ (80075a8 <xTaskResumeAll+0x21c>)
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8007550:	4a14      	ldr	r2, [pc, #80]	@ (80075a4 <xTaskResumeAll+0x218>)
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <xTaskResumeAll+0x1e8>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800755c:	2301      	movs	r3, #1
 800755e:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8007560:	4b0f      	ldr	r3, [pc, #60]	@ (80075a0 <xTaskResumeAll+0x214>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4b11      	ldr	r3, [pc, #68]	@ (80075ac <xTaskResumeAll+0x220>)
 8007566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007574:	f001 fa58 	bl	8008a28 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	4619      	mov	r1, r3
 800757c:	20d0      	movs	r0, #208	@ 0xd0
 800757e:	f003 f8f3 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8007582:	69bb      	ldr	r3, [r7, #24]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3720      	adds	r7, #32
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	200014ac 	.word	0x200014ac
 8007590:	20001484 	.word	0x20001484
 8007594:	20001444 	.word	0x20001444
 8007598:	2000148c 	.word	0x2000148c
 800759c:	20000fb4 	.word	0x20000fb4
 80075a0:	20000fb0 	.word	0x20000fb0
 80075a4:	20001498 	.word	0x20001498
 80075a8:	20001494 	.word	0x20001494
 80075ac:	e000ed04 	.word	0xe000ed04

080075b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80075b6:	4b06      	ldr	r3, [pc, #24]	@ (80075d0 <xTaskGetTickCount+0x20>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	20d1      	movs	r0, #209	@ 0xd1
 80075c0:	f003 f8d2 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 80075c4:	687b      	ldr	r3, [r7, #4]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20001488 	.word	0x20001488

080075d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075da:	f001 fac1 	bl	8008b60 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80075de:	2300      	movs	r3, #0
 80075e0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80075e2:	4b06      	ldr	r3, [pc, #24]	@ (80075fc <xTaskGetTickCountFromISR+0x28>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	20d2      	movs	r0, #210	@ 0xd2
 80075ec:	f003 f8bc 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80075f0:	683b      	ldr	r3, [r7, #0]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20001488 	.word	0x20001488

08007600 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8007604:	4b04      	ldr	r3, [pc, #16]	@ (8007618 <uxTaskGetNumberOfTasks+0x18>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4619      	mov	r1, r3
 800760a:	20d3      	movs	r0, #211	@ 0xd3
 800760c:	f003 f8ac 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 8007610:	4b01      	ldr	r3, [pc, #4]	@ (8007618 <uxTaskGetNumberOfTasks+0x18>)
 8007612:	681b      	ldr	r3, [r3, #0]
}
 8007614:	4618      	mov	r0, r3
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20001484 	.word	0x20001484

0800761c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08a      	sub	sp, #40	@ 0x28
 8007620:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007622:	2300      	movs	r3, #0
 8007624:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007626:	4b84      	ldr	r3, [pc, #528]	@ (8007838 <xTaskIncrementTick+0x21c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f040 80f4 	bne.w	8007818 <xTaskIncrementTick+0x1fc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007630:	4b82      	ldr	r3, [pc, #520]	@ (800783c <xTaskIncrementTick+0x220>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007638:	4a80      	ldr	r2, [pc, #512]	@ (800783c <xTaskIncrementTick+0x220>)
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d121      	bne.n	8007688 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8007644:	4b7e      	ldr	r3, [pc, #504]	@ (8007840 <xTaskIncrementTick+0x224>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00b      	beq.n	8007666 <xTaskIncrementTick+0x4a>
    __asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	607b      	str	r3, [r7, #4]
}
 8007660:	bf00      	nop
 8007662:	bf00      	nop
 8007664:	e7fd      	b.n	8007662 <xTaskIncrementTick+0x46>
 8007666:	4b76      	ldr	r3, [pc, #472]	@ (8007840 <xTaskIncrementTick+0x224>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	61fb      	str	r3, [r7, #28]
 800766c:	4b75      	ldr	r3, [pc, #468]	@ (8007844 <xTaskIncrementTick+0x228>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a73      	ldr	r2, [pc, #460]	@ (8007840 <xTaskIncrementTick+0x224>)
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	4a73      	ldr	r2, [pc, #460]	@ (8007844 <xTaskIncrementTick+0x228>)
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	4b73      	ldr	r3, [pc, #460]	@ (8007848 <xTaskIncrementTick+0x22c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3301      	adds	r3, #1
 8007680:	4a71      	ldr	r2, [pc, #452]	@ (8007848 <xTaskIncrementTick+0x22c>)
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	f000 fc32 	bl	8007eec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007688:	4b70      	ldr	r3, [pc, #448]	@ (800784c <xTaskIncrementTick+0x230>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6a3a      	ldr	r2, [r7, #32]
 800768e:	429a      	cmp	r2, r3
 8007690:	f0c0 80ad 	bcc.w	80077ee <xTaskIncrementTick+0x1d2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007694:	4b6a      	ldr	r3, [pc, #424]	@ (8007840 <xTaskIncrementTick+0x224>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d104      	bne.n	80076a8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800769e:	4b6b      	ldr	r3, [pc, #428]	@ (800784c <xTaskIncrementTick+0x230>)
 80076a0:	f04f 32ff 	mov.w	r2, #4294967295
 80076a4:	601a      	str	r2, [r3, #0]
                    break;
 80076a6:	e0a2      	b.n	80077ee <xTaskIncrementTick+0x1d2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80076a8:	4b65      	ldr	r3, [pc, #404]	@ (8007840 <xTaskIncrementTick+0x224>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80076b8:	6a3a      	ldr	r2, [r7, #32]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d203      	bcs.n	80076c8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80076c0:	4a62      	ldr	r2, [pc, #392]	@ (800784c <xTaskIncrementTick+0x230>)
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	6013      	str	r3, [r2, #0]
                        break;
 80076c6:	e092      	b.n	80077ee <xTaskIncrementTick+0x1d2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	68d2      	ldr	r2, [r2, #12]
 80076d6:	609a      	str	r2, [r3, #8]
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	6892      	ldr	r2, [r2, #8]
 80076e0:	605a      	str	r2, [r3, #4]
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	3304      	adds	r3, #4
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d103      	bne.n	80076f6 <xTaskIncrementTick+0xda>
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	605a      	str	r2, [r3, #4]
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	2200      	movs	r2, #0
 80076fa:	615a      	str	r2, [r3, #20]
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	1e5a      	subs	r2, r3, #1
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800770a:	2b00      	cmp	r3, #0
 800770c:	d01e      	beq.n	800774c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	6a12      	ldr	r2, [r2, #32]
 800771c:	609a      	str	r2, [r3, #8]
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	69d2      	ldr	r2, [r2, #28]
 8007726:	605a      	str	r2, [r3, #4]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	3318      	adds	r3, #24
 8007730:	429a      	cmp	r2, r3
 8007732:	d103      	bne.n	800773c <xTaskIncrementTick+0x120>
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	6a1a      	ldr	r2, [r3, #32]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	605a      	str	r2, [r3, #4]
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	2200      	movs	r2, #0
 8007740:	629a      	str	r2, [r3, #40]	@ 0x28
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	1e5a      	subs	r2, r3, #1
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	4618      	mov	r0, r3
 8007750:	f003 f902 	bl	800a958 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007758:	4b3d      	ldr	r3, [pc, #244]	@ (8007850 <xTaskIncrementTick+0x234>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	429a      	cmp	r2, r3
 800775e:	d903      	bls.n	8007768 <xTaskIncrementTick+0x14c>
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007764:	4a3a      	ldr	r2, [pc, #232]	@ (8007850 <xTaskIncrementTick+0x234>)
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800776c:	4939      	ldr	r1, [pc, #228]	@ (8007854 <xTaskIncrementTick+0x238>)
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	440b      	add	r3, r1
 8007778:	3304      	adds	r3, #4
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60bb      	str	r3, [r7, #8]
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	609a      	str	r2, [r3, #8]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	60da      	str	r2, [r3, #12]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	69ba      	ldr	r2, [r7, #24]
 8007792:	3204      	adds	r2, #4
 8007794:	605a      	str	r2, [r3, #4]
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	1d1a      	adds	r2, r3, #4
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	609a      	str	r2, [r3, #8]
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007854 <xTaskIncrementTick+0x238>)
 80077ac:	441a      	add	r2, r3
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	615a      	str	r2, [r3, #20]
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b6:	4927      	ldr	r1, [pc, #156]	@ (8007854 <xTaskIncrementTick+0x238>)
 80077b8:	4613      	mov	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	440b      	add	r3, r1
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80077c8:	1c59      	adds	r1, r3, #1
 80077ca:	4822      	ldr	r0, [pc, #136]	@ (8007854 <xTaskIncrementTick+0x238>)
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4403      	add	r3, r0
 80077d6:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077dc:	4b1e      	ldr	r3, [pc, #120]	@ (8007858 <xTaskIncrementTick+0x23c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e2:	429a      	cmp	r2, r3
 80077e4:	f67f af56 	bls.w	8007694 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077ec:	e752      	b.n	8007694 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80077ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007858 <xTaskIncrementTick+0x23c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f4:	4917      	ldr	r1, [pc, #92]	@ (8007854 <xTaskIncrementTick+0x238>)
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	440b      	add	r3, r1
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d901      	bls.n	800780a <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8007806:	2301      	movs	r3, #1
 8007808:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800780a:	4b14      	ldr	r3, [pc, #80]	@ (800785c <xTaskIncrementTick+0x240>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <xTaskIncrementTick+0x206>
                {
                    xSwitchRequired = pdTRUE;
 8007812:	2301      	movs	r3, #1
 8007814:	627b      	str	r3, [r7, #36]	@ 0x24
 8007816:	e004      	b.n	8007822 <xTaskIncrementTick+0x206>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8007818:	4b11      	ldr	r3, [pc, #68]	@ (8007860 <xTaskIncrementTick+0x244>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3301      	adds	r3, #1
 800781e:	4a10      	ldr	r2, [pc, #64]	@ (8007860 <xTaskIncrementTick+0x244>)
 8007820:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	4619      	mov	r1, r3
 8007826:	20db      	movs	r0, #219	@ 0xdb
 8007828:	f002 ff9e 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800782e:	4618      	mov	r0, r3
 8007830:	3728      	adds	r7, #40	@ 0x28
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200014ac 	.word	0x200014ac
 800783c:	20001488 	.word	0x20001488
 8007840:	2000143c 	.word	0x2000143c
 8007844:	20001440 	.word	0x20001440
 8007848:	2000149c 	.word	0x2000149c
 800784c:	200014a4 	.word	0x200014a4
 8007850:	2000148c 	.word	0x2000148c
 8007854:	20000fb4 	.word	0x20000fb4
 8007858:	20000fb0 	.word	0x20000fb0
 800785c:	20001498 	.word	0x20001498
 8007860:	20001494 	.word	0x20001494

08007864 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800786a:	4b31      	ldr	r3, [pc, #196]	@ (8007930 <vTaskSwitchContext+0xcc>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8007872:	4b30      	ldr	r3, [pc, #192]	@ (8007934 <vTaskSwitchContext+0xd0>)
 8007874:	2201      	movs	r2, #1
 8007876:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8007878:	e056      	b.n	8007928 <vTaskSwitchContext+0xc4>
            xYieldPendings[ 0 ] = pdFALSE;
 800787a:	4b2e      	ldr	r3, [pc, #184]	@ (8007934 <vTaskSwitchContext+0xd0>)
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8007880:	4b2d      	ldr	r3, [pc, #180]	@ (8007938 <vTaskSwitchContext+0xd4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	e011      	b.n	80078ac <vTaskSwitchContext+0x48>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <vTaskSwitchContext+0x42>
    __asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	607b      	str	r3, [r7, #4]
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	e7fd      	b.n	80078a2 <vTaskSwitchContext+0x3e>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	4923      	ldr	r1, [pc, #140]	@ (800793c <vTaskSwitchContext+0xd8>)
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	440b      	add	r3, r1
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0e3      	beq.n	8007888 <vTaskSwitchContext+0x24>
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4a1c      	ldr	r2, [pc, #112]	@ (800793c <vTaskSwitchContext+0xd8>)
 80078cc:	4413      	add	r3, r2
 80078ce:	60bb      	str	r3, [r7, #8]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	605a      	str	r2, [r3, #4]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	3308      	adds	r3, #8
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d103      	bne.n	80078ee <vTaskSwitchContext+0x8a>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	605a      	str	r2, [r3, #4]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	4a12      	ldr	r2, [pc, #72]	@ (8007940 <vTaskSwitchContext+0xdc>)
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	4a0f      	ldr	r2, [pc, #60]	@ (8007938 <vTaskSwitchContext+0xd4>)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80078fe:	4b10      	ldr	r3, [pc, #64]	@ (8007940 <vTaskSwitchContext+0xdc>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3334      	adds	r3, #52	@ 0x34
 8007904:	2205      	movs	r2, #5
 8007906:	490f      	ldr	r1, [pc, #60]	@ (8007944 <vTaskSwitchContext+0xe0>)
 8007908:	4618      	mov	r0, r3
 800790a:	f003 ff8a 	bl	800b822 <memcmp>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <vTaskSwitchContext+0xbc>
 8007914:	4b0a      	ldr	r3, [pc, #40]	@ (8007940 <vTaskSwitchContext+0xdc>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	f002 ffdb 	bl	800a8d4 <SEGGER_SYSVIEW_OnTaskStartExec>
 800791e:	e001      	b.n	8007924 <vTaskSwitchContext+0xc0>
 8007920:	f002 ff7a 	bl	800a818 <SEGGER_SYSVIEW_OnIdle>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8007924:	4b06      	ldr	r3, [pc, #24]	@ (8007940 <vTaskSwitchContext+0xdc>)
 8007926:	681b      	ldr	r3, [r3, #0]
    }
 8007928:	bf00      	nop
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	200014ac 	.word	0x200014ac
 8007934:	20001498 	.word	0x20001498
 8007938:	2000148c 	.word	0x2000148c
 800793c:	20000fb4 	.word	0x20000fb4
 8007940:	20000fb0 	.word	0x20000fb0
 8007944:	0800d6cc 	.word	0x0800d6cc

08007948 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10b      	bne.n	8007970 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	60fb      	str	r3, [r7, #12]
}
 800796a:	bf00      	nop
 800796c:	bf00      	nop
 800796e:	e7fd      	b.n	800796c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007970:	4b08      	ldr	r3, [pc, #32]	@ (8007994 <vTaskPlaceOnEventList+0x4c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3318      	adds	r3, #24
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7fe fae2 	bl	8005f42 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800797e:	2101      	movs	r1, #1
 8007980:	6838      	ldr	r0, [r7, #0]
 8007982:	f000 fb93 	bl	80080ac <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8007986:	20e1      	movs	r0, #225	@ 0xe1
 8007988:	f002 feb2 	bl	800a6f0 <SEGGER_SYSVIEW_RecordEndCall>
}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	20000fb0 	.word	0x20000fb0

08007998 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10b      	bne.n	80079c2 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	613b      	str	r3, [r7, #16]
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	e7fd      	b.n	80079be <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	4b17      	ldr	r3, [pc, #92]	@ (8007a28 <vTaskPlaceOnEventListRestricted+0x90>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	61da      	str	r2, [r3, #28]
 80079d0:	4b15      	ldr	r3, [pc, #84]	@ (8007a28 <vTaskPlaceOnEventListRestricted+0x90>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	6892      	ldr	r2, [r2, #8]
 80079d8:	621a      	str	r2, [r3, #32]
 80079da:	4b13      	ldr	r3, [pc, #76]	@ (8007a28 <vTaskPlaceOnEventListRestricted+0x90>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	3218      	adds	r2, #24
 80079e4:	605a      	str	r2, [r3, #4]
 80079e6:	4b10      	ldr	r3, [pc, #64]	@ (8007a28 <vTaskPlaceOnEventListRestricted+0x90>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f103 0218 	add.w	r2, r3, #24
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	609a      	str	r2, [r3, #8]
 80079f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a28 <vTaskPlaceOnEventListRestricted+0x90>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	1c5a      	adds	r2, r3, #1
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d002      	beq.n	8007a10 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8007a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a0e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	68b8      	ldr	r0, [r7, #8]
 8007a14:	f000 fb4a 	bl	80080ac <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8007a18:	20e3      	movs	r0, #227	@ 0xe3
 8007a1a:	f002 fe69 	bl	800a6f0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8007a1e:	bf00      	nop
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000fb0 	.word	0x20000fb0

08007a2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08a      	sub	sp, #40	@ 0x28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	60fb      	str	r3, [r7, #12]
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	e7fd      	b.n	8007a56 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5e:	61fb      	str	r3, [r7, #28]
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	6a3a      	ldr	r2, [r7, #32]
 8007a66:	6a12      	ldr	r2, [r2, #32]
 8007a68:	609a      	str	r2, [r3, #8]
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	6a3a      	ldr	r2, [r7, #32]
 8007a70:	69d2      	ldr	r2, [r2, #28]
 8007a72:	605a      	str	r2, [r3, #4]
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	3318      	adds	r3, #24
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d103      	bne.n	8007a88 <xTaskRemoveFromEventList+0x5c>
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	6a1a      	ldr	r2, [r3, #32]
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	605a      	str	r2, [r3, #4]
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	1e5a      	subs	r2, r3, #1
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007a98:	4b4f      	ldr	r3, [pc, #316]	@ (8007bd8 <xTaskRemoveFromEventList+0x1ac>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d165      	bne.n	8007b6c <xTaskRemoveFromEventList+0x140>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	617b      	str	r3, [r7, #20]
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	6a3a      	ldr	r2, [r7, #32]
 8007aac:	68d2      	ldr	r2, [r2, #12]
 8007aae:	609a      	str	r2, [r3, #8]
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	6a3a      	ldr	r2, [r7, #32]
 8007ab6:	6892      	ldr	r2, [r2, #8]
 8007ab8:	605a      	str	r2, [r3, #4]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d103      	bne.n	8007ace <xTaskRemoveFromEventList+0xa2>
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	605a      	str	r2, [r3, #4]
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	615a      	str	r2, [r3, #20]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	1e5a      	subs	r2, r3, #1
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f002 ff39 	bl	800a958 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aea:	4b3c      	ldr	r3, [pc, #240]	@ (8007bdc <xTaskRemoveFromEventList+0x1b0>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d903      	bls.n	8007afa <xTaskRemoveFromEventList+0xce>
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af6:	4a39      	ldr	r2, [pc, #228]	@ (8007bdc <xTaskRemoveFromEventList+0x1b0>)
 8007af8:	6013      	str	r3, [r2, #0]
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007afe:	4938      	ldr	r1, [pc, #224]	@ (8007be0 <xTaskRemoveFromEventList+0x1b4>)
 8007b00:	4613      	mov	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	440b      	add	r3, r1
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	613b      	str	r3, [r7, #16]
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	609a      	str	r2, [r3, #8]
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	60da      	str	r2, [r3, #12]
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	6a3a      	ldr	r2, [r7, #32]
 8007b24:	3204      	adds	r2, #4
 8007b26:	605a      	str	r2, [r3, #4]
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	1d1a      	adds	r2, r3, #4
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	609a      	str	r2, [r3, #8]
 8007b30:	6a3b      	ldr	r3, [r7, #32]
 8007b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4a28      	ldr	r2, [pc, #160]	@ (8007be0 <xTaskRemoveFromEventList+0x1b4>)
 8007b3e:	441a      	add	r2, r3
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	615a      	str	r2, [r3, #20]
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b48:	4925      	ldr	r1, [pc, #148]	@ (8007be0 <xTaskRemoveFromEventList+0x1b4>)
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	440b      	add	r3, r1
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6a3a      	ldr	r2, [r7, #32]
 8007b58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007b5a:	1c59      	adds	r1, r3, #1
 8007b5c:	4820      	ldr	r0, [pc, #128]	@ (8007be0 <xTaskRemoveFromEventList+0x1b4>)
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4403      	add	r3, r0
 8007b68:	6019      	str	r1, [r3, #0]
 8007b6a:	e01b      	b.n	8007ba4 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007be4 <xTaskRemoveFromEventList+0x1b8>)
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	61bb      	str	r3, [r7, #24]
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	61da      	str	r2, [r3, #28]
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	621a      	str	r2, [r3, #32]
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	6a3a      	ldr	r2, [r7, #32]
 8007b86:	3218      	adds	r2, #24
 8007b88:	605a      	str	r2, [r3, #4]
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	f103 0218 	add.w	r2, r3, #24
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	609a      	str	r2, [r3, #8]
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	4a13      	ldr	r2, [pc, #76]	@ (8007be4 <xTaskRemoveFromEventList+0x1b8>)
 8007b98:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b9a:	4b12      	ldr	r3, [pc, #72]	@ (8007be4 <xTaskRemoveFromEventList+0x1b8>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	4a10      	ldr	r2, [pc, #64]	@ (8007be4 <xTaskRemoveFromEventList+0x1b8>)
 8007ba2:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8007be8 <xTaskRemoveFromEventList+0x1bc>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d905      	bls.n	8007bbe <xTaskRemoveFromEventList+0x192>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8007bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bec <xTaskRemoveFromEventList+0x1c0>)
 8007bb8:	2201      	movs	r2, #1
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	e001      	b.n	8007bc2 <xTaskRemoveFromEventList+0x196>
        }
        else
        {
            xReturn = pdFALSE;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	20e4      	movs	r0, #228	@ 0xe4
 8007bc8:	f002 fdce 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3728      	adds	r7, #40	@ 0x28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	200014ac 	.word	0x200014ac
 8007bdc:	2000148c 	.word	0x2000148c
 8007be0:	20000fb4 	.word	0x20000fb4
 8007be4:	20001444 	.word	0x20001444
 8007be8:	20000fb0 	.word	0x20000fb0
 8007bec:	20001498 	.word	0x20001498

08007bf0 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bf8:	4b07      	ldr	r3, [pc, #28]	@ (8007c18 <vTaskInternalSetTimeOutState+0x28>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007c00:	4b06      	ldr	r3, [pc, #24]	@ (8007c1c <vTaskInternalSetTimeOutState+0x2c>)
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8007c08:	20e7      	movs	r0, #231	@ 0xe7
 8007c0a:	f002 fd71 	bl	800a6f0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	2000149c 	.word	0x2000149c
 8007c1c:	20001488 	.word	0x20001488

08007c20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10b      	bne.n	8007c48 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	613b      	str	r3, [r7, #16]
}
 8007c42:	bf00      	nop
 8007c44:	bf00      	nop
 8007c46:	e7fd      	b.n	8007c44 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10b      	bne.n	8007c66 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	60fb      	str	r3, [r7, #12]
}
 8007c60:	bf00      	nop
 8007c62:	bf00      	nop
 8007c64:	e7fd      	b.n	8007c62 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8007c66:	f000 feaf 	bl	80089c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007c6a:	4b21      	ldr	r3, [pc, #132]	@ (8007cf0 <xTaskCheckForTimeOut+0xd0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d102      	bne.n	8007c8a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007c84:	2300      	movs	r3, #0
 8007c86:	61fb      	str	r3, [r7, #28]
 8007c88:	e026      	b.n	8007cd8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	4b19      	ldr	r3, [pc, #100]	@ (8007cf4 <xTaskCheckForTimeOut+0xd4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d00a      	beq.n	8007cac <xTaskCheckForTimeOut+0x8c>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d305      	bcc.n	8007cac <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	e015      	b.n	8007cd8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d20b      	bcs.n	8007cce <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	1ad2      	subs	r2, r2, r3
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff ff94 	bl	8007bf0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61fb      	str	r3, [r7, #28]
 8007ccc:	e004      	b.n	8007cd8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007cd8:	f000 fea6 	bl	8008a28 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	20e8      	movs	r0, #232	@ 0xe8
 8007ce2:	f002 fd41 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8007ce6:	69fb      	ldr	r3, [r7, #28]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3720      	adds	r7, #32
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20001488 	.word	0x20001488
 8007cf4:	2000149c 	.word	0x2000149c

08007cf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8007cfc:	4b03      	ldr	r3, [pc, #12]	@ (8007d0c <vTaskMissedYield+0x14>)
 8007cfe:	2201      	movs	r2, #1
 8007d00:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8007d02:	20e9      	movs	r0, #233	@ 0xe9
 8007d04:	f002 fcf4 	bl	800a6f0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8007d08:	bf00      	nop
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	20001498 	.word	0x20001498

08007d10 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007d18:	f000 f852 	bl	8007dc0 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8007d1c:	4b06      	ldr	r3, [pc, #24]	@ (8007d38 <prvIdleTask+0x28>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d9f9      	bls.n	8007d18 <prvIdleTask+0x8>
            {
                taskYIELD();
 8007d24:	4b05      	ldr	r3, [pc, #20]	@ (8007d3c <prvIdleTask+0x2c>)
 8007d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007d34:	e7f0      	b.n	8007d18 <prvIdleTask+0x8>
 8007d36:	bf00      	nop
 8007d38:	20000fb4 	.word	0x20000fb4
 8007d3c:	e000ed04 	.word	0xe000ed04

08007d40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d46:	2300      	movs	r3, #0
 8007d48:	607b      	str	r3, [r7, #4]
 8007d4a:	e00c      	b.n	8007d66 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4a12      	ldr	r2, [pc, #72]	@ (8007da0 <prvInitialiseTaskLists+0x60>)
 8007d58:	4413      	add	r3, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe f8c0 	bl	8005ee0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3301      	adds	r3, #1
 8007d64:	607b      	str	r3, [r7, #4]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b37      	cmp	r3, #55	@ 0x37
 8007d6a:	d9ef      	bls.n	8007d4c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007d6c:	480d      	ldr	r0, [pc, #52]	@ (8007da4 <prvInitialiseTaskLists+0x64>)
 8007d6e:	f7fe f8b7 	bl	8005ee0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007d72:	480d      	ldr	r0, [pc, #52]	@ (8007da8 <prvInitialiseTaskLists+0x68>)
 8007d74:	f7fe f8b4 	bl	8005ee0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007d78:	480c      	ldr	r0, [pc, #48]	@ (8007dac <prvInitialiseTaskLists+0x6c>)
 8007d7a:	f7fe f8b1 	bl	8005ee0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8007d7e:	480c      	ldr	r0, [pc, #48]	@ (8007db0 <prvInitialiseTaskLists+0x70>)
 8007d80:	f7fe f8ae 	bl	8005ee0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8007d84:	480b      	ldr	r0, [pc, #44]	@ (8007db4 <prvInitialiseTaskLists+0x74>)
 8007d86:	f7fe f8ab 	bl	8005ee0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007db8 <prvInitialiseTaskLists+0x78>)
 8007d8c:	4a05      	ldr	r2, [pc, #20]	@ (8007da4 <prvInitialiseTaskLists+0x64>)
 8007d8e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d90:	4b0a      	ldr	r3, [pc, #40]	@ (8007dbc <prvInitialiseTaskLists+0x7c>)
 8007d92:	4a05      	ldr	r2, [pc, #20]	@ (8007da8 <prvInitialiseTaskLists+0x68>)
 8007d94:	601a      	str	r2, [r3, #0]
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000fb4 	.word	0x20000fb4
 8007da4:	20001414 	.word	0x20001414
 8007da8:	20001428 	.word	0x20001428
 8007dac:	20001444 	.word	0x20001444
 8007db0:	20001458 	.word	0x20001458
 8007db4:	20001470 	.word	0x20001470
 8007db8:	2000143c 	.word	0x2000143c
 8007dbc:	20001440 	.word	0x20001440

08007dc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dc6:	e019      	b.n	8007dfc <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8007dc8:	f000 fdfe 	bl	80089c8 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007dcc:	4b10      	ldr	r3, [pc, #64]	@ (8007e10 <prvCheckTasksWaitingTermination+0x50>)
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe f8ed 	bl	8005fb8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8007dde:	4b0d      	ldr	r3, [pc, #52]	@ (8007e14 <prvCheckTasksWaitingTermination+0x54>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	4a0b      	ldr	r2, [pc, #44]	@ (8007e14 <prvCheckTasksWaitingTermination+0x54>)
 8007de6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8007de8:	4b0b      	ldr	r3, [pc, #44]	@ (8007e18 <prvCheckTasksWaitingTermination+0x58>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	4a0a      	ldr	r2, [pc, #40]	@ (8007e18 <prvCheckTasksWaitingTermination+0x58>)
 8007df0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8007df2:	f000 fe19 	bl	8008a28 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f848 	bl	8007e8c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dfc:	4b06      	ldr	r3, [pc, #24]	@ (8007e18 <prvCheckTasksWaitingTermination+0x58>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e1      	bne.n	8007dc8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20001458 	.word	0x20001458
 8007e14:	20001484 	.word	0x20001484
 8007e18:	2000146c 	.word	0x2000146c

08007e1c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007e28:	e005      	b.n	8007e36 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	607b      	str	r3, [r7, #4]
            uxCount++;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	3301      	adds	r3, #1
 8007e34:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2ba5      	cmp	r3, #165	@ 0xa5
 8007e3c:	d0f5      	beq.n	8007e2a <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	089b      	lsrs	r3, r3, #2
 8007e42:	60fb      	str	r3, [r7, #12]

        return uxCount;
 8007e44:	68fb      	ldr	r3, [r7, #12]
    }
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr

08007e50 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        traceENTER_uxTaskGetStackHighWaterMark( xTask );

        pxTCB = prvGetTCBFromHandle( xTask );
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d102      	bne.n	8007e64 <uxTaskGetStackHighWaterMark+0x14>
 8007e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e88 <uxTaskGetStackHighWaterMark+0x38>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	e000      	b.n	8007e66 <uxTaskGetStackHighWaterMark+0x16>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e6c:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8007e6e:	6938      	ldr	r0, [r7, #16]
 8007e70:	f7ff ffd4 	bl	8007e1c <prvTaskCheckFreeStackSpace>
 8007e74:	60f8      	str	r0, [r7, #12]

        traceRETURN_uxTaskGetStackHighWaterMark( uxReturn );
 8007e76:	68f9      	ldr	r1, [r7, #12]
 8007e78:	20f2      	movs	r0, #242	@ 0xf2
 8007e7a:	f002 fc75 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

        return uxReturn;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
    }
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20000fb0 	.word	0x20000fb0

08007e8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d108      	bne.n	8007eb0 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 ffce 	bl	8008e44 <vPortFree>
                vPortFree( pxTCB );
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 ffcb 	bl	8008e44 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007eae:	e019      	b.n	8007ee4 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d103      	bne.n	8007ec2 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 ffc2 	bl	8008e44 <vPortFree>
    }
 8007ec0:	e010      	b.n	8007ee4 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d00b      	beq.n	8007ee4 <prvDeleteTCB+0x58>
    __asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	60fb      	str	r3, [r7, #12]
}
 8007ede:	bf00      	nop
 8007ee0:	bf00      	nop
 8007ee2:	e7fd      	b.n	8007ee0 <prvDeleteTCB+0x54>
    }
 8007ee4:	bf00      	nop
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ef0:	4b09      	ldr	r3, [pc, #36]	@ (8007f18 <prvResetNextTaskUnblockTime+0x2c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d104      	bne.n	8007f04 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007efa:	4b08      	ldr	r3, [pc, #32]	@ (8007f1c <prvResetNextTaskUnblockTime+0x30>)
 8007efc:	f04f 32ff 	mov.w	r2, #4294967295
 8007f00:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007f02:	e005      	b.n	8007f10 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f04:	4b04      	ldr	r3, [pc, #16]	@ (8007f18 <prvResetNextTaskUnblockTime+0x2c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a03      	ldr	r2, [pc, #12]	@ (8007f1c <prvResetNextTaskUnblockTime+0x30>)
 8007f0e:	6013      	str	r3, [r2, #0]
}
 8007f10:	bf00      	nop
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bc80      	pop	{r7}
 8007f16:	4770      	bx	lr
 8007f18:	2000143c 	.word	0x2000143c
 8007f1c:	200014a4 	.word	0x200014a4

08007f20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8007f26:	4b0d      	ldr	r3, [pc, #52]	@ (8007f5c <xTaskGetSchedulerState+0x3c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d102      	bne.n	8007f34 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	607b      	str	r3, [r7, #4]
 8007f32:	e008      	b.n	8007f46 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007f34:	4b0a      	ldr	r3, [pc, #40]	@ (8007f60 <xTaskGetSchedulerState+0x40>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d102      	bne.n	8007f42 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	607b      	str	r3, [r7, #4]
 8007f40:	e001      	b.n	8007f46 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8007f42:	2300      	movs	r3, #0
 8007f44:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	20f5      	movs	r0, #245	@ 0xf5
 8007f4c:	f002 fc0c 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8007f50:	687b      	ldr	r3, [r7, #4]
    }
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20001490 	.word	0x20001490
 8007f60:	200014ac 	.word	0x200014ac

08007f64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b088      	sub	sp, #32
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8007f70:	2300      	movs	r3, #0
 8007f72:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 8087 	beq.w	800808a <xTaskPriorityDisinherit+0x126>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007f7c:	4b48      	ldr	r3, [pc, #288]	@ (80080a0 <xTaskPriorityDisinherit+0x13c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d00b      	beq.n	8007f9e <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	613b      	str	r3, [r7, #16]
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	e7fd      	b.n	8007f9a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10b      	bne.n	8007fbe <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	60fb      	str	r3, [r7, #12]
}
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	e7fd      	b.n	8007fba <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc2:	1e5a      	subs	r2, r3, #1
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d05a      	beq.n	800808a <xTaskPriorityDisinherit+0x126>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d156      	bne.n	800808a <xTaskPriorityDisinherit+0x126>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	3304      	adds	r3, #4
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fd ffe9 	bl	8005fb8 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f002 fcab 	bl	800a958 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008006:	4b27      	ldr	r3, [pc, #156]	@ (80080a4 <xTaskPriorityDisinherit+0x140>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d903      	bls.n	8008016 <xTaskPriorityDisinherit+0xb2>
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008012:	4a24      	ldr	r2, [pc, #144]	@ (80080a4 <xTaskPriorityDisinherit+0x140>)
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800801a:	4923      	ldr	r1, [pc, #140]	@ (80080a8 <xTaskPriorityDisinherit+0x144>)
 800801c:	4613      	mov	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	440b      	add	r3, r1
 8008026:	3304      	adds	r3, #4
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	609a      	str	r2, [r3, #8]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	689a      	ldr	r2, [r3, #8]
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	60da      	str	r2, [r3, #12]
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	3204      	adds	r2, #4
 8008042:	605a      	str	r2, [r3, #4]
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	1d1a      	adds	r2, r3, #4
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	609a      	str	r2, [r3, #8]
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4a13      	ldr	r2, [pc, #76]	@ (80080a8 <xTaskPriorityDisinherit+0x144>)
 800805a:	441a      	add	r2, r3
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	615a      	str	r2, [r3, #20]
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008064:	4910      	ldr	r1, [pc, #64]	@ (80080a8 <xTaskPriorityDisinherit+0x144>)
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	440b      	add	r3, r1
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008076:	1c59      	adds	r1, r3, #1
 8008078:	480b      	ldr	r0, [pc, #44]	@ (80080a8 <xTaskPriorityDisinherit+0x144>)
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4403      	add	r3, r0
 8008084:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8008086:	2301      	movs	r3, #1
 8008088:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	4619      	mov	r1, r3
 800808e:	20f7      	movs	r0, #247	@ 0xf7
 8008090:	f002 fb6a 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8008094:	69fb      	ldr	r3, [r7, #28]
    }
 8008096:	4618      	mov	r0, r3
 8008098:	3720      	adds	r7, #32
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20000fb0 	.word	0x20000fb0
 80080a4:	2000148c 	.word	0x2000148c
 80080a8:	20000fb4 	.word	0x20000fb4

080080ac <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80080b6:	4b35      	ldr	r3, [pc, #212]	@ (800818c <prvAddCurrentTaskToDelayedList+0xe0>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80080bc:	4b34      	ldr	r3, [pc, #208]	@ (8008190 <prvAddCurrentTaskToDelayedList+0xe4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80080c2:	4b34      	ldr	r3, [pc, #208]	@ (8008194 <prvAddCurrentTaskToDelayedList+0xe8>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080c8:	4b33      	ldr	r3, [pc, #204]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xec>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3304      	adds	r3, #4
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fd ff72 	bl	8005fb8 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080da:	d124      	bne.n	8008126 <prvAddCurrentTaskToDelayedList+0x7a>
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d021      	beq.n	8008126 <prvAddCurrentTaskToDelayedList+0x7a>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080e2:	4b2e      	ldr	r3, [pc, #184]	@ (800819c <prvAddCurrentTaskToDelayedList+0xf0>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	613b      	str	r3, [r7, #16]
 80080e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xec>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	609a      	str	r2, [r3, #8]
 80080f0:	4b29      	ldr	r3, [pc, #164]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xec>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	6892      	ldr	r2, [r2, #8]
 80080f8:	60da      	str	r2, [r3, #12]
 80080fa:	4b27      	ldr	r3, [pc, #156]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xec>)
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	3204      	adds	r2, #4
 8008104:	605a      	str	r2, [r3, #4]
 8008106:	4b24      	ldr	r3, [pc, #144]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xec>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	1d1a      	adds	r2, r3, #4
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	609a      	str	r2, [r3, #8]
 8008110:	4b21      	ldr	r3, [pc, #132]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xec>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a21      	ldr	r2, [pc, #132]	@ (800819c <prvAddCurrentTaskToDelayedList+0xf0>)
 8008116:	615a      	str	r2, [r3, #20]
 8008118:	4b20      	ldr	r3, [pc, #128]	@ (800819c <prvAddCurrentTaskToDelayedList+0xf0>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3301      	adds	r3, #1
 800811e:	4a1f      	ldr	r2, [pc, #124]	@ (800819c <prvAddCurrentTaskToDelayedList+0xf0>)
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8008124:	e02e      	b.n	8008184 <prvAddCurrentTaskToDelayedList+0xd8>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8008126:	69fa      	ldr	r2, [r7, #28]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4413      	add	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800812e:	4b1a      	ldr	r3, [pc, #104]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xec>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	429a      	cmp	r2, r3
 800813c:	d20d      	bcs.n	800815a <prvAddCurrentTaskToDelayedList+0xae>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800813e:	4b16      	ldr	r3, [pc, #88]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xec>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2104      	movs	r1, #4
 8008144:	4618      	mov	r0, r3
 8008146:	f002 fc49 	bl	800a9dc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800814a:	4b13      	ldr	r3, [pc, #76]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xec>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	3304      	adds	r3, #4
 8008150:	4619      	mov	r1, r3
 8008152:	6978      	ldr	r0, [r7, #20]
 8008154:	f7fd fef5 	bl	8005f42 <vListInsert>
}
 8008158:	e014      	b.n	8008184 <prvAddCurrentTaskToDelayedList+0xd8>
                traceMOVED_TASK_TO_DELAYED_LIST();
 800815a:	4b0f      	ldr	r3, [pc, #60]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xec>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2104      	movs	r1, #4
 8008160:	4618      	mov	r0, r3
 8008162:	f002 fc3b 	bl	800a9dc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8008166:	4b0c      	ldr	r3, [pc, #48]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xec>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3304      	adds	r3, #4
 800816c:	4619      	mov	r1, r3
 800816e:	69b8      	ldr	r0, [r7, #24]
 8008170:	f7fd fee7 	bl	8005f42 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8008174:	4b0a      	ldr	r3, [pc, #40]	@ (80081a0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	429a      	cmp	r2, r3
 800817c:	d202      	bcs.n	8008184 <prvAddCurrentTaskToDelayedList+0xd8>
                    xNextTaskUnblockTime = xTimeToWake;
 800817e:	4a08      	ldr	r2, [pc, #32]	@ (80081a0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6013      	str	r3, [r2, #0]
}
 8008184:	bf00      	nop
 8008186:	3720      	adds	r7, #32
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	20001488 	.word	0x20001488
 8008190:	2000143c 	.word	0x2000143c
 8008194:	20001440 	.word	0x20001440
 8008198:	20000fb0 	.word	0x20000fb0
 800819c:	20001470 	.word	0x20001470
 80081a0:	200014a4 	.word	0x200014a4

080081a4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08a      	sub	sp, #40	@ 0x28
 80081a8:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80081ae:	f000 fa8b 	bl	80086c8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80081b2:	4b20      	ldr	r3, [pc, #128]	@ (8008234 <xTimerCreateTimerTask+0x90>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d021      	beq.n	80081fe <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 80081c2:	1d3a      	adds	r2, r7, #4
 80081c4:	f107 0108 	add.w	r1, r7, #8
 80081c8:	f107 030c 	add.w	r3, r7, #12
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fd fe6d 	bl	8005eac <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80081d2:	6879      	ldr	r1, [r7, #4]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	9202      	str	r2, [sp, #8]
 80081da:	9301      	str	r3, [sp, #4]
 80081dc:	2302      	movs	r3, #2
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	2300      	movs	r3, #0
 80081e2:	460a      	mov	r2, r1
 80081e4:	4914      	ldr	r1, [pc, #80]	@ (8008238 <xTimerCreateTimerTask+0x94>)
 80081e6:	4815      	ldr	r0, [pc, #84]	@ (800823c <xTimerCreateTimerTask+0x98>)
 80081e8:	f7fe fde6 	bl	8006db8 <xTaskCreateStatic>
 80081ec:	4603      	mov	r3, r0
 80081ee:	4a14      	ldr	r2, [pc, #80]	@ (8008240 <xTimerCreateTimerTask+0x9c>)
 80081f0:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 80081f2:	4b13      	ldr	r3, [pc, #76]	@ (8008240 <xTimerCreateTimerTask+0x9c>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 80081fa:	2301      	movs	r3, #1
 80081fc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10b      	bne.n	800821c <xTimerCreateTimerTask+0x78>
    __asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	613b      	str	r3, [r7, #16]
}
 8008216:	bf00      	nop
 8008218:	bf00      	nop
 800821a:	e7fd      	b.n	8008218 <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	4619      	mov	r1, r3
 8008220:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8008224:	f002 faa0 	bl	800a768 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8008228:	697b      	ldr	r3, [r7, #20]
    }
 800822a:	4618      	mov	r0, r3
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	200014e0 	.word	0x200014e0
 8008238:	0800d6d4 	.word	0x0800d6d4
 800823c:	080082e9 	.word	0x080082e9
 8008240:	200014e4 	.word	0x200014e4

08008244 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8008250:	e008      	b.n	8008264 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	4413      	add	r3, r2
 800825a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	699a      	ldr	r2, [r3, #24]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	18d1      	adds	r1, r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 f8dd 	bl	8008430 <prvInsertTimerInActiveList>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1ea      	bne.n	8008252 <prvReloadTimer+0xe>
        }
    }
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008292:	4b14      	ldr	r3, [pc, #80]	@ (80082e4 <prvProcessExpiredTimer+0x5c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3304      	adds	r3, #4
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fd fe89 	bl	8005fb8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082ac:	f003 0304 	and.w	r3, r3, #4
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f7ff ffc3 	bl	8008244 <prvReloadTimer>
 80082be:	e008      	b.n	80082d2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082c6:	f023 0301 	bic.w	r3, r3, #1
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	4798      	blx	r3
    }
 80082da:	bf00      	nop
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	200014d8 	.word	0x200014d8

080082e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082f0:	f107 0308 	add.w	r3, r7, #8
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 f859 	bl	80083ac <prvGetNextExpireTime>
 80082fa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	4619      	mov	r1, r3
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 f805 	bl	8008310 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8008306:	f000 f8d5 	bl	80084b4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800830a:	bf00      	nop
 800830c:	e7f0      	b.n	80082f0 <prvTimerTask+0x8>
	...

08008310 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800831a:	f7ff f829 	bl	8007370 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800831e:	f107 0308 	add.w	r3, r7, #8
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f864 	bl	80083f0 <prvSampleTimeNow>
 8008328:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d130      	bne.n	8008392 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10a      	bne.n	800834c <prvProcessTimerOrBlockTask+0x3c>
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	429a      	cmp	r2, r3
 800833c:	d806      	bhi.n	800834c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800833e:	f7ff f825 	bl	800738c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008342:	68f9      	ldr	r1, [r7, #12]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff9f 	bl	8008288 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800834a:	e024      	b.n	8008396 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d008      	beq.n	8008364 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008352:	4b13      	ldr	r3, [pc, #76]	@ (80083a0 <prvProcessTimerOrBlockTask+0x90>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <prvProcessTimerOrBlockTask+0x50>
 800835c:	2301      	movs	r3, #1
 800835e:	e000      	b.n	8008362 <prvProcessTimerOrBlockTask+0x52>
 8008360:	2300      	movs	r3, #0
 8008362:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008364:	4b0f      	ldr	r3, [pc, #60]	@ (80083a4 <prvProcessTimerOrBlockTask+0x94>)
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	4619      	mov	r1, r3
 8008372:	f7fe fc89 	bl	8006c88 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8008376:	f7ff f809 	bl	800738c <xTaskResumeAll>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10a      	bne.n	8008396 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8008380:	4b09      	ldr	r3, [pc, #36]	@ (80083a8 <prvProcessTimerOrBlockTask+0x98>)
 8008382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
    }
 8008390:	e001      	b.n	8008396 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8008392:	f7fe fffb 	bl	800738c <xTaskResumeAll>
    }
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	200014dc 	.word	0x200014dc
 80083a4:	200014e0 	.word	0x200014e0
 80083a8:	e000ed04 	.word	0xe000ed04

080083ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083b4:	4b0d      	ldr	r3, [pc, #52]	@ (80083ec <prvGetNextExpireTime+0x40>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <prvGetNextExpireTime+0x16>
 80083be:	2201      	movs	r2, #1
 80083c0:	e000      	b.n	80083c4 <prvGetNextExpireTime+0x18>
 80083c2:	2200      	movs	r2, #0
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d105      	bne.n	80083dc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083d0:	4b06      	ldr	r3, [pc, #24]	@ (80083ec <prvGetNextExpireTime+0x40>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	e001      	b.n	80083e0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80083e0:	68fb      	ldr	r3, [r7, #12]
    }
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bc80      	pop	{r7}
 80083ea:	4770      	bx	lr
 80083ec:	200014d8 	.word	0x200014d8

080083f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80083f8:	f7ff f8da 	bl	80075b0 <xTaskGetTickCount>
 80083fc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80083fe:	4b0b      	ldr	r3, [pc, #44]	@ (800842c <prvSampleTimeNow+0x3c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	429a      	cmp	r2, r3
 8008406:	d205      	bcs.n	8008414 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008408:	f000 f938 	bl	800867c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	e002      	b.n	800841a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800841a:	4a04      	ldr	r2, [pc, #16]	@ (800842c <prvSampleTimeNow+0x3c>)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008420:	68fb      	ldr	r3, [r7, #12]
    }
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	200014e8 	.word	0x200014e8

08008430 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800843e:	2300      	movs	r3, #0
 8008440:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	429a      	cmp	r2, r3
 8008454:	d812      	bhi.n	800847c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	1ad2      	subs	r2, r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	429a      	cmp	r2, r3
 8008462:	d302      	bcc.n	800846a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008464:	2301      	movs	r3, #1
 8008466:	617b      	str	r3, [r7, #20]
 8008468:	e01b      	b.n	80084a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800846a:	4b10      	ldr	r3, [pc, #64]	@ (80084ac <prvInsertTimerInActiveList+0x7c>)
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f7fd fd64 	bl	8005f42 <vListInsert>
 800847a:	e012      	b.n	80084a2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d206      	bcs.n	8008492 <prvInsertTimerInActiveList+0x62>
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d302      	bcc.n	8008492 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800848c:	2301      	movs	r3, #1
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	e007      	b.n	80084a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008492:	4b07      	ldr	r3, [pc, #28]	@ (80084b0 <prvInsertTimerInActiveList+0x80>)
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3304      	adds	r3, #4
 800849a:	4619      	mov	r1, r3
 800849c:	4610      	mov	r0, r2
 800849e:	f7fd fd50 	bl	8005f42 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80084a2:	697b      	ldr	r3, [r7, #20]
    }
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	200014dc 	.word	0x200014dc
 80084b0:	200014d8 	.word	0x200014d8

080084b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08a      	sub	sp, #40	@ 0x28
 80084b8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80084ba:	1d3b      	adds	r3, r7, #4
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	605a      	str	r2, [r3, #4]
 80084c2:	609a      	str	r2, [r3, #8]
 80084c4:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80084c6:	e0c7      	b.n	8008658 <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	da19      	bge.n	8008502 <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084ce:	1d3b      	adds	r3, r7, #4
 80084d0:	3304      	adds	r3, #4
 80084d2:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10b      	bne.n	80084f2 <prvProcessReceivedCommands+0x3e>
    __asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	61bb      	str	r3, [r7, #24]
}
 80084ec:	bf00      	nop
 80084ee:	bf00      	nop
 80084f0:	e7fd      	b.n	80084ee <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084f8:	6850      	ldr	r0, [r2, #4]
 80084fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084fc:	6892      	ldr	r2, [r2, #8]
 80084fe:	4611      	mov	r1, r2
 8008500:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	f2c0 80a7 	blt.w	8008658 <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d004      	beq.n	8008520 <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	3304      	adds	r3, #4
 800851a:	4618      	mov	r0, r3
 800851c:	f7fd fd4c 	bl	8005fb8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008520:	463b      	mov	r3, r7
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff ff64 	bl	80083f0 <prvSampleTimeNow>
 8008528:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	3b01      	subs	r3, #1
 800852e:	2b08      	cmp	r3, #8
 8008530:	f200 808f 	bhi.w	8008652 <prvProcessReceivedCommands+0x19e>
 8008534:	a201      	add	r2, pc, #4	@ (adr r2, 800853c <prvProcessReceivedCommands+0x88>)
 8008536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853a:	bf00      	nop
 800853c:	08008561 	.word	0x08008561
 8008540:	08008561 	.word	0x08008561
 8008544:	080085c9 	.word	0x080085c9
 8008548:	080085dd 	.word	0x080085dd
 800854c:	08008629 	.word	0x08008629
 8008550:	08008561 	.word	0x08008561
 8008554:	08008561 	.word	0x08008561
 8008558:	080085c9 	.word	0x080085c9
 800855c:	080085dd 	.word	0x080085dd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008566:	f043 0301 	orr.w	r3, r3, #1
 800856a:	b2da      	uxtb	r2, r3
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	18d1      	adds	r1, r2, r3
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	69fa      	ldr	r2, [r7, #28]
 800857e:	6a38      	ldr	r0, [r7, #32]
 8008580:	f7ff ff56 	bl	8008430 <prvInsertTimerInActiveList>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d065      	beq.n	8008656 <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d009      	beq.n	80085ac <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	4413      	add	r3, r2
 80085a0:	69fa      	ldr	r2, [r7, #28]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6a38      	ldr	r0, [r7, #32]
 80085a6:	f7ff fe4d 	bl	8008244 <prvReloadTimer>
 80085aa:	e008      	b.n	80085be <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085b2:	f023 0301 	bic.w	r3, r3, #1
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	6a38      	ldr	r0, [r7, #32]
 80085c4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80085c6:	e046      	b.n	8008656 <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80085c8:	6a3b      	ldr	r3, [r7, #32]
 80085ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085ce:	f023 0301 	bic.w	r3, r3, #1
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80085da:	e03d      	b.n	8008658 <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80085dc:	6a3b      	ldr	r3, [r7, #32]
 80085de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085e2:	f043 0301 	orr.w	r3, r3, #1
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10b      	bne.n	8008614 <prvProcessReceivedCommands+0x160>
    __asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	617b      	str	r3, [r7, #20]
}
 800860e:	bf00      	nop
 8008610:	bf00      	nop
 8008612:	e7fd      	b.n	8008610 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	699a      	ldr	r2, [r3, #24]
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	18d1      	adds	r1, r2, r3
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	69fa      	ldr	r2, [r7, #28]
 8008620:	6a38      	ldr	r0, [r7, #32]
 8008622:	f7ff ff05 	bl	8008430 <prvInsertTimerInActiveList>
                        break;
 8008626:	e017      	b.n	8008658 <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800862e:	f003 0302 	and.w	r3, r3, #2
 8008632:	2b00      	cmp	r3, #0
 8008634:	d103      	bne.n	800863e <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 8008636:	6a38      	ldr	r0, [r7, #32]
 8008638:	f000 fc04 	bl	8008e44 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800863c:	e00c      	b.n	8008658 <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008644:	f023 0301 	bic.w	r3, r3, #1
 8008648:	b2da      	uxtb	r2, r3
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008650:	e002      	b.n	8008658 <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008652:	bf00      	nop
 8008654:	e000      	b.n	8008658 <prvProcessReceivedCommands+0x1a4>
                        break;
 8008656:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8008658:	4b07      	ldr	r3, [pc, #28]	@ (8008678 <prvProcessReceivedCommands+0x1c4>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	1d39      	adds	r1, r7, #4
 800865e:	2200      	movs	r2, #0
 8008660:	4618      	mov	r0, r3
 8008662:	f7fe f823 	bl	80066ac <xQueueReceive>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	f47f af2d 	bne.w	80084c8 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800866e:	bf00      	nop
 8008670:	bf00      	nop
 8008672:	3728      	adds	r7, #40	@ 0x28
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	200014e0 	.word	0x200014e0

0800867c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008682:	e009      	b.n	8008698 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008684:	4b0e      	ldr	r3, [pc, #56]	@ (80086c0 <prvSwitchTimerLists+0x44>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800868e:	f04f 31ff 	mov.w	r1, #4294967295
 8008692:	6838      	ldr	r0, [r7, #0]
 8008694:	f7ff fdf8 	bl	8008288 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008698:	4b09      	ldr	r3, [pc, #36]	@ (80086c0 <prvSwitchTimerLists+0x44>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1f0      	bne.n	8008684 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80086a2:	4b07      	ldr	r3, [pc, #28]	@ (80086c0 <prvSwitchTimerLists+0x44>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80086a8:	4b06      	ldr	r3, [pc, #24]	@ (80086c4 <prvSwitchTimerLists+0x48>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a04      	ldr	r2, [pc, #16]	@ (80086c0 <prvSwitchTimerLists+0x44>)
 80086ae:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80086b0:	4a04      	ldr	r2, [pc, #16]	@ (80086c4 <prvSwitchTimerLists+0x48>)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6013      	str	r3, [r2, #0]
    }
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	200014d8 	.word	0x200014d8
 80086c4:	200014dc 	.word	0x200014dc

080086c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80086ce:	f000 f97b 	bl	80089c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80086d2:	4b15      	ldr	r3, [pc, #84]	@ (8008728 <prvCheckForValidListAndQueue+0x60>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d120      	bne.n	800871c <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 80086da:	4814      	ldr	r0, [pc, #80]	@ (800872c <prvCheckForValidListAndQueue+0x64>)
 80086dc:	f7fd fc00 	bl	8005ee0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80086e0:	4813      	ldr	r0, [pc, #76]	@ (8008730 <prvCheckForValidListAndQueue+0x68>)
 80086e2:	f7fd fbfd 	bl	8005ee0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80086e6:	4b13      	ldr	r3, [pc, #76]	@ (8008734 <prvCheckForValidListAndQueue+0x6c>)
 80086e8:	4a10      	ldr	r2, [pc, #64]	@ (800872c <prvCheckForValidListAndQueue+0x64>)
 80086ea:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80086ec:	4b12      	ldr	r3, [pc, #72]	@ (8008738 <prvCheckForValidListAndQueue+0x70>)
 80086ee:	4a10      	ldr	r2, [pc, #64]	@ (8008730 <prvCheckForValidListAndQueue+0x68>)
 80086f0:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80086f2:	2300      	movs	r3, #0
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	4b11      	ldr	r3, [pc, #68]	@ (800873c <prvCheckForValidListAndQueue+0x74>)
 80086f8:	4a11      	ldr	r2, [pc, #68]	@ (8008740 <prvCheckForValidListAndQueue+0x78>)
 80086fa:	2110      	movs	r1, #16
 80086fc:	200a      	movs	r0, #10
 80086fe:	f7fd fd21 	bl	8006144 <xQueueGenericCreateStatic>
 8008702:	4603      	mov	r3, r0
 8008704:	4a08      	ldr	r2, [pc, #32]	@ (8008728 <prvCheckForValidListAndQueue+0x60>)
 8008706:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8008708:	4b07      	ldr	r3, [pc, #28]	@ (8008728 <prvCheckForValidListAndQueue+0x60>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d005      	beq.n	800871c <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008710:	4b05      	ldr	r3, [pc, #20]	@ (8008728 <prvCheckForValidListAndQueue+0x60>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	490b      	ldr	r1, [pc, #44]	@ (8008744 <prvCheckForValidListAndQueue+0x7c>)
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe fa66 	bl	8006be8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800871c:	f000 f984 	bl	8008a28 <vPortExitCritical>
    }
 8008720:	bf00      	nop
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	200014e0 	.word	0x200014e0
 800872c:	200014b0 	.word	0x200014b0
 8008730:	200014c4 	.word	0x200014c4
 8008734:	200014d8 	.word	0x200014d8
 8008738:	200014dc 	.word	0x200014dc
 800873c:	2000158c 	.word	0x2000158c
 8008740:	200014ec 	.word	0x200014ec
 8008744:	0800d6dc 	.word	0x0800d6dc

08008748 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3b04      	subs	r3, #4
 8008758:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008760:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3b04      	subs	r3, #4
 8008766:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f023 0201 	bic.w	r2, r3, #1
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	3b04      	subs	r3, #4
 8008776:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008778:	4a08      	ldr	r2, [pc, #32]	@ (800879c <pxPortInitialiseStack+0x54>)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3b14      	subs	r3, #20
 8008782:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3b20      	subs	r3, #32
 800878e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008790:	68fb      	ldr	r3, [r7, #12]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	bc80      	pop	{r7}
 800879a:	4770      	bx	lr
 800879c:	080087a1 	.word	0x080087a1

080087a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80087aa:	4b12      	ldr	r3, [pc, #72]	@ (80087f4 <prvTaskExitError+0x54>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b2:	d00b      	beq.n	80087cc <prvTaskExitError+0x2c>
    __asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	60fb      	str	r3, [r7, #12]
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	e7fd      	b.n	80087c8 <prvTaskExitError+0x28>
    __asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	60bb      	str	r3, [r7, #8]
}
 80087de:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80087e0:	bf00      	nop
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d0fc      	beq.n	80087e2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bc80      	pop	{r7}
 80087f2:	4770      	bx	lr
 80087f4:	2000000c 	.word	0x2000000c
	...

08008800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008800:	4b07      	ldr	r3, [pc, #28]	@ (8008820 <pxCurrentTCBConst2>)
 8008802:	6819      	ldr	r1, [r3, #0]
 8008804:	6808      	ldr	r0, [r1, #0]
 8008806:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800880a:	f380 8809 	msr	PSP, r0
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f04f 0000 	mov.w	r0, #0
 8008816:	f380 8811 	msr	BASEPRI, r0
 800881a:	f04e 0e0d 	orr.w	lr, lr, #13
 800881e:	4770      	bx	lr

08008820 <pxCurrentTCBConst2>:
 8008820:	20000fb0 	.word	0x20000fb0
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop

08008828 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8008828:	4806      	ldr	r0, [pc, #24]	@ (8008844 <prvPortStartFirstTask+0x1c>)
 800882a:	6800      	ldr	r0, [r0, #0]
 800882c:	6800      	ldr	r0, [r0, #0]
 800882e:	f380 8808 	msr	MSP, r0
 8008832:	b662      	cpsie	i
 8008834:	b661      	cpsie	f
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	df00      	svc	0
 8008840:	bf00      	nop
 8008842:	0000      	.short	0x0000
 8008844:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop

0800884c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08a      	sub	sp, #40	@ 0x28
 8008850:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8008852:	4b54      	ldr	r3, [pc, #336]	@ (80089a4 <xPortStartScheduler+0x158>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8008858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885a:	332c      	adds	r3, #44	@ 0x2c
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a52      	ldr	r2, [pc, #328]	@ (80089a8 <xPortStartScheduler+0x15c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00b      	beq.n	800887c <xPortStartScheduler+0x30>
    __asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	61bb      	str	r3, [r7, #24]
}
 8008876:	bf00      	nop
 8008878:	bf00      	nop
 800887a:	e7fd      	b.n	8008878 <xPortStartScheduler+0x2c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887e:	3338      	adds	r3, #56	@ 0x38
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a4a      	ldr	r2, [pc, #296]	@ (80089ac <xPortStartScheduler+0x160>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d00b      	beq.n	80088a0 <xPortStartScheduler+0x54>
    __asm volatile
 8008888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	61fb      	str	r3, [r7, #28]
}
 800889a:	bf00      	nop
 800889c:	bf00      	nop
 800889e:	e7fd      	b.n	800889c <xPortStartScheduler+0x50>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088a4:	4b42      	ldr	r3, [pc, #264]	@ (80089b0 <xPortStartScheduler+0x164>)
 80088a6:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80088a8:	6a3b      	ldr	r3, [r7, #32]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	22ff      	movs	r2, #255	@ 0xff
 80088b4:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	4b3a      	ldr	r3, [pc, #232]	@ (80089b4 <xPortStartScheduler+0x168>)
 80088ca:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80088cc:	4b39      	ldr	r3, [pc, #228]	@ (80089b4 <xPortStartScheduler+0x168>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10b      	bne.n	80088ec <xPortStartScheduler+0xa0>
    __asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	617b      	str	r3, [r7, #20]
}
 80088e6:	bf00      	nop
 80088e8:	bf00      	nop
 80088ea:	e7fd      	b.n	80088e8 <xPortStartScheduler+0x9c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	43db      	mvns	r3, r3
 80088f2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d013      	beq.n	8008922 <xPortStartScheduler+0xd6>
    __asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	613b      	str	r3, [r7, #16]
}
 800890c:	bf00      	nop
 800890e:	bf00      	nop
 8008910:	e7fd      	b.n	800890e <xPortStartScheduler+0xc2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	3301      	adds	r3, #1
 8008916:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008918:	79fb      	ldrb	r3, [r7, #7]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	b2db      	uxtb	r3, r3
 8008920:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800892a:	2b80      	cmp	r3, #128	@ 0x80
 800892c:	d0f1      	beq.n	8008912 <xPortStartScheduler+0xc6>
        }

        if( ulImplementedPrioBits == 8 )
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	2b08      	cmp	r3, #8
 8008932:	d103      	bne.n	800893c <xPortStartScheduler+0xf0>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8008934:	4b20      	ldr	r3, [pc, #128]	@ (80089b8 <xPortStartScheduler+0x16c>)
 8008936:	2200      	movs	r2, #0
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	e004      	b.n	8008946 <xPortStartScheduler+0xfa>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f1c3 0307 	rsb	r3, r3, #7
 8008942:	4a1d      	ldr	r2, [pc, #116]	@ (80089b8 <xPortStartScheduler+0x16c>)
 8008944:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008946:	4b1c      	ldr	r3, [pc, #112]	@ (80089b8 <xPortStartScheduler+0x16c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	021b      	lsls	r3, r3, #8
 800894c:	4a1a      	ldr	r2, [pc, #104]	@ (80089b8 <xPortStartScheduler+0x16c>)
 800894e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008950:	4b19      	ldr	r3, [pc, #100]	@ (80089b8 <xPortStartScheduler+0x16c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008958:	4a17      	ldr	r2, [pc, #92]	@ (80089b8 <xPortStartScheduler+0x16c>)
 800895a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	b2da      	uxtb	r2, r3
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008964:	4b15      	ldr	r3, [pc, #84]	@ (80089bc <xPortStartScheduler+0x170>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a14      	ldr	r2, [pc, #80]	@ (80089bc <xPortStartScheduler+0x170>)
 800896a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800896e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008970:	4b12      	ldr	r3, [pc, #72]	@ (80089bc <xPortStartScheduler+0x170>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a11      	ldr	r2, [pc, #68]	@ (80089bc <xPortStartScheduler+0x170>)
 8008976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800897a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800897c:	4b10      	ldr	r3, [pc, #64]	@ (80089c0 <xPortStartScheduler+0x174>)
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008982:	f000 f8cb 	bl	8008b1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008986:	4b0f      	ldr	r3, [pc, #60]	@ (80089c4 <xPortStartScheduler+0x178>)
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800898c:	f7ff ff4c 	bl	8008828 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008990:	f7fe ff68 	bl	8007864 <vTaskSwitchContext>
    prvTaskExitError();
 8008994:	f7ff ff04 	bl	80087a0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3728      	adds	r7, #40	@ 0x28
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	e000ed08 	.word	0xe000ed08
 80089a8:	08008801 	.word	0x08008801
 80089ac:	08008a81 	.word	0x08008a81
 80089b0:	e000e400 	.word	0xe000e400
 80089b4:	200015dc 	.word	0x200015dc
 80089b8:	200015e0 	.word	0x200015e0
 80089bc:	e000ed20 	.word	0xe000ed20
 80089c0:	e000ed1c 	.word	0xe000ed1c
 80089c4:	2000000c 	.word	0x2000000c

080089c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
    __asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	607b      	str	r3, [r7, #4]
}
 80089e0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80089e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008a20 <vPortEnterCritical+0x58>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3301      	adds	r3, #1
 80089e8:	4a0d      	ldr	r2, [pc, #52]	@ (8008a20 <vPortEnterCritical+0x58>)
 80089ea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80089ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008a20 <vPortEnterCritical+0x58>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d110      	bne.n	8008a16 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008a24 <vPortEnterCritical+0x5c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00b      	beq.n	8008a16 <vPortEnterCritical+0x4e>
    __asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	603b      	str	r3, [r7, #0]
}
 8008a10:	bf00      	nop
 8008a12:	bf00      	nop
 8008a14:	e7fd      	b.n	8008a12 <vPortEnterCritical+0x4a>
    }
}
 8008a16:	bf00      	nop
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bc80      	pop	{r7}
 8008a1e:	4770      	bx	lr
 8008a20:	2000000c 	.word	0x2000000c
 8008a24:	e000ed04 	.word	0xe000ed04

08008a28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008a2e:	4b12      	ldr	r3, [pc, #72]	@ (8008a78 <vPortExitCritical+0x50>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10b      	bne.n	8008a4e <vPortExitCritical+0x26>
    __asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	607b      	str	r3, [r7, #4]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a78 <vPortExitCritical+0x50>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3b01      	subs	r3, #1
 8008a54:	4a08      	ldr	r2, [pc, #32]	@ (8008a78 <vPortExitCritical+0x50>)
 8008a56:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008a58:	4b07      	ldr	r3, [pc, #28]	@ (8008a78 <vPortExitCritical+0x50>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d105      	bne.n	8008a6c <vPortExitCritical+0x44>
 8008a60:	2300      	movs	r3, #0
 8008a62:	603b      	str	r3, [r7, #0]
    __asm volatile
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	f383 8811 	msr	BASEPRI, r3
}
 8008a6a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bc80      	pop	{r7}
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	2000000c 	.word	0x2000000c
 8008a7c:	00000000 	.word	0x00000000

08008a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008a80:	f3ef 8009 	mrs	r0, PSP
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac0 <pxCurrentTCBConst>)
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a90:	6010      	str	r0, [r2, #0]
 8008a92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008a96:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008a9a:	f380 8811 	msr	BASEPRI, r0
 8008a9e:	f7fe fee1 	bl	8007864 <vTaskSwitchContext>
 8008aa2:	f04f 0000 	mov.w	r0, #0
 8008aa6:	f380 8811 	msr	BASEPRI, r0
 8008aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008aae:	6819      	ldr	r1, [r3, #0]
 8008ab0:	6808      	ldr	r0, [r1, #0]
 8008ab2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008ab6:	f380 8809 	msr	PSP, r0
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	4770      	bx	lr

08008ac0 <pxCurrentTCBConst>:
 8008ac0:	20000fb0 	.word	0x20000fb0
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop

08008ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
    __asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	607b      	str	r3, [r7, #4]
}
 8008ae0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8008ae2:	f001 fd8b 	bl	800a5fc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008ae6:	f7fe fd99 	bl	800761c <xTaskIncrementTick>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d006      	beq.n	8008afe <xPortSysTickHandler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8008af0:	f001 fde2 	bl	800a6b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008af4:	4b08      	ldr	r3, [pc, #32]	@ (8008b18 <xPortSysTickHandler+0x50>)
 8008af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	e001      	b.n	8008b02 <xPortSysTickHandler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8008afe:	f001 fdbf 	bl	800a680 <SEGGER_SYSVIEW_RecordExitISR>
 8008b02:	2300      	movs	r3, #0
 8008b04:	603b      	str	r3, [r7, #0]
    __asm volatile
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	f383 8811 	msr	BASEPRI, r3
}
 8008b0c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008b0e:	bf00      	nop
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b20:	4b0a      	ldr	r3, [pc, #40]	@ (8008b4c <vPortSetupTimerInterrupt+0x30>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b26:	4b0a      	ldr	r3, [pc, #40]	@ (8008b50 <vPortSetupTimerInterrupt+0x34>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b2c:	4b09      	ldr	r3, [pc, #36]	@ (8008b54 <vPortSetupTimerInterrupt+0x38>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a09      	ldr	r2, [pc, #36]	@ (8008b58 <vPortSetupTimerInterrupt+0x3c>)
 8008b32:	fba2 2303 	umull	r2, r3, r2, r3
 8008b36:	099b      	lsrs	r3, r3, #6
 8008b38:	4a08      	ldr	r2, [pc, #32]	@ (8008b5c <vPortSetupTimerInterrupt+0x40>)
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b3e:	4b03      	ldr	r3, [pc, #12]	@ (8008b4c <vPortSetupTimerInterrupt+0x30>)
 8008b40:	2207      	movs	r2, #7
 8008b42:	601a      	str	r2, [r3, #0]
}
 8008b44:	bf00      	nop
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr
 8008b4c:	e000e010 	.word	0xe000e010
 8008b50:	e000e018 	.word	0xe000e018
 8008b54:	20000000 	.word	0x20000000
 8008b58:	10624dd3 	.word	0x10624dd3
 8008b5c:	e000e014 	.word	0xe000e014

08008b60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008b66:	f3ef 8305 	mrs	r3, IPSR
 8008b6a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b0f      	cmp	r3, #15
 8008b70:	d915      	bls.n	8008b9e <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b72:	4a17      	ldr	r2, [pc, #92]	@ (8008bd0 <vPortValidateInterruptPriority+0x70>)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4413      	add	r3, r2
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b7c:	4b15      	ldr	r3, [pc, #84]	@ (8008bd4 <vPortValidateInterruptPriority+0x74>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	7afa      	ldrb	r2, [r7, #11]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d20b      	bcs.n	8008b9e <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	607b      	str	r3, [r7, #4]
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	e7fd      	b.n	8008b9a <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd8 <vPortValidateInterruptPriority+0x78>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bdc <vPortValidateInterruptPriority+0x7c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d90b      	bls.n	8008bc6 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	603b      	str	r3, [r7, #0]
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	e7fd      	b.n	8008bc2 <vPortValidateInterruptPriority+0x62>
    }
 8008bc6:	bf00      	nop
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bc80      	pop	{r7}
 8008bce:	4770      	bx	lr
 8008bd0:	e000e3f0 	.word	0xe000e3f0
 8008bd4:	200015dc 	.word	0x200015dc
 8008bd8:	e000ed0c 	.word	0xe000ed0c
 8008bdc:	200015e0 	.word	0x200015e0

08008be0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08e      	sub	sp, #56	@ 0x38
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008be8:	2300      	movs	r3, #0
 8008bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d022      	beq.n	8008c38 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8008bf2:	2308      	movs	r3, #8
 8008bf4:	43db      	mvns	r3, r3
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d81b      	bhi.n	8008c34 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8008bfc:	2208      	movs	r2, #8
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4413      	add	r3, r2
 8008c02:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d014      	beq.n	8008c38 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f003 0307 	and.w	r3, r3, #7
 8008c14:	f1c3 0308 	rsb	r3, r3, #8
 8008c18:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8008c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1c:	43db      	mvns	r3, r3
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d804      	bhi.n	8008c2e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c28:	4413      	add	r3, r2
 8008c2a:	607b      	str	r3, [r7, #4]
 8008c2c:	e004      	b.n	8008c38 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	607b      	str	r3, [r7, #4]
 8008c32:	e001      	b.n	8008c38 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8008c38:	f7fe fb9a 	bl	8007370 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008c3c:	4b7a      	ldr	r3, [pc, #488]	@ (8008e28 <pvPortMalloc+0x248>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8008c44:	f000 f974 	bl	8008f30 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f2c0 80d3 	blt.w	8008df6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 80cf 	beq.w	8008df6 <pvPortMalloc+0x216>
 8008c58:	4b74      	ldr	r3, [pc, #464]	@ (8008e2c <pvPortMalloc+0x24c>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	f200 80c9 	bhi.w	8008df6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008c64:	4b72      	ldr	r3, [pc, #456]	@ (8008e30 <pvPortMalloc+0x250>)
 8008c66:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8008c68:	4b71      	ldr	r3, [pc, #452]	@ (8008e30 <pvPortMalloc+0x250>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c70:	4a70      	ldr	r2, [pc, #448]	@ (8008e34 <pvPortMalloc+0x254>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d305      	bcc.n	8008c82 <pvPortMalloc+0xa2>
 8008c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c78:	4a6f      	ldr	r2, [pc, #444]	@ (8008e38 <pvPortMalloc+0x258>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d801      	bhi.n	8008c82 <pvPortMalloc+0xa2>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e000      	b.n	8008c84 <pvPortMalloc+0xa4>
 8008c82:	2300      	movs	r3, #0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d129      	bne.n	8008cdc <pvPortMalloc+0xfc>
    __asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	623b      	str	r3, [r7, #32]
}
 8008c9a:	bf00      	nop
 8008c9c:	bf00      	nop
 8008c9e:	e7fd      	b.n	8008c9c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8008ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8008caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cac:	4a61      	ldr	r2, [pc, #388]	@ (8008e34 <pvPortMalloc+0x254>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d305      	bcc.n	8008cbe <pvPortMalloc+0xde>
 8008cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb4:	4a60      	ldr	r2, [pc, #384]	@ (8008e38 <pvPortMalloc+0x258>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d801      	bhi.n	8008cbe <pvPortMalloc+0xde>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e000      	b.n	8008cc0 <pvPortMalloc+0xe0>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10b      	bne.n	8008cdc <pvPortMalloc+0xfc>
    __asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	61fb      	str	r3, [r7, #28]
}
 8008cd6:	bf00      	nop
 8008cd8:	bf00      	nop
 8008cda:	e7fd      	b.n	8008cd8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d903      	bls.n	8008cee <pvPortMalloc+0x10e>
 8008ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1d8      	bne.n	8008ca0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008cee:	4b4e      	ldr	r3, [pc, #312]	@ (8008e28 <pvPortMalloc+0x248>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d07e      	beq.n	8008df6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	4413      	add	r3, r2
 8008d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8008d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d04:	4a4b      	ldr	r2, [pc, #300]	@ (8008e34 <pvPortMalloc+0x254>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d305      	bcc.n	8008d16 <pvPortMalloc+0x136>
 8008d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0c:	4a4a      	ldr	r2, [pc, #296]	@ (8008e38 <pvPortMalloc+0x258>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d801      	bhi.n	8008d16 <pvPortMalloc+0x136>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e000      	b.n	8008d18 <pvPortMalloc+0x138>
 8008d16:	2300      	movs	r3, #0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10b      	bne.n	8008d34 <pvPortMalloc+0x154>
    __asm volatile
 8008d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	61bb      	str	r3, [r7, #24]
}
 8008d2e:	bf00      	nop
 8008d30:	bf00      	nop
 8008d32:	e7fd      	b.n	8008d30 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8008d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d90b      	bls.n	8008d5e <pvPortMalloc+0x17e>
    __asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	617b      	str	r3, [r7, #20]
}
 8008d58:	bf00      	nop
 8008d5a:	bf00      	nop
 8008d5c:	e7fd      	b.n	8008d5a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	1ad2      	subs	r2, r2, r3
 8008d66:	2308      	movs	r3, #8
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d924      	bls.n	8008db8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4413      	add	r3, r2
 8008d74:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	f003 0307 	and.w	r3, r3, #7
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00b      	beq.n	8008d98 <pvPortMalloc+0x1b8>
    __asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	613b      	str	r3, [r7, #16]
}
 8008d92:	bf00      	nop
 8008d94:	bf00      	nop
 8008d96:	e7fd      	b.n	8008d94 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	1ad2      	subs	r2, r2, r3
 8008da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8008daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8008db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008db6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008db8:	4b1c      	ldr	r3, [pc, #112]	@ (8008e2c <pvPortMalloc+0x24c>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8008e2c <pvPortMalloc+0x24c>)
 8008dc4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dc6:	4b19      	ldr	r3, [pc, #100]	@ (8008e2c <pvPortMalloc+0x24c>)
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	4b1c      	ldr	r3, [pc, #112]	@ (8008e3c <pvPortMalloc+0x25c>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d203      	bcs.n	8008dda <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dd2:	4b16      	ldr	r3, [pc, #88]	@ (8008e2c <pvPortMalloc+0x24c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a19      	ldr	r2, [pc, #100]	@ (8008e3c <pvPortMalloc+0x25c>)
 8008dd8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008dec:	4b14      	ldr	r3, [pc, #80]	@ (8008e40 <pvPortMalloc+0x260>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3301      	adds	r3, #1
 8008df2:	4a13      	ldr	r2, [pc, #76]	@ (8008e40 <pvPortMalloc+0x260>)
 8008df4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008df6:	f7fe fac9 	bl	800738c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfc:	f003 0307 	and.w	r3, r3, #7
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00b      	beq.n	8008e1c <pvPortMalloc+0x23c>
    __asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	60fb      	str	r3, [r7, #12]
}
 8008e16:	bf00      	nop
 8008e18:	bf00      	nop
 8008e1a:	e7fd      	b.n	8008e18 <pvPortMalloc+0x238>
    return pvReturn;
 8008e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3738      	adds	r7, #56	@ 0x38
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20003cfc 	.word	0x20003cfc
 8008e2c:	20003d00 	.word	0x20003d00
 8008e30:	20003cf4 	.word	0x20003cf4
 8008e34:	200015e4 	.word	0x200015e4
 8008e38:	20003cf3 	.word	0x20003cf3
 8008e3c:	20003d04 	.word	0x20003d04
 8008e40:	20003d08 	.word	0x20003d08

08008e44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d060      	beq.n	8008f18 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008e56:	2308      	movs	r3, #8
 8008e58:	425b      	negs	r3, r3
 8008e5a:	69fa      	ldr	r2, [r7, #28]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	4a2e      	ldr	r2, [pc, #184]	@ (8008f20 <vPortFree+0xdc>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d305      	bcc.n	8008e78 <vPortFree+0x34>
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	4a2d      	ldr	r2, [pc, #180]	@ (8008f24 <vPortFree+0xe0>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d801      	bhi.n	8008e78 <vPortFree+0x34>
 8008e74:	2301      	movs	r3, #1
 8008e76:	e000      	b.n	8008e7a <vPortFree+0x36>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10b      	bne.n	8008e96 <vPortFree+0x52>
    __asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	617b      	str	r3, [r7, #20]
}
 8008e90:	bf00      	nop
 8008e92:	bf00      	nop
 8008e94:	e7fd      	b.n	8008e92 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	db0b      	blt.n	8008eb6 <vPortFree+0x72>
    __asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	613b      	str	r3, [r7, #16]
}
 8008eb0:	bf00      	nop
 8008eb2:	bf00      	nop
 8008eb4:	e7fd      	b.n	8008eb2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00b      	beq.n	8008ed6 <vPortFree+0x92>
    __asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	60fb      	str	r3, [r7, #12]
}
 8008ed0:	bf00      	nop
 8008ed2:	bf00      	nop
 8008ed4:	e7fd      	b.n	8008ed2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	da1c      	bge.n	8008f18 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d118      	bne.n	8008f18 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8008ef2:	f7fe fa3d 	bl	8007370 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	4b0b      	ldr	r3, [pc, #44]	@ (8008f28 <vPortFree+0xe4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4413      	add	r3, r2
 8008f00:	4a09      	ldr	r2, [pc, #36]	@ (8008f28 <vPortFree+0xe4>)
 8008f02:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f04:	69b8      	ldr	r0, [r7, #24]
 8008f06:	f000 f86d 	bl	8008fe4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008f0a:	4b08      	ldr	r3, [pc, #32]	@ (8008f2c <vPortFree+0xe8>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	4a06      	ldr	r2, [pc, #24]	@ (8008f2c <vPortFree+0xe8>)
 8008f12:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008f14:	f7fe fa3a 	bl	800738c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008f18:	bf00      	nop
 8008f1a:	3720      	adds	r7, #32
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	200015e4 	.word	0x200015e4
 8008f24:	20003cf3 	.word	0x20003cf3
 8008f28:	20003d00 	.word	0x20003d00
 8008f2c:	20003d0c 	.word	0x20003d0c

08008f30 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f36:	f242 7310 	movw	r3, #10000	@ 0x2710
 8008f3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008f3c:	4b24      	ldr	r3, [pc, #144]	@ (8008fd0 <prvHeapInit+0xa0>)
 8008f3e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00c      	beq.n	8008f64 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3307      	adds	r3, #7
 8008f4e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f023 0307 	bic.w	r3, r3, #7
 8008f56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8008fd0 <prvHeapInit+0xa0>)
 8008f60:	4413      	add	r3, r2
 8008f62:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4a1b      	ldr	r2, [pc, #108]	@ (8008fd4 <prvHeapInit+0xa4>)
 8008f68:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd4 <prvHeapInit+0xa4>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	4413      	add	r3, r2
 8008f76:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8008f78:	2208      	movs	r2, #8
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	1a9b      	subs	r3, r3, r2
 8008f7e:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f023 0307 	bic.w	r3, r3, #7
 8008f86:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a13      	ldr	r2, [pc, #76]	@ (8008fd8 <prvHeapInit+0xa8>)
 8008f8c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008f8e:	4b12      	ldr	r3, [pc, #72]	@ (8008fd8 <prvHeapInit+0xa8>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2200      	movs	r2, #0
 8008f94:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8008f96:	4b10      	ldr	r3, [pc, #64]	@ (8008fd8 <prvHeapInit+0xa8>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	1ad2      	subs	r2, r2, r3
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8008fac:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd8 <prvHeapInit+0xa8>)
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	4a08      	ldr	r2, [pc, #32]	@ (8008fdc <prvHeapInit+0xac>)
 8008fba:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	4a07      	ldr	r2, [pc, #28]	@ (8008fe0 <prvHeapInit+0xb0>)
 8008fc2:	6013      	str	r3, [r2, #0]
}
 8008fc4:	bf00      	nop
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bc80      	pop	{r7}
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	200015e4 	.word	0x200015e4
 8008fd4:	20003cf4 	.word	0x20003cf4
 8008fd8:	20003cfc 	.word	0x20003cfc
 8008fdc:	20003d04 	.word	0x20003d04
 8008fe0:	20003d00 	.word	0x20003d00

08008fe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8008fec:	4b36      	ldr	r3, [pc, #216]	@ (80090c8 <prvInsertBlockIntoFreeList+0xe4>)
 8008fee:	617b      	str	r3, [r7, #20]
 8008ff0:	e002      	b.n	8008ff8 <prvInsertBlockIntoFreeList+0x14>
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	617b      	str	r3, [r7, #20]
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d8f7      	bhi.n	8008ff2 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	4a30      	ldr	r2, [pc, #192]	@ (80090c8 <prvInsertBlockIntoFreeList+0xe4>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d018      	beq.n	800903c <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	4a2f      	ldr	r2, [pc, #188]	@ (80090cc <prvInsertBlockIntoFreeList+0xe8>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d305      	bcc.n	800901e <prvInsertBlockIntoFreeList+0x3a>
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	4a2e      	ldr	r2, [pc, #184]	@ (80090d0 <prvInsertBlockIntoFreeList+0xec>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d801      	bhi.n	800901e <prvInsertBlockIntoFreeList+0x3a>
 800901a:	2301      	movs	r3, #1
 800901c:	e000      	b.n	8009020 <prvInsertBlockIntoFreeList+0x3c>
 800901e:	2300      	movs	r3, #0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10b      	bne.n	800903c <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	60fb      	str	r3, [r7, #12]
}
 8009036:	bf00      	nop
 8009038:	bf00      	nop
 800903a:	e7fd      	b.n	8009038 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	4413      	add	r3, r2
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	429a      	cmp	r2, r3
 800904c:	d108      	bne.n	8009060 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	441a      	add	r2, r3
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	441a      	add	r2, r3
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	429a      	cmp	r2, r3
 8009072:	d118      	bne.n	80090a6 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	4b16      	ldr	r3, [pc, #88]	@ (80090d4 <prvInsertBlockIntoFreeList+0xf0>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	429a      	cmp	r2, r3
 800907e:	d00d      	beq.n	800909c <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685a      	ldr	r2, [r3, #4]
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	441a      	add	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	e008      	b.n	80090ae <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800909c:	4b0d      	ldr	r3, [pc, #52]	@ (80090d4 <prvInsertBlockIntoFreeList+0xf0>)
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	601a      	str	r2, [r3, #0]
 80090a4:	e003      	b.n	80090ae <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d002      	beq.n	80090bc <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80090bc:	bf00      	nop
 80090be:	371c      	adds	r7, #28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	20003cf4 	.word	0x20003cf4
 80090cc:	200015e4 	.word	0x200015e4
 80090d0:	20003cf3 	.word	0x20003cf3
 80090d4:	20003cfc 	.word	0x20003cfc

080090d8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80090d8:	b580      	push	{r7, lr}
 80090da:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80090dc:	4803      	ldr	r0, [pc, #12]	@ (80090ec <_cbSendSystemDesc+0x14>)
 80090de:	f001 fa37 	bl	800a550 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80090e2:	4803      	ldr	r0, [pc, #12]	@ (80090f0 <_cbSendSystemDesc+0x18>)
 80090e4:	f001 fa34 	bl	800a550 <SEGGER_SYSVIEW_SendSysDesc>
}
 80090e8:	bf00      	nop
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	0800d6e4 	.word	0x0800d6e4
 80090f0:	0800d718 	.word	0x0800d718

080090f4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80090f8:	4b06      	ldr	r3, [pc, #24]	@ (8009114 <SEGGER_SYSVIEW_Conf+0x20>)
 80090fa:	6818      	ldr	r0, [r3, #0]
 80090fc:	4b05      	ldr	r3, [pc, #20]	@ (8009114 <SEGGER_SYSVIEW_Conf+0x20>)
 80090fe:	6819      	ldr	r1, [r3, #0]
 8009100:	4b05      	ldr	r3, [pc, #20]	@ (8009118 <SEGGER_SYSVIEW_Conf+0x24>)
 8009102:	4a06      	ldr	r2, [pc, #24]	@ (800911c <SEGGER_SYSVIEW_Conf+0x28>)
 8009104:	f000 feac 	bl	8009e60 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8009108:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 800910c:	f000 feec 	bl	8009ee8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8009110:	bf00      	nop
 8009112:	bd80      	pop	{r7, pc}
 8009114:	20000000 	.word	0x20000000
 8009118:	080090d9 	.word	0x080090d9
 800911c:	0800d82c 	.word	0x0800d82c

08009120 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8009120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009122:	b085      	sub	sp, #20
 8009124:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8009126:	2300      	movs	r3, #0
 8009128:	607b      	str	r3, [r7, #4]
 800912a:	e048      	b.n	80091be <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800912c:	4929      	ldr	r1, [pc, #164]	@ (80091d4 <_cbSendTaskList+0xb4>)
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	440b      	add	r3, r1
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe fe87 	bl	8007e50 <uxTaskGetStackHighWaterMark>
 8009142:	4601      	mov	r1, r0
 8009144:	4823      	ldr	r0, [pc, #140]	@ (80091d4 <_cbSendTaskList+0xb4>)
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4403      	add	r3, r0
 8009152:	3310      	adds	r3, #16
 8009154:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8009156:	491f      	ldr	r1, [pc, #124]	@ (80091d4 <_cbSendTaskList+0xb4>)
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	4613      	mov	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	440b      	add	r3, r1
 8009164:	6818      	ldr	r0, [r3, #0]
 8009166:	491b      	ldr	r1, [pc, #108]	@ (80091d4 <_cbSendTaskList+0xb4>)
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	4613      	mov	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	440b      	add	r3, r1
 8009174:	3304      	adds	r3, #4
 8009176:	6819      	ldr	r1, [r3, #0]
 8009178:	4c16      	ldr	r4, [pc, #88]	@ (80091d4 <_cbSendTaskList+0xb4>)
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	4613      	mov	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4423      	add	r3, r4
 8009186:	3308      	adds	r3, #8
 8009188:	681c      	ldr	r4, [r3, #0]
 800918a:	4d12      	ldr	r5, [pc, #72]	@ (80091d4 <_cbSendTaskList+0xb4>)
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	4613      	mov	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	442b      	add	r3, r5
 8009198:	330c      	adds	r3, #12
 800919a:	681d      	ldr	r5, [r3, #0]
 800919c:	4e0d      	ldr	r6, [pc, #52]	@ (80091d4 <_cbSendTaskList+0xb4>)
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	4613      	mov	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4433      	add	r3, r6
 80091aa:	3310      	adds	r3, #16
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	462b      	mov	r3, r5
 80091b2:	4622      	mov	r2, r4
 80091b4:	f000 f8be 	bl	8009334 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	3301      	adds	r3, #1
 80091bc:	607b      	str	r3, [r7, #4]
 80091be:	4b06      	ldr	r3, [pc, #24]	@ (80091d8 <_cbSendTaskList+0xb8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d3b1      	bcc.n	800912c <_cbSendTaskList+0xc>
  }
}
 80091c8:	bf00      	nop
 80091ca:	bf00      	nop
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20003d10 	.word	0x20003d10
 80091d8:	20003db0 	.word	0x20003db0

080091dc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80091dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80091e4:	f7fe f9f6 	bl	80075d4 <xTaskGetTickCountFromISR>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2200      	movs	r2, #0
 80091ec:	469a      	mov	sl, r3
 80091ee:	4693      	mov	fp, r2
 80091f0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80091f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	f04f 0a00 	mov.w	sl, #0
 8009200:	f04f 0b00 	mov.w	fp, #0
 8009204:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8009208:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800920c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8009210:	4652      	mov	r2, sl
 8009212:	465b      	mov	r3, fp
 8009214:	1a14      	subs	r4, r2, r0
 8009216:	eb63 0501 	sbc.w	r5, r3, r1
 800921a:	f04f 0200 	mov.w	r2, #0
 800921e:	f04f 0300 	mov.w	r3, #0
 8009222:	00ab      	lsls	r3, r5, #2
 8009224:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009228:	00a2      	lsls	r2, r4, #2
 800922a:	4614      	mov	r4, r2
 800922c:	461d      	mov	r5, r3
 800922e:	eb14 0800 	adds.w	r8, r4, r0
 8009232:	eb45 0901 	adc.w	r9, r5, r1
 8009236:	f04f 0200 	mov.w	r2, #0
 800923a:	f04f 0300 	mov.w	r3, #0
 800923e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800924a:	4690      	mov	r8, r2
 800924c:	4699      	mov	r9, r3
 800924e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8009252:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8009256:	4610      	mov	r0, r2
 8009258:	4619      	mov	r1, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08009264 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af02      	add	r7, sp, #8
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
 8009270:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8009272:	2205      	movs	r2, #5
 8009274:	492b      	ldr	r1, [pc, #172]	@ (8009324 <SYSVIEW_AddTask+0xc0>)
 8009276:	68b8      	ldr	r0, [r7, #8]
 8009278:	f002 fad3 	bl	800b822 <memcmp>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d04b      	beq.n	800931a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8009282:	4b29      	ldr	r3, [pc, #164]	@ (8009328 <SYSVIEW_AddTask+0xc4>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b07      	cmp	r3, #7
 8009288:	d903      	bls.n	8009292 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800928a:	4828      	ldr	r0, [pc, #160]	@ (800932c <SYSVIEW_AddTask+0xc8>)
 800928c:	f001 fcfc 	bl	800ac88 <SEGGER_SYSVIEW_Warn>
    return;
 8009290:	e044      	b.n	800931c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8009292:	4b25      	ldr	r3, [pc, #148]	@ (8009328 <SYSVIEW_AddTask+0xc4>)
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	4926      	ldr	r1, [pc, #152]	@ (8009330 <SYSVIEW_AddTask+0xcc>)
 8009298:	4613      	mov	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4413      	add	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	440b      	add	r3, r1
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80092a6:	4b20      	ldr	r3, [pc, #128]	@ (8009328 <SYSVIEW_AddTask+0xc4>)
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	4921      	ldr	r1, [pc, #132]	@ (8009330 <SYSVIEW_AddTask+0xcc>)
 80092ac:	4613      	mov	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	440b      	add	r3, r1
 80092b6:	3304      	adds	r3, #4
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80092bc:	4b1a      	ldr	r3, [pc, #104]	@ (8009328 <SYSVIEW_AddTask+0xc4>)
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	491b      	ldr	r1, [pc, #108]	@ (8009330 <SYSVIEW_AddTask+0xcc>)
 80092c2:	4613      	mov	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	440b      	add	r3, r1
 80092cc:	3308      	adds	r3, #8
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80092d2:	4b15      	ldr	r3, [pc, #84]	@ (8009328 <SYSVIEW_AddTask+0xc4>)
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	4916      	ldr	r1, [pc, #88]	@ (8009330 <SYSVIEW_AddTask+0xcc>)
 80092d8:	4613      	mov	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	330c      	adds	r3, #12
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80092e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009328 <SYSVIEW_AddTask+0xc4>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	4910      	ldr	r1, [pc, #64]	@ (8009330 <SYSVIEW_AddTask+0xcc>)
 80092ee:	4613      	mov	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	440b      	add	r3, r1
 80092f8:	3310      	adds	r3, #16
 80092fa:	69ba      	ldr	r2, [r7, #24]
 80092fc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80092fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009328 <SYSVIEW_AddTask+0xc4>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3301      	adds	r3, #1
 8009304:	4a08      	ldr	r2, [pc, #32]	@ (8009328 <SYSVIEW_AddTask+0xc4>)
 8009306:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	68b9      	ldr	r1, [r7, #8]
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 f80e 	bl	8009334 <SYSVIEW_SendTaskInfo>
 8009318:	e000      	b.n	800931c <SYSVIEW_AddTask+0xb8>
    return;
 800931a:	bf00      	nop

}
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	0800d728 	.word	0x0800d728
 8009328:	20003db0 	.word	0x20003db0
 800932c:	0800d730 	.word	0x0800d730
 8009330:	20003d10 	.word	0x20003d10

08009334 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8009334:	b580      	push	{r7, lr}
 8009336:	b08a      	sub	sp, #40	@ 0x28
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
 8009340:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8009342:	f107 0310 	add.w	r3, r7, #16
 8009346:	2218      	movs	r2, #24
 8009348:	2100      	movs	r1, #0
 800934a:	4618      	mov	r0, r3
 800934c:	f002 fa79 	bl	800b842 <memset>
  TaskInfo.TaskID     = TaskID;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8009360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009362:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8009364:	f107 0310 	add.w	r3, r7, #16
 8009368:	4618      	mov	r0, r3
 800936a:	f000 fff9 	bl	800a360 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800936e:	bf00      	nop
 8009370:	3728      	adds	r7, #40	@ 0x28
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800937e:	4b25      	ldr	r3, [pc, #148]	@ (8009414 <_DoInit+0x9c>)
 8009380:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8009382:	22a8      	movs	r2, #168	@ 0xa8
 8009384:	2100      	movs	r1, #0
 8009386:	6838      	ldr	r0, [r7, #0]
 8009388:	f002 fa5b 	bl	800b842 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2203      	movs	r2, #3
 8009390:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2203      	movs	r2, #3
 8009396:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	4a1f      	ldr	r2, [pc, #124]	@ (8009418 <_DoInit+0xa0>)
 800939c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	4a1e      	ldr	r2, [pc, #120]	@ (800941c <_DoInit+0xa4>)
 80093a2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80093aa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2200      	movs	r2, #0
 80093b0:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2200      	movs	r2, #0
 80093b6:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	2200      	movs	r2, #0
 80093bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	4a15      	ldr	r2, [pc, #84]	@ (8009418 <_DoInit+0xa0>)
 80093c2:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	4a16      	ldr	r2, [pc, #88]	@ (8009420 <_DoInit+0xa8>)
 80093c8:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	2210      	movs	r2, #16
 80093ce:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2200      	movs	r2, #0
 80093d4:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2200      	movs	r2, #0
 80093da:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2200      	movs	r2, #0
 80093e0:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80093e2:	2300      	movs	r3, #0
 80093e4:	607b      	str	r3, [r7, #4]
 80093e6:	e00c      	b.n	8009402 <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f1c3 030f 	rsb	r3, r3, #15
 80093ee:	4a0d      	ldr	r2, [pc, #52]	@ (8009424 <_DoInit+0xac>)
 80093f0:	5cd1      	ldrb	r1, [r2, r3]
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4413      	add	r3, r2
 80093f8:	460a      	mov	r2, r1
 80093fa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	3301      	adds	r3, #1
 8009400:	607b      	str	r3, [r7, #4]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b0f      	cmp	r3, #15
 8009406:	d9ef      	bls.n	80093e8 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8009408:	bf00      	nop
 800940a:	bf00      	nop
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20003db4 	.word	0x20003db4
 8009418:	0800d780 	.word	0x0800d780
 800941c:	20003e5c 	.word	0x20003e5c
 8009420:	2000425c 	.word	0x2000425c
 8009424:	0800d834 	.word	0x0800d834

08009428 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8009428:	b580      	push	{r7, lr}
 800942a:	b08a      	sub	sp, #40	@ 0x28
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8009434:	2300      	movs	r3, #0
 8009436:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8009444:	69ba      	ldr	r2, [r7, #24]
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	429a      	cmp	r2, r3
 800944a:	d905      	bls.n	8009458 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800944c:	69ba      	ldr	r2, [r7, #24]
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	3b01      	subs	r3, #1
 8009454:	627b      	str	r3, [r7, #36]	@ 0x24
 8009456:	e007      	b.n	8009468 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	69b9      	ldr	r1, [r7, #24]
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	1acb      	subs	r3, r1, r3
 8009462:	4413      	add	r3, r2
 8009464:	3b01      	subs	r3, #1
 8009466:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009472:	4293      	cmp	r3, r2
 8009474:	bf28      	it	cs
 8009476:	4613      	movcs	r3, r2
 8009478:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800947a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4293      	cmp	r3, r2
 8009480:	bf28      	it	cs
 8009482:	4613      	movcs	r3, r2
 8009484:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	4413      	add	r3, r2
 800948e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8009490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009492:	68b9      	ldr	r1, [r7, #8]
 8009494:	6978      	ldr	r0, [r7, #20]
 8009496:	f002 fa50 	bl	800b93a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800949a:	6a3a      	ldr	r2, [r7, #32]
 800949c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949e:	4413      	add	r3, r2
 80094a0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a6:	4413      	add	r3, r2
 80094a8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80094b2:	69fa      	ldr	r2, [r7, #28]
 80094b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b6:	4413      	add	r3, r2
 80094b8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	69fa      	ldr	r2, [r7, #28]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d101      	bne.n	80094c8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80094c4:	2300      	movs	r3, #0
 80094c6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	69fa      	ldr	r2, [r7, #28]
 80094cc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1b4      	bne.n	800943e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80094d4:	6a3b      	ldr	r3, [r7, #32]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3728      	adds	r7, #40	@ 0x28
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80094de:	b580      	push	{r7, lr}
 80094e0:	b088      	sub	sp, #32
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	60b9      	str	r1, [r7, #8]
 80094e8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	689a      	ldr	r2, [r3, #8]
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80094fa:	69ba      	ldr	r2, [r7, #24]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d90f      	bls.n	8009522 <_WriteNoCheck+0x44>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	4413      	add	r3, r2
 800950a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	68b9      	ldr	r1, [r7, #8]
 8009510:	6938      	ldr	r0, [r7, #16]
 8009512:	f002 fa12 	bl	800b93a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 8009516:	69fa      	ldr	r2, [r7, #28]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	441a      	add	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8009520:	e01d      	b.n	800955e <_WriteNoCheck+0x80>
    NumBytesAtOnce = Rem;
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	685a      	ldr	r2, [r3, #4]
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	4413      	add	r3, r2
 800952e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	68b9      	ldr	r1, [r7, #8]
 8009534:	6938      	ldr	r0, [r7, #16]
 8009536:	f002 fa00 	bl	800b93a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	4413      	add	r3, r2
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4619      	mov	r1, r3
 8009552:	6938      	ldr	r0, [r7, #16]
 8009554:	f002 f9f1 	bl	800b93a <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	60da      	str	r2, [r3, #12]
}
 800955e:	bf00      	nop
 8009560:	3720      	adds	r7, #32
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8009566:	b480      	push	{r7}
 8009568:	b087      	sub	sp, #28
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	429a      	cmp	r2, r3
 8009580:	d808      	bhi.n	8009594 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	1ad2      	subs	r2, r2, r3
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	4413      	add	r3, r2
 800958e:	3b01      	subs	r3, #1
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	e004      	b.n	800959e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	3b01      	subs	r3, #1
 800959c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800959e:	697b      	ldr	r3, [r7, #20]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	371c      	adds	r7, #28
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bc80      	pop	{r7}
 80095a8:	4770      	bx	lr
	...

080095ac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08c      	sub	sp, #48	@ 0x30
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80095b8:	4b3e      	ldr	r3, [pc, #248]	@ (80096b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80095ba:	623b      	str	r3, [r7, #32]
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b53      	cmp	r3, #83	@ 0x53
 80095c4:	d001      	beq.n	80095ca <SEGGER_RTT_ReadNoLock+0x1e>
 80095c6:	f7ff fed7 	bl	8009378 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	4613      	mov	r3, r2
 80095ce:	005b      	lsls	r3, r3, #1
 80095d0:	4413      	add	r3, r2
 80095d2:	00db      	lsls	r3, r3, #3
 80095d4:	3360      	adds	r3, #96	@ 0x60
 80095d6:	4a37      	ldr	r2, [pc, #220]	@ (80096b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80095d8:	4413      	add	r3, r2
 80095da:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80095ec:	2300      	movs	r3, #0
 80095ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80095f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d92b      	bls.n	8009650 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4293      	cmp	r3, r2
 8009608:	bf28      	it	cs
 800960a:	4613      	movcs	r3, r2
 800960c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009614:	4413      	add	r3, r2
 8009616:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	6939      	ldr	r1, [r7, #16]
 800961c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800961e:	f002 f98c 	bl	800b93a <memcpy>
    NumBytesRead += NumBytesRem;
 8009622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	4413      	add	r3, r2
 8009628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800962a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	4413      	add	r3, r2
 8009630:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800963a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	4413      	add	r3, r2
 8009640:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009648:	429a      	cmp	r2, r3
 800964a:	d101      	bne.n	8009650 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800964c:	2300      	movs	r3, #0
 800964e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8009650:	69ba      	ldr	r2, [r7, #24]
 8009652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4293      	cmp	r3, r2
 800965e:	bf28      	it	cs
 8009660:	4613      	movcs	r3, r2
 8009662:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d019      	beq.n	800969e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009670:	4413      	add	r3, r2
 8009672:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	6939      	ldr	r1, [r7, #16]
 8009678:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800967a:	f002 f95e 	bl	800b93a <memcpy>
    NumBytesRead += NumBytesRem;
 800967e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	4413      	add	r3, r2
 8009684:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8009686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	4413      	add	r3, r2
 800968c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8009696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	4413      	add	r3, r2
 800969c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800969e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096a8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80096aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3730      	adds	r7, #48	@ 0x30
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	20003db4 	.word	0x20003db4

080096b8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	4613      	mov	r3, r2
 80096ce:	005b      	lsls	r3, r3, #1
 80096d0:	4413      	add	r3, r2
 80096d2:	00db      	lsls	r3, r3, #3
 80096d4:	4a1f      	ldr	r2, [pc, #124]	@ (8009754 <SEGGER_RTT_WriteNoLock+0x9c>)
 80096d6:	4413      	add	r3, r2
 80096d8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d029      	beq.n	8009736 <SEGGER_RTT_WriteNoLock+0x7e>
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d82e      	bhi.n	8009744 <SEGGER_RTT_WriteNoLock+0x8c>
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d002      	beq.n	80096f0 <SEGGER_RTT_WriteNoLock+0x38>
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d013      	beq.n	8009716 <SEGGER_RTT_WriteNoLock+0x5e>
 80096ee:	e029      	b.n	8009744 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80096f0:	6978      	ldr	r0, [r7, #20]
 80096f2:	f7ff ff38 	bl	8009566 <_GetAvailWriteSpace>
 80096f6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d202      	bcs.n	8009706 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8009700:	2300      	movs	r3, #0
 8009702:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8009704:	e021      	b.n	800974a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	69b9      	ldr	r1, [r7, #24]
 800970e:	6978      	ldr	r0, [r7, #20]
 8009710:	f7ff fee5 	bl	80094de <_WriteNoCheck>
    break;
 8009714:	e019      	b.n	800974a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009716:	6978      	ldr	r0, [r7, #20]
 8009718:	f7ff ff25 	bl	8009566 <_GetAvailWriteSpace>
 800971c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	4293      	cmp	r3, r2
 8009724:	bf28      	it	cs
 8009726:	4613      	movcs	r3, r2
 8009728:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	69b9      	ldr	r1, [r7, #24]
 800972e:	6978      	ldr	r0, [r7, #20]
 8009730:	f7ff fed5 	bl	80094de <_WriteNoCheck>
    break;
 8009734:	e009      	b.n	800974a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	69b9      	ldr	r1, [r7, #24]
 800973a:	6978      	ldr	r0, [r7, #20]
 800973c:	f7ff fe74 	bl	8009428 <_WriteBlocking>
 8009740:	61f8      	str	r0, [r7, #28]
    break;
 8009742:	e002      	b.n	800974a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8009744:	2300      	movs	r3, #0
 8009746:	61fb      	str	r3, [r7, #28]
    break;
 8009748:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800974a:	69fb      	ldr	r3, [r7, #28]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3720      	adds	r7, #32
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	20003db4 	.word	0x20003db4

08009758 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009758:	b580      	push	{r7, lr}
 800975a:	b088      	sub	sp, #32
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8009764:	4b0e      	ldr	r3, [pc, #56]	@ (80097a0 <SEGGER_RTT_Write+0x48>)
 8009766:	61fb      	str	r3, [r7, #28]
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b53      	cmp	r3, #83	@ 0x53
 8009770:	d001      	beq.n	8009776 <SEGGER_RTT_Write+0x1e>
 8009772:	f7ff fe01 	bl	8009378 <_DoInit>
  SEGGER_RTT_LOCK();
 8009776:	f3ef 8311 	mrs	r3, BASEPRI
 800977a:	f04f 0120 	mov.w	r1, #32
 800977e:	f381 8811 	msr	BASEPRI, r1
 8009782:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	68b9      	ldr	r1, [r7, #8]
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f7ff ff95 	bl	80096b8 <SEGGER_RTT_WriteNoLock>
 800978e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8009796:	697b      	ldr	r3, [r7, #20]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3720      	adds	r7, #32
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	20003db4 	.word	0x20003db4

080097a4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b088      	sub	sp, #32
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80097b2:	4b3c      	ldr	r3, [pc, #240]	@ (80098a4 <SEGGER_RTT_AllocUpBuffer+0x100>)
 80097b4:	61bb      	str	r3, [r7, #24]
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b53      	cmp	r3, #83	@ 0x53
 80097be:	d001      	beq.n	80097c4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80097c0:	f7ff fdda 	bl	8009378 <_DoInit>
  SEGGER_RTT_LOCK();
 80097c4:	f3ef 8311 	mrs	r3, BASEPRI
 80097c8:	f04f 0120 	mov.w	r1, #32
 80097cc:	f381 8811 	msr	BASEPRI, r1
 80097d0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80097d2:	4b34      	ldr	r3, [pc, #208]	@ (80098a4 <SEGGER_RTT_AllocUpBuffer+0x100>)
 80097d4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80097d6:	2300      	movs	r3, #0
 80097d8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80097da:	6939      	ldr	r1, [r7, #16]
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	4613      	mov	r3, r2
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	4413      	add	r3, r2
 80097e6:	00db      	lsls	r3, r3, #3
 80097e8:	440b      	add	r3, r1
 80097ea:	3304      	adds	r3, #4
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d008      	beq.n	8009804 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	3301      	adds	r3, #1
 80097f6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	69fa      	ldr	r2, [r7, #28]
 80097fe:	429a      	cmp	r2, r3
 8009800:	dbeb      	blt.n	80097da <SEGGER_RTT_AllocUpBuffer+0x36>
 8009802:	e000      	b.n	8009806 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8009804:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	69fa      	ldr	r2, [r7, #28]
 800980c:	429a      	cmp	r2, r3
 800980e:	da3d      	bge.n	800988c <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8009810:	6939      	ldr	r1, [r7, #16]
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	1c5a      	adds	r2, r3, #1
 8009816:	4613      	mov	r3, r2
 8009818:	005b      	lsls	r3, r3, #1
 800981a:	4413      	add	r3, r2
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	440b      	add	r3, r1
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8009824:	6939      	ldr	r1, [r7, #16]
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	4613      	mov	r3, r2
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	4413      	add	r3, r2
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	440b      	add	r3, r1
 8009834:	3304      	adds	r3, #4
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800983a:	6939      	ldr	r1, [r7, #16]
 800983c:	69fa      	ldr	r2, [r7, #28]
 800983e:	4613      	mov	r3, r2
 8009840:	005b      	lsls	r3, r3, #1
 8009842:	4413      	add	r3, r2
 8009844:	00db      	lsls	r3, r3, #3
 8009846:	440b      	add	r3, r1
 8009848:	3320      	adds	r3, #32
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800984e:	6939      	ldr	r1, [r7, #16]
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	4613      	mov	r3, r2
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	4413      	add	r3, r2
 8009858:	00db      	lsls	r3, r3, #3
 800985a:	440b      	add	r3, r1
 800985c:	3328      	adds	r3, #40	@ 0x28
 800985e:	2200      	movs	r2, #0
 8009860:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8009862:	6939      	ldr	r1, [r7, #16]
 8009864:	69fa      	ldr	r2, [r7, #28]
 8009866:	4613      	mov	r3, r2
 8009868:	005b      	lsls	r3, r3, #1
 800986a:	4413      	add	r3, r2
 800986c:	00db      	lsls	r3, r3, #3
 800986e:	440b      	add	r3, r1
 8009870:	3324      	adds	r3, #36	@ 0x24
 8009872:	2200      	movs	r2, #0
 8009874:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8009876:	6939      	ldr	r1, [r7, #16]
 8009878:	69fa      	ldr	r2, [r7, #28]
 800987a:	4613      	mov	r3, r2
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	4413      	add	r3, r2
 8009880:	00db      	lsls	r3, r3, #3
 8009882:	440b      	add	r3, r1
 8009884:	332c      	adds	r3, #44	@ 0x2c
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	e002      	b.n	8009892 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 800988c:	f04f 33ff 	mov.w	r3, #4294967295
 8009890:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8009898:	69fb      	ldr	r3, [r7, #28]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3720      	adds	r7, #32
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20003db4 	.word	0x20003db4

080098a8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08a      	sub	sp, #40	@ 0x28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80098b6:	4b20      	ldr	r3, [pc, #128]	@ (8009938 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 80098b8:	623b      	str	r3, [r7, #32]
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b53      	cmp	r3, #83	@ 0x53
 80098c2:	d001      	beq.n	80098c8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80098c4:	f7ff fd58 	bl	8009378 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80098c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009938 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 80098ca:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d82a      	bhi.n	8009928 <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 80098d2:	f3ef 8311 	mrs	r3, BASEPRI
 80098d6:	f04f 0120 	mov.w	r1, #32
 80098da:	f381 8811 	msr	BASEPRI, r1
 80098de:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	4613      	mov	r3, r2
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	4413      	add	r3, r2
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	3360      	adds	r3, #96	@ 0x60
 80098ec:	69fa      	ldr	r2, [r7, #28]
 80098ee:	4413      	add	r3, r2
 80098f0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00e      	beq.n	8009916 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2200      	movs	r2, #0
 800990e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	2200      	movs	r2, #0
 8009914:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800991a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8009922:	2300      	movs	r3, #0
 8009924:	627b      	str	r3, [r7, #36]	@ 0x24
 8009926:	e002      	b.n	800992e <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 8009928:	f04f 33ff 	mov.w	r3, #4294967295
 800992c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800992e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009930:	4618      	mov	r0, r3
 8009932:	3728      	adds	r7, #40	@ 0x28
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	20003db4 	.word	0x20003db4

0800993c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800993c:	b480      	push	{r7}
 800993e:	b087      	sub	sp, #28
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d105      	bne.n	800995a <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	60fa      	str	r2, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	701a      	strb	r2, [r3, #0]
 8009958:	e022      	b.n	80099a0 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	1c5a      	adds	r2, r3, #1
 8009962:	60fa      	str	r2, [r7, #12]
 8009964:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b80      	cmp	r3, #128	@ 0x80
 800996a:	d90a      	bls.n	8009982 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800996c:	2380      	movs	r3, #128	@ 0x80
 800996e:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8009970:	e007      	b.n	8009982 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	1c53      	adds	r3, r2, #1
 8009976:	60bb      	str	r3, [r7, #8]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	1c59      	adds	r1, r3, #1
 800997c:	60f9      	str	r1, [r7, #12]
 800997e:	7812      	ldrb	r2, [r2, #0]
 8009980:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	1e5a      	subs	r2, r3, #1
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <_EncodeStr+0x58>
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1ee      	bne.n	8009972 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	b2da      	uxtb	r2, r3
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80099a0:	68fb      	ldr	r3, [r7, #12]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	371c      	adds	r7, #28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bc80      	pop	{r7}
 80099aa:	4770      	bx	lr

080099ac <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3307      	adds	r3, #7
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	bc80      	pop	{r7}
 80099c0:	4770      	bx	lr
	...

080099c4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80099ca:	4b34      	ldr	r3, [pc, #208]	@ (8009a9c <_HandleIncomingPacket+0xd8>)
 80099cc:	7e1b      	ldrb	r3, [r3, #24]
 80099ce:	4618      	mov	r0, r3
 80099d0:	1cfb      	adds	r3, r7, #3
 80099d2:	2201      	movs	r2, #1
 80099d4:	4619      	mov	r1, r3
 80099d6:	f7ff fde9 	bl	80095ac <SEGGER_RTT_ReadNoLock>
 80099da:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d057      	beq.n	8009a92 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80099e2:	78fb      	ldrb	r3, [r7, #3]
 80099e4:	2b80      	cmp	r3, #128	@ 0x80
 80099e6:	d031      	beq.n	8009a4c <_HandleIncomingPacket+0x88>
 80099e8:	2b80      	cmp	r3, #128	@ 0x80
 80099ea:	dc40      	bgt.n	8009a6e <_HandleIncomingPacket+0xaa>
 80099ec:	2b07      	cmp	r3, #7
 80099ee:	dc15      	bgt.n	8009a1c <_HandleIncomingPacket+0x58>
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	dd3c      	ble.n	8009a6e <_HandleIncomingPacket+0xaa>
 80099f4:	3b01      	subs	r3, #1
 80099f6:	2b06      	cmp	r3, #6
 80099f8:	d839      	bhi.n	8009a6e <_HandleIncomingPacket+0xaa>
 80099fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009a00 <_HandleIncomingPacket+0x3c>)
 80099fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a00:	08009a23 	.word	0x08009a23
 8009a04:	08009a29 	.word	0x08009a29
 8009a08:	08009a2f 	.word	0x08009a2f
 8009a0c:	08009a35 	.word	0x08009a35
 8009a10:	08009a3b 	.word	0x08009a3b
 8009a14:	08009a41 	.word	0x08009a41
 8009a18:	08009a47 	.word	0x08009a47
 8009a1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a1e:	d033      	beq.n	8009a88 <_HandleIncomingPacket+0xc4>
 8009a20:	e025      	b.n	8009a6e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8009a22:	f000 fb23 	bl	800a06c <SEGGER_SYSVIEW_Start>
      break;
 8009a26:	e034      	b.n	8009a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8009a28:	f000 fbda 	bl	800a1e0 <SEGGER_SYSVIEW_Stop>
      break;
 8009a2c:	e031      	b.n	8009a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8009a2e:	f000 fdb3 	bl	800a598 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8009a32:	e02e      	b.n	8009a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8009a34:	f000 fd78 	bl	800a528 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8009a38:	e02b      	b.n	8009a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8009a3a:	f000 fbf7 	bl	800a22c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8009a3e:	e028      	b.n	8009a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8009a40:	f001 f8e4 	bl	800ac0c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8009a44:	e025      	b.n	8009a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8009a46:	f001 f8c3 	bl	800abd0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8009a4a:	e022      	b.n	8009a92 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009a4c:	4b13      	ldr	r3, [pc, #76]	@ (8009a9c <_HandleIncomingPacket+0xd8>)
 8009a4e:	7e1b      	ldrb	r3, [r3, #24]
 8009a50:	4618      	mov	r0, r3
 8009a52:	1cfb      	adds	r3, r7, #3
 8009a54:	2201      	movs	r2, #1
 8009a56:	4619      	mov	r1, r3
 8009a58:	f7ff fda8 	bl	80095ac <SEGGER_RTT_ReadNoLock>
 8009a5c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d013      	beq.n	8009a8c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f001 f828 	bl	800aabc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8009a6c:	e00e      	b.n	8009a8c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8009a6e:	78fb      	ldrb	r3, [r7, #3]
 8009a70:	b25b      	sxtb	r3, r3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	da0c      	bge.n	8009a90 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009a76:	4b09      	ldr	r3, [pc, #36]	@ (8009a9c <_HandleIncomingPacket+0xd8>)
 8009a78:	7e1b      	ldrb	r3, [r3, #24]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	1cfb      	adds	r3, r7, #3
 8009a7e:	2201      	movs	r2, #1
 8009a80:	4619      	mov	r1, r3
 8009a82:	f7ff fd93 	bl	80095ac <SEGGER_RTT_ReadNoLock>
      }
      break;
 8009a86:	e003      	b.n	8009a90 <_HandleIncomingPacket+0xcc>
      break;
 8009a88:	bf00      	nop
 8009a8a:	e002      	b.n	8009a92 <_HandleIncomingPacket+0xce>
      break;
 8009a8c:	bf00      	nop
 8009a8e:	e000      	b.n	8009a92 <_HandleIncomingPacket+0xce>
      break;
 8009a90:	bf00      	nop
    }
  }
}
 8009a92:	bf00      	nop
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20004850 	.word	0x20004850

08009aa0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08c      	sub	sp, #48	@ 0x30
 8009aa4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8009aaa:	1d3b      	adds	r3, r7, #4
 8009aac:	3301      	adds	r3, #1
 8009aae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ab4:	4b31      	ldr	r3, [pc, #196]	@ (8009b7c <_TrySendOverflowPacket+0xdc>)
 8009ab6:	695b      	ldr	r3, [r3, #20]
 8009ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009aba:	e00b      	b.n	8009ad4 <_TrySendOverflowPacket+0x34>
 8009abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac2:	1c59      	adds	r1, r3, #1
 8009ac4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009ac6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009aca:	b2d2      	uxtb	r2, r2
 8009acc:	701a      	strb	r2, [r3, #0]
 8009ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad0:	09db      	lsrs	r3, r3, #7
 8009ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ad8:	d8f0      	bhi.n	8009abc <_TrySendOverflowPacket+0x1c>
 8009ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009adc:	1c5a      	adds	r2, r3, #1
 8009ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ae2:	b2d2      	uxtb	r2, r2
 8009ae4:	701a      	strb	r2, [r3, #0]
 8009ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009aea:	4b25      	ldr	r3, [pc, #148]	@ (8009b80 <_TrySendOverflowPacket+0xe0>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8009af0:	4b22      	ldr	r3, [pc, #136]	@ (8009b7c <_TrySendOverflowPacket+0xdc>)
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	69ba      	ldr	r2, [r7, #24]
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	623b      	str	r3, [r7, #32]
 8009b02:	e00b      	b.n	8009b1c <_TrySendOverflowPacket+0x7c>
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0a:	1c59      	adds	r1, r3, #1
 8009b0c:	6279      	str	r1, [r7, #36]	@ 0x24
 8009b0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009b12:	b2d2      	uxtb	r2, r2
 8009b14:	701a      	strb	r2, [r3, #0]
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	09db      	lsrs	r3, r3, #7
 8009b1a:	623b      	str	r3, [r7, #32]
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b20:	d8f0      	bhi.n	8009b04 <_TrySendOverflowPacket+0x64>
 8009b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	627a      	str	r2, [r7, #36]	@ 0x24
 8009b28:	6a3a      	ldr	r2, [r7, #32]
 8009b2a:	b2d2      	uxtb	r2, r2
 8009b2c:	701a      	strb	r2, [r3, #0]
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b30:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8009b32:	4b12      	ldr	r3, [pc, #72]	@ (8009b7c <_TrySendOverflowPacket+0xdc>)
 8009b34:	785b      	ldrb	r3, [r3, #1]
 8009b36:	4618      	mov	r0, r3
 8009b38:	1d3b      	adds	r3, r7, #4
 8009b3a:	69fa      	ldr	r2, [r7, #28]
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	461a      	mov	r2, r3
 8009b40:	1d3b      	adds	r3, r7, #4
 8009b42:	4619      	mov	r1, r3
 8009b44:	f7f6 fb04 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d009      	beq.n	8009b66 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8009b52:	4a0a      	ldr	r2, [pc, #40]	@ (8009b7c <_TrySendOverflowPacket+0xdc>)
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8009b58:	4b08      	ldr	r3, [pc, #32]	@ (8009b7c <_TrySendOverflowPacket+0xdc>)
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	4b06      	ldr	r3, [pc, #24]	@ (8009b7c <_TrySendOverflowPacket+0xdc>)
 8009b62:	701a      	strb	r2, [r3, #0]
 8009b64:	e004      	b.n	8009b70 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8009b66:	4b05      	ldr	r3, [pc, #20]	@ (8009b7c <_TrySendOverflowPacket+0xdc>)
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	4a03      	ldr	r2, [pc, #12]	@ (8009b7c <_TrySendOverflowPacket+0xdc>)
 8009b6e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8009b70:	693b      	ldr	r3, [r7, #16]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3730      	adds	r7, #48	@ 0x30
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20004850 	.word	0x20004850
 8009b80:	e0001004 	.word	0xe0001004

08009b84 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08a      	sub	sp, #40	@ 0x28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8009b90:	4b98      	ldr	r3, [pc, #608]	@ (8009df4 <_SendPacket+0x270>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d010      	beq.n	8009bba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8009b98:	4b96      	ldr	r3, [pc, #600]	@ (8009df4 <_SendPacket+0x270>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f000 812d 	beq.w	8009dfc <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8009ba2:	4b94      	ldr	r3, [pc, #592]	@ (8009df4 <_SendPacket+0x270>)
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d109      	bne.n	8009bbe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8009baa:	f7ff ff79 	bl	8009aa0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8009bae:	4b91      	ldr	r3, [pc, #580]	@ (8009df4 <_SendPacket+0x270>)
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	f040 8124 	bne.w	8009e00 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8009bb8:	e001      	b.n	8009bbe <_SendPacket+0x3a>
    goto Send;
 8009bba:	bf00      	nop
 8009bbc:	e000      	b.n	8009bc0 <_SendPacket+0x3c>
Send:
 8009bbe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b1f      	cmp	r3, #31
 8009bc4:	d809      	bhi.n	8009bda <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8009bc6:	4b8b      	ldr	r3, [pc, #556]	@ (8009df4 <_SendPacket+0x270>)
 8009bc8:	69da      	ldr	r2, [r3, #28]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f040 8115 	bne.w	8009e04 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b17      	cmp	r3, #23
 8009bde:	d807      	bhi.n	8009bf0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	60fb      	str	r3, [r7, #12]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	701a      	strb	r2, [r3, #0]
 8009bee:	e0c4      	b.n	8009d7a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8009bfc:	d912      	bls.n	8009c24 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	09da      	lsrs	r2, r3, #7
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	b2d2      	uxtb	r2, r2
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	3a01      	subs	r2, #1
 8009c16:	60fa      	str	r2, [r7, #12]
 8009c18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	701a      	strb	r2, [r3, #0]
 8009c22:	e006      	b.n	8009c32 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3b01      	subs	r3, #1
 8009c28:	60fb      	str	r3, [r7, #12]
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2b7e      	cmp	r3, #126	@ 0x7e
 8009c36:	d807      	bhi.n	8009c48 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	60fb      	str	r3, [r7, #12]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	701a      	strb	r2, [r3, #0]
 8009c46:	e098      	b.n	8009d7a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c4e:	d212      	bcs.n	8009c76 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	09da      	lsrs	r2, r3, #7
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	b2d2      	uxtb	r2, r2
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	3a01      	subs	r2, #1
 8009c68:	60fa      	str	r2, [r7, #12]
 8009c6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	701a      	strb	r2, [r3, #0]
 8009c74:	e081      	b.n	8009d7a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c7c:	d21d      	bcs.n	8009cba <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	0b9a      	lsrs	r2, r3, #14
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3b01      	subs	r3, #1
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	b2d2      	uxtb	r2, r2
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	09db      	lsrs	r3, r3, #7
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	3a01      	subs	r2, #1
 8009c98:	60fa      	str	r2, [r7, #12]
 8009c9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c9e:	b2da      	uxtb	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	3a01      	subs	r2, #1
 8009cac:	60fa      	str	r2, [r7, #12]
 8009cae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009cb2:	b2da      	uxtb	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	701a      	strb	r2, [r3, #0]
 8009cb8:	e05f      	b.n	8009d7a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cc0:	d228      	bcs.n	8009d14 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	0d5a      	lsrs	r2, r3, #21
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	b2d2      	uxtb	r2, r2
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	0b9b      	lsrs	r3, r3, #14
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	3a01      	subs	r2, #1
 8009cdc:	60fa      	str	r2, [r7, #12]
 8009cde:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	09db      	lsrs	r3, r3, #7
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	3a01      	subs	r2, #1
 8009cf2:	60fa      	str	r2, [r7, #12]
 8009cf4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	3a01      	subs	r2, #1
 8009d06:	60fa      	str	r2, [r7, #12]
 8009d08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	701a      	strb	r2, [r3, #0]
 8009d12:	e032      	b.n	8009d7a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	0f1a      	lsrs	r2, r3, #28
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	60fb      	str	r3, [r7, #12]
 8009d1e:	b2d2      	uxtb	r2, r2
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	0d5b      	lsrs	r3, r3, #21
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	3a01      	subs	r2, #1
 8009d2e:	60fa      	str	r2, [r7, #12]
 8009d30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	0b9b      	lsrs	r3, r3, #14
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	3a01      	subs	r2, #1
 8009d44:	60fa      	str	r2, [r7, #12]
 8009d46:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	09db      	lsrs	r3, r3, #7
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	3a01      	subs	r2, #1
 8009d5a:	60fa      	str	r2, [r7, #12]
 8009d5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	3a01      	subs	r2, #1
 8009d6e:	60fa      	str	r2, [r7, #12]
 8009d70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8009df8 <_SendPacket+0x274>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009d80:	4b1c      	ldr	r3, [pc, #112]	@ (8009df4 <_SendPacket+0x270>)
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	69ba      	ldr	r2, [r7, #24]
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	623b      	str	r3, [r7, #32]
 8009d92:	e00b      	b.n	8009dac <_SendPacket+0x228>
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9a:	1c59      	adds	r1, r3, #1
 8009d9c:	6279      	str	r1, [r7, #36]	@ 0x24
 8009d9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	701a      	strb	r2, [r3, #0]
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	09db      	lsrs	r3, r3, #7
 8009daa:	623b      	str	r3, [r7, #32]
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	2b7f      	cmp	r3, #127	@ 0x7f
 8009db0:	d8f0      	bhi.n	8009d94 <_SendPacket+0x210>
 8009db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db4:	1c5a      	adds	r2, r3, #1
 8009db6:	627a      	str	r2, [r7, #36]	@ 0x24
 8009db8:	6a3a      	ldr	r2, [r7, #32]
 8009dba:	b2d2      	uxtb	r2, r2
 8009dbc:	701a      	strb	r2, [r3, #0]
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8009dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8009df4 <_SendPacket+0x270>)
 8009dc4:	785b      	ldrb	r3, [r3, #1]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	461a      	mov	r2, r3
 8009dd0:	68f9      	ldr	r1, [r7, #12]
 8009dd2:	f7f6 f9bd 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009dd6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8009dde:	4a05      	ldr	r2, [pc, #20]	@ (8009df4 <_SendPacket+0x270>)
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	60d3      	str	r3, [r2, #12]
 8009de4:	e00f      	b.n	8009e06 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8009de6:	4b03      	ldr	r3, [pc, #12]	@ (8009df4 <_SendPacket+0x270>)
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	3301      	adds	r3, #1
 8009dec:	b2da      	uxtb	r2, r3
 8009dee:	4b01      	ldr	r3, [pc, #4]	@ (8009df4 <_SendPacket+0x270>)
 8009df0:	701a      	strb	r2, [r3, #0]
 8009df2:	e008      	b.n	8009e06 <_SendPacket+0x282>
 8009df4:	20004850 	.word	0x20004850
 8009df8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8009dfc:	bf00      	nop
 8009dfe:	e002      	b.n	8009e06 <_SendPacket+0x282>
      goto SendDone;
 8009e00:	bf00      	nop
 8009e02:	e000      	b.n	8009e06 <_SendPacket+0x282>
      goto SendDone;
 8009e04:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8009e06:	4b14      	ldr	r3, [pc, #80]	@ (8009e58 <_SendPacket+0x2d4>)
 8009e08:	7e1b      	ldrb	r3, [r3, #24]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	4a13      	ldr	r2, [pc, #76]	@ (8009e5c <_SendPacket+0x2d8>)
 8009e0e:	460b      	mov	r3, r1
 8009e10:	005b      	lsls	r3, r3, #1
 8009e12:	440b      	add	r3, r1
 8009e14:	00db      	lsls	r3, r3, #3
 8009e16:	4413      	add	r3, r2
 8009e18:	336c      	adds	r3, #108	@ 0x6c
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8009e58 <_SendPacket+0x2d4>)
 8009e1e:	7e1b      	ldrb	r3, [r3, #24]
 8009e20:	4618      	mov	r0, r3
 8009e22:	490e      	ldr	r1, [pc, #56]	@ (8009e5c <_SendPacket+0x2d8>)
 8009e24:	4603      	mov	r3, r0
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	4403      	add	r3, r0
 8009e2a:	00db      	lsls	r3, r3, #3
 8009e2c:	440b      	add	r3, r1
 8009e2e:	3370      	adds	r3, #112	@ 0x70
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d00b      	beq.n	8009e4e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8009e36:	4b08      	ldr	r3, [pc, #32]	@ (8009e58 <_SendPacket+0x2d4>)
 8009e38:	789b      	ldrb	r3, [r3, #2]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d107      	bne.n	8009e4e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8009e3e:	4b06      	ldr	r3, [pc, #24]	@ (8009e58 <_SendPacket+0x2d4>)
 8009e40:	2201      	movs	r2, #1
 8009e42:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8009e44:	f7ff fdbe 	bl	80099c4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8009e48:	4b03      	ldr	r3, [pc, #12]	@ (8009e58 <_SendPacket+0x2d4>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8009e4e:	bf00      	nop
 8009e50:	3728      	adds	r7, #40	@ 0x28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	20004850 	.word	0x20004850
 8009e5c:	20003db4 	.word	0x20003db4

08009e60 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af02      	add	r7, sp, #8
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8009e74:	4917      	ldr	r1, [pc, #92]	@ (8009ed4 <SEGGER_SYSVIEW_Init+0x74>)
 8009e76:	4818      	ldr	r0, [pc, #96]	@ (8009ed8 <SEGGER_SYSVIEW_Init+0x78>)
 8009e78:	f7ff fc94 	bl	80097a4 <SEGGER_RTT_AllocUpBuffer>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	4b16      	ldr	r3, [pc, #88]	@ (8009edc <SEGGER_SYSVIEW_Init+0x7c>)
 8009e82:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8009e84:	4b15      	ldr	r3, [pc, #84]	@ (8009edc <SEGGER_SYSVIEW_Init+0x7c>)
 8009e86:	785a      	ldrb	r2, [r3, #1]
 8009e88:	4b14      	ldr	r3, [pc, #80]	@ (8009edc <SEGGER_SYSVIEW_Init+0x7c>)
 8009e8a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009e8c:	4b13      	ldr	r3, [pc, #76]	@ (8009edc <SEGGER_SYSVIEW_Init+0x7c>)
 8009e8e:	7e1b      	ldrb	r3, [r3, #24]
 8009e90:	4618      	mov	r0, r3
 8009e92:	2300      	movs	r3, #0
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	2308      	movs	r3, #8
 8009e98:	4a11      	ldr	r2, [pc, #68]	@ (8009ee0 <SEGGER_SYSVIEW_Init+0x80>)
 8009e9a:	490f      	ldr	r1, [pc, #60]	@ (8009ed8 <SEGGER_SYSVIEW_Init+0x78>)
 8009e9c:	f7ff fd04 	bl	80098a8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8009ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8009edc <SEGGER_SYSVIEW_Init+0x7c>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee4 <SEGGER_SYSVIEW_Init+0x84>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8009edc <SEGGER_SYSVIEW_Init+0x7c>)
 8009eac:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8009eae:	4a0b      	ldr	r2, [pc, #44]	@ (8009edc <SEGGER_SYSVIEW_Init+0x7c>)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8009eb4:	4a09      	ldr	r2, [pc, #36]	@ (8009edc <SEGGER_SYSVIEW_Init+0x7c>)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8009eba:	4a08      	ldr	r2, [pc, #32]	@ (8009edc <SEGGER_SYSVIEW_Init+0x7c>)
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8009ec0:	4a06      	ldr	r2, [pc, #24]	@ (8009edc <SEGGER_SYSVIEW_Init+0x7c>)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8009ec6:	4b05      	ldr	r3, [pc, #20]	@ (8009edc <SEGGER_SYSVIEW_Init+0x7c>)
 8009ec8:	2200      	movs	r2, #0
 8009eca:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8009ecc:	bf00      	nop
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	2000426c 	.word	0x2000426c
 8009ed8:	0800d794 	.word	0x0800d794
 8009edc:	20004850 	.word	0x20004850
 8009ee0:	20004848 	.word	0x20004848
 8009ee4:	e0001004 	.word	0xe0001004

08009ee8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8009ef0:	4a03      	ldr	r2, [pc, #12]	@ (8009f00 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6113      	str	r3, [r2, #16]
}
 8009ef6:	bf00      	nop
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bc80      	pop	{r7}
 8009efe:	4770      	bx	lr
 8009f00:	20004850 	.word	0x20004850

08009f04 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009f0c:	f3ef 8311 	mrs	r3, BASEPRI
 8009f10:	f04f 0120 	mov.w	r1, #32
 8009f14:	f381 8811 	msr	BASEPRI, r1
 8009f18:	60fb      	str	r3, [r7, #12]
 8009f1a:	4808      	ldr	r0, [pc, #32]	@ (8009f3c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8009f1c:	f7ff fd46 	bl	80099ac <_PreparePacket>
 8009f20:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	68b9      	ldr	r1, [r7, #8]
 8009f26:	68b8      	ldr	r0, [r7, #8]
 8009f28:	f7ff fe2c 	bl	8009b84 <_SendPacket>
  RECORD_END();
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f383 8811 	msr	BASEPRI, r3
}
 8009f32:	bf00      	nop
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20004880 	.word	0x20004880

08009f40 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b088      	sub	sp, #32
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009f4a:	f3ef 8311 	mrs	r3, BASEPRI
 8009f4e:	f04f 0120 	mov.w	r1, #32
 8009f52:	f381 8811 	msr	BASEPRI, r1
 8009f56:	617b      	str	r3, [r7, #20]
 8009f58:	4816      	ldr	r0, [pc, #88]	@ (8009fb4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8009f5a:	f7ff fd27 	bl	80099ac <_PreparePacket>
 8009f5e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	61fb      	str	r3, [r7, #28]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	61bb      	str	r3, [r7, #24]
 8009f6c:	e00b      	b.n	8009f86 <SEGGER_SYSVIEW_RecordU32+0x46>
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	1c59      	adds	r1, r3, #1
 8009f76:	61f9      	str	r1, [r7, #28]
 8009f78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f7c:	b2d2      	uxtb	r2, r2
 8009f7e:	701a      	strb	r2, [r3, #0]
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	09db      	lsrs	r3, r3, #7
 8009f84:	61bb      	str	r3, [r7, #24]
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f8a:	d8f0      	bhi.n	8009f6e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	1c5a      	adds	r2, r3, #1
 8009f90:	61fa      	str	r2, [r7, #28]
 8009f92:	69ba      	ldr	r2, [r7, #24]
 8009f94:	b2d2      	uxtb	r2, r2
 8009f96:	701a      	strb	r2, [r3, #0]
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	68f9      	ldr	r1, [r7, #12]
 8009fa0:	6938      	ldr	r0, [r7, #16]
 8009fa2:	f7ff fdef 	bl	8009b84 <_SendPacket>
  RECORD_END();
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	f383 8811 	msr	BASEPRI, r3
}
 8009fac:	bf00      	nop
 8009fae:	3720      	adds	r7, #32
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	20004880 	.word	0x20004880

08009fb8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08c      	sub	sp, #48	@ 0x30
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009fc4:	f3ef 8311 	mrs	r3, BASEPRI
 8009fc8:	f04f 0120 	mov.w	r1, #32
 8009fcc:	f381 8811 	msr	BASEPRI, r1
 8009fd0:	61fb      	str	r3, [r7, #28]
 8009fd2:	4825      	ldr	r0, [pc, #148]	@ (800a068 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8009fd4:	f7ff fcea 	bl	80099ac <_PreparePacket>
 8009fd8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fe6:	e00b      	b.n	800a000 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fea:	b2da      	uxtb	r2, r3
 8009fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fee:	1c59      	adds	r1, r3, #1
 8009ff0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009ff2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009ff6:	b2d2      	uxtb	r2, r2
 8009ff8:	701a      	strb	r2, [r3, #0]
 8009ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffc:	09db      	lsrs	r3, r3, #7
 8009ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a002:	2b7f      	cmp	r3, #127	@ 0x7f
 800a004:	d8f0      	bhi.n	8009fe8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800a006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a008:	1c5a      	adds	r2, r3, #1
 800a00a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a00c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a00e:	b2d2      	uxtb	r2, r2
 800a010:	701a      	strb	r2, [r3, #0]
 800a012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a014:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	627b      	str	r3, [r7, #36]	@ 0x24
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	623b      	str	r3, [r7, #32]
 800a01e:	e00b      	b.n	800a038 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	b2da      	uxtb	r2, r3
 800a024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a026:	1c59      	adds	r1, r3, #1
 800a028:	6279      	str	r1, [r7, #36]	@ 0x24
 800a02a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a02e:	b2d2      	uxtb	r2, r2
 800a030:	701a      	strb	r2, [r3, #0]
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	09db      	lsrs	r3, r3, #7
 800a036:	623b      	str	r3, [r7, #32]
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a03c:	d8f0      	bhi.n	800a020 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800a03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a040:	1c5a      	adds	r2, r3, #1
 800a042:	627a      	str	r2, [r7, #36]	@ 0x24
 800a044:	6a3a      	ldr	r2, [r7, #32]
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	6979      	ldr	r1, [r7, #20]
 800a052:	69b8      	ldr	r0, [r7, #24]
 800a054:	f7ff fd96 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	f383 8811 	msr	BASEPRI, r3
}
 800a05e:	bf00      	nop
 800a060:	3730      	adds	r7, #48	@ 0x30
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20004880 	.word	0x20004880

0800a06c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b08c      	sub	sp, #48	@ 0x30
 800a070:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800a072:	4b58      	ldr	r3, [pc, #352]	@ (800a1d4 <SEGGER_SYSVIEW_Start+0x168>)
 800a074:	2201      	movs	r2, #1
 800a076:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800a078:	f3ef 8311 	mrs	r3, BASEPRI
 800a07c:	f04f 0120 	mov.w	r1, #32
 800a080:	f381 8811 	msr	BASEPRI, r1
 800a084:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800a086:	4b53      	ldr	r3, [pc, #332]	@ (800a1d4 <SEGGER_SYSVIEW_Start+0x168>)
 800a088:	785b      	ldrb	r3, [r3, #1]
 800a08a:	220a      	movs	r2, #10
 800a08c:	4952      	ldr	r1, [pc, #328]	@ (800a1d8 <SEGGER_SYSVIEW_Start+0x16c>)
 800a08e:	4618      	mov	r0, r3
 800a090:	f7f6 f85e 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800a09a:	200a      	movs	r0, #10
 800a09c:	f7ff ff32 	bl	8009f04 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a0a0:	f3ef 8311 	mrs	r3, BASEPRI
 800a0a4:	f04f 0120 	mov.w	r1, #32
 800a0a8:	f381 8811 	msr	BASEPRI, r1
 800a0ac:	60bb      	str	r3, [r7, #8]
 800a0ae:	484b      	ldr	r0, [pc, #300]	@ (800a1dc <SEGGER_SYSVIEW_Start+0x170>)
 800a0b0:	f7ff fc7c 	bl	80099ac <_PreparePacket>
 800a0b4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0be:	4b45      	ldr	r3, [pc, #276]	@ (800a1d4 <SEGGER_SYSVIEW_Start+0x168>)
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0c4:	e00b      	b.n	800a0de <SEGGER_SYSVIEW_Start+0x72>
 800a0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0cc:	1c59      	adds	r1, r3, #1
 800a0ce:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a0d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a0d4:	b2d2      	uxtb	r2, r2
 800a0d6:	701a      	strb	r2, [r3, #0]
 800a0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0da:	09db      	lsrs	r3, r3, #7
 800a0dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e0:	2b7f      	cmp	r3, #127	@ 0x7f
 800a0e2:	d8f0      	bhi.n	800a0c6 <SEGGER_SYSVIEW_Start+0x5a>
 800a0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e6:	1c5a      	adds	r2, r3, #1
 800a0e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0ec:	b2d2      	uxtb	r2, r2
 800a0ee:	701a      	strb	r2, [r3, #0]
 800a0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0f8:	4b36      	ldr	r3, [pc, #216]	@ (800a1d4 <SEGGER_SYSVIEW_Start+0x168>)
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	623b      	str	r3, [r7, #32]
 800a0fe:	e00b      	b.n	800a118 <SEGGER_SYSVIEW_Start+0xac>
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	b2da      	uxtb	r2, r3
 800a104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a106:	1c59      	adds	r1, r3, #1
 800a108:	6279      	str	r1, [r7, #36]	@ 0x24
 800a10a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a10e:	b2d2      	uxtb	r2, r2
 800a110:	701a      	strb	r2, [r3, #0]
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	09db      	lsrs	r3, r3, #7
 800a116:	623b      	str	r3, [r7, #32]
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a11c:	d8f0      	bhi.n	800a100 <SEGGER_SYSVIEW_Start+0x94>
 800a11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a120:	1c5a      	adds	r2, r3, #1
 800a122:	627a      	str	r2, [r7, #36]	@ 0x24
 800a124:	6a3a      	ldr	r2, [r7, #32]
 800a126:	b2d2      	uxtb	r2, r2
 800a128:	701a      	strb	r2, [r3, #0]
 800a12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	61fb      	str	r3, [r7, #28]
 800a132:	4b28      	ldr	r3, [pc, #160]	@ (800a1d4 <SEGGER_SYSVIEW_Start+0x168>)
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	61bb      	str	r3, [r7, #24]
 800a138:	e00b      	b.n	800a152 <SEGGER_SYSVIEW_Start+0xe6>
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	b2da      	uxtb	r2, r3
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	1c59      	adds	r1, r3, #1
 800a142:	61f9      	str	r1, [r7, #28]
 800a144:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a148:	b2d2      	uxtb	r2, r2
 800a14a:	701a      	strb	r2, [r3, #0]
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	09db      	lsrs	r3, r3, #7
 800a150:	61bb      	str	r3, [r7, #24]
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	2b7f      	cmp	r3, #127	@ 0x7f
 800a156:	d8f0      	bhi.n	800a13a <SEGGER_SYSVIEW_Start+0xce>
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	1c5a      	adds	r2, r3, #1
 800a15c:	61fa      	str	r2, [r7, #28]
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	b2d2      	uxtb	r2, r2
 800a162:	701a      	strb	r2, [r3, #0]
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	2300      	movs	r3, #0
 800a16e:	613b      	str	r3, [r7, #16]
 800a170:	e00b      	b.n	800a18a <SEGGER_SYSVIEW_Start+0x11e>
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	b2da      	uxtb	r2, r3
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	1c59      	adds	r1, r3, #1
 800a17a:	6179      	str	r1, [r7, #20]
 800a17c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a180:	b2d2      	uxtb	r2, r2
 800a182:	701a      	strb	r2, [r3, #0]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	09db      	lsrs	r3, r3, #7
 800a188:	613b      	str	r3, [r7, #16]
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a18e:	d8f0      	bhi.n	800a172 <SEGGER_SYSVIEW_Start+0x106>
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	617a      	str	r2, [r7, #20]
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	b2d2      	uxtb	r2, r2
 800a19a:	701a      	strb	r2, [r3, #0]
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a1a0:	2218      	movs	r2, #24
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7ff fced 	bl	8009b84 <_SendPacket>
      RECORD_END();
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a1b0:	4b08      	ldr	r3, [pc, #32]	@ (800a1d4 <SEGGER_SYSVIEW_Start+0x168>)
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800a1b8:	4b06      	ldr	r3, [pc, #24]	@ (800a1d4 <SEGGER_SYSVIEW_Start+0x168>)
 800a1ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1bc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800a1be:	f000 f9eb 	bl	800a598 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800a1c2:	f000 f9b1 	bl	800a528 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800a1c6:	f000 fd21 	bl	800ac0c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800a1ca:	bf00      	nop
 800a1cc:	3730      	adds	r7, #48	@ 0x30
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20004850 	.word	0x20004850
 800a1d8:	0800d848 	.word	0x0800d848
 800a1dc:	20004880 	.word	0x20004880

0800a1e0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a1e6:	f3ef 8311 	mrs	r3, BASEPRI
 800a1ea:	f04f 0120 	mov.w	r1, #32
 800a1ee:	f381 8811 	msr	BASEPRI, r1
 800a1f2:	607b      	str	r3, [r7, #4]
 800a1f4:	480b      	ldr	r0, [pc, #44]	@ (800a224 <SEGGER_SYSVIEW_Stop+0x44>)
 800a1f6:	f7ff fbd9 	bl	80099ac <_PreparePacket>
 800a1fa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800a1fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a228 <SEGGER_SYSVIEW_Stop+0x48>)
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d007      	beq.n	800a214 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800a204:	220b      	movs	r2, #11
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6838      	ldr	r0, [r7, #0]
 800a20a:	f7ff fcbb 	bl	8009b84 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800a20e:	4b06      	ldr	r3, [pc, #24]	@ (800a228 <SEGGER_SYSVIEW_Stop+0x48>)
 800a210:	2200      	movs	r2, #0
 800a212:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f383 8811 	msr	BASEPRI, r3
}
 800a21a:	bf00      	nop
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	20004880 	.word	0x20004880
 800a228:	20004850 	.word	0x20004850

0800a22c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b08c      	sub	sp, #48	@ 0x30
 800a230:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a232:	f3ef 8311 	mrs	r3, BASEPRI
 800a236:	f04f 0120 	mov.w	r1, #32
 800a23a:	f381 8811 	msr	BASEPRI, r1
 800a23e:	60fb      	str	r3, [r7, #12]
 800a240:	4845      	ldr	r0, [pc, #276]	@ (800a358 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800a242:	f7ff fbb3 	bl	80099ac <_PreparePacket>
 800a246:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a250:	4b42      	ldr	r3, [pc, #264]	@ (800a35c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a256:	e00b      	b.n	800a270 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800a258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a25e:	1c59      	adds	r1, r3, #1
 800a260:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a262:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a266:	b2d2      	uxtb	r2, r2
 800a268:	701a      	strb	r2, [r3, #0]
 800a26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26c:	09db      	lsrs	r3, r3, #7
 800a26e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a272:	2b7f      	cmp	r3, #127	@ 0x7f
 800a274:	d8f0      	bhi.n	800a258 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800a276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a27c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a27e:	b2d2      	uxtb	r2, r2
 800a280:	701a      	strb	r2, [r3, #0]
 800a282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a284:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	627b      	str	r3, [r7, #36]	@ 0x24
 800a28a:	4b34      	ldr	r3, [pc, #208]	@ (800a35c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	623b      	str	r3, [r7, #32]
 800a290:	e00b      	b.n	800a2aa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	b2da      	uxtb	r2, r3
 800a296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a298:	1c59      	adds	r1, r3, #1
 800a29a:	6279      	str	r1, [r7, #36]	@ 0x24
 800a29c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a2a0:	b2d2      	uxtb	r2, r2
 800a2a2:	701a      	strb	r2, [r3, #0]
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	09db      	lsrs	r3, r3, #7
 800a2a8:	623b      	str	r3, [r7, #32]
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	2b7f      	cmp	r3, #127	@ 0x7f
 800a2ae:	d8f0      	bhi.n	800a292 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b2:	1c5a      	adds	r2, r3, #1
 800a2b4:	627a      	str	r2, [r7, #36]	@ 0x24
 800a2b6:	6a3a      	ldr	r2, [r7, #32]
 800a2b8:	b2d2      	uxtb	r2, r2
 800a2ba:	701a      	strb	r2, [r3, #0]
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	61fb      	str	r3, [r7, #28]
 800a2c4:	4b25      	ldr	r3, [pc, #148]	@ (800a35c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	61bb      	str	r3, [r7, #24]
 800a2ca:	e00b      	b.n	800a2e4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	1c59      	adds	r1, r3, #1
 800a2d4:	61f9      	str	r1, [r7, #28]
 800a2d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a2da:	b2d2      	uxtb	r2, r2
 800a2dc:	701a      	strb	r2, [r3, #0]
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	09db      	lsrs	r3, r3, #7
 800a2e2:	61bb      	str	r3, [r7, #24]
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800a2e8:	d8f0      	bhi.n	800a2cc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	1c5a      	adds	r2, r3, #1
 800a2ee:	61fa      	str	r2, [r7, #28]
 800a2f0:	69ba      	ldr	r2, [r7, #24]
 800a2f2:	b2d2      	uxtb	r2, r2
 800a2f4:	701a      	strb	r2, [r3, #0]
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	617b      	str	r3, [r7, #20]
 800a2fe:	2300      	movs	r3, #0
 800a300:	613b      	str	r3, [r7, #16]
 800a302:	e00b      	b.n	800a31c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	b2da      	uxtb	r2, r3
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	1c59      	adds	r1, r3, #1
 800a30c:	6179      	str	r1, [r7, #20]
 800a30e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a312:	b2d2      	uxtb	r2, r2
 800a314:	701a      	strb	r2, [r3, #0]
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	09db      	lsrs	r3, r3, #7
 800a31a:	613b      	str	r3, [r7, #16]
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a320:	d8f0      	bhi.n	800a304 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	1c5a      	adds	r2, r3, #1
 800a326:	617a      	str	r2, [r7, #20]
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	b2d2      	uxtb	r2, r2
 800a32c:	701a      	strb	r2, [r3, #0]
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a332:	2218      	movs	r2, #24
 800a334:	6879      	ldr	r1, [r7, #4]
 800a336:	68b8      	ldr	r0, [r7, #8]
 800a338:	f7ff fc24 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a342:	4b06      	ldr	r3, [pc, #24]	@ (800a35c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800a34a:	4b04      	ldr	r3, [pc, #16]	@ (800a35c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34e:	4798      	blx	r3
  }
}
 800a350:	bf00      	nop
 800a352:	3730      	adds	r7, #48	@ 0x30
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	20004880 	.word	0x20004880
 800a35c:	20004850 	.word	0x20004850

0800a360 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800a360:	b580      	push	{r7, lr}
 800a362:	b092      	sub	sp, #72	@ 0x48
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800a368:	f3ef 8311 	mrs	r3, BASEPRI
 800a36c:	f04f 0120 	mov.w	r1, #32
 800a370:	f381 8811 	msr	BASEPRI, r1
 800a374:	617b      	str	r3, [r7, #20]
 800a376:	486a      	ldr	r0, [pc, #424]	@ (800a520 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800a378:	f7ff fb18 	bl	80099ac <_PreparePacket>
 800a37c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	647b      	str	r3, [r7, #68]	@ 0x44
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	4b66      	ldr	r3, [pc, #408]	@ (800a524 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	643b      	str	r3, [r7, #64]	@ 0x40
 800a392:	e00b      	b.n	800a3ac <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800a394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a396:	b2da      	uxtb	r2, r3
 800a398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a39a:	1c59      	adds	r1, r3, #1
 800a39c:	6479      	str	r1, [r7, #68]	@ 0x44
 800a39e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a3a2:	b2d2      	uxtb	r2, r2
 800a3a4:	701a      	strb	r2, [r3, #0]
 800a3a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3a8:	09db      	lsrs	r3, r3, #7
 800a3aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800a3b0:	d8f0      	bhi.n	800a394 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800a3b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3b4:	1c5a      	adds	r2, r3, #1
 800a3b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a3b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3ba:	b2d2      	uxtb	r2, r2
 800a3bc:	701a      	strb	r2, [r3, #0]
 800a3be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3cc:	e00b      	b.n	800a3e6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d0:	b2da      	uxtb	r2, r3
 800a3d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d4:	1c59      	adds	r1, r3, #1
 800a3d6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800a3d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a3dc:	b2d2      	uxtb	r2, r2
 800a3de:	701a      	strb	r2, [r3, #0]
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e2:	09db      	lsrs	r3, r3, #7
 800a3e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e8:	2b7f      	cmp	r3, #127	@ 0x7f
 800a3ea:	d8f0      	bhi.n	800a3ce <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800a3ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a3f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3f4:	b2d2      	uxtb	r2, r2
 800a3f6:	701a      	strb	r2, [r3, #0]
 800a3f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3fa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	2220      	movs	r2, #32
 800a402:	4619      	mov	r1, r3
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f7ff fa99 	bl	800993c <_EncodeStr>
 800a40a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800a40c:	2209      	movs	r2, #9
 800a40e:	68f9      	ldr	r1, [r7, #12]
 800a410:	6938      	ldr	r0, [r7, #16]
 800a412:	f7ff fbb7 	bl	8009b84 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	4b40      	ldr	r3, [pc, #256]	@ (800a524 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	633b      	str	r3, [r7, #48]	@ 0x30
 800a42a:	e00b      	b.n	800a444 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800a42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42e:	b2da      	uxtb	r2, r3
 800a430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a432:	1c59      	adds	r1, r3, #1
 800a434:	6379      	str	r1, [r7, #52]	@ 0x34
 800a436:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a43a:	b2d2      	uxtb	r2, r2
 800a43c:	701a      	strb	r2, [r3, #0]
 800a43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a440:	09db      	lsrs	r3, r3, #7
 800a442:	633b      	str	r3, [r7, #48]	@ 0x30
 800a444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a446:	2b7f      	cmp	r3, #127	@ 0x7f
 800a448:	d8f0      	bhi.n	800a42c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800a44a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	637a      	str	r2, [r7, #52]	@ 0x34
 800a450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a452:	b2d2      	uxtb	r2, r2
 800a454:	701a      	strb	r2, [r3, #0]
 800a456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a458:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a464:	e00b      	b.n	800a47e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800a466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a46c:	1c59      	adds	r1, r3, #1
 800a46e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a470:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a474:	b2d2      	uxtb	r2, r2
 800a476:	701a      	strb	r2, [r3, #0]
 800a478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47a:	09db      	lsrs	r3, r3, #7
 800a47c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a480:	2b7f      	cmp	r3, #127	@ 0x7f
 800a482:	d8f0      	bhi.n	800a466 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800a484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a486:	1c5a      	adds	r2, r3, #1
 800a488:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a48a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a48c:	b2d2      	uxtb	r2, r2
 800a48e:	701a      	strb	r2, [r3, #0]
 800a490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a492:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	627b      	str	r3, [r7, #36]	@ 0x24
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	623b      	str	r3, [r7, #32]
 800a49e:	e00b      	b.n	800a4b8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a6:	1c59      	adds	r1, r3, #1
 800a4a8:	6279      	str	r1, [r7, #36]	@ 0x24
 800a4aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a4ae:	b2d2      	uxtb	r2, r2
 800a4b0:	701a      	strb	r2, [r3, #0]
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	09db      	lsrs	r3, r3, #7
 800a4b6:	623b      	str	r3, [r7, #32]
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
 800a4ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800a4bc:	d8f0      	bhi.n	800a4a0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c0:	1c5a      	adds	r2, r3, #1
 800a4c2:	627a      	str	r2, [r7, #36]	@ 0x24
 800a4c4:	6a3a      	ldr	r2, [r7, #32]
 800a4c6:	b2d2      	uxtb	r2, r2
 800a4c8:	701a      	strb	r2, [r3, #0]
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	61fb      	str	r3, [r7, #28]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	61bb      	str	r3, [r7, #24]
 800a4d8:	e00b      	b.n	800a4f2 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	1c59      	adds	r1, r3, #1
 800a4e2:	61f9      	str	r1, [r7, #28]
 800a4e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a4e8:	b2d2      	uxtb	r2, r2
 800a4ea:	701a      	strb	r2, [r3, #0]
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	09db      	lsrs	r3, r3, #7
 800a4f0:	61bb      	str	r3, [r7, #24]
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	2b7f      	cmp	r3, #127	@ 0x7f
 800a4f6:	d8f0      	bhi.n	800a4da <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	1c5a      	adds	r2, r3, #1
 800a4fc:	61fa      	str	r2, [r7, #28]
 800a4fe:	69ba      	ldr	r2, [r7, #24]
 800a500:	b2d2      	uxtb	r2, r2
 800a502:	701a      	strb	r2, [r3, #0]
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800a508:	2215      	movs	r2, #21
 800a50a:	68f9      	ldr	r1, [r7, #12]
 800a50c:	6938      	ldr	r0, [r7, #16]
 800a50e:	f7ff fb39 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f383 8811 	msr	BASEPRI, r3
}
 800a518:	bf00      	nop
 800a51a:	3748      	adds	r7, #72	@ 0x48
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	20004880 	.word	0x20004880
 800a524:	20004850 	.word	0x20004850

0800a528 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800a528:	b580      	push	{r7, lr}
 800a52a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800a52c:	4b07      	ldr	r3, [pc, #28]	@ (800a54c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a52e:	6a1b      	ldr	r3, [r3, #32]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d008      	beq.n	800a546 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800a534:	4b05      	ldr	r3, [pc, #20]	@ (800a54c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800a53e:	4b03      	ldr	r3, [pc, #12]	@ (800a54c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	4798      	blx	r3
  }
}
 800a546:	bf00      	nop
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20004850 	.word	0x20004850

0800a550 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a558:	f3ef 8311 	mrs	r3, BASEPRI
 800a55c:	f04f 0120 	mov.w	r1, #32
 800a560:	f381 8811 	msr	BASEPRI, r1
 800a564:	617b      	str	r3, [r7, #20]
 800a566:	480b      	ldr	r0, [pc, #44]	@ (800a594 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800a568:	f7ff fa20 	bl	80099ac <_PreparePacket>
 800a56c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a56e:	2280      	movs	r2, #128	@ 0x80
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	6938      	ldr	r0, [r7, #16]
 800a574:	f7ff f9e2 	bl	800993c <_EncodeStr>
 800a578:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800a57a:	220e      	movs	r2, #14
 800a57c:	68f9      	ldr	r1, [r7, #12]
 800a57e:	6938      	ldr	r0, [r7, #16]
 800a580:	f7ff fb00 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f383 8811 	msr	BASEPRI, r3
}
 800a58a:	bf00      	nop
 800a58c:	3718      	adds	r7, #24
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20004880 	.word	0x20004880

0800a598 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800a598:	b590      	push	{r4, r7, lr}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800a59e:	4b15      	ldr	r3, [pc, #84]	@ (800a5f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d01a      	beq.n	800a5dc <SEGGER_SYSVIEW_RecordSystime+0x44>
 800a5a6:	4b13      	ldr	r3, [pc, #76]	@ (800a5f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d015      	beq.n	800a5dc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800a5b0:	4b10      	ldr	r3, [pc, #64]	@ (800a5f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a5b2:	6a1b      	ldr	r3, [r3, #32]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4798      	blx	r3
 800a5b8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a5bc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800a5be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5c2:	f04f 0200 	mov.w	r2, #0
 800a5c6:	f04f 0300 	mov.w	r3, #0
 800a5ca:	000a      	movs	r2, r1
 800a5cc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	200d      	movs	r0, #13
 800a5d6:	f7ff fcef 	bl	8009fb8 <SEGGER_SYSVIEW_RecordU32x2>
 800a5da:	e006      	b.n	800a5ea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800a5dc:	4b06      	ldr	r3, [pc, #24]	@ (800a5f8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	200c      	movs	r0, #12
 800a5e4:	f7ff fcac 	bl	8009f40 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800a5e8:	bf00      	nop
 800a5ea:	bf00      	nop
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd90      	pop	{r4, r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	20004850 	.word	0x20004850
 800a5f8:	e0001004 	.word	0xe0001004

0800a5fc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a602:	f3ef 8311 	mrs	r3, BASEPRI
 800a606:	f04f 0120 	mov.w	r1, #32
 800a60a:	f381 8811 	msr	BASEPRI, r1
 800a60e:	60fb      	str	r3, [r7, #12]
 800a610:	4819      	ldr	r0, [pc, #100]	@ (800a678 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800a612:	f7ff f9cb 	bl	80099ac <_PreparePacket>
 800a616:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800a61c:	4b17      	ldr	r3, [pc, #92]	@ (800a67c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a624:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	617b      	str	r3, [r7, #20]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	613b      	str	r3, [r7, #16]
 800a62e:	e00b      	b.n	800a648 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	b2da      	uxtb	r2, r3
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	1c59      	adds	r1, r3, #1
 800a638:	6179      	str	r1, [r7, #20]
 800a63a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a63e:	b2d2      	uxtb	r2, r2
 800a640:	701a      	strb	r2, [r3, #0]
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	09db      	lsrs	r3, r3, #7
 800a646:	613b      	str	r3, [r7, #16]
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a64c:	d8f0      	bhi.n	800a630 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	1c5a      	adds	r2, r3, #1
 800a652:	617a      	str	r2, [r7, #20]
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	b2d2      	uxtb	r2, r2
 800a658:	701a      	strb	r2, [r3, #0]
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800a65e:	2202      	movs	r2, #2
 800a660:	6879      	ldr	r1, [r7, #4]
 800a662:	68b8      	ldr	r0, [r7, #8]
 800a664:	f7ff fa8e 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f383 8811 	msr	BASEPRI, r3
}
 800a66e:	bf00      	nop
 800a670:	3718      	adds	r7, #24
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	20004880 	.word	0x20004880
 800a67c:	e000ed04 	.word	0xe000ed04

0800a680 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a686:	f3ef 8311 	mrs	r3, BASEPRI
 800a68a:	f04f 0120 	mov.w	r1, #32
 800a68e:	f381 8811 	msr	BASEPRI, r1
 800a692:	607b      	str	r3, [r7, #4]
 800a694:	4807      	ldr	r0, [pc, #28]	@ (800a6b4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800a696:	f7ff f989 	bl	80099ac <_PreparePacket>
 800a69a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800a69c:	2203      	movs	r2, #3
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6838      	ldr	r0, [r7, #0]
 800a6a2:	f7ff fa6f 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f383 8811 	msr	BASEPRI, r3
}
 800a6ac:	bf00      	nop
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	20004880 	.word	0x20004880

0800a6b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a6be:	f3ef 8311 	mrs	r3, BASEPRI
 800a6c2:	f04f 0120 	mov.w	r1, #32
 800a6c6:	f381 8811 	msr	BASEPRI, r1
 800a6ca:	607b      	str	r3, [r7, #4]
 800a6cc:	4807      	ldr	r0, [pc, #28]	@ (800a6ec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800a6ce:	f7ff f96d 	bl	80099ac <_PreparePacket>
 800a6d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800a6d4:	2212      	movs	r2, #18
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6838      	ldr	r0, [r7, #0]
 800a6da:	f7ff fa53 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f383 8811 	msr	BASEPRI, r3
}
 800a6e4:	bf00      	nop
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	20004880 	.word	0x20004880

0800a6f0 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b088      	sub	sp, #32
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a6f8:	f3ef 8311 	mrs	r3, BASEPRI
 800a6fc:	f04f 0120 	mov.w	r1, #32
 800a700:	f381 8811 	msr	BASEPRI, r1
 800a704:	617b      	str	r3, [r7, #20]
 800a706:	4817      	ldr	r0, [pc, #92]	@ (800a764 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 800a708:	f7ff f950 	bl	80099ac <_PreparePacket>
 800a70c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	61fb      	str	r3, [r7, #28]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	61bb      	str	r3, [r7, #24]
 800a71a:	e00b      	b.n	800a734 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	1c59      	adds	r1, r3, #1
 800a724:	61f9      	str	r1, [r7, #28]
 800a726:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a72a:	b2d2      	uxtb	r2, r2
 800a72c:	701a      	strb	r2, [r3, #0]
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	09db      	lsrs	r3, r3, #7
 800a732:	61bb      	str	r3, [r7, #24]
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	2b7f      	cmp	r3, #127	@ 0x7f
 800a738:	d8f0      	bhi.n	800a71c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	61fa      	str	r2, [r7, #28]
 800a740:	69ba      	ldr	r2, [r7, #24]
 800a742:	b2d2      	uxtb	r2, r2
 800a744:	701a      	strb	r2, [r3, #0]
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800a74a:	221c      	movs	r2, #28
 800a74c:	68f9      	ldr	r1, [r7, #12]
 800a74e:	6938      	ldr	r0, [r7, #16]
 800a750:	f7ff fa18 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	f383 8811 	msr	BASEPRI, r3
}
 800a75a:	bf00      	nop
 800a75c:	3720      	adds	r7, #32
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	20004880 	.word	0x20004880

0800a768 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 800a768:	b580      	push	{r7, lr}
 800a76a:	b08a      	sub	sp, #40	@ 0x28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a772:	f3ef 8311 	mrs	r3, BASEPRI
 800a776:	f04f 0120 	mov.w	r1, #32
 800a77a:	f381 8811 	msr	BASEPRI, r1
 800a77e:	617b      	str	r3, [r7, #20]
 800a780:	4824      	ldr	r0, [pc, #144]	@ (800a814 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 800a782:	f7ff f913 	bl	80099ac <_PreparePacket>
 800a786:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	623b      	str	r3, [r7, #32]
 800a794:	e00b      	b.n	800a7ae <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79c:	1c59      	adds	r1, r3, #1
 800a79e:	6279      	str	r1, [r7, #36]	@ 0x24
 800a7a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a7a4:	b2d2      	uxtb	r2, r2
 800a7a6:	701a      	strb	r2, [r3, #0]
 800a7a8:	6a3b      	ldr	r3, [r7, #32]
 800a7aa:	09db      	lsrs	r3, r3, #7
 800a7ac:	623b      	str	r3, [r7, #32]
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	2b7f      	cmp	r3, #127	@ 0x7f
 800a7b2:	d8f0      	bhi.n	800a796 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b6:	1c5a      	adds	r2, r3, #1
 800a7b8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a7ba:	6a3a      	ldr	r2, [r7, #32]
 800a7bc:	b2d2      	uxtb	r2, r2
 800a7be:	701a      	strb	r2, [r3, #0]
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	61fb      	str	r3, [r7, #28]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	61bb      	str	r3, [r7, #24]
 800a7cc:	e00b      	b.n	800a7e6 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	1c59      	adds	r1, r3, #1
 800a7d6:	61f9      	str	r1, [r7, #28]
 800a7d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a7dc:	b2d2      	uxtb	r2, r2
 800a7de:	701a      	strb	r2, [r3, #0]
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	09db      	lsrs	r3, r3, #7
 800a7e4:	61bb      	str	r3, [r7, #24]
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	2b7f      	cmp	r3, #127	@ 0x7f
 800a7ea:	d8f0      	bhi.n	800a7ce <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	61fa      	str	r2, [r7, #28]
 800a7f2:	69ba      	ldr	r2, [r7, #24]
 800a7f4:	b2d2      	uxtb	r2, r2
 800a7f6:	701a      	strb	r2, [r3, #0]
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800a7fc:	221c      	movs	r2, #28
 800a7fe:	68f9      	ldr	r1, [r7, #12]
 800a800:	6938      	ldr	r0, [r7, #16]
 800a802:	f7ff f9bf 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f383 8811 	msr	BASEPRI, r3
}
 800a80c:	bf00      	nop
 800a80e:	3728      	adds	r7, #40	@ 0x28
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	20004880 	.word	0x20004880

0800a818 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a81e:	f3ef 8311 	mrs	r3, BASEPRI
 800a822:	f04f 0120 	mov.w	r1, #32
 800a826:	f381 8811 	msr	BASEPRI, r1
 800a82a:	607b      	str	r3, [r7, #4]
 800a82c:	4807      	ldr	r0, [pc, #28]	@ (800a84c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800a82e:	f7ff f8bd 	bl	80099ac <_PreparePacket>
 800a832:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800a834:	2211      	movs	r2, #17
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6838      	ldr	r0, [r7, #0]
 800a83a:	f7ff f9a3 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f383 8811 	msr	BASEPRI, r3
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	20004880 	.word	0x20004880

0800a850 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800a850:	b580      	push	{r7, lr}
 800a852:	b088      	sub	sp, #32
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a858:	f3ef 8311 	mrs	r3, BASEPRI
 800a85c:	f04f 0120 	mov.w	r1, #32
 800a860:	f381 8811 	msr	BASEPRI, r1
 800a864:	617b      	str	r3, [r7, #20]
 800a866:	4819      	ldr	r0, [pc, #100]	@ (800a8cc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800a868:	f7ff f8a0 	bl	80099ac <_PreparePacket>
 800a86c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a872:	4b17      	ldr	r3, [pc, #92]	@ (800a8d0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	61fb      	str	r3, [r7, #28]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	61bb      	str	r3, [r7, #24]
 800a884:	e00b      	b.n	800a89e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	1c59      	adds	r1, r3, #1
 800a88e:	61f9      	str	r1, [r7, #28]
 800a890:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a894:	b2d2      	uxtb	r2, r2
 800a896:	701a      	strb	r2, [r3, #0]
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	09db      	lsrs	r3, r3, #7
 800a89c:	61bb      	str	r3, [r7, #24]
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	2b7f      	cmp	r3, #127	@ 0x7f
 800a8a2:	d8f0      	bhi.n	800a886 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	61fa      	str	r2, [r7, #28]
 800a8aa:	69ba      	ldr	r2, [r7, #24]
 800a8ac:	b2d2      	uxtb	r2, r2
 800a8ae:	701a      	strb	r2, [r3, #0]
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800a8b4:	2208      	movs	r2, #8
 800a8b6:	68f9      	ldr	r1, [r7, #12]
 800a8b8:	6938      	ldr	r0, [r7, #16]
 800a8ba:	f7ff f963 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f383 8811 	msr	BASEPRI, r3
}
 800a8c4:	bf00      	nop
 800a8c6:	3720      	adds	r7, #32
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	20004880 	.word	0x20004880
 800a8d0:	20004850 	.word	0x20004850

0800a8d4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b088      	sub	sp, #32
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a8dc:	f3ef 8311 	mrs	r3, BASEPRI
 800a8e0:	f04f 0120 	mov.w	r1, #32
 800a8e4:	f381 8811 	msr	BASEPRI, r1
 800a8e8:	617b      	str	r3, [r7, #20]
 800a8ea:	4819      	ldr	r0, [pc, #100]	@ (800a950 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800a8ec:	f7ff f85e 	bl	80099ac <_PreparePacket>
 800a8f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a8f6:	4b17      	ldr	r3, [pc, #92]	@ (800a954 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	61fb      	str	r3, [r7, #28]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	61bb      	str	r3, [r7, #24]
 800a908:	e00b      	b.n	800a922 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	1c59      	adds	r1, r3, #1
 800a912:	61f9      	str	r1, [r7, #28]
 800a914:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a918:	b2d2      	uxtb	r2, r2
 800a91a:	701a      	strb	r2, [r3, #0]
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	09db      	lsrs	r3, r3, #7
 800a920:	61bb      	str	r3, [r7, #24]
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	2b7f      	cmp	r3, #127	@ 0x7f
 800a926:	d8f0      	bhi.n	800a90a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	61fa      	str	r2, [r7, #28]
 800a92e:	69ba      	ldr	r2, [r7, #24]
 800a930:	b2d2      	uxtb	r2, r2
 800a932:	701a      	strb	r2, [r3, #0]
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800a938:	2204      	movs	r2, #4
 800a93a:	68f9      	ldr	r1, [r7, #12]
 800a93c:	6938      	ldr	r0, [r7, #16]
 800a93e:	f7ff f921 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	f383 8811 	msr	BASEPRI, r3
}
 800a948:	bf00      	nop
 800a94a:	3720      	adds	r7, #32
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	20004880 	.word	0x20004880
 800a954:	20004850 	.word	0x20004850

0800a958 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800a958:	b580      	push	{r7, lr}
 800a95a:	b088      	sub	sp, #32
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a960:	f3ef 8311 	mrs	r3, BASEPRI
 800a964:	f04f 0120 	mov.w	r1, #32
 800a968:	f381 8811 	msr	BASEPRI, r1
 800a96c:	617b      	str	r3, [r7, #20]
 800a96e:	4819      	ldr	r0, [pc, #100]	@ (800a9d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800a970:	f7ff f81c 	bl	80099ac <_PreparePacket>
 800a974:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a97a:	4b17      	ldr	r3, [pc, #92]	@ (800a9d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	61fb      	str	r3, [r7, #28]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	61bb      	str	r3, [r7, #24]
 800a98c:	e00b      	b.n	800a9a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	b2da      	uxtb	r2, r3
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	1c59      	adds	r1, r3, #1
 800a996:	61f9      	str	r1, [r7, #28]
 800a998:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a99c:	b2d2      	uxtb	r2, r2
 800a99e:	701a      	strb	r2, [r3, #0]
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	09db      	lsrs	r3, r3, #7
 800a9a4:	61bb      	str	r3, [r7, #24]
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	2b7f      	cmp	r3, #127	@ 0x7f
 800a9aa:	d8f0      	bhi.n	800a98e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	61fa      	str	r2, [r7, #28]
 800a9b2:	69ba      	ldr	r2, [r7, #24]
 800a9b4:	b2d2      	uxtb	r2, r2
 800a9b6:	701a      	strb	r2, [r3, #0]
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800a9bc:	2206      	movs	r2, #6
 800a9be:	68f9      	ldr	r1, [r7, #12]
 800a9c0:	6938      	ldr	r0, [r7, #16]
 800a9c2:	f7ff f8df 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f383 8811 	msr	BASEPRI, r3
}
 800a9cc:	bf00      	nop
 800a9ce:	3720      	adds	r7, #32
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	20004880 	.word	0x20004880
 800a9d8:	20004850 	.word	0x20004850

0800a9dc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08a      	sub	sp, #40	@ 0x28
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a9e6:	f3ef 8311 	mrs	r3, BASEPRI
 800a9ea:	f04f 0120 	mov.w	r1, #32
 800a9ee:	f381 8811 	msr	BASEPRI, r1
 800a9f2:	617b      	str	r3, [r7, #20]
 800a9f4:	4827      	ldr	r0, [pc, #156]	@ (800aa94 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800a9f6:	f7fe ffd9 	bl	80099ac <_PreparePacket>
 800a9fa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800aa00:	4b25      	ldr	r3, [pc, #148]	@ (800aa98 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	623b      	str	r3, [r7, #32]
 800aa12:	e00b      	b.n	800aa2c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1a:	1c59      	adds	r1, r3, #1
 800aa1c:	6279      	str	r1, [r7, #36]	@ 0x24
 800aa1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800aa22:	b2d2      	uxtb	r2, r2
 800aa24:	701a      	strb	r2, [r3, #0]
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	09db      	lsrs	r3, r3, #7
 800aa2a:	623b      	str	r3, [r7, #32]
 800aa2c:	6a3b      	ldr	r3, [r7, #32]
 800aa2e:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa30:	d8f0      	bhi.n	800aa14 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800aa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	627a      	str	r2, [r7, #36]	@ 0x24
 800aa38:	6a3a      	ldr	r2, [r7, #32]
 800aa3a:	b2d2      	uxtb	r2, r2
 800aa3c:	701a      	strb	r2, [r3, #0]
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	61fb      	str	r3, [r7, #28]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	61bb      	str	r3, [r7, #24]
 800aa4a:	e00b      	b.n	800aa64 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	1c59      	adds	r1, r3, #1
 800aa54:	61f9      	str	r1, [r7, #28]
 800aa56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800aa5a:	b2d2      	uxtb	r2, r2
 800aa5c:	701a      	strb	r2, [r3, #0]
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	09db      	lsrs	r3, r3, #7
 800aa62:	61bb      	str	r3, [r7, #24]
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa68:	d8f0      	bhi.n	800aa4c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	1c5a      	adds	r2, r3, #1
 800aa6e:	61fa      	str	r2, [r7, #28]
 800aa70:	69ba      	ldr	r2, [r7, #24]
 800aa72:	b2d2      	uxtb	r2, r2
 800aa74:	701a      	strb	r2, [r3, #0]
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800aa7a:	2207      	movs	r2, #7
 800aa7c:	68f9      	ldr	r1, [r7, #12]
 800aa7e:	6938      	ldr	r0, [r7, #16]
 800aa80:	f7ff f880 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	f383 8811 	msr	BASEPRI, r3
}
 800aa8a:	bf00      	nop
 800aa8c:	3728      	adds	r7, #40	@ 0x28
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	20004880 	.word	0x20004880
 800aa98:	20004850 	.word	0x20004850

0800aa9c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800aaa4:	4b04      	ldr	r3, [pc, #16]	@ (800aab8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	1ad3      	subs	r3, r2, r3
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bc80      	pop	{r7}
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	20004850 	.word	0x20004850

0800aabc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b08c      	sub	sp, #48	@ 0x30
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	4603      	mov	r3, r0
 800aac4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800aac6:	4b40      	ldr	r3, [pc, #256]	@ (800abc8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d077      	beq.n	800abbe <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800aace:	4b3e      	ldr	r3, [pc, #248]	@ (800abc8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800aad4:	2300      	movs	r3, #0
 800aad6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aad8:	e008      	b.n	800aaec <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800aada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800aae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d007      	beq.n	800aaf6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800aae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae8:	3301      	adds	r3, #1
 800aaea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aaec:	79fb      	ldrb	r3, [r7, #7]
 800aaee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d3f2      	bcc.n	800aada <SEGGER_SYSVIEW_SendModule+0x1e>
 800aaf4:	e000      	b.n	800aaf8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800aaf6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800aaf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d055      	beq.n	800abaa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800aafe:	f3ef 8311 	mrs	r3, BASEPRI
 800ab02:	f04f 0120 	mov.w	r1, #32
 800ab06:	f381 8811 	msr	BASEPRI, r1
 800ab0a:	617b      	str	r3, [r7, #20]
 800ab0c:	482f      	ldr	r0, [pc, #188]	@ (800abcc <SEGGER_SYSVIEW_SendModule+0x110>)
 800ab0e:	f7fe ff4d 	bl	80099ac <_PreparePacket>
 800ab12:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab1c:	79fb      	ldrb	r3, [r7, #7]
 800ab1e:	623b      	str	r3, [r7, #32]
 800ab20:	e00b      	b.n	800ab3a <SEGGER_SYSVIEW_SendModule+0x7e>
 800ab22:	6a3b      	ldr	r3, [r7, #32]
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab28:	1c59      	adds	r1, r3, #1
 800ab2a:	6279      	str	r1, [r7, #36]	@ 0x24
 800ab2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ab30:	b2d2      	uxtb	r2, r2
 800ab32:	701a      	strb	r2, [r3, #0]
 800ab34:	6a3b      	ldr	r3, [r7, #32]
 800ab36:	09db      	lsrs	r3, r3, #7
 800ab38:	623b      	str	r3, [r7, #32]
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab3e:	d8f0      	bhi.n	800ab22 <SEGGER_SYSVIEW_SendModule+0x66>
 800ab40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab46:	6a3a      	ldr	r2, [r7, #32]
 800ab48:	b2d2      	uxtb	r2, r2
 800ab4a:	701a      	strb	r2, [r3, #0]
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	61fb      	str	r3, [r7, #28]
 800ab54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	61bb      	str	r3, [r7, #24]
 800ab5a:	e00b      	b.n	800ab74 <SEGGER_SYSVIEW_SendModule+0xb8>
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	b2da      	uxtb	r2, r3
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	1c59      	adds	r1, r3, #1
 800ab64:	61f9      	str	r1, [r7, #28]
 800ab66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ab6a:	b2d2      	uxtb	r2, r2
 800ab6c:	701a      	strb	r2, [r3, #0]
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	09db      	lsrs	r3, r3, #7
 800ab72:	61bb      	str	r3, [r7, #24]
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab78:	d8f0      	bhi.n	800ab5c <SEGGER_SYSVIEW_SendModule+0xa0>
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	61fa      	str	r2, [r7, #28]
 800ab80:	69ba      	ldr	r2, [r7, #24]
 800ab82:	b2d2      	uxtb	r2, r2
 800ab84:	701a      	strb	r2, [r3, #0]
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ab8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2280      	movs	r2, #128	@ 0x80
 800ab90:	4619      	mov	r1, r3
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f7fe fed2 	bl	800993c <_EncodeStr>
 800ab98:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800ab9a:	2216      	movs	r2, #22
 800ab9c:	68f9      	ldr	r1, [r7, #12]
 800ab9e:	6938      	ldr	r0, [r7, #16]
 800aba0:	f7fe fff0 	bl	8009b84 <_SendPacket>
      RECORD_END();
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800abaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abac:	2b00      	cmp	r3, #0
 800abae:	d006      	beq.n	800abbe <SEGGER_SYSVIEW_SendModule+0x102>
 800abb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800abb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	4798      	blx	r3
    }
  }
}
 800abbe:	bf00      	nop
 800abc0:	3730      	adds	r7, #48	@ 0x30
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20004878 	.word	0x20004878
 800abcc:	20004880 	.word	0x20004880

0800abd0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800abd6:	4b0c      	ldr	r3, [pc, #48]	@ (800ac08 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00f      	beq.n	800abfe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800abde:	4b0a      	ldr	r3, [pc, #40]	@ (800ac08 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1f2      	bne.n	800abe4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800abfe:	bf00      	nop
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20004878 	.word	0x20004878

0800ac0c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b086      	sub	sp, #24
 800ac10:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800ac12:	f3ef 8311 	mrs	r3, BASEPRI
 800ac16:	f04f 0120 	mov.w	r1, #32
 800ac1a:	f381 8811 	msr	BASEPRI, r1
 800ac1e:	60fb      	str	r3, [r7, #12]
 800ac20:	4817      	ldr	r0, [pc, #92]	@ (800ac80 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800ac22:	f7fe fec3 	bl	80099ac <_PreparePacket>
 800ac26:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	617b      	str	r3, [r7, #20]
 800ac30:	4b14      	ldr	r3, [pc, #80]	@ (800ac84 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	613b      	str	r3, [r7, #16]
 800ac36:	e00b      	b.n	800ac50 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	1c59      	adds	r1, r3, #1
 800ac40:	6179      	str	r1, [r7, #20]
 800ac42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ac46:	b2d2      	uxtb	r2, r2
 800ac48:	701a      	strb	r2, [r3, #0]
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	09db      	lsrs	r3, r3, #7
 800ac4e:	613b      	str	r3, [r7, #16]
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	2b7f      	cmp	r3, #127	@ 0x7f
 800ac54:	d8f0      	bhi.n	800ac38 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	1c5a      	adds	r2, r3, #1
 800ac5a:	617a      	str	r2, [r7, #20]
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	701a      	strb	r2, [r3, #0]
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800ac66:	221b      	movs	r2, #27
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	68b8      	ldr	r0, [r7, #8]
 800ac6c:	f7fe ff8a 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f383 8811 	msr	BASEPRI, r3
}
 800ac76:	bf00      	nop
 800ac78:	3718      	adds	r7, #24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	20004880 	.word	0x20004880
 800ac84:	2000487c 	.word	0x2000487c

0800ac88 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08a      	sub	sp, #40	@ 0x28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ac90:	f3ef 8311 	mrs	r3, BASEPRI
 800ac94:	f04f 0120 	mov.w	r1, #32
 800ac98:	f381 8811 	msr	BASEPRI, r1
 800ac9c:	617b      	str	r3, [r7, #20]
 800ac9e:	4827      	ldr	r0, [pc, #156]	@ (800ad3c <SEGGER_SYSVIEW_Warn+0xb4>)
 800aca0:	f7fe fe84 	bl	80099ac <_PreparePacket>
 800aca4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800aca6:	2280      	movs	r2, #128	@ 0x80
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	6938      	ldr	r0, [r7, #16]
 800acac:	f7fe fe46 	bl	800993c <_EncodeStr>
 800acb0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	627b      	str	r3, [r7, #36]	@ 0x24
 800acb6:	2301      	movs	r3, #1
 800acb8:	623b      	str	r3, [r7, #32]
 800acba:	e00b      	b.n	800acd4 <SEGGER_SYSVIEW_Warn+0x4c>
 800acbc:	6a3b      	ldr	r3, [r7, #32]
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc2:	1c59      	adds	r1, r3, #1
 800acc4:	6279      	str	r1, [r7, #36]	@ 0x24
 800acc6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800acca:	b2d2      	uxtb	r2, r2
 800accc:	701a      	strb	r2, [r3, #0]
 800acce:	6a3b      	ldr	r3, [r7, #32]
 800acd0:	09db      	lsrs	r3, r3, #7
 800acd2:	623b      	str	r3, [r7, #32]
 800acd4:	6a3b      	ldr	r3, [r7, #32]
 800acd6:	2b7f      	cmp	r3, #127	@ 0x7f
 800acd8:	d8f0      	bhi.n	800acbc <SEGGER_SYSVIEW_Warn+0x34>
 800acda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acdc:	1c5a      	adds	r2, r3, #1
 800acde:	627a      	str	r2, [r7, #36]	@ 0x24
 800ace0:	6a3a      	ldr	r2, [r7, #32]
 800ace2:	b2d2      	uxtb	r2, r2
 800ace4:	701a      	strb	r2, [r3, #0]
 800ace6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	61fb      	str	r3, [r7, #28]
 800acee:	2300      	movs	r3, #0
 800acf0:	61bb      	str	r3, [r7, #24]
 800acf2:	e00b      	b.n	800ad0c <SEGGER_SYSVIEW_Warn+0x84>
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	1c59      	adds	r1, r3, #1
 800acfc:	61f9      	str	r1, [r7, #28]
 800acfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ad02:	b2d2      	uxtb	r2, r2
 800ad04:	701a      	strb	r2, [r3, #0]
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	09db      	lsrs	r3, r3, #7
 800ad0a:	61bb      	str	r3, [r7, #24]
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad10:	d8f0      	bhi.n	800acf4 <SEGGER_SYSVIEW_Warn+0x6c>
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	1c5a      	adds	r2, r3, #1
 800ad16:	61fa      	str	r2, [r7, #28]
 800ad18:	69ba      	ldr	r2, [r7, #24]
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	701a      	strb	r2, [r3, #0]
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800ad22:	221a      	movs	r2, #26
 800ad24:	68f9      	ldr	r1, [r7, #12]
 800ad26:	6938      	ldr	r0, [r7, #16]
 800ad28:	f7fe ff2c 	bl	8009b84 <_SendPacket>
  RECORD_END();
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	f383 8811 	msr	BASEPRI, r3
}
 800ad32:	bf00      	nop
 800ad34:	3728      	adds	r7, #40	@ 0x28
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	20004880 	.word	0x20004880

0800ad40 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
 800ad4c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	6879      	ldr	r1, [r7, #4]
 800ad52:	2000      	movs	r0, #0
 800ad54:	f7fe fd00 	bl	8009758 <SEGGER_RTT_Write>
  return len;
 800ad58:	683b      	ldr	r3, [r7, #0]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <__cvt>:
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad68:	461d      	mov	r5, r3
 800ad6a:	bfbb      	ittet	lt
 800ad6c:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800ad70:	461d      	movlt	r5, r3
 800ad72:	2300      	movge	r3, #0
 800ad74:	232d      	movlt	r3, #45	@ 0x2d
 800ad76:	b088      	sub	sp, #32
 800ad78:	4614      	mov	r4, r2
 800ad7a:	bfb8      	it	lt
 800ad7c:	4614      	movlt	r4, r2
 800ad7e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ad80:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800ad82:	7013      	strb	r3, [r2, #0]
 800ad84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ad86:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800ad8a:	f023 0820 	bic.w	r8, r3, #32
 800ad8e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad92:	d005      	beq.n	800ada0 <__cvt+0x3e>
 800ad94:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ad98:	d100      	bne.n	800ad9c <__cvt+0x3a>
 800ad9a:	3601      	adds	r6, #1
 800ad9c:	2302      	movs	r3, #2
 800ad9e:	e000      	b.n	800ada2 <__cvt+0x40>
 800ada0:	2303      	movs	r3, #3
 800ada2:	aa07      	add	r2, sp, #28
 800ada4:	9204      	str	r2, [sp, #16]
 800ada6:	aa06      	add	r2, sp, #24
 800ada8:	e9cd a202 	strd	sl, r2, [sp, #8]
 800adac:	e9cd 3600 	strd	r3, r6, [sp]
 800adb0:	4622      	mov	r2, r4
 800adb2:	462b      	mov	r3, r5
 800adb4:	f000 fe58 	bl	800ba68 <_dtoa_r>
 800adb8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800adbc:	4607      	mov	r7, r0
 800adbe:	d119      	bne.n	800adf4 <__cvt+0x92>
 800adc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800adc2:	07db      	lsls	r3, r3, #31
 800adc4:	d50e      	bpl.n	800ade4 <__cvt+0x82>
 800adc6:	eb00 0906 	add.w	r9, r0, r6
 800adca:	2200      	movs	r2, #0
 800adcc:	2300      	movs	r3, #0
 800adce:	4620      	mov	r0, r4
 800add0:	4629      	mov	r1, r5
 800add2:	f7f5 fe2f 	bl	8000a34 <__aeabi_dcmpeq>
 800add6:	b108      	cbz	r0, 800addc <__cvt+0x7a>
 800add8:	f8cd 901c 	str.w	r9, [sp, #28]
 800addc:	2230      	movs	r2, #48	@ 0x30
 800adde:	9b07      	ldr	r3, [sp, #28]
 800ade0:	454b      	cmp	r3, r9
 800ade2:	d31e      	bcc.n	800ae22 <__cvt+0xc0>
 800ade4:	4638      	mov	r0, r7
 800ade6:	9b07      	ldr	r3, [sp, #28]
 800ade8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800adea:	1bdb      	subs	r3, r3, r7
 800adec:	6013      	str	r3, [r2, #0]
 800adee:	b008      	add	sp, #32
 800adf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800adf8:	eb00 0906 	add.w	r9, r0, r6
 800adfc:	d1e5      	bne.n	800adca <__cvt+0x68>
 800adfe:	7803      	ldrb	r3, [r0, #0]
 800ae00:	2b30      	cmp	r3, #48	@ 0x30
 800ae02:	d10a      	bne.n	800ae1a <__cvt+0xb8>
 800ae04:	2200      	movs	r2, #0
 800ae06:	2300      	movs	r3, #0
 800ae08:	4620      	mov	r0, r4
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	f7f5 fe12 	bl	8000a34 <__aeabi_dcmpeq>
 800ae10:	b918      	cbnz	r0, 800ae1a <__cvt+0xb8>
 800ae12:	f1c6 0601 	rsb	r6, r6, #1
 800ae16:	f8ca 6000 	str.w	r6, [sl]
 800ae1a:	f8da 3000 	ldr.w	r3, [sl]
 800ae1e:	4499      	add	r9, r3
 800ae20:	e7d3      	b.n	800adca <__cvt+0x68>
 800ae22:	1c59      	adds	r1, r3, #1
 800ae24:	9107      	str	r1, [sp, #28]
 800ae26:	701a      	strb	r2, [r3, #0]
 800ae28:	e7d9      	b.n	800adde <__cvt+0x7c>

0800ae2a <__exponent>:
 800ae2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae2c:	2900      	cmp	r1, #0
 800ae2e:	bfb6      	itet	lt
 800ae30:	232d      	movlt	r3, #45	@ 0x2d
 800ae32:	232b      	movge	r3, #43	@ 0x2b
 800ae34:	4249      	neglt	r1, r1
 800ae36:	2909      	cmp	r1, #9
 800ae38:	7002      	strb	r2, [r0, #0]
 800ae3a:	7043      	strb	r3, [r0, #1]
 800ae3c:	dd29      	ble.n	800ae92 <__exponent+0x68>
 800ae3e:	f10d 0307 	add.w	r3, sp, #7
 800ae42:	461d      	mov	r5, r3
 800ae44:	270a      	movs	r7, #10
 800ae46:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	fb07 1416 	mls	r4, r7, r6, r1
 800ae50:	3430      	adds	r4, #48	@ 0x30
 800ae52:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae56:	460c      	mov	r4, r1
 800ae58:	2c63      	cmp	r4, #99	@ 0x63
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae60:	dcf1      	bgt.n	800ae46 <__exponent+0x1c>
 800ae62:	3130      	adds	r1, #48	@ 0x30
 800ae64:	1e94      	subs	r4, r2, #2
 800ae66:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae6a:	4623      	mov	r3, r4
 800ae6c:	1c41      	adds	r1, r0, #1
 800ae6e:	42ab      	cmp	r3, r5
 800ae70:	d30a      	bcc.n	800ae88 <__exponent+0x5e>
 800ae72:	f10d 0309 	add.w	r3, sp, #9
 800ae76:	1a9b      	subs	r3, r3, r2
 800ae78:	42ac      	cmp	r4, r5
 800ae7a:	bf88      	it	hi
 800ae7c:	2300      	movhi	r3, #0
 800ae7e:	3302      	adds	r3, #2
 800ae80:	4403      	add	r3, r0
 800ae82:	1a18      	subs	r0, r3, r0
 800ae84:	b003      	add	sp, #12
 800ae86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae88:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ae8c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ae90:	e7ed      	b.n	800ae6e <__exponent+0x44>
 800ae92:	2330      	movs	r3, #48	@ 0x30
 800ae94:	3130      	adds	r1, #48	@ 0x30
 800ae96:	7083      	strb	r3, [r0, #2]
 800ae98:	70c1      	strb	r1, [r0, #3]
 800ae9a:	1d03      	adds	r3, r0, #4
 800ae9c:	e7f1      	b.n	800ae82 <__exponent+0x58>
	...

0800aea0 <_printf_float>:
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	b091      	sub	sp, #68	@ 0x44
 800aea6:	460c      	mov	r4, r1
 800aea8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800aeac:	4616      	mov	r6, r2
 800aeae:	461f      	mov	r7, r3
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	f000 fccf 	bl	800b854 <_localeconv_r>
 800aeb6:	6803      	ldr	r3, [r0, #0]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	9308      	str	r3, [sp, #32]
 800aebc:	f7f5 f98e 	bl	80001dc <strlen>
 800aec0:	2300      	movs	r3, #0
 800aec2:	930e      	str	r3, [sp, #56]	@ 0x38
 800aec4:	f8d8 3000 	ldr.w	r3, [r8]
 800aec8:	9009      	str	r0, [sp, #36]	@ 0x24
 800aeca:	3307      	adds	r3, #7
 800aecc:	f023 0307 	bic.w	r3, r3, #7
 800aed0:	f103 0208 	add.w	r2, r3, #8
 800aed4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aed8:	f8d4 b000 	ldr.w	fp, [r4]
 800aedc:	f8c8 2000 	str.w	r2, [r8]
 800aee0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aee4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aee8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aeea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800aeee:	f04f 32ff 	mov.w	r2, #4294967295
 800aef2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aef6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aefa:	4b9c      	ldr	r3, [pc, #624]	@ (800b16c <_printf_float+0x2cc>)
 800aefc:	f7f5 fdcc 	bl	8000a98 <__aeabi_dcmpun>
 800af00:	bb70      	cbnz	r0, 800af60 <_printf_float+0xc0>
 800af02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800af06:	f04f 32ff 	mov.w	r2, #4294967295
 800af0a:	4b98      	ldr	r3, [pc, #608]	@ (800b16c <_printf_float+0x2cc>)
 800af0c:	f7f5 fda6 	bl	8000a5c <__aeabi_dcmple>
 800af10:	bb30      	cbnz	r0, 800af60 <_printf_float+0xc0>
 800af12:	2200      	movs	r2, #0
 800af14:	2300      	movs	r3, #0
 800af16:	4640      	mov	r0, r8
 800af18:	4649      	mov	r1, r9
 800af1a:	f7f5 fd95 	bl	8000a48 <__aeabi_dcmplt>
 800af1e:	b110      	cbz	r0, 800af26 <_printf_float+0x86>
 800af20:	232d      	movs	r3, #45	@ 0x2d
 800af22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af26:	4a92      	ldr	r2, [pc, #584]	@ (800b170 <_printf_float+0x2d0>)
 800af28:	4b92      	ldr	r3, [pc, #584]	@ (800b174 <_printf_float+0x2d4>)
 800af2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af2e:	bf8c      	ite	hi
 800af30:	4690      	movhi	r8, r2
 800af32:	4698      	movls	r8, r3
 800af34:	2303      	movs	r3, #3
 800af36:	f04f 0900 	mov.w	r9, #0
 800af3a:	6123      	str	r3, [r4, #16]
 800af3c:	f02b 0304 	bic.w	r3, fp, #4
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	4633      	mov	r3, r6
 800af44:	4621      	mov	r1, r4
 800af46:	4628      	mov	r0, r5
 800af48:	9700      	str	r7, [sp, #0]
 800af4a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800af4c:	f000 f9d4 	bl	800b2f8 <_printf_common>
 800af50:	3001      	adds	r0, #1
 800af52:	f040 8090 	bne.w	800b076 <_printf_float+0x1d6>
 800af56:	f04f 30ff 	mov.w	r0, #4294967295
 800af5a:	b011      	add	sp, #68	@ 0x44
 800af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af60:	4642      	mov	r2, r8
 800af62:	464b      	mov	r3, r9
 800af64:	4640      	mov	r0, r8
 800af66:	4649      	mov	r1, r9
 800af68:	f7f5 fd96 	bl	8000a98 <__aeabi_dcmpun>
 800af6c:	b148      	cbz	r0, 800af82 <_printf_float+0xe2>
 800af6e:	464b      	mov	r3, r9
 800af70:	2b00      	cmp	r3, #0
 800af72:	bfb8      	it	lt
 800af74:	232d      	movlt	r3, #45	@ 0x2d
 800af76:	4a80      	ldr	r2, [pc, #512]	@ (800b178 <_printf_float+0x2d8>)
 800af78:	bfb8      	it	lt
 800af7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af7e:	4b7f      	ldr	r3, [pc, #508]	@ (800b17c <_printf_float+0x2dc>)
 800af80:	e7d3      	b.n	800af2a <_printf_float+0x8a>
 800af82:	6863      	ldr	r3, [r4, #4]
 800af84:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	d13f      	bne.n	800b00c <_printf_float+0x16c>
 800af8c:	2306      	movs	r3, #6
 800af8e:	6063      	str	r3, [r4, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800af96:	6023      	str	r3, [r4, #0]
 800af98:	9206      	str	r2, [sp, #24]
 800af9a:	aa0e      	add	r2, sp, #56	@ 0x38
 800af9c:	e9cd a204 	strd	sl, r2, [sp, #16]
 800afa0:	aa0d      	add	r2, sp, #52	@ 0x34
 800afa2:	9203      	str	r2, [sp, #12]
 800afa4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800afa8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800afac:	6863      	ldr	r3, [r4, #4]
 800afae:	4642      	mov	r2, r8
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	4628      	mov	r0, r5
 800afb4:	464b      	mov	r3, r9
 800afb6:	910a      	str	r1, [sp, #40]	@ 0x28
 800afb8:	f7ff fed3 	bl	800ad62 <__cvt>
 800afbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800afbe:	4680      	mov	r8, r0
 800afc0:	2947      	cmp	r1, #71	@ 0x47
 800afc2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800afc4:	d128      	bne.n	800b018 <_printf_float+0x178>
 800afc6:	1cc8      	adds	r0, r1, #3
 800afc8:	db02      	blt.n	800afd0 <_printf_float+0x130>
 800afca:	6863      	ldr	r3, [r4, #4]
 800afcc:	4299      	cmp	r1, r3
 800afce:	dd40      	ble.n	800b052 <_printf_float+0x1b2>
 800afd0:	f1aa 0a02 	sub.w	sl, sl, #2
 800afd4:	fa5f fa8a 	uxtb.w	sl, sl
 800afd8:	4652      	mov	r2, sl
 800afda:	3901      	subs	r1, #1
 800afdc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800afe0:	910d      	str	r1, [sp, #52]	@ 0x34
 800afe2:	f7ff ff22 	bl	800ae2a <__exponent>
 800afe6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afe8:	4681      	mov	r9, r0
 800afea:	1813      	adds	r3, r2, r0
 800afec:	2a01      	cmp	r2, #1
 800afee:	6123      	str	r3, [r4, #16]
 800aff0:	dc02      	bgt.n	800aff8 <_printf_float+0x158>
 800aff2:	6822      	ldr	r2, [r4, #0]
 800aff4:	07d2      	lsls	r2, r2, #31
 800aff6:	d501      	bpl.n	800affc <_printf_float+0x15c>
 800aff8:	3301      	adds	r3, #1
 800affa:	6123      	str	r3, [r4, #16]
 800affc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b000:	2b00      	cmp	r3, #0
 800b002:	d09e      	beq.n	800af42 <_printf_float+0xa2>
 800b004:	232d      	movs	r3, #45	@ 0x2d
 800b006:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b00a:	e79a      	b.n	800af42 <_printf_float+0xa2>
 800b00c:	2947      	cmp	r1, #71	@ 0x47
 800b00e:	d1bf      	bne.n	800af90 <_printf_float+0xf0>
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1bd      	bne.n	800af90 <_printf_float+0xf0>
 800b014:	2301      	movs	r3, #1
 800b016:	e7ba      	b.n	800af8e <_printf_float+0xee>
 800b018:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b01c:	d9dc      	bls.n	800afd8 <_printf_float+0x138>
 800b01e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b022:	d118      	bne.n	800b056 <_printf_float+0x1b6>
 800b024:	2900      	cmp	r1, #0
 800b026:	6863      	ldr	r3, [r4, #4]
 800b028:	dd0b      	ble.n	800b042 <_printf_float+0x1a2>
 800b02a:	6121      	str	r1, [r4, #16]
 800b02c:	b913      	cbnz	r3, 800b034 <_printf_float+0x194>
 800b02e:	6822      	ldr	r2, [r4, #0]
 800b030:	07d0      	lsls	r0, r2, #31
 800b032:	d502      	bpl.n	800b03a <_printf_float+0x19a>
 800b034:	3301      	adds	r3, #1
 800b036:	440b      	add	r3, r1
 800b038:	6123      	str	r3, [r4, #16]
 800b03a:	f04f 0900 	mov.w	r9, #0
 800b03e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b040:	e7dc      	b.n	800affc <_printf_float+0x15c>
 800b042:	b913      	cbnz	r3, 800b04a <_printf_float+0x1aa>
 800b044:	6822      	ldr	r2, [r4, #0]
 800b046:	07d2      	lsls	r2, r2, #31
 800b048:	d501      	bpl.n	800b04e <_printf_float+0x1ae>
 800b04a:	3302      	adds	r3, #2
 800b04c:	e7f4      	b.n	800b038 <_printf_float+0x198>
 800b04e:	2301      	movs	r3, #1
 800b050:	e7f2      	b.n	800b038 <_printf_float+0x198>
 800b052:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b056:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b058:	4299      	cmp	r1, r3
 800b05a:	db05      	blt.n	800b068 <_printf_float+0x1c8>
 800b05c:	6823      	ldr	r3, [r4, #0]
 800b05e:	6121      	str	r1, [r4, #16]
 800b060:	07d8      	lsls	r0, r3, #31
 800b062:	d5ea      	bpl.n	800b03a <_printf_float+0x19a>
 800b064:	1c4b      	adds	r3, r1, #1
 800b066:	e7e7      	b.n	800b038 <_printf_float+0x198>
 800b068:	2900      	cmp	r1, #0
 800b06a:	bfcc      	ite	gt
 800b06c:	2201      	movgt	r2, #1
 800b06e:	f1c1 0202 	rsble	r2, r1, #2
 800b072:	4413      	add	r3, r2
 800b074:	e7e0      	b.n	800b038 <_printf_float+0x198>
 800b076:	6823      	ldr	r3, [r4, #0]
 800b078:	055a      	lsls	r2, r3, #21
 800b07a:	d407      	bmi.n	800b08c <_printf_float+0x1ec>
 800b07c:	6923      	ldr	r3, [r4, #16]
 800b07e:	4642      	mov	r2, r8
 800b080:	4631      	mov	r1, r6
 800b082:	4628      	mov	r0, r5
 800b084:	47b8      	blx	r7
 800b086:	3001      	adds	r0, #1
 800b088:	d12b      	bne.n	800b0e2 <_printf_float+0x242>
 800b08a:	e764      	b.n	800af56 <_printf_float+0xb6>
 800b08c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b090:	f240 80dc 	bls.w	800b24c <_printf_float+0x3ac>
 800b094:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b098:	2200      	movs	r2, #0
 800b09a:	2300      	movs	r3, #0
 800b09c:	f7f5 fcca 	bl	8000a34 <__aeabi_dcmpeq>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d033      	beq.n	800b10c <_printf_float+0x26c>
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	4a35      	ldr	r2, [pc, #212]	@ (800b180 <_printf_float+0x2e0>)
 800b0ac:	47b8      	blx	r7
 800b0ae:	3001      	adds	r0, #1
 800b0b0:	f43f af51 	beq.w	800af56 <_printf_float+0xb6>
 800b0b4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b0b8:	4543      	cmp	r3, r8
 800b0ba:	db02      	blt.n	800b0c2 <_printf_float+0x222>
 800b0bc:	6823      	ldr	r3, [r4, #0]
 800b0be:	07d8      	lsls	r0, r3, #31
 800b0c0:	d50f      	bpl.n	800b0e2 <_printf_float+0x242>
 800b0c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	f43f af42 	beq.w	800af56 <_printf_float+0xb6>
 800b0d2:	f04f 0900 	mov.w	r9, #0
 800b0d6:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0da:	f104 0a1a 	add.w	sl, r4, #26
 800b0de:	45c8      	cmp	r8, r9
 800b0e0:	dc09      	bgt.n	800b0f6 <_printf_float+0x256>
 800b0e2:	6823      	ldr	r3, [r4, #0]
 800b0e4:	079b      	lsls	r3, r3, #30
 800b0e6:	f100 8102 	bmi.w	800b2ee <_printf_float+0x44e>
 800b0ea:	68e0      	ldr	r0, [r4, #12]
 800b0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0ee:	4298      	cmp	r0, r3
 800b0f0:	bfb8      	it	lt
 800b0f2:	4618      	movlt	r0, r3
 800b0f4:	e731      	b.n	800af5a <_printf_float+0xba>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	4652      	mov	r2, sl
 800b0fa:	4631      	mov	r1, r6
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	47b8      	blx	r7
 800b100:	3001      	adds	r0, #1
 800b102:	f43f af28 	beq.w	800af56 <_printf_float+0xb6>
 800b106:	f109 0901 	add.w	r9, r9, #1
 800b10a:	e7e8      	b.n	800b0de <_printf_float+0x23e>
 800b10c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b10e:	2b00      	cmp	r3, #0
 800b110:	dc38      	bgt.n	800b184 <_printf_float+0x2e4>
 800b112:	2301      	movs	r3, #1
 800b114:	4631      	mov	r1, r6
 800b116:	4628      	mov	r0, r5
 800b118:	4a19      	ldr	r2, [pc, #100]	@ (800b180 <_printf_float+0x2e0>)
 800b11a:	47b8      	blx	r7
 800b11c:	3001      	adds	r0, #1
 800b11e:	f43f af1a 	beq.w	800af56 <_printf_float+0xb6>
 800b122:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b126:	ea59 0303 	orrs.w	r3, r9, r3
 800b12a:	d102      	bne.n	800b132 <_printf_float+0x292>
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	07d9      	lsls	r1, r3, #31
 800b130:	d5d7      	bpl.n	800b0e2 <_printf_float+0x242>
 800b132:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b136:	4631      	mov	r1, r6
 800b138:	4628      	mov	r0, r5
 800b13a:	47b8      	blx	r7
 800b13c:	3001      	adds	r0, #1
 800b13e:	f43f af0a 	beq.w	800af56 <_printf_float+0xb6>
 800b142:	f04f 0a00 	mov.w	sl, #0
 800b146:	f104 0b1a 	add.w	fp, r4, #26
 800b14a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b14c:	425b      	negs	r3, r3
 800b14e:	4553      	cmp	r3, sl
 800b150:	dc01      	bgt.n	800b156 <_printf_float+0x2b6>
 800b152:	464b      	mov	r3, r9
 800b154:	e793      	b.n	800b07e <_printf_float+0x1de>
 800b156:	2301      	movs	r3, #1
 800b158:	465a      	mov	r2, fp
 800b15a:	4631      	mov	r1, r6
 800b15c:	4628      	mov	r0, r5
 800b15e:	47b8      	blx	r7
 800b160:	3001      	adds	r0, #1
 800b162:	f43f aef8 	beq.w	800af56 <_printf_float+0xb6>
 800b166:	f10a 0a01 	add.w	sl, sl, #1
 800b16a:	e7ee      	b.n	800b14a <_printf_float+0x2aa>
 800b16c:	7fefffff 	.word	0x7fefffff
 800b170:	0800d856 	.word	0x0800d856
 800b174:	0800d852 	.word	0x0800d852
 800b178:	0800d85e 	.word	0x0800d85e
 800b17c:	0800d85a 	.word	0x0800d85a
 800b180:	0800d862 	.word	0x0800d862
 800b184:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b186:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b18a:	4553      	cmp	r3, sl
 800b18c:	bfa8      	it	ge
 800b18e:	4653      	movge	r3, sl
 800b190:	2b00      	cmp	r3, #0
 800b192:	4699      	mov	r9, r3
 800b194:	dc36      	bgt.n	800b204 <_printf_float+0x364>
 800b196:	f04f 0b00 	mov.w	fp, #0
 800b19a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b19e:	f104 021a 	add.w	r2, r4, #26
 800b1a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b1a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1a6:	eba3 0309 	sub.w	r3, r3, r9
 800b1aa:	455b      	cmp	r3, fp
 800b1ac:	dc31      	bgt.n	800b212 <_printf_float+0x372>
 800b1ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1b0:	459a      	cmp	sl, r3
 800b1b2:	dc3a      	bgt.n	800b22a <_printf_float+0x38a>
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	07da      	lsls	r2, r3, #31
 800b1b8:	d437      	bmi.n	800b22a <_printf_float+0x38a>
 800b1ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1bc:	ebaa 0903 	sub.w	r9, sl, r3
 800b1c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1c2:	ebaa 0303 	sub.w	r3, sl, r3
 800b1c6:	4599      	cmp	r9, r3
 800b1c8:	bfa8      	it	ge
 800b1ca:	4699      	movge	r9, r3
 800b1cc:	f1b9 0f00 	cmp.w	r9, #0
 800b1d0:	dc33      	bgt.n	800b23a <_printf_float+0x39a>
 800b1d2:	f04f 0800 	mov.w	r8, #0
 800b1d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1da:	f104 0b1a 	add.w	fp, r4, #26
 800b1de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1e0:	ebaa 0303 	sub.w	r3, sl, r3
 800b1e4:	eba3 0309 	sub.w	r3, r3, r9
 800b1e8:	4543      	cmp	r3, r8
 800b1ea:	f77f af7a 	ble.w	800b0e2 <_printf_float+0x242>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	465a      	mov	r2, fp
 800b1f2:	4631      	mov	r1, r6
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	47b8      	blx	r7
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	f43f aeac 	beq.w	800af56 <_printf_float+0xb6>
 800b1fe:	f108 0801 	add.w	r8, r8, #1
 800b202:	e7ec      	b.n	800b1de <_printf_float+0x33e>
 800b204:	4642      	mov	r2, r8
 800b206:	4631      	mov	r1, r6
 800b208:	4628      	mov	r0, r5
 800b20a:	47b8      	blx	r7
 800b20c:	3001      	adds	r0, #1
 800b20e:	d1c2      	bne.n	800b196 <_printf_float+0x2f6>
 800b210:	e6a1      	b.n	800af56 <_printf_float+0xb6>
 800b212:	2301      	movs	r3, #1
 800b214:	4631      	mov	r1, r6
 800b216:	4628      	mov	r0, r5
 800b218:	920a      	str	r2, [sp, #40]	@ 0x28
 800b21a:	47b8      	blx	r7
 800b21c:	3001      	adds	r0, #1
 800b21e:	f43f ae9a 	beq.w	800af56 <_printf_float+0xb6>
 800b222:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b224:	f10b 0b01 	add.w	fp, fp, #1
 800b228:	e7bb      	b.n	800b1a2 <_printf_float+0x302>
 800b22a:	4631      	mov	r1, r6
 800b22c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b230:	4628      	mov	r0, r5
 800b232:	47b8      	blx	r7
 800b234:	3001      	adds	r0, #1
 800b236:	d1c0      	bne.n	800b1ba <_printf_float+0x31a>
 800b238:	e68d      	b.n	800af56 <_printf_float+0xb6>
 800b23a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b23c:	464b      	mov	r3, r9
 800b23e:	4631      	mov	r1, r6
 800b240:	4628      	mov	r0, r5
 800b242:	4442      	add	r2, r8
 800b244:	47b8      	blx	r7
 800b246:	3001      	adds	r0, #1
 800b248:	d1c3      	bne.n	800b1d2 <_printf_float+0x332>
 800b24a:	e684      	b.n	800af56 <_printf_float+0xb6>
 800b24c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b250:	f1ba 0f01 	cmp.w	sl, #1
 800b254:	dc01      	bgt.n	800b25a <_printf_float+0x3ba>
 800b256:	07db      	lsls	r3, r3, #31
 800b258:	d536      	bpl.n	800b2c8 <_printf_float+0x428>
 800b25a:	2301      	movs	r3, #1
 800b25c:	4642      	mov	r2, r8
 800b25e:	4631      	mov	r1, r6
 800b260:	4628      	mov	r0, r5
 800b262:	47b8      	blx	r7
 800b264:	3001      	adds	r0, #1
 800b266:	f43f ae76 	beq.w	800af56 <_printf_float+0xb6>
 800b26a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b26e:	4631      	mov	r1, r6
 800b270:	4628      	mov	r0, r5
 800b272:	47b8      	blx	r7
 800b274:	3001      	adds	r0, #1
 800b276:	f43f ae6e 	beq.w	800af56 <_printf_float+0xb6>
 800b27a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b27e:	2200      	movs	r2, #0
 800b280:	2300      	movs	r3, #0
 800b282:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b286:	f7f5 fbd5 	bl	8000a34 <__aeabi_dcmpeq>
 800b28a:	b9c0      	cbnz	r0, 800b2be <_printf_float+0x41e>
 800b28c:	4653      	mov	r3, sl
 800b28e:	f108 0201 	add.w	r2, r8, #1
 800b292:	4631      	mov	r1, r6
 800b294:	4628      	mov	r0, r5
 800b296:	47b8      	blx	r7
 800b298:	3001      	adds	r0, #1
 800b29a:	d10c      	bne.n	800b2b6 <_printf_float+0x416>
 800b29c:	e65b      	b.n	800af56 <_printf_float+0xb6>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	465a      	mov	r2, fp
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	47b8      	blx	r7
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	f43f ae54 	beq.w	800af56 <_printf_float+0xb6>
 800b2ae:	f108 0801 	add.w	r8, r8, #1
 800b2b2:	45d0      	cmp	r8, sl
 800b2b4:	dbf3      	blt.n	800b29e <_printf_float+0x3fe>
 800b2b6:	464b      	mov	r3, r9
 800b2b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b2bc:	e6e0      	b.n	800b080 <_printf_float+0x1e0>
 800b2be:	f04f 0800 	mov.w	r8, #0
 800b2c2:	f104 0b1a 	add.w	fp, r4, #26
 800b2c6:	e7f4      	b.n	800b2b2 <_printf_float+0x412>
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	4642      	mov	r2, r8
 800b2cc:	e7e1      	b.n	800b292 <_printf_float+0x3f2>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	464a      	mov	r2, r9
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	47b8      	blx	r7
 800b2d8:	3001      	adds	r0, #1
 800b2da:	f43f ae3c 	beq.w	800af56 <_printf_float+0xb6>
 800b2de:	f108 0801 	add.w	r8, r8, #1
 800b2e2:	68e3      	ldr	r3, [r4, #12]
 800b2e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b2e6:	1a5b      	subs	r3, r3, r1
 800b2e8:	4543      	cmp	r3, r8
 800b2ea:	dcf0      	bgt.n	800b2ce <_printf_float+0x42e>
 800b2ec:	e6fd      	b.n	800b0ea <_printf_float+0x24a>
 800b2ee:	f04f 0800 	mov.w	r8, #0
 800b2f2:	f104 0919 	add.w	r9, r4, #25
 800b2f6:	e7f4      	b.n	800b2e2 <_printf_float+0x442>

0800b2f8 <_printf_common>:
 800b2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2fc:	4616      	mov	r6, r2
 800b2fe:	4698      	mov	r8, r3
 800b300:	688a      	ldr	r2, [r1, #8]
 800b302:	690b      	ldr	r3, [r1, #16]
 800b304:	4607      	mov	r7, r0
 800b306:	4293      	cmp	r3, r2
 800b308:	bfb8      	it	lt
 800b30a:	4613      	movlt	r3, r2
 800b30c:	6033      	str	r3, [r6, #0]
 800b30e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b312:	460c      	mov	r4, r1
 800b314:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b318:	b10a      	cbz	r2, 800b31e <_printf_common+0x26>
 800b31a:	3301      	adds	r3, #1
 800b31c:	6033      	str	r3, [r6, #0]
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	0699      	lsls	r1, r3, #26
 800b322:	bf42      	ittt	mi
 800b324:	6833      	ldrmi	r3, [r6, #0]
 800b326:	3302      	addmi	r3, #2
 800b328:	6033      	strmi	r3, [r6, #0]
 800b32a:	6825      	ldr	r5, [r4, #0]
 800b32c:	f015 0506 	ands.w	r5, r5, #6
 800b330:	d106      	bne.n	800b340 <_printf_common+0x48>
 800b332:	f104 0a19 	add.w	sl, r4, #25
 800b336:	68e3      	ldr	r3, [r4, #12]
 800b338:	6832      	ldr	r2, [r6, #0]
 800b33a:	1a9b      	subs	r3, r3, r2
 800b33c:	42ab      	cmp	r3, r5
 800b33e:	dc2b      	bgt.n	800b398 <_printf_common+0xa0>
 800b340:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b344:	6822      	ldr	r2, [r4, #0]
 800b346:	3b00      	subs	r3, #0
 800b348:	bf18      	it	ne
 800b34a:	2301      	movne	r3, #1
 800b34c:	0692      	lsls	r2, r2, #26
 800b34e:	d430      	bmi.n	800b3b2 <_printf_common+0xba>
 800b350:	4641      	mov	r1, r8
 800b352:	4638      	mov	r0, r7
 800b354:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b358:	47c8      	blx	r9
 800b35a:	3001      	adds	r0, #1
 800b35c:	d023      	beq.n	800b3a6 <_printf_common+0xae>
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	6922      	ldr	r2, [r4, #16]
 800b362:	f003 0306 	and.w	r3, r3, #6
 800b366:	2b04      	cmp	r3, #4
 800b368:	bf14      	ite	ne
 800b36a:	2500      	movne	r5, #0
 800b36c:	6833      	ldreq	r3, [r6, #0]
 800b36e:	f04f 0600 	mov.w	r6, #0
 800b372:	bf08      	it	eq
 800b374:	68e5      	ldreq	r5, [r4, #12]
 800b376:	f104 041a 	add.w	r4, r4, #26
 800b37a:	bf08      	it	eq
 800b37c:	1aed      	subeq	r5, r5, r3
 800b37e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b382:	bf08      	it	eq
 800b384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b388:	4293      	cmp	r3, r2
 800b38a:	bfc4      	itt	gt
 800b38c:	1a9b      	subgt	r3, r3, r2
 800b38e:	18ed      	addgt	r5, r5, r3
 800b390:	42b5      	cmp	r5, r6
 800b392:	d11a      	bne.n	800b3ca <_printf_common+0xd2>
 800b394:	2000      	movs	r0, #0
 800b396:	e008      	b.n	800b3aa <_printf_common+0xb2>
 800b398:	2301      	movs	r3, #1
 800b39a:	4652      	mov	r2, sl
 800b39c:	4641      	mov	r1, r8
 800b39e:	4638      	mov	r0, r7
 800b3a0:	47c8      	blx	r9
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	d103      	bne.n	800b3ae <_printf_common+0xb6>
 800b3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ae:	3501      	adds	r5, #1
 800b3b0:	e7c1      	b.n	800b336 <_printf_common+0x3e>
 800b3b2:	2030      	movs	r0, #48	@ 0x30
 800b3b4:	18e1      	adds	r1, r4, r3
 800b3b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3ba:	1c5a      	adds	r2, r3, #1
 800b3bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b3c0:	4422      	add	r2, r4
 800b3c2:	3302      	adds	r3, #2
 800b3c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b3c8:	e7c2      	b.n	800b350 <_printf_common+0x58>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	4641      	mov	r1, r8
 800b3d0:	4638      	mov	r0, r7
 800b3d2:	47c8      	blx	r9
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	d0e6      	beq.n	800b3a6 <_printf_common+0xae>
 800b3d8:	3601      	adds	r6, #1
 800b3da:	e7d9      	b.n	800b390 <_printf_common+0x98>

0800b3dc <_printf_i>:
 800b3dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e0:	7e0f      	ldrb	r7, [r1, #24]
 800b3e2:	4691      	mov	r9, r2
 800b3e4:	2f78      	cmp	r7, #120	@ 0x78
 800b3e6:	4680      	mov	r8, r0
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	469a      	mov	sl, r3
 800b3ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3f2:	d807      	bhi.n	800b404 <_printf_i+0x28>
 800b3f4:	2f62      	cmp	r7, #98	@ 0x62
 800b3f6:	d80a      	bhi.n	800b40e <_printf_i+0x32>
 800b3f8:	2f00      	cmp	r7, #0
 800b3fa:	f000 80d1 	beq.w	800b5a0 <_printf_i+0x1c4>
 800b3fe:	2f58      	cmp	r7, #88	@ 0x58
 800b400:	f000 80b8 	beq.w	800b574 <_printf_i+0x198>
 800b404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b408:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b40c:	e03a      	b.n	800b484 <_printf_i+0xa8>
 800b40e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b412:	2b15      	cmp	r3, #21
 800b414:	d8f6      	bhi.n	800b404 <_printf_i+0x28>
 800b416:	a101      	add	r1, pc, #4	@ (adr r1, 800b41c <_printf_i+0x40>)
 800b418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b41c:	0800b475 	.word	0x0800b475
 800b420:	0800b489 	.word	0x0800b489
 800b424:	0800b405 	.word	0x0800b405
 800b428:	0800b405 	.word	0x0800b405
 800b42c:	0800b405 	.word	0x0800b405
 800b430:	0800b405 	.word	0x0800b405
 800b434:	0800b489 	.word	0x0800b489
 800b438:	0800b405 	.word	0x0800b405
 800b43c:	0800b405 	.word	0x0800b405
 800b440:	0800b405 	.word	0x0800b405
 800b444:	0800b405 	.word	0x0800b405
 800b448:	0800b587 	.word	0x0800b587
 800b44c:	0800b4b3 	.word	0x0800b4b3
 800b450:	0800b541 	.word	0x0800b541
 800b454:	0800b405 	.word	0x0800b405
 800b458:	0800b405 	.word	0x0800b405
 800b45c:	0800b5a9 	.word	0x0800b5a9
 800b460:	0800b405 	.word	0x0800b405
 800b464:	0800b4b3 	.word	0x0800b4b3
 800b468:	0800b405 	.word	0x0800b405
 800b46c:	0800b405 	.word	0x0800b405
 800b470:	0800b549 	.word	0x0800b549
 800b474:	6833      	ldr	r3, [r6, #0]
 800b476:	1d1a      	adds	r2, r3, #4
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	6032      	str	r2, [r6, #0]
 800b47c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b480:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b484:	2301      	movs	r3, #1
 800b486:	e09c      	b.n	800b5c2 <_printf_i+0x1e6>
 800b488:	6833      	ldr	r3, [r6, #0]
 800b48a:	6820      	ldr	r0, [r4, #0]
 800b48c:	1d19      	adds	r1, r3, #4
 800b48e:	6031      	str	r1, [r6, #0]
 800b490:	0606      	lsls	r6, r0, #24
 800b492:	d501      	bpl.n	800b498 <_printf_i+0xbc>
 800b494:	681d      	ldr	r5, [r3, #0]
 800b496:	e003      	b.n	800b4a0 <_printf_i+0xc4>
 800b498:	0645      	lsls	r5, r0, #25
 800b49a:	d5fb      	bpl.n	800b494 <_printf_i+0xb8>
 800b49c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b4a0:	2d00      	cmp	r5, #0
 800b4a2:	da03      	bge.n	800b4ac <_printf_i+0xd0>
 800b4a4:	232d      	movs	r3, #45	@ 0x2d
 800b4a6:	426d      	negs	r5, r5
 800b4a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4ac:	230a      	movs	r3, #10
 800b4ae:	4858      	ldr	r0, [pc, #352]	@ (800b610 <_printf_i+0x234>)
 800b4b0:	e011      	b.n	800b4d6 <_printf_i+0xfa>
 800b4b2:	6821      	ldr	r1, [r4, #0]
 800b4b4:	6833      	ldr	r3, [r6, #0]
 800b4b6:	0608      	lsls	r0, r1, #24
 800b4b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4bc:	d402      	bmi.n	800b4c4 <_printf_i+0xe8>
 800b4be:	0649      	lsls	r1, r1, #25
 800b4c0:	bf48      	it	mi
 800b4c2:	b2ad      	uxthmi	r5, r5
 800b4c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b4c6:	6033      	str	r3, [r6, #0]
 800b4c8:	bf14      	ite	ne
 800b4ca:	230a      	movne	r3, #10
 800b4cc:	2308      	moveq	r3, #8
 800b4ce:	4850      	ldr	r0, [pc, #320]	@ (800b610 <_printf_i+0x234>)
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4d6:	6866      	ldr	r6, [r4, #4]
 800b4d8:	2e00      	cmp	r6, #0
 800b4da:	60a6      	str	r6, [r4, #8]
 800b4dc:	db05      	blt.n	800b4ea <_printf_i+0x10e>
 800b4de:	6821      	ldr	r1, [r4, #0]
 800b4e0:	432e      	orrs	r6, r5
 800b4e2:	f021 0104 	bic.w	r1, r1, #4
 800b4e6:	6021      	str	r1, [r4, #0]
 800b4e8:	d04b      	beq.n	800b582 <_printf_i+0x1a6>
 800b4ea:	4616      	mov	r6, r2
 800b4ec:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4f0:	fb03 5711 	mls	r7, r3, r1, r5
 800b4f4:	5dc7      	ldrb	r7, [r0, r7]
 800b4f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4fa:	462f      	mov	r7, r5
 800b4fc:	42bb      	cmp	r3, r7
 800b4fe:	460d      	mov	r5, r1
 800b500:	d9f4      	bls.n	800b4ec <_printf_i+0x110>
 800b502:	2b08      	cmp	r3, #8
 800b504:	d10b      	bne.n	800b51e <_printf_i+0x142>
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	07df      	lsls	r7, r3, #31
 800b50a:	d508      	bpl.n	800b51e <_printf_i+0x142>
 800b50c:	6923      	ldr	r3, [r4, #16]
 800b50e:	6861      	ldr	r1, [r4, #4]
 800b510:	4299      	cmp	r1, r3
 800b512:	bfde      	ittt	le
 800b514:	2330      	movle	r3, #48	@ 0x30
 800b516:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b51a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b51e:	1b92      	subs	r2, r2, r6
 800b520:	6122      	str	r2, [r4, #16]
 800b522:	464b      	mov	r3, r9
 800b524:	4621      	mov	r1, r4
 800b526:	4640      	mov	r0, r8
 800b528:	f8cd a000 	str.w	sl, [sp]
 800b52c:	aa03      	add	r2, sp, #12
 800b52e:	f7ff fee3 	bl	800b2f8 <_printf_common>
 800b532:	3001      	adds	r0, #1
 800b534:	d14a      	bne.n	800b5cc <_printf_i+0x1f0>
 800b536:	f04f 30ff 	mov.w	r0, #4294967295
 800b53a:	b004      	add	sp, #16
 800b53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b540:	6823      	ldr	r3, [r4, #0]
 800b542:	f043 0320 	orr.w	r3, r3, #32
 800b546:	6023      	str	r3, [r4, #0]
 800b548:	2778      	movs	r7, #120	@ 0x78
 800b54a:	4832      	ldr	r0, [pc, #200]	@ (800b614 <_printf_i+0x238>)
 800b54c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	6831      	ldr	r1, [r6, #0]
 800b554:	061f      	lsls	r7, r3, #24
 800b556:	f851 5b04 	ldr.w	r5, [r1], #4
 800b55a:	d402      	bmi.n	800b562 <_printf_i+0x186>
 800b55c:	065f      	lsls	r7, r3, #25
 800b55e:	bf48      	it	mi
 800b560:	b2ad      	uxthmi	r5, r5
 800b562:	6031      	str	r1, [r6, #0]
 800b564:	07d9      	lsls	r1, r3, #31
 800b566:	bf44      	itt	mi
 800b568:	f043 0320 	orrmi.w	r3, r3, #32
 800b56c:	6023      	strmi	r3, [r4, #0]
 800b56e:	b11d      	cbz	r5, 800b578 <_printf_i+0x19c>
 800b570:	2310      	movs	r3, #16
 800b572:	e7ad      	b.n	800b4d0 <_printf_i+0xf4>
 800b574:	4826      	ldr	r0, [pc, #152]	@ (800b610 <_printf_i+0x234>)
 800b576:	e7e9      	b.n	800b54c <_printf_i+0x170>
 800b578:	6823      	ldr	r3, [r4, #0]
 800b57a:	f023 0320 	bic.w	r3, r3, #32
 800b57e:	6023      	str	r3, [r4, #0]
 800b580:	e7f6      	b.n	800b570 <_printf_i+0x194>
 800b582:	4616      	mov	r6, r2
 800b584:	e7bd      	b.n	800b502 <_printf_i+0x126>
 800b586:	6833      	ldr	r3, [r6, #0]
 800b588:	6825      	ldr	r5, [r4, #0]
 800b58a:	1d18      	adds	r0, r3, #4
 800b58c:	6961      	ldr	r1, [r4, #20]
 800b58e:	6030      	str	r0, [r6, #0]
 800b590:	062e      	lsls	r6, r5, #24
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	d501      	bpl.n	800b59a <_printf_i+0x1be>
 800b596:	6019      	str	r1, [r3, #0]
 800b598:	e002      	b.n	800b5a0 <_printf_i+0x1c4>
 800b59a:	0668      	lsls	r0, r5, #25
 800b59c:	d5fb      	bpl.n	800b596 <_printf_i+0x1ba>
 800b59e:	8019      	strh	r1, [r3, #0]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	4616      	mov	r6, r2
 800b5a4:	6123      	str	r3, [r4, #16]
 800b5a6:	e7bc      	b.n	800b522 <_printf_i+0x146>
 800b5a8:	6833      	ldr	r3, [r6, #0]
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	1d1a      	adds	r2, r3, #4
 800b5ae:	6032      	str	r2, [r6, #0]
 800b5b0:	681e      	ldr	r6, [r3, #0]
 800b5b2:	6862      	ldr	r2, [r4, #4]
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	f000 f9b2 	bl	800b91e <memchr>
 800b5ba:	b108      	cbz	r0, 800b5c0 <_printf_i+0x1e4>
 800b5bc:	1b80      	subs	r0, r0, r6
 800b5be:	6060      	str	r0, [r4, #4]
 800b5c0:	6863      	ldr	r3, [r4, #4]
 800b5c2:	6123      	str	r3, [r4, #16]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5ca:	e7aa      	b.n	800b522 <_printf_i+0x146>
 800b5cc:	4632      	mov	r2, r6
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	4640      	mov	r0, r8
 800b5d2:	6923      	ldr	r3, [r4, #16]
 800b5d4:	47d0      	blx	sl
 800b5d6:	3001      	adds	r0, #1
 800b5d8:	d0ad      	beq.n	800b536 <_printf_i+0x15a>
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	079b      	lsls	r3, r3, #30
 800b5de:	d413      	bmi.n	800b608 <_printf_i+0x22c>
 800b5e0:	68e0      	ldr	r0, [r4, #12]
 800b5e2:	9b03      	ldr	r3, [sp, #12]
 800b5e4:	4298      	cmp	r0, r3
 800b5e6:	bfb8      	it	lt
 800b5e8:	4618      	movlt	r0, r3
 800b5ea:	e7a6      	b.n	800b53a <_printf_i+0x15e>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	4632      	mov	r2, r6
 800b5f0:	4649      	mov	r1, r9
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	47d0      	blx	sl
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	d09d      	beq.n	800b536 <_printf_i+0x15a>
 800b5fa:	3501      	adds	r5, #1
 800b5fc:	68e3      	ldr	r3, [r4, #12]
 800b5fe:	9903      	ldr	r1, [sp, #12]
 800b600:	1a5b      	subs	r3, r3, r1
 800b602:	42ab      	cmp	r3, r5
 800b604:	dcf2      	bgt.n	800b5ec <_printf_i+0x210>
 800b606:	e7eb      	b.n	800b5e0 <_printf_i+0x204>
 800b608:	2500      	movs	r5, #0
 800b60a:	f104 0619 	add.w	r6, r4, #25
 800b60e:	e7f5      	b.n	800b5fc <_printf_i+0x220>
 800b610:	0800d864 	.word	0x0800d864
 800b614:	0800d875 	.word	0x0800d875

0800b618 <std>:
 800b618:	2300      	movs	r3, #0
 800b61a:	b510      	push	{r4, lr}
 800b61c:	4604      	mov	r4, r0
 800b61e:	e9c0 3300 	strd	r3, r3, [r0]
 800b622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b626:	6083      	str	r3, [r0, #8]
 800b628:	8181      	strh	r1, [r0, #12]
 800b62a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b62c:	81c2      	strh	r2, [r0, #14]
 800b62e:	6183      	str	r3, [r0, #24]
 800b630:	4619      	mov	r1, r3
 800b632:	2208      	movs	r2, #8
 800b634:	305c      	adds	r0, #92	@ 0x5c
 800b636:	f000 f904 	bl	800b842 <memset>
 800b63a:	4b0d      	ldr	r3, [pc, #52]	@ (800b670 <std+0x58>)
 800b63c:	6224      	str	r4, [r4, #32]
 800b63e:	6263      	str	r3, [r4, #36]	@ 0x24
 800b640:	4b0c      	ldr	r3, [pc, #48]	@ (800b674 <std+0x5c>)
 800b642:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b644:	4b0c      	ldr	r3, [pc, #48]	@ (800b678 <std+0x60>)
 800b646:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b648:	4b0c      	ldr	r3, [pc, #48]	@ (800b67c <std+0x64>)
 800b64a:	6323      	str	r3, [r4, #48]	@ 0x30
 800b64c:	4b0c      	ldr	r3, [pc, #48]	@ (800b680 <std+0x68>)
 800b64e:	429c      	cmp	r4, r3
 800b650:	d006      	beq.n	800b660 <std+0x48>
 800b652:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b656:	4294      	cmp	r4, r2
 800b658:	d002      	beq.n	800b660 <std+0x48>
 800b65a:	33d0      	adds	r3, #208	@ 0xd0
 800b65c:	429c      	cmp	r4, r3
 800b65e:	d105      	bne.n	800b66c <std+0x54>
 800b660:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b668:	f000 b956 	b.w	800b918 <__retarget_lock_init_recursive>
 800b66c:	bd10      	pop	{r4, pc}
 800b66e:	bf00      	nop
 800b670:	0800b79d 	.word	0x0800b79d
 800b674:	0800b7bf 	.word	0x0800b7bf
 800b678:	0800b7f7 	.word	0x0800b7f7
 800b67c:	0800b81b 	.word	0x0800b81b
 800b680:	20004964 	.word	0x20004964

0800b684 <stdio_exit_handler>:
 800b684:	4a02      	ldr	r2, [pc, #8]	@ (800b690 <stdio_exit_handler+0xc>)
 800b686:	4903      	ldr	r1, [pc, #12]	@ (800b694 <stdio_exit_handler+0x10>)
 800b688:	4803      	ldr	r0, [pc, #12]	@ (800b698 <stdio_exit_handler+0x14>)
 800b68a:	f000 b869 	b.w	800b760 <_fwalk_sglue>
 800b68e:	bf00      	nop
 800b690:	20000010 	.word	0x20000010
 800b694:	0800d001 	.word	0x0800d001
 800b698:	20000020 	.word	0x20000020

0800b69c <cleanup_stdio>:
 800b69c:	6841      	ldr	r1, [r0, #4]
 800b69e:	4b0c      	ldr	r3, [pc, #48]	@ (800b6d0 <cleanup_stdio+0x34>)
 800b6a0:	b510      	push	{r4, lr}
 800b6a2:	4299      	cmp	r1, r3
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	d001      	beq.n	800b6ac <cleanup_stdio+0x10>
 800b6a8:	f001 fcaa 	bl	800d000 <_fflush_r>
 800b6ac:	68a1      	ldr	r1, [r4, #8]
 800b6ae:	4b09      	ldr	r3, [pc, #36]	@ (800b6d4 <cleanup_stdio+0x38>)
 800b6b0:	4299      	cmp	r1, r3
 800b6b2:	d002      	beq.n	800b6ba <cleanup_stdio+0x1e>
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f001 fca3 	bl	800d000 <_fflush_r>
 800b6ba:	68e1      	ldr	r1, [r4, #12]
 800b6bc:	4b06      	ldr	r3, [pc, #24]	@ (800b6d8 <cleanup_stdio+0x3c>)
 800b6be:	4299      	cmp	r1, r3
 800b6c0:	d004      	beq.n	800b6cc <cleanup_stdio+0x30>
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6c8:	f001 bc9a 	b.w	800d000 <_fflush_r>
 800b6cc:	bd10      	pop	{r4, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20004964 	.word	0x20004964
 800b6d4:	200049cc 	.word	0x200049cc
 800b6d8:	20004a34 	.word	0x20004a34

0800b6dc <global_stdio_init.part.0>:
 800b6dc:	b510      	push	{r4, lr}
 800b6de:	4b0b      	ldr	r3, [pc, #44]	@ (800b70c <global_stdio_init.part.0+0x30>)
 800b6e0:	4c0b      	ldr	r4, [pc, #44]	@ (800b710 <global_stdio_init.part.0+0x34>)
 800b6e2:	4a0c      	ldr	r2, [pc, #48]	@ (800b714 <global_stdio_init.part.0+0x38>)
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	601a      	str	r2, [r3, #0]
 800b6e8:	2104      	movs	r1, #4
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f7ff ff94 	bl	800b618 <std>
 800b6f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	2109      	movs	r1, #9
 800b6f8:	f7ff ff8e 	bl	800b618 <std>
 800b6fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b700:	2202      	movs	r2, #2
 800b702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b706:	2112      	movs	r1, #18
 800b708:	f7ff bf86 	b.w	800b618 <std>
 800b70c:	20004a9c 	.word	0x20004a9c
 800b710:	20004964 	.word	0x20004964
 800b714:	0800b685 	.word	0x0800b685

0800b718 <__sfp_lock_acquire>:
 800b718:	4801      	ldr	r0, [pc, #4]	@ (800b720 <__sfp_lock_acquire+0x8>)
 800b71a:	f000 b8fe 	b.w	800b91a <__retarget_lock_acquire_recursive>
 800b71e:	bf00      	nop
 800b720:	20004aa5 	.word	0x20004aa5

0800b724 <__sfp_lock_release>:
 800b724:	4801      	ldr	r0, [pc, #4]	@ (800b72c <__sfp_lock_release+0x8>)
 800b726:	f000 b8f9 	b.w	800b91c <__retarget_lock_release_recursive>
 800b72a:	bf00      	nop
 800b72c:	20004aa5 	.word	0x20004aa5

0800b730 <__sinit>:
 800b730:	b510      	push	{r4, lr}
 800b732:	4604      	mov	r4, r0
 800b734:	f7ff fff0 	bl	800b718 <__sfp_lock_acquire>
 800b738:	6a23      	ldr	r3, [r4, #32]
 800b73a:	b11b      	cbz	r3, 800b744 <__sinit+0x14>
 800b73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b740:	f7ff bff0 	b.w	800b724 <__sfp_lock_release>
 800b744:	4b04      	ldr	r3, [pc, #16]	@ (800b758 <__sinit+0x28>)
 800b746:	6223      	str	r3, [r4, #32]
 800b748:	4b04      	ldr	r3, [pc, #16]	@ (800b75c <__sinit+0x2c>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1f5      	bne.n	800b73c <__sinit+0xc>
 800b750:	f7ff ffc4 	bl	800b6dc <global_stdio_init.part.0>
 800b754:	e7f2      	b.n	800b73c <__sinit+0xc>
 800b756:	bf00      	nop
 800b758:	0800b69d 	.word	0x0800b69d
 800b75c:	20004a9c 	.word	0x20004a9c

0800b760 <_fwalk_sglue>:
 800b760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b764:	4607      	mov	r7, r0
 800b766:	4688      	mov	r8, r1
 800b768:	4614      	mov	r4, r2
 800b76a:	2600      	movs	r6, #0
 800b76c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b770:	f1b9 0901 	subs.w	r9, r9, #1
 800b774:	d505      	bpl.n	800b782 <_fwalk_sglue+0x22>
 800b776:	6824      	ldr	r4, [r4, #0]
 800b778:	2c00      	cmp	r4, #0
 800b77a:	d1f7      	bne.n	800b76c <_fwalk_sglue+0xc>
 800b77c:	4630      	mov	r0, r6
 800b77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b782:	89ab      	ldrh	r3, [r5, #12]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d907      	bls.n	800b798 <_fwalk_sglue+0x38>
 800b788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b78c:	3301      	adds	r3, #1
 800b78e:	d003      	beq.n	800b798 <_fwalk_sglue+0x38>
 800b790:	4629      	mov	r1, r5
 800b792:	4638      	mov	r0, r7
 800b794:	47c0      	blx	r8
 800b796:	4306      	orrs	r6, r0
 800b798:	3568      	adds	r5, #104	@ 0x68
 800b79a:	e7e9      	b.n	800b770 <_fwalk_sglue+0x10>

0800b79c <__sread>:
 800b79c:	b510      	push	{r4, lr}
 800b79e:	460c      	mov	r4, r1
 800b7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a4:	f000 f87c 	bl	800b8a0 <_read_r>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	bfab      	itete	ge
 800b7ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b7ae:	89a3      	ldrhlt	r3, [r4, #12]
 800b7b0:	181b      	addge	r3, r3, r0
 800b7b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b7b6:	bfac      	ite	ge
 800b7b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b7ba:	81a3      	strhlt	r3, [r4, #12]
 800b7bc:	bd10      	pop	{r4, pc}

0800b7be <__swrite>:
 800b7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c2:	461f      	mov	r7, r3
 800b7c4:	898b      	ldrh	r3, [r1, #12]
 800b7c6:	4605      	mov	r5, r0
 800b7c8:	05db      	lsls	r3, r3, #23
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	4616      	mov	r6, r2
 800b7ce:	d505      	bpl.n	800b7dc <__swrite+0x1e>
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d8:	f000 f850 	bl	800b87c <_lseek_r>
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	4632      	mov	r2, r6
 800b7e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7e4:	81a3      	strh	r3, [r4, #12]
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	463b      	mov	r3, r7
 800b7ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f2:	f7ff baa5 	b.w	800ad40 <_write_r>

0800b7f6 <__sseek>:
 800b7f6:	b510      	push	{r4, lr}
 800b7f8:	460c      	mov	r4, r1
 800b7fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7fe:	f000 f83d 	bl	800b87c <_lseek_r>
 800b802:	1c43      	adds	r3, r0, #1
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	bf15      	itete	ne
 800b808:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b80a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b80e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b812:	81a3      	strheq	r3, [r4, #12]
 800b814:	bf18      	it	ne
 800b816:	81a3      	strhne	r3, [r4, #12]
 800b818:	bd10      	pop	{r4, pc}

0800b81a <__sclose>:
 800b81a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b81e:	f000 b81d 	b.w	800b85c <_close_r>

0800b822 <memcmp>:
 800b822:	b510      	push	{r4, lr}
 800b824:	3901      	subs	r1, #1
 800b826:	4402      	add	r2, r0
 800b828:	4290      	cmp	r0, r2
 800b82a:	d101      	bne.n	800b830 <memcmp+0xe>
 800b82c:	2000      	movs	r0, #0
 800b82e:	e005      	b.n	800b83c <memcmp+0x1a>
 800b830:	7803      	ldrb	r3, [r0, #0]
 800b832:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b836:	42a3      	cmp	r3, r4
 800b838:	d001      	beq.n	800b83e <memcmp+0x1c>
 800b83a:	1b18      	subs	r0, r3, r4
 800b83c:	bd10      	pop	{r4, pc}
 800b83e:	3001      	adds	r0, #1
 800b840:	e7f2      	b.n	800b828 <memcmp+0x6>

0800b842 <memset>:
 800b842:	4603      	mov	r3, r0
 800b844:	4402      	add	r2, r0
 800b846:	4293      	cmp	r3, r2
 800b848:	d100      	bne.n	800b84c <memset+0xa>
 800b84a:	4770      	bx	lr
 800b84c:	f803 1b01 	strb.w	r1, [r3], #1
 800b850:	e7f9      	b.n	800b846 <memset+0x4>
	...

0800b854 <_localeconv_r>:
 800b854:	4800      	ldr	r0, [pc, #0]	@ (800b858 <_localeconv_r+0x4>)
 800b856:	4770      	bx	lr
 800b858:	2000015c 	.word	0x2000015c

0800b85c <_close_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	2300      	movs	r3, #0
 800b860:	4d05      	ldr	r5, [pc, #20]	@ (800b878 <_close_r+0x1c>)
 800b862:	4604      	mov	r4, r0
 800b864:	4608      	mov	r0, r1
 800b866:	602b      	str	r3, [r5, #0]
 800b868:	f7f5 ff4b 	bl	8001702 <_close>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_close_r+0x1a>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_close_r+0x1a>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	20004aa0 	.word	0x20004aa0

0800b87c <_lseek_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	4604      	mov	r4, r0
 800b880:	4608      	mov	r0, r1
 800b882:	4611      	mov	r1, r2
 800b884:	2200      	movs	r2, #0
 800b886:	4d05      	ldr	r5, [pc, #20]	@ (800b89c <_lseek_r+0x20>)
 800b888:	602a      	str	r2, [r5, #0]
 800b88a:	461a      	mov	r2, r3
 800b88c:	f7f5 ff5d 	bl	800174a <_lseek>
 800b890:	1c43      	adds	r3, r0, #1
 800b892:	d102      	bne.n	800b89a <_lseek_r+0x1e>
 800b894:	682b      	ldr	r3, [r5, #0]
 800b896:	b103      	cbz	r3, 800b89a <_lseek_r+0x1e>
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	bd38      	pop	{r3, r4, r5, pc}
 800b89c:	20004aa0 	.word	0x20004aa0

0800b8a0 <_read_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	4608      	mov	r0, r1
 800b8a6:	4611      	mov	r1, r2
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	4d05      	ldr	r5, [pc, #20]	@ (800b8c0 <_read_r+0x20>)
 800b8ac:	602a      	str	r2, [r5, #0]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	f7f5 ff0a 	bl	80016c8 <_read>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d102      	bne.n	800b8be <_read_r+0x1e>
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	b103      	cbz	r3, 800b8be <_read_r+0x1e>
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	20004aa0 	.word	0x20004aa0

0800b8c4 <__errno>:
 800b8c4:	4b01      	ldr	r3, [pc, #4]	@ (800b8cc <__errno+0x8>)
 800b8c6:	6818      	ldr	r0, [r3, #0]
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	2000001c 	.word	0x2000001c

0800b8d0 <__libc_init_array>:
 800b8d0:	b570      	push	{r4, r5, r6, lr}
 800b8d2:	2600      	movs	r6, #0
 800b8d4:	4d0c      	ldr	r5, [pc, #48]	@ (800b908 <__libc_init_array+0x38>)
 800b8d6:	4c0d      	ldr	r4, [pc, #52]	@ (800b90c <__libc_init_array+0x3c>)
 800b8d8:	1b64      	subs	r4, r4, r5
 800b8da:	10a4      	asrs	r4, r4, #2
 800b8dc:	42a6      	cmp	r6, r4
 800b8de:	d109      	bne.n	800b8f4 <__libc_init_array+0x24>
 800b8e0:	f001 fecc 	bl	800d67c <_init>
 800b8e4:	2600      	movs	r6, #0
 800b8e6:	4d0a      	ldr	r5, [pc, #40]	@ (800b910 <__libc_init_array+0x40>)
 800b8e8:	4c0a      	ldr	r4, [pc, #40]	@ (800b914 <__libc_init_array+0x44>)
 800b8ea:	1b64      	subs	r4, r4, r5
 800b8ec:	10a4      	asrs	r4, r4, #2
 800b8ee:	42a6      	cmp	r6, r4
 800b8f0:	d105      	bne.n	800b8fe <__libc_init_array+0x2e>
 800b8f2:	bd70      	pop	{r4, r5, r6, pc}
 800b8f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8f8:	4798      	blx	r3
 800b8fa:	3601      	adds	r6, #1
 800b8fc:	e7ee      	b.n	800b8dc <__libc_init_array+0xc>
 800b8fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b902:	4798      	blx	r3
 800b904:	3601      	adds	r6, #1
 800b906:	e7f2      	b.n	800b8ee <__libc_init_array+0x1e>
 800b908:	0800dbcc 	.word	0x0800dbcc
 800b90c:	0800dbcc 	.word	0x0800dbcc
 800b910:	0800dbcc 	.word	0x0800dbcc
 800b914:	0800dbd0 	.word	0x0800dbd0

0800b918 <__retarget_lock_init_recursive>:
 800b918:	4770      	bx	lr

0800b91a <__retarget_lock_acquire_recursive>:
 800b91a:	4770      	bx	lr

0800b91c <__retarget_lock_release_recursive>:
 800b91c:	4770      	bx	lr

0800b91e <memchr>:
 800b91e:	4603      	mov	r3, r0
 800b920:	b510      	push	{r4, lr}
 800b922:	b2c9      	uxtb	r1, r1
 800b924:	4402      	add	r2, r0
 800b926:	4293      	cmp	r3, r2
 800b928:	4618      	mov	r0, r3
 800b92a:	d101      	bne.n	800b930 <memchr+0x12>
 800b92c:	2000      	movs	r0, #0
 800b92e:	e003      	b.n	800b938 <memchr+0x1a>
 800b930:	7804      	ldrb	r4, [r0, #0]
 800b932:	3301      	adds	r3, #1
 800b934:	428c      	cmp	r4, r1
 800b936:	d1f6      	bne.n	800b926 <memchr+0x8>
 800b938:	bd10      	pop	{r4, pc}

0800b93a <memcpy>:
 800b93a:	440a      	add	r2, r1
 800b93c:	4291      	cmp	r1, r2
 800b93e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b942:	d100      	bne.n	800b946 <memcpy+0xc>
 800b944:	4770      	bx	lr
 800b946:	b510      	push	{r4, lr}
 800b948:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b94c:	4291      	cmp	r1, r2
 800b94e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b952:	d1f9      	bne.n	800b948 <memcpy+0xe>
 800b954:	bd10      	pop	{r4, pc}

0800b956 <quorem>:
 800b956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95a:	6903      	ldr	r3, [r0, #16]
 800b95c:	690c      	ldr	r4, [r1, #16]
 800b95e:	4607      	mov	r7, r0
 800b960:	42a3      	cmp	r3, r4
 800b962:	db7e      	blt.n	800ba62 <quorem+0x10c>
 800b964:	3c01      	subs	r4, #1
 800b966:	00a3      	lsls	r3, r4, #2
 800b968:	f100 0514 	add.w	r5, r0, #20
 800b96c:	f101 0814 	add.w	r8, r1, #20
 800b970:	9300      	str	r3, [sp, #0]
 800b972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b97c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b980:	3301      	adds	r3, #1
 800b982:	429a      	cmp	r2, r3
 800b984:	fbb2 f6f3 	udiv	r6, r2, r3
 800b988:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b98c:	d32e      	bcc.n	800b9ec <quorem+0x96>
 800b98e:	f04f 0a00 	mov.w	sl, #0
 800b992:	46c4      	mov	ip, r8
 800b994:	46ae      	mov	lr, r5
 800b996:	46d3      	mov	fp, sl
 800b998:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b99c:	b298      	uxth	r0, r3
 800b99e:	fb06 a000 	mla	r0, r6, r0, sl
 800b9a2:	0c1b      	lsrs	r3, r3, #16
 800b9a4:	0c02      	lsrs	r2, r0, #16
 800b9a6:	fb06 2303 	mla	r3, r6, r3, r2
 800b9aa:	f8de 2000 	ldr.w	r2, [lr]
 800b9ae:	b280      	uxth	r0, r0
 800b9b0:	b292      	uxth	r2, r2
 800b9b2:	1a12      	subs	r2, r2, r0
 800b9b4:	445a      	add	r2, fp
 800b9b6:	f8de 0000 	ldr.w	r0, [lr]
 800b9ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b9c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b9c8:	b292      	uxth	r2, r2
 800b9ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b9ce:	45e1      	cmp	r9, ip
 800b9d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b9d4:	f84e 2b04 	str.w	r2, [lr], #4
 800b9d8:	d2de      	bcs.n	800b998 <quorem+0x42>
 800b9da:	9b00      	ldr	r3, [sp, #0]
 800b9dc:	58eb      	ldr	r3, [r5, r3]
 800b9de:	b92b      	cbnz	r3, 800b9ec <quorem+0x96>
 800b9e0:	9b01      	ldr	r3, [sp, #4]
 800b9e2:	3b04      	subs	r3, #4
 800b9e4:	429d      	cmp	r5, r3
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	d32f      	bcc.n	800ba4a <quorem+0xf4>
 800b9ea:	613c      	str	r4, [r7, #16]
 800b9ec:	4638      	mov	r0, r7
 800b9ee:	f001 f97f 	bl	800ccf0 <__mcmp>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	db25      	blt.n	800ba42 <quorem+0xec>
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	f858 2b04 	ldr.w	r2, [r8], #4
 800b9fe:	f8d1 c000 	ldr.w	ip, [r1]
 800ba02:	fa1f fe82 	uxth.w	lr, r2
 800ba06:	fa1f f38c 	uxth.w	r3, ip
 800ba0a:	eba3 030e 	sub.w	r3, r3, lr
 800ba0e:	4403      	add	r3, r0
 800ba10:	0c12      	lsrs	r2, r2, #16
 800ba12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba20:	45c1      	cmp	r9, r8
 800ba22:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba26:	f841 3b04 	str.w	r3, [r1], #4
 800ba2a:	d2e6      	bcs.n	800b9fa <quorem+0xa4>
 800ba2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba34:	b922      	cbnz	r2, 800ba40 <quorem+0xea>
 800ba36:	3b04      	subs	r3, #4
 800ba38:	429d      	cmp	r5, r3
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	d30b      	bcc.n	800ba56 <quorem+0x100>
 800ba3e:	613c      	str	r4, [r7, #16]
 800ba40:	3601      	adds	r6, #1
 800ba42:	4630      	mov	r0, r6
 800ba44:	b003      	add	sp, #12
 800ba46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba4a:	6812      	ldr	r2, [r2, #0]
 800ba4c:	3b04      	subs	r3, #4
 800ba4e:	2a00      	cmp	r2, #0
 800ba50:	d1cb      	bne.n	800b9ea <quorem+0x94>
 800ba52:	3c01      	subs	r4, #1
 800ba54:	e7c6      	b.n	800b9e4 <quorem+0x8e>
 800ba56:	6812      	ldr	r2, [r2, #0]
 800ba58:	3b04      	subs	r3, #4
 800ba5a:	2a00      	cmp	r2, #0
 800ba5c:	d1ef      	bne.n	800ba3e <quorem+0xe8>
 800ba5e:	3c01      	subs	r4, #1
 800ba60:	e7ea      	b.n	800ba38 <quorem+0xe2>
 800ba62:	2000      	movs	r0, #0
 800ba64:	e7ee      	b.n	800ba44 <quorem+0xee>
	...

0800ba68 <_dtoa_r>:
 800ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	4614      	mov	r4, r2
 800ba6e:	461d      	mov	r5, r3
 800ba70:	69c7      	ldr	r7, [r0, #28]
 800ba72:	b097      	sub	sp, #92	@ 0x5c
 800ba74:	4681      	mov	r9, r0
 800ba76:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ba7a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800ba7c:	b97f      	cbnz	r7, 800ba9e <_dtoa_r+0x36>
 800ba7e:	2010      	movs	r0, #16
 800ba80:	f000 fe0e 	bl	800c6a0 <malloc>
 800ba84:	4602      	mov	r2, r0
 800ba86:	f8c9 001c 	str.w	r0, [r9, #28]
 800ba8a:	b920      	cbnz	r0, 800ba96 <_dtoa_r+0x2e>
 800ba8c:	21ef      	movs	r1, #239	@ 0xef
 800ba8e:	4bac      	ldr	r3, [pc, #688]	@ (800bd40 <_dtoa_r+0x2d8>)
 800ba90:	48ac      	ldr	r0, [pc, #688]	@ (800bd44 <_dtoa_r+0x2dc>)
 800ba92:	f001 faed 	bl	800d070 <__assert_func>
 800ba96:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ba9a:	6007      	str	r7, [r0, #0]
 800ba9c:	60c7      	str	r7, [r0, #12]
 800ba9e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800baa2:	6819      	ldr	r1, [r3, #0]
 800baa4:	b159      	cbz	r1, 800babe <_dtoa_r+0x56>
 800baa6:	685a      	ldr	r2, [r3, #4]
 800baa8:	2301      	movs	r3, #1
 800baaa:	4093      	lsls	r3, r2
 800baac:	604a      	str	r2, [r1, #4]
 800baae:	608b      	str	r3, [r1, #8]
 800bab0:	4648      	mov	r0, r9
 800bab2:	f000 feeb 	bl	800c88c <_Bfree>
 800bab6:	2200      	movs	r2, #0
 800bab8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800babc:	601a      	str	r2, [r3, #0]
 800babe:	1e2b      	subs	r3, r5, #0
 800bac0:	bfaf      	iteee	ge
 800bac2:	2300      	movge	r3, #0
 800bac4:	2201      	movlt	r2, #1
 800bac6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800baca:	9307      	strlt	r3, [sp, #28]
 800bacc:	bfa8      	it	ge
 800bace:	6033      	strge	r3, [r6, #0]
 800bad0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800bad4:	4b9c      	ldr	r3, [pc, #624]	@ (800bd48 <_dtoa_r+0x2e0>)
 800bad6:	bfb8      	it	lt
 800bad8:	6032      	strlt	r2, [r6, #0]
 800bada:	ea33 0308 	bics.w	r3, r3, r8
 800bade:	d112      	bne.n	800bb06 <_dtoa_r+0x9e>
 800bae0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bae4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800baec:	4323      	orrs	r3, r4
 800baee:	f000 855e 	beq.w	800c5ae <_dtoa_r+0xb46>
 800baf2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800baf4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bd4c <_dtoa_r+0x2e4>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f000 8560 	beq.w	800c5be <_dtoa_r+0xb56>
 800bafe:	f10a 0303 	add.w	r3, sl, #3
 800bb02:	f000 bd5a 	b.w	800c5ba <_dtoa_r+0xb52>
 800bb06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb0a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bb0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb12:	2200      	movs	r2, #0
 800bb14:	2300      	movs	r3, #0
 800bb16:	f7f4 ff8d 	bl	8000a34 <__aeabi_dcmpeq>
 800bb1a:	4607      	mov	r7, r0
 800bb1c:	b158      	cbz	r0, 800bb36 <_dtoa_r+0xce>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bb22:	6013      	str	r3, [r2, #0]
 800bb24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bb26:	b113      	cbz	r3, 800bb2e <_dtoa_r+0xc6>
 800bb28:	4b89      	ldr	r3, [pc, #548]	@ (800bd50 <_dtoa_r+0x2e8>)
 800bb2a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bb2c:	6013      	str	r3, [r2, #0]
 800bb2e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800bd54 <_dtoa_r+0x2ec>
 800bb32:	f000 bd44 	b.w	800c5be <_dtoa_r+0xb56>
 800bb36:	ab14      	add	r3, sp, #80	@ 0x50
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	ab15      	add	r3, sp, #84	@ 0x54
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	4648      	mov	r0, r9
 800bb40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bb44:	f001 f984 	bl	800ce50 <__d2b>
 800bb48:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800bb4c:	9003      	str	r0, [sp, #12]
 800bb4e:	2e00      	cmp	r6, #0
 800bb50:	d078      	beq.n	800bc44 <_dtoa_r+0x1dc>
 800bb52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb58:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bb5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb60:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bb64:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bb68:	9712      	str	r7, [sp, #72]	@ 0x48
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	4b7a      	ldr	r3, [pc, #488]	@ (800bd58 <_dtoa_r+0x2f0>)
 800bb70:	f7f4 fb40 	bl	80001f4 <__aeabi_dsub>
 800bb74:	a36c      	add	r3, pc, #432	@ (adr r3, 800bd28 <_dtoa_r+0x2c0>)
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	f7f4 fcf3 	bl	8000564 <__aeabi_dmul>
 800bb7e:	a36c      	add	r3, pc, #432	@ (adr r3, 800bd30 <_dtoa_r+0x2c8>)
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	f7f4 fb38 	bl	80001f8 <__adddf3>
 800bb88:	4604      	mov	r4, r0
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	460d      	mov	r5, r1
 800bb8e:	f7f4 fc7f 	bl	8000490 <__aeabi_i2d>
 800bb92:	a369      	add	r3, pc, #420	@ (adr r3, 800bd38 <_dtoa_r+0x2d0>)
 800bb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb98:	f7f4 fce4 	bl	8000564 <__aeabi_dmul>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	4620      	mov	r0, r4
 800bba2:	4629      	mov	r1, r5
 800bba4:	f7f4 fb28 	bl	80001f8 <__adddf3>
 800bba8:	4604      	mov	r4, r0
 800bbaa:	460d      	mov	r5, r1
 800bbac:	f7f4 ff8a 	bl	8000ac4 <__aeabi_d2iz>
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	4607      	mov	r7, r0
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	4629      	mov	r1, r5
 800bbba:	f7f4 ff45 	bl	8000a48 <__aeabi_dcmplt>
 800bbbe:	b140      	cbz	r0, 800bbd2 <_dtoa_r+0x16a>
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	f7f4 fc65 	bl	8000490 <__aeabi_i2d>
 800bbc6:	4622      	mov	r2, r4
 800bbc8:	462b      	mov	r3, r5
 800bbca:	f7f4 ff33 	bl	8000a34 <__aeabi_dcmpeq>
 800bbce:	b900      	cbnz	r0, 800bbd2 <_dtoa_r+0x16a>
 800bbd0:	3f01      	subs	r7, #1
 800bbd2:	2f16      	cmp	r7, #22
 800bbd4:	d854      	bhi.n	800bc80 <_dtoa_r+0x218>
 800bbd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbda:	4b60      	ldr	r3, [pc, #384]	@ (800bd5c <_dtoa_r+0x2f4>)
 800bbdc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	f7f4 ff30 	bl	8000a48 <__aeabi_dcmplt>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d04b      	beq.n	800bc84 <_dtoa_r+0x21c>
 800bbec:	2300      	movs	r3, #0
 800bbee:	3f01      	subs	r7, #1
 800bbf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbf2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bbf4:	1b9b      	subs	r3, r3, r6
 800bbf6:	1e5a      	subs	r2, r3, #1
 800bbf8:	bf49      	itett	mi
 800bbfa:	f1c3 0301 	rsbmi	r3, r3, #1
 800bbfe:	2300      	movpl	r3, #0
 800bc00:	9304      	strmi	r3, [sp, #16]
 800bc02:	2300      	movmi	r3, #0
 800bc04:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc06:	bf54      	ite	pl
 800bc08:	9304      	strpl	r3, [sp, #16]
 800bc0a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800bc0c:	2f00      	cmp	r7, #0
 800bc0e:	db3b      	blt.n	800bc88 <_dtoa_r+0x220>
 800bc10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc12:	970e      	str	r7, [sp, #56]	@ 0x38
 800bc14:	443b      	add	r3, r7
 800bc16:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc18:	2300      	movs	r3, #0
 800bc1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bc1e:	2b09      	cmp	r3, #9
 800bc20:	d865      	bhi.n	800bcee <_dtoa_r+0x286>
 800bc22:	2b05      	cmp	r3, #5
 800bc24:	bfc4      	itt	gt
 800bc26:	3b04      	subgt	r3, #4
 800bc28:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800bc2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bc2c:	bfc8      	it	gt
 800bc2e:	2400      	movgt	r4, #0
 800bc30:	f1a3 0302 	sub.w	r3, r3, #2
 800bc34:	bfd8      	it	le
 800bc36:	2401      	movle	r4, #1
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	d864      	bhi.n	800bd06 <_dtoa_r+0x29e>
 800bc3c:	e8df f003 	tbb	[pc, r3]
 800bc40:	2c385553 	.word	0x2c385553
 800bc44:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bc48:	441e      	add	r6, r3
 800bc4a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bc4e:	2b20      	cmp	r3, #32
 800bc50:	bfc1      	itttt	gt
 800bc52:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bc56:	fa08 f803 	lslgt.w	r8, r8, r3
 800bc5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bc5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bc62:	bfd6      	itet	le
 800bc64:	f1c3 0320 	rsble	r3, r3, #32
 800bc68:	ea48 0003 	orrgt.w	r0, r8, r3
 800bc6c:	fa04 f003 	lslle.w	r0, r4, r3
 800bc70:	f7f4 fbfe 	bl	8000470 <__aeabi_ui2d>
 800bc74:	2201      	movs	r2, #1
 800bc76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bc7a:	3e01      	subs	r6, #1
 800bc7c:	9212      	str	r2, [sp, #72]	@ 0x48
 800bc7e:	e774      	b.n	800bb6a <_dtoa_r+0x102>
 800bc80:	2301      	movs	r3, #1
 800bc82:	e7b5      	b.n	800bbf0 <_dtoa_r+0x188>
 800bc84:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bc86:	e7b4      	b.n	800bbf2 <_dtoa_r+0x18a>
 800bc88:	9b04      	ldr	r3, [sp, #16]
 800bc8a:	1bdb      	subs	r3, r3, r7
 800bc8c:	9304      	str	r3, [sp, #16]
 800bc8e:	427b      	negs	r3, r7
 800bc90:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc92:	2300      	movs	r3, #0
 800bc94:	930e      	str	r3, [sp, #56]	@ 0x38
 800bc96:	e7c1      	b.n	800bc1c <_dtoa_r+0x1b4>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bc9e:	eb07 0b03 	add.w	fp, r7, r3
 800bca2:	f10b 0301 	add.w	r3, fp, #1
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	9308      	str	r3, [sp, #32]
 800bcaa:	bfb8      	it	lt
 800bcac:	2301      	movlt	r3, #1
 800bcae:	e006      	b.n	800bcbe <_dtoa_r+0x256>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	dd28      	ble.n	800bd0c <_dtoa_r+0x2a4>
 800bcba:	469b      	mov	fp, r3
 800bcbc:	9308      	str	r3, [sp, #32]
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	2204      	movs	r2, #4
 800bcc2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bcc6:	f102 0514 	add.w	r5, r2, #20
 800bcca:	429d      	cmp	r5, r3
 800bccc:	d926      	bls.n	800bd1c <_dtoa_r+0x2b4>
 800bcce:	6041      	str	r1, [r0, #4]
 800bcd0:	4648      	mov	r0, r9
 800bcd2:	f000 fd9b 	bl	800c80c <_Balloc>
 800bcd6:	4682      	mov	sl, r0
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d143      	bne.n	800bd64 <_dtoa_r+0x2fc>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	f240 11af 	movw	r1, #431	@ 0x1af
 800bce2:	4b1f      	ldr	r3, [pc, #124]	@ (800bd60 <_dtoa_r+0x2f8>)
 800bce4:	e6d4      	b.n	800ba90 <_dtoa_r+0x28>
 800bce6:	2300      	movs	r3, #0
 800bce8:	e7e3      	b.n	800bcb2 <_dtoa_r+0x24a>
 800bcea:	2300      	movs	r3, #0
 800bcec:	e7d5      	b.n	800bc9a <_dtoa_r+0x232>
 800bcee:	2401      	movs	r4, #1
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bcf4:	9320      	str	r3, [sp, #128]	@ 0x80
 800bcf6:	f04f 3bff 	mov.w	fp, #4294967295
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	2312      	movs	r3, #18
 800bcfe:	f8cd b020 	str.w	fp, [sp, #32]
 800bd02:	9221      	str	r2, [sp, #132]	@ 0x84
 800bd04:	e7db      	b.n	800bcbe <_dtoa_r+0x256>
 800bd06:	2301      	movs	r3, #1
 800bd08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd0a:	e7f4      	b.n	800bcf6 <_dtoa_r+0x28e>
 800bd0c:	f04f 0b01 	mov.w	fp, #1
 800bd10:	465b      	mov	r3, fp
 800bd12:	f8cd b020 	str.w	fp, [sp, #32]
 800bd16:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800bd1a:	e7d0      	b.n	800bcbe <_dtoa_r+0x256>
 800bd1c:	3101      	adds	r1, #1
 800bd1e:	0052      	lsls	r2, r2, #1
 800bd20:	e7d1      	b.n	800bcc6 <_dtoa_r+0x25e>
 800bd22:	bf00      	nop
 800bd24:	f3af 8000 	nop.w
 800bd28:	636f4361 	.word	0x636f4361
 800bd2c:	3fd287a7 	.word	0x3fd287a7
 800bd30:	8b60c8b3 	.word	0x8b60c8b3
 800bd34:	3fc68a28 	.word	0x3fc68a28
 800bd38:	509f79fb 	.word	0x509f79fb
 800bd3c:	3fd34413 	.word	0x3fd34413
 800bd40:	0800d893 	.word	0x0800d893
 800bd44:	0800d8aa 	.word	0x0800d8aa
 800bd48:	7ff00000 	.word	0x7ff00000
 800bd4c:	0800d88f 	.word	0x0800d88f
 800bd50:	0800d863 	.word	0x0800d863
 800bd54:	0800d862 	.word	0x0800d862
 800bd58:	3ff80000 	.word	0x3ff80000
 800bd5c:	0800d9f8 	.word	0x0800d9f8
 800bd60:	0800d902 	.word	0x0800d902
 800bd64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bd68:	6018      	str	r0, [r3, #0]
 800bd6a:	9b08      	ldr	r3, [sp, #32]
 800bd6c:	2b0e      	cmp	r3, #14
 800bd6e:	f200 80a1 	bhi.w	800beb4 <_dtoa_r+0x44c>
 800bd72:	2c00      	cmp	r4, #0
 800bd74:	f000 809e 	beq.w	800beb4 <_dtoa_r+0x44c>
 800bd78:	2f00      	cmp	r7, #0
 800bd7a:	dd33      	ble.n	800bde4 <_dtoa_r+0x37c>
 800bd7c:	4b9c      	ldr	r3, [pc, #624]	@ (800bff0 <_dtoa_r+0x588>)
 800bd7e:	f007 020f 	and.w	r2, r7, #15
 800bd82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd86:	05f8      	lsls	r0, r7, #23
 800bd88:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd8c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800bd90:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bd94:	d516      	bpl.n	800bdc4 <_dtoa_r+0x35c>
 800bd96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd9a:	4b96      	ldr	r3, [pc, #600]	@ (800bff4 <_dtoa_r+0x58c>)
 800bd9c:	2603      	movs	r6, #3
 800bd9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bda2:	f7f4 fd09 	bl	80007b8 <__aeabi_ddiv>
 800bda6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bdaa:	f004 040f 	and.w	r4, r4, #15
 800bdae:	4d91      	ldr	r5, [pc, #580]	@ (800bff4 <_dtoa_r+0x58c>)
 800bdb0:	b954      	cbnz	r4, 800bdc8 <_dtoa_r+0x360>
 800bdb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdba:	f7f4 fcfd 	bl	80007b8 <__aeabi_ddiv>
 800bdbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bdc2:	e028      	b.n	800be16 <_dtoa_r+0x3ae>
 800bdc4:	2602      	movs	r6, #2
 800bdc6:	e7f2      	b.n	800bdae <_dtoa_r+0x346>
 800bdc8:	07e1      	lsls	r1, r4, #31
 800bdca:	d508      	bpl.n	800bdde <_dtoa_r+0x376>
 800bdcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bdd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bdd4:	f7f4 fbc6 	bl	8000564 <__aeabi_dmul>
 800bdd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bddc:	3601      	adds	r6, #1
 800bdde:	1064      	asrs	r4, r4, #1
 800bde0:	3508      	adds	r5, #8
 800bde2:	e7e5      	b.n	800bdb0 <_dtoa_r+0x348>
 800bde4:	f000 80af 	beq.w	800bf46 <_dtoa_r+0x4de>
 800bde8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdec:	427c      	negs	r4, r7
 800bdee:	4b80      	ldr	r3, [pc, #512]	@ (800bff0 <_dtoa_r+0x588>)
 800bdf0:	f004 020f 	and.w	r2, r4, #15
 800bdf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f7f4 fbb2 	bl	8000564 <__aeabi_dmul>
 800be00:	2602      	movs	r6, #2
 800be02:	2300      	movs	r3, #0
 800be04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be08:	4d7a      	ldr	r5, [pc, #488]	@ (800bff4 <_dtoa_r+0x58c>)
 800be0a:	1124      	asrs	r4, r4, #4
 800be0c:	2c00      	cmp	r4, #0
 800be0e:	f040 808f 	bne.w	800bf30 <_dtoa_r+0x4c8>
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1d3      	bne.n	800bdbe <_dtoa_r+0x356>
 800be16:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800be1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f000 8094 	beq.w	800bf4a <_dtoa_r+0x4e2>
 800be22:	2200      	movs	r2, #0
 800be24:	4620      	mov	r0, r4
 800be26:	4629      	mov	r1, r5
 800be28:	4b73      	ldr	r3, [pc, #460]	@ (800bff8 <_dtoa_r+0x590>)
 800be2a:	f7f4 fe0d 	bl	8000a48 <__aeabi_dcmplt>
 800be2e:	2800      	cmp	r0, #0
 800be30:	f000 808b 	beq.w	800bf4a <_dtoa_r+0x4e2>
 800be34:	9b08      	ldr	r3, [sp, #32]
 800be36:	2b00      	cmp	r3, #0
 800be38:	f000 8087 	beq.w	800bf4a <_dtoa_r+0x4e2>
 800be3c:	f1bb 0f00 	cmp.w	fp, #0
 800be40:	dd34      	ble.n	800beac <_dtoa_r+0x444>
 800be42:	4620      	mov	r0, r4
 800be44:	2200      	movs	r2, #0
 800be46:	4629      	mov	r1, r5
 800be48:	4b6c      	ldr	r3, [pc, #432]	@ (800bffc <_dtoa_r+0x594>)
 800be4a:	f7f4 fb8b 	bl	8000564 <__aeabi_dmul>
 800be4e:	465c      	mov	r4, fp
 800be50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be54:	f107 38ff 	add.w	r8, r7, #4294967295
 800be58:	3601      	adds	r6, #1
 800be5a:	4630      	mov	r0, r6
 800be5c:	f7f4 fb18 	bl	8000490 <__aeabi_i2d>
 800be60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be64:	f7f4 fb7e 	bl	8000564 <__aeabi_dmul>
 800be68:	2200      	movs	r2, #0
 800be6a:	4b65      	ldr	r3, [pc, #404]	@ (800c000 <_dtoa_r+0x598>)
 800be6c:	f7f4 f9c4 	bl	80001f8 <__adddf3>
 800be70:	4605      	mov	r5, r0
 800be72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800be76:	2c00      	cmp	r4, #0
 800be78:	d16a      	bne.n	800bf50 <_dtoa_r+0x4e8>
 800be7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be7e:	2200      	movs	r2, #0
 800be80:	4b60      	ldr	r3, [pc, #384]	@ (800c004 <_dtoa_r+0x59c>)
 800be82:	f7f4 f9b7 	bl	80001f4 <__aeabi_dsub>
 800be86:	4602      	mov	r2, r0
 800be88:	460b      	mov	r3, r1
 800be8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be8e:	462a      	mov	r2, r5
 800be90:	4633      	mov	r3, r6
 800be92:	f7f4 fdf7 	bl	8000a84 <__aeabi_dcmpgt>
 800be96:	2800      	cmp	r0, #0
 800be98:	f040 8298 	bne.w	800c3cc <_dtoa_r+0x964>
 800be9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bea0:	462a      	mov	r2, r5
 800bea2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bea6:	f7f4 fdcf 	bl	8000a48 <__aeabi_dcmplt>
 800beaa:	bb38      	cbnz	r0, 800befc <_dtoa_r+0x494>
 800beac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800beb0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800beb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f2c0 8157 	blt.w	800c16a <_dtoa_r+0x702>
 800bebc:	2f0e      	cmp	r7, #14
 800bebe:	f300 8154 	bgt.w	800c16a <_dtoa_r+0x702>
 800bec2:	4b4b      	ldr	r3, [pc, #300]	@ (800bff0 <_dtoa_r+0x588>)
 800bec4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bec8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800becc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bed0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f280 80e5 	bge.w	800c0a2 <_dtoa_r+0x63a>
 800bed8:	9b08      	ldr	r3, [sp, #32]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f300 80e1 	bgt.w	800c0a2 <_dtoa_r+0x63a>
 800bee0:	d10c      	bne.n	800befc <_dtoa_r+0x494>
 800bee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bee6:	2200      	movs	r2, #0
 800bee8:	4b46      	ldr	r3, [pc, #280]	@ (800c004 <_dtoa_r+0x59c>)
 800beea:	f7f4 fb3b 	bl	8000564 <__aeabi_dmul>
 800beee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bef2:	f7f4 fdbd 	bl	8000a70 <__aeabi_dcmpge>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	f000 8266 	beq.w	800c3c8 <_dtoa_r+0x960>
 800befc:	2400      	movs	r4, #0
 800befe:	4625      	mov	r5, r4
 800bf00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf02:	4656      	mov	r6, sl
 800bf04:	ea6f 0803 	mvn.w	r8, r3
 800bf08:	2700      	movs	r7, #0
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	4648      	mov	r0, r9
 800bf0e:	f000 fcbd 	bl	800c88c <_Bfree>
 800bf12:	2d00      	cmp	r5, #0
 800bf14:	f000 80bd 	beq.w	800c092 <_dtoa_r+0x62a>
 800bf18:	b12f      	cbz	r7, 800bf26 <_dtoa_r+0x4be>
 800bf1a:	42af      	cmp	r7, r5
 800bf1c:	d003      	beq.n	800bf26 <_dtoa_r+0x4be>
 800bf1e:	4639      	mov	r1, r7
 800bf20:	4648      	mov	r0, r9
 800bf22:	f000 fcb3 	bl	800c88c <_Bfree>
 800bf26:	4629      	mov	r1, r5
 800bf28:	4648      	mov	r0, r9
 800bf2a:	f000 fcaf 	bl	800c88c <_Bfree>
 800bf2e:	e0b0      	b.n	800c092 <_dtoa_r+0x62a>
 800bf30:	07e2      	lsls	r2, r4, #31
 800bf32:	d505      	bpl.n	800bf40 <_dtoa_r+0x4d8>
 800bf34:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf38:	f7f4 fb14 	bl	8000564 <__aeabi_dmul>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	3601      	adds	r6, #1
 800bf40:	1064      	asrs	r4, r4, #1
 800bf42:	3508      	adds	r5, #8
 800bf44:	e762      	b.n	800be0c <_dtoa_r+0x3a4>
 800bf46:	2602      	movs	r6, #2
 800bf48:	e765      	b.n	800be16 <_dtoa_r+0x3ae>
 800bf4a:	46b8      	mov	r8, r7
 800bf4c:	9c08      	ldr	r4, [sp, #32]
 800bf4e:	e784      	b.n	800be5a <_dtoa_r+0x3f2>
 800bf50:	4b27      	ldr	r3, [pc, #156]	@ (800bff0 <_dtoa_r+0x588>)
 800bf52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf5c:	4454      	add	r4, sl
 800bf5e:	2900      	cmp	r1, #0
 800bf60:	d054      	beq.n	800c00c <_dtoa_r+0x5a4>
 800bf62:	2000      	movs	r0, #0
 800bf64:	4928      	ldr	r1, [pc, #160]	@ (800c008 <_dtoa_r+0x5a0>)
 800bf66:	f7f4 fc27 	bl	80007b8 <__aeabi_ddiv>
 800bf6a:	4633      	mov	r3, r6
 800bf6c:	462a      	mov	r2, r5
 800bf6e:	f7f4 f941 	bl	80001f4 <__aeabi_dsub>
 800bf72:	4656      	mov	r6, sl
 800bf74:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf7c:	f7f4 fda2 	bl	8000ac4 <__aeabi_d2iz>
 800bf80:	4605      	mov	r5, r0
 800bf82:	f7f4 fa85 	bl	8000490 <__aeabi_i2d>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf8e:	f7f4 f931 	bl	80001f4 <__aeabi_dsub>
 800bf92:	4602      	mov	r2, r0
 800bf94:	460b      	mov	r3, r1
 800bf96:	3530      	adds	r5, #48	@ 0x30
 800bf98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bfa0:	f806 5b01 	strb.w	r5, [r6], #1
 800bfa4:	f7f4 fd50 	bl	8000a48 <__aeabi_dcmplt>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d172      	bne.n	800c092 <_dtoa_r+0x62a>
 800bfac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfb0:	2000      	movs	r0, #0
 800bfb2:	4911      	ldr	r1, [pc, #68]	@ (800bff8 <_dtoa_r+0x590>)
 800bfb4:	f7f4 f91e 	bl	80001f4 <__aeabi_dsub>
 800bfb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bfbc:	f7f4 fd44 	bl	8000a48 <__aeabi_dcmplt>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	f040 80b4 	bne.w	800c12e <_dtoa_r+0x6c6>
 800bfc6:	42a6      	cmp	r6, r4
 800bfc8:	f43f af70 	beq.w	800beac <_dtoa_r+0x444>
 800bfcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bffc <_dtoa_r+0x594>)
 800bfd4:	f7f4 fac6 	bl	8000564 <__aeabi_dmul>
 800bfd8:	2200      	movs	r2, #0
 800bfda:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bfde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfe2:	4b06      	ldr	r3, [pc, #24]	@ (800bffc <_dtoa_r+0x594>)
 800bfe4:	f7f4 fabe 	bl	8000564 <__aeabi_dmul>
 800bfe8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bfec:	e7c4      	b.n	800bf78 <_dtoa_r+0x510>
 800bfee:	bf00      	nop
 800bff0:	0800d9f8 	.word	0x0800d9f8
 800bff4:	0800d9d0 	.word	0x0800d9d0
 800bff8:	3ff00000 	.word	0x3ff00000
 800bffc:	40240000 	.word	0x40240000
 800c000:	401c0000 	.word	0x401c0000
 800c004:	40140000 	.word	0x40140000
 800c008:	3fe00000 	.word	0x3fe00000
 800c00c:	4631      	mov	r1, r6
 800c00e:	4628      	mov	r0, r5
 800c010:	f7f4 faa8 	bl	8000564 <__aeabi_dmul>
 800c014:	4656      	mov	r6, sl
 800c016:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c01a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c01c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c020:	f7f4 fd50 	bl	8000ac4 <__aeabi_d2iz>
 800c024:	4605      	mov	r5, r0
 800c026:	f7f4 fa33 	bl	8000490 <__aeabi_i2d>
 800c02a:	4602      	mov	r2, r0
 800c02c:	460b      	mov	r3, r1
 800c02e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c032:	f7f4 f8df 	bl	80001f4 <__aeabi_dsub>
 800c036:	4602      	mov	r2, r0
 800c038:	460b      	mov	r3, r1
 800c03a:	3530      	adds	r5, #48	@ 0x30
 800c03c:	f806 5b01 	strb.w	r5, [r6], #1
 800c040:	42a6      	cmp	r6, r4
 800c042:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c046:	f04f 0200 	mov.w	r2, #0
 800c04a:	d124      	bne.n	800c096 <_dtoa_r+0x62e>
 800c04c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c050:	4bae      	ldr	r3, [pc, #696]	@ (800c30c <_dtoa_r+0x8a4>)
 800c052:	f7f4 f8d1 	bl	80001f8 <__adddf3>
 800c056:	4602      	mov	r2, r0
 800c058:	460b      	mov	r3, r1
 800c05a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c05e:	f7f4 fd11 	bl	8000a84 <__aeabi_dcmpgt>
 800c062:	2800      	cmp	r0, #0
 800c064:	d163      	bne.n	800c12e <_dtoa_r+0x6c6>
 800c066:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c06a:	2000      	movs	r0, #0
 800c06c:	49a7      	ldr	r1, [pc, #668]	@ (800c30c <_dtoa_r+0x8a4>)
 800c06e:	f7f4 f8c1 	bl	80001f4 <__aeabi_dsub>
 800c072:	4602      	mov	r2, r0
 800c074:	460b      	mov	r3, r1
 800c076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c07a:	f7f4 fce5 	bl	8000a48 <__aeabi_dcmplt>
 800c07e:	2800      	cmp	r0, #0
 800c080:	f43f af14 	beq.w	800beac <_dtoa_r+0x444>
 800c084:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c086:	1e73      	subs	r3, r6, #1
 800c088:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c08a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c08e:	2b30      	cmp	r3, #48	@ 0x30
 800c090:	d0f8      	beq.n	800c084 <_dtoa_r+0x61c>
 800c092:	4647      	mov	r7, r8
 800c094:	e03b      	b.n	800c10e <_dtoa_r+0x6a6>
 800c096:	4b9e      	ldr	r3, [pc, #632]	@ (800c310 <_dtoa_r+0x8a8>)
 800c098:	f7f4 fa64 	bl	8000564 <__aeabi_dmul>
 800c09c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c0a0:	e7bc      	b.n	800c01c <_dtoa_r+0x5b4>
 800c0a2:	4656      	mov	r6, sl
 800c0a4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c0a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	f7f4 fb82 	bl	80007b8 <__aeabi_ddiv>
 800c0b4:	f7f4 fd06 	bl	8000ac4 <__aeabi_d2iz>
 800c0b8:	4680      	mov	r8, r0
 800c0ba:	f7f4 f9e9 	bl	8000490 <__aeabi_i2d>
 800c0be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0c2:	f7f4 fa4f 	bl	8000564 <__aeabi_dmul>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	f7f4 f891 	bl	80001f4 <__aeabi_dsub>
 800c0d2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c0d6:	9d08      	ldr	r5, [sp, #32]
 800c0d8:	f806 4b01 	strb.w	r4, [r6], #1
 800c0dc:	eba6 040a 	sub.w	r4, r6, sl
 800c0e0:	42a5      	cmp	r5, r4
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	d133      	bne.n	800c150 <_dtoa_r+0x6e8>
 800c0e8:	f7f4 f886 	bl	80001f8 <__adddf3>
 800c0ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0f0:	4604      	mov	r4, r0
 800c0f2:	460d      	mov	r5, r1
 800c0f4:	f7f4 fcc6 	bl	8000a84 <__aeabi_dcmpgt>
 800c0f8:	b9c0      	cbnz	r0, 800c12c <_dtoa_r+0x6c4>
 800c0fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0fe:	4620      	mov	r0, r4
 800c100:	4629      	mov	r1, r5
 800c102:	f7f4 fc97 	bl	8000a34 <__aeabi_dcmpeq>
 800c106:	b110      	cbz	r0, 800c10e <_dtoa_r+0x6a6>
 800c108:	f018 0f01 	tst.w	r8, #1
 800c10c:	d10e      	bne.n	800c12c <_dtoa_r+0x6c4>
 800c10e:	4648      	mov	r0, r9
 800c110:	9903      	ldr	r1, [sp, #12]
 800c112:	f000 fbbb 	bl	800c88c <_Bfree>
 800c116:	2300      	movs	r3, #0
 800c118:	7033      	strb	r3, [r6, #0]
 800c11a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c11c:	3701      	adds	r7, #1
 800c11e:	601f      	str	r7, [r3, #0]
 800c120:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c122:	2b00      	cmp	r3, #0
 800c124:	f000 824b 	beq.w	800c5be <_dtoa_r+0xb56>
 800c128:	601e      	str	r6, [r3, #0]
 800c12a:	e248      	b.n	800c5be <_dtoa_r+0xb56>
 800c12c:	46b8      	mov	r8, r7
 800c12e:	4633      	mov	r3, r6
 800c130:	461e      	mov	r6, r3
 800c132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c136:	2a39      	cmp	r2, #57	@ 0x39
 800c138:	d106      	bne.n	800c148 <_dtoa_r+0x6e0>
 800c13a:	459a      	cmp	sl, r3
 800c13c:	d1f8      	bne.n	800c130 <_dtoa_r+0x6c8>
 800c13e:	2230      	movs	r2, #48	@ 0x30
 800c140:	f108 0801 	add.w	r8, r8, #1
 800c144:	f88a 2000 	strb.w	r2, [sl]
 800c148:	781a      	ldrb	r2, [r3, #0]
 800c14a:	3201      	adds	r2, #1
 800c14c:	701a      	strb	r2, [r3, #0]
 800c14e:	e7a0      	b.n	800c092 <_dtoa_r+0x62a>
 800c150:	2200      	movs	r2, #0
 800c152:	4b6f      	ldr	r3, [pc, #444]	@ (800c310 <_dtoa_r+0x8a8>)
 800c154:	f7f4 fa06 	bl	8000564 <__aeabi_dmul>
 800c158:	2200      	movs	r2, #0
 800c15a:	2300      	movs	r3, #0
 800c15c:	4604      	mov	r4, r0
 800c15e:	460d      	mov	r5, r1
 800c160:	f7f4 fc68 	bl	8000a34 <__aeabi_dcmpeq>
 800c164:	2800      	cmp	r0, #0
 800c166:	d09f      	beq.n	800c0a8 <_dtoa_r+0x640>
 800c168:	e7d1      	b.n	800c10e <_dtoa_r+0x6a6>
 800c16a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c16c:	2a00      	cmp	r2, #0
 800c16e:	f000 80ea 	beq.w	800c346 <_dtoa_r+0x8de>
 800c172:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c174:	2a01      	cmp	r2, #1
 800c176:	f300 80cd 	bgt.w	800c314 <_dtoa_r+0x8ac>
 800c17a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c17c:	2a00      	cmp	r2, #0
 800c17e:	f000 80c1 	beq.w	800c304 <_dtoa_r+0x89c>
 800c182:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c186:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c188:	9e04      	ldr	r6, [sp, #16]
 800c18a:	9a04      	ldr	r2, [sp, #16]
 800c18c:	2101      	movs	r1, #1
 800c18e:	441a      	add	r2, r3
 800c190:	9204      	str	r2, [sp, #16]
 800c192:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c194:	4648      	mov	r0, r9
 800c196:	441a      	add	r2, r3
 800c198:	9209      	str	r2, [sp, #36]	@ 0x24
 800c19a:	f000 fc2b 	bl	800c9f4 <__i2b>
 800c19e:	4605      	mov	r5, r0
 800c1a0:	b166      	cbz	r6, 800c1bc <_dtoa_r+0x754>
 800c1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	dd09      	ble.n	800c1bc <_dtoa_r+0x754>
 800c1a8:	42b3      	cmp	r3, r6
 800c1aa:	bfa8      	it	ge
 800c1ac:	4633      	movge	r3, r6
 800c1ae:	9a04      	ldr	r2, [sp, #16]
 800c1b0:	1af6      	subs	r6, r6, r3
 800c1b2:	1ad2      	subs	r2, r2, r3
 800c1b4:	9204      	str	r2, [sp, #16]
 800c1b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1b8:	1ad3      	subs	r3, r2, r3
 800c1ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1be:	b30b      	cbz	r3, 800c204 <_dtoa_r+0x79c>
 800c1c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 80c6 	beq.w	800c354 <_dtoa_r+0x8ec>
 800c1c8:	2c00      	cmp	r4, #0
 800c1ca:	f000 80c0 	beq.w	800c34e <_dtoa_r+0x8e6>
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	4622      	mov	r2, r4
 800c1d2:	4648      	mov	r0, r9
 800c1d4:	f000 fcc6 	bl	800cb64 <__pow5mult>
 800c1d8:	9a03      	ldr	r2, [sp, #12]
 800c1da:	4601      	mov	r1, r0
 800c1dc:	4605      	mov	r5, r0
 800c1de:	4648      	mov	r0, r9
 800c1e0:	f000 fc1e 	bl	800ca20 <__multiply>
 800c1e4:	9903      	ldr	r1, [sp, #12]
 800c1e6:	4680      	mov	r8, r0
 800c1e8:	4648      	mov	r0, r9
 800c1ea:	f000 fb4f 	bl	800c88c <_Bfree>
 800c1ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1f0:	1b1b      	subs	r3, r3, r4
 800c1f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1f4:	f000 80b1 	beq.w	800c35a <_dtoa_r+0x8f2>
 800c1f8:	4641      	mov	r1, r8
 800c1fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1fc:	4648      	mov	r0, r9
 800c1fe:	f000 fcb1 	bl	800cb64 <__pow5mult>
 800c202:	9003      	str	r0, [sp, #12]
 800c204:	2101      	movs	r1, #1
 800c206:	4648      	mov	r0, r9
 800c208:	f000 fbf4 	bl	800c9f4 <__i2b>
 800c20c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c20e:	4604      	mov	r4, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	f000 81d8 	beq.w	800c5c6 <_dtoa_r+0xb5e>
 800c216:	461a      	mov	r2, r3
 800c218:	4601      	mov	r1, r0
 800c21a:	4648      	mov	r0, r9
 800c21c:	f000 fca2 	bl	800cb64 <__pow5mult>
 800c220:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c222:	4604      	mov	r4, r0
 800c224:	2b01      	cmp	r3, #1
 800c226:	f300 809f 	bgt.w	800c368 <_dtoa_r+0x900>
 800c22a:	9b06      	ldr	r3, [sp, #24]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f040 8097 	bne.w	800c360 <_dtoa_r+0x8f8>
 800c232:	9b07      	ldr	r3, [sp, #28]
 800c234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c238:	2b00      	cmp	r3, #0
 800c23a:	f040 8093 	bne.w	800c364 <_dtoa_r+0x8fc>
 800c23e:	9b07      	ldr	r3, [sp, #28]
 800c240:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c244:	0d1b      	lsrs	r3, r3, #20
 800c246:	051b      	lsls	r3, r3, #20
 800c248:	b133      	cbz	r3, 800c258 <_dtoa_r+0x7f0>
 800c24a:	9b04      	ldr	r3, [sp, #16]
 800c24c:	3301      	adds	r3, #1
 800c24e:	9304      	str	r3, [sp, #16]
 800c250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c252:	3301      	adds	r3, #1
 800c254:	9309      	str	r3, [sp, #36]	@ 0x24
 800c256:	2301      	movs	r3, #1
 800c258:	930a      	str	r3, [sp, #40]	@ 0x28
 800c25a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f000 81b8 	beq.w	800c5d2 <_dtoa_r+0xb6a>
 800c262:	6923      	ldr	r3, [r4, #16]
 800c264:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c268:	6918      	ldr	r0, [r3, #16]
 800c26a:	f000 fb77 	bl	800c95c <__hi0bits>
 800c26e:	f1c0 0020 	rsb	r0, r0, #32
 800c272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c274:	4418      	add	r0, r3
 800c276:	f010 001f 	ands.w	r0, r0, #31
 800c27a:	f000 8082 	beq.w	800c382 <_dtoa_r+0x91a>
 800c27e:	f1c0 0320 	rsb	r3, r0, #32
 800c282:	2b04      	cmp	r3, #4
 800c284:	dd73      	ble.n	800c36e <_dtoa_r+0x906>
 800c286:	9b04      	ldr	r3, [sp, #16]
 800c288:	f1c0 001c 	rsb	r0, r0, #28
 800c28c:	4403      	add	r3, r0
 800c28e:	9304      	str	r3, [sp, #16]
 800c290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c292:	4406      	add	r6, r0
 800c294:	4403      	add	r3, r0
 800c296:	9309      	str	r3, [sp, #36]	@ 0x24
 800c298:	9b04      	ldr	r3, [sp, #16]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	dd05      	ble.n	800c2aa <_dtoa_r+0x842>
 800c29e:	461a      	mov	r2, r3
 800c2a0:	4648      	mov	r0, r9
 800c2a2:	9903      	ldr	r1, [sp, #12]
 800c2a4:	f000 fcb8 	bl	800cc18 <__lshift>
 800c2a8:	9003      	str	r0, [sp, #12]
 800c2aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	dd05      	ble.n	800c2bc <_dtoa_r+0x854>
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	4648      	mov	r0, r9
 800c2b6:	f000 fcaf 	bl	800cc18 <__lshift>
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d061      	beq.n	800c386 <_dtoa_r+0x91e>
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	9803      	ldr	r0, [sp, #12]
 800c2c6:	f000 fd13 	bl	800ccf0 <__mcmp>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	da5b      	bge.n	800c386 <_dtoa_r+0x91e>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	220a      	movs	r2, #10
 800c2d2:	4648      	mov	r0, r9
 800c2d4:	9903      	ldr	r1, [sp, #12]
 800c2d6:	f000 fafb 	bl	800c8d0 <__multadd>
 800c2da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2dc:	f107 38ff 	add.w	r8, r7, #4294967295
 800c2e0:	9003      	str	r0, [sp, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f000 8177 	beq.w	800c5d6 <_dtoa_r+0xb6e>
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	220a      	movs	r2, #10
 800c2ee:	4648      	mov	r0, r9
 800c2f0:	f000 faee 	bl	800c8d0 <__multadd>
 800c2f4:	f1bb 0f00 	cmp.w	fp, #0
 800c2f8:	4605      	mov	r5, r0
 800c2fa:	dc6f      	bgt.n	800c3dc <_dtoa_r+0x974>
 800c2fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	dc49      	bgt.n	800c396 <_dtoa_r+0x92e>
 800c302:	e06b      	b.n	800c3dc <_dtoa_r+0x974>
 800c304:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c306:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c30a:	e73c      	b.n	800c186 <_dtoa_r+0x71e>
 800c30c:	3fe00000 	.word	0x3fe00000
 800c310:	40240000 	.word	0x40240000
 800c314:	9b08      	ldr	r3, [sp, #32]
 800c316:	1e5c      	subs	r4, r3, #1
 800c318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c31a:	42a3      	cmp	r3, r4
 800c31c:	db09      	blt.n	800c332 <_dtoa_r+0x8ca>
 800c31e:	1b1c      	subs	r4, r3, r4
 800c320:	9b08      	ldr	r3, [sp, #32]
 800c322:	2b00      	cmp	r3, #0
 800c324:	f6bf af30 	bge.w	800c188 <_dtoa_r+0x720>
 800c328:	9b04      	ldr	r3, [sp, #16]
 800c32a:	9a08      	ldr	r2, [sp, #32]
 800c32c:	1a9e      	subs	r6, r3, r2
 800c32e:	2300      	movs	r3, #0
 800c330:	e72b      	b.n	800c18a <_dtoa_r+0x722>
 800c332:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c334:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c336:	1ae3      	subs	r3, r4, r3
 800c338:	441a      	add	r2, r3
 800c33a:	940a      	str	r4, [sp, #40]	@ 0x28
 800c33c:	9e04      	ldr	r6, [sp, #16]
 800c33e:	2400      	movs	r4, #0
 800c340:	9b08      	ldr	r3, [sp, #32]
 800c342:	920e      	str	r2, [sp, #56]	@ 0x38
 800c344:	e721      	b.n	800c18a <_dtoa_r+0x722>
 800c346:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c348:	9e04      	ldr	r6, [sp, #16]
 800c34a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c34c:	e728      	b.n	800c1a0 <_dtoa_r+0x738>
 800c34e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c352:	e751      	b.n	800c1f8 <_dtoa_r+0x790>
 800c354:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c356:	9903      	ldr	r1, [sp, #12]
 800c358:	e750      	b.n	800c1fc <_dtoa_r+0x794>
 800c35a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c35e:	e751      	b.n	800c204 <_dtoa_r+0x79c>
 800c360:	2300      	movs	r3, #0
 800c362:	e779      	b.n	800c258 <_dtoa_r+0x7f0>
 800c364:	9b06      	ldr	r3, [sp, #24]
 800c366:	e777      	b.n	800c258 <_dtoa_r+0x7f0>
 800c368:	2300      	movs	r3, #0
 800c36a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c36c:	e779      	b.n	800c262 <_dtoa_r+0x7fa>
 800c36e:	d093      	beq.n	800c298 <_dtoa_r+0x830>
 800c370:	9a04      	ldr	r2, [sp, #16]
 800c372:	331c      	adds	r3, #28
 800c374:	441a      	add	r2, r3
 800c376:	9204      	str	r2, [sp, #16]
 800c378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c37a:	441e      	add	r6, r3
 800c37c:	441a      	add	r2, r3
 800c37e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c380:	e78a      	b.n	800c298 <_dtoa_r+0x830>
 800c382:	4603      	mov	r3, r0
 800c384:	e7f4      	b.n	800c370 <_dtoa_r+0x908>
 800c386:	9b08      	ldr	r3, [sp, #32]
 800c388:	46b8      	mov	r8, r7
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	dc20      	bgt.n	800c3d0 <_dtoa_r+0x968>
 800c38e:	469b      	mov	fp, r3
 800c390:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c392:	2b02      	cmp	r3, #2
 800c394:	dd1e      	ble.n	800c3d4 <_dtoa_r+0x96c>
 800c396:	f1bb 0f00 	cmp.w	fp, #0
 800c39a:	f47f adb1 	bne.w	800bf00 <_dtoa_r+0x498>
 800c39e:	4621      	mov	r1, r4
 800c3a0:	465b      	mov	r3, fp
 800c3a2:	2205      	movs	r2, #5
 800c3a4:	4648      	mov	r0, r9
 800c3a6:	f000 fa93 	bl	800c8d0 <__multadd>
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	9803      	ldr	r0, [sp, #12]
 800c3b0:	f000 fc9e 	bl	800ccf0 <__mcmp>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	f77f ada3 	ble.w	800bf00 <_dtoa_r+0x498>
 800c3ba:	4656      	mov	r6, sl
 800c3bc:	2331      	movs	r3, #49	@ 0x31
 800c3be:	f108 0801 	add.w	r8, r8, #1
 800c3c2:	f806 3b01 	strb.w	r3, [r6], #1
 800c3c6:	e59f      	b.n	800bf08 <_dtoa_r+0x4a0>
 800c3c8:	46b8      	mov	r8, r7
 800c3ca:	9c08      	ldr	r4, [sp, #32]
 800c3cc:	4625      	mov	r5, r4
 800c3ce:	e7f4      	b.n	800c3ba <_dtoa_r+0x952>
 800c3d0:	f8dd b020 	ldr.w	fp, [sp, #32]
 800c3d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f000 8101 	beq.w	800c5de <_dtoa_r+0xb76>
 800c3dc:	2e00      	cmp	r6, #0
 800c3de:	dd05      	ble.n	800c3ec <_dtoa_r+0x984>
 800c3e0:	4629      	mov	r1, r5
 800c3e2:	4632      	mov	r2, r6
 800c3e4:	4648      	mov	r0, r9
 800c3e6:	f000 fc17 	bl	800cc18 <__lshift>
 800c3ea:	4605      	mov	r5, r0
 800c3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d05c      	beq.n	800c4ac <_dtoa_r+0xa44>
 800c3f2:	4648      	mov	r0, r9
 800c3f4:	6869      	ldr	r1, [r5, #4]
 800c3f6:	f000 fa09 	bl	800c80c <_Balloc>
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	b928      	cbnz	r0, 800c40a <_dtoa_r+0x9a2>
 800c3fe:	4602      	mov	r2, r0
 800c400:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c404:	4b80      	ldr	r3, [pc, #512]	@ (800c608 <_dtoa_r+0xba0>)
 800c406:	f7ff bb43 	b.w	800ba90 <_dtoa_r+0x28>
 800c40a:	692a      	ldr	r2, [r5, #16]
 800c40c:	f105 010c 	add.w	r1, r5, #12
 800c410:	3202      	adds	r2, #2
 800c412:	0092      	lsls	r2, r2, #2
 800c414:	300c      	adds	r0, #12
 800c416:	f7ff fa90 	bl	800b93a <memcpy>
 800c41a:	2201      	movs	r2, #1
 800c41c:	4631      	mov	r1, r6
 800c41e:	4648      	mov	r0, r9
 800c420:	f000 fbfa 	bl	800cc18 <__lshift>
 800c424:	462f      	mov	r7, r5
 800c426:	4605      	mov	r5, r0
 800c428:	f10a 0301 	add.w	r3, sl, #1
 800c42c:	9304      	str	r3, [sp, #16]
 800c42e:	eb0a 030b 	add.w	r3, sl, fp
 800c432:	930a      	str	r3, [sp, #40]	@ 0x28
 800c434:	9b06      	ldr	r3, [sp, #24]
 800c436:	f003 0301 	and.w	r3, r3, #1
 800c43a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c43c:	9b04      	ldr	r3, [sp, #16]
 800c43e:	4621      	mov	r1, r4
 800c440:	9803      	ldr	r0, [sp, #12]
 800c442:	f103 3bff 	add.w	fp, r3, #4294967295
 800c446:	f7ff fa86 	bl	800b956 <quorem>
 800c44a:	4603      	mov	r3, r0
 800c44c:	4639      	mov	r1, r7
 800c44e:	3330      	adds	r3, #48	@ 0x30
 800c450:	9006      	str	r0, [sp, #24]
 800c452:	9803      	ldr	r0, [sp, #12]
 800c454:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c456:	f000 fc4b 	bl	800ccf0 <__mcmp>
 800c45a:	462a      	mov	r2, r5
 800c45c:	9008      	str	r0, [sp, #32]
 800c45e:	4621      	mov	r1, r4
 800c460:	4648      	mov	r0, r9
 800c462:	f000 fc61 	bl	800cd28 <__mdiff>
 800c466:	68c2      	ldr	r2, [r0, #12]
 800c468:	4606      	mov	r6, r0
 800c46a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c46c:	bb02      	cbnz	r2, 800c4b0 <_dtoa_r+0xa48>
 800c46e:	4601      	mov	r1, r0
 800c470:	9803      	ldr	r0, [sp, #12]
 800c472:	f000 fc3d 	bl	800ccf0 <__mcmp>
 800c476:	4602      	mov	r2, r0
 800c478:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c47a:	4631      	mov	r1, r6
 800c47c:	4648      	mov	r0, r9
 800c47e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800c482:	f000 fa03 	bl	800c88c <_Bfree>
 800c486:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c488:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c48a:	9e04      	ldr	r6, [sp, #16]
 800c48c:	ea42 0103 	orr.w	r1, r2, r3
 800c490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c492:	4319      	orrs	r1, r3
 800c494:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c496:	d10d      	bne.n	800c4b4 <_dtoa_r+0xa4c>
 800c498:	2b39      	cmp	r3, #57	@ 0x39
 800c49a:	d027      	beq.n	800c4ec <_dtoa_r+0xa84>
 800c49c:	9a08      	ldr	r2, [sp, #32]
 800c49e:	2a00      	cmp	r2, #0
 800c4a0:	dd01      	ble.n	800c4a6 <_dtoa_r+0xa3e>
 800c4a2:	9b06      	ldr	r3, [sp, #24]
 800c4a4:	3331      	adds	r3, #49	@ 0x31
 800c4a6:	f88b 3000 	strb.w	r3, [fp]
 800c4aa:	e52e      	b.n	800bf0a <_dtoa_r+0x4a2>
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	e7b9      	b.n	800c424 <_dtoa_r+0x9bc>
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	e7e2      	b.n	800c47a <_dtoa_r+0xa12>
 800c4b4:	9908      	ldr	r1, [sp, #32]
 800c4b6:	2900      	cmp	r1, #0
 800c4b8:	db04      	blt.n	800c4c4 <_dtoa_r+0xa5c>
 800c4ba:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800c4bc:	4301      	orrs	r1, r0
 800c4be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4c0:	4301      	orrs	r1, r0
 800c4c2:	d120      	bne.n	800c506 <_dtoa_r+0xa9e>
 800c4c4:	2a00      	cmp	r2, #0
 800c4c6:	ddee      	ble.n	800c4a6 <_dtoa_r+0xa3e>
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	9903      	ldr	r1, [sp, #12]
 800c4cc:	4648      	mov	r0, r9
 800c4ce:	9304      	str	r3, [sp, #16]
 800c4d0:	f000 fba2 	bl	800cc18 <__lshift>
 800c4d4:	4621      	mov	r1, r4
 800c4d6:	9003      	str	r0, [sp, #12]
 800c4d8:	f000 fc0a 	bl	800ccf0 <__mcmp>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	9b04      	ldr	r3, [sp, #16]
 800c4e0:	dc02      	bgt.n	800c4e8 <_dtoa_r+0xa80>
 800c4e2:	d1e0      	bne.n	800c4a6 <_dtoa_r+0xa3e>
 800c4e4:	07da      	lsls	r2, r3, #31
 800c4e6:	d5de      	bpl.n	800c4a6 <_dtoa_r+0xa3e>
 800c4e8:	2b39      	cmp	r3, #57	@ 0x39
 800c4ea:	d1da      	bne.n	800c4a2 <_dtoa_r+0xa3a>
 800c4ec:	2339      	movs	r3, #57	@ 0x39
 800c4ee:	f88b 3000 	strb.w	r3, [fp]
 800c4f2:	4633      	mov	r3, r6
 800c4f4:	461e      	mov	r6, r3
 800c4f6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	2a39      	cmp	r2, #57	@ 0x39
 800c4fe:	d04e      	beq.n	800c59e <_dtoa_r+0xb36>
 800c500:	3201      	adds	r2, #1
 800c502:	701a      	strb	r2, [r3, #0]
 800c504:	e501      	b.n	800bf0a <_dtoa_r+0x4a2>
 800c506:	2a00      	cmp	r2, #0
 800c508:	dd03      	ble.n	800c512 <_dtoa_r+0xaaa>
 800c50a:	2b39      	cmp	r3, #57	@ 0x39
 800c50c:	d0ee      	beq.n	800c4ec <_dtoa_r+0xa84>
 800c50e:	3301      	adds	r3, #1
 800c510:	e7c9      	b.n	800c4a6 <_dtoa_r+0xa3e>
 800c512:	9a04      	ldr	r2, [sp, #16]
 800c514:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c516:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c51a:	428a      	cmp	r2, r1
 800c51c:	d028      	beq.n	800c570 <_dtoa_r+0xb08>
 800c51e:	2300      	movs	r3, #0
 800c520:	220a      	movs	r2, #10
 800c522:	9903      	ldr	r1, [sp, #12]
 800c524:	4648      	mov	r0, r9
 800c526:	f000 f9d3 	bl	800c8d0 <__multadd>
 800c52a:	42af      	cmp	r7, r5
 800c52c:	9003      	str	r0, [sp, #12]
 800c52e:	f04f 0300 	mov.w	r3, #0
 800c532:	f04f 020a 	mov.w	r2, #10
 800c536:	4639      	mov	r1, r7
 800c538:	4648      	mov	r0, r9
 800c53a:	d107      	bne.n	800c54c <_dtoa_r+0xae4>
 800c53c:	f000 f9c8 	bl	800c8d0 <__multadd>
 800c540:	4607      	mov	r7, r0
 800c542:	4605      	mov	r5, r0
 800c544:	9b04      	ldr	r3, [sp, #16]
 800c546:	3301      	adds	r3, #1
 800c548:	9304      	str	r3, [sp, #16]
 800c54a:	e777      	b.n	800c43c <_dtoa_r+0x9d4>
 800c54c:	f000 f9c0 	bl	800c8d0 <__multadd>
 800c550:	4629      	mov	r1, r5
 800c552:	4607      	mov	r7, r0
 800c554:	2300      	movs	r3, #0
 800c556:	220a      	movs	r2, #10
 800c558:	4648      	mov	r0, r9
 800c55a:	f000 f9b9 	bl	800c8d0 <__multadd>
 800c55e:	4605      	mov	r5, r0
 800c560:	e7f0      	b.n	800c544 <_dtoa_r+0xadc>
 800c562:	f1bb 0f00 	cmp.w	fp, #0
 800c566:	bfcc      	ite	gt
 800c568:	465e      	movgt	r6, fp
 800c56a:	2601      	movle	r6, #1
 800c56c:	2700      	movs	r7, #0
 800c56e:	4456      	add	r6, sl
 800c570:	2201      	movs	r2, #1
 800c572:	9903      	ldr	r1, [sp, #12]
 800c574:	4648      	mov	r0, r9
 800c576:	9304      	str	r3, [sp, #16]
 800c578:	f000 fb4e 	bl	800cc18 <__lshift>
 800c57c:	4621      	mov	r1, r4
 800c57e:	9003      	str	r0, [sp, #12]
 800c580:	f000 fbb6 	bl	800ccf0 <__mcmp>
 800c584:	2800      	cmp	r0, #0
 800c586:	dcb4      	bgt.n	800c4f2 <_dtoa_r+0xa8a>
 800c588:	d102      	bne.n	800c590 <_dtoa_r+0xb28>
 800c58a:	9b04      	ldr	r3, [sp, #16]
 800c58c:	07db      	lsls	r3, r3, #31
 800c58e:	d4b0      	bmi.n	800c4f2 <_dtoa_r+0xa8a>
 800c590:	4633      	mov	r3, r6
 800c592:	461e      	mov	r6, r3
 800c594:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c598:	2a30      	cmp	r2, #48	@ 0x30
 800c59a:	d0fa      	beq.n	800c592 <_dtoa_r+0xb2a>
 800c59c:	e4b5      	b.n	800bf0a <_dtoa_r+0x4a2>
 800c59e:	459a      	cmp	sl, r3
 800c5a0:	d1a8      	bne.n	800c4f4 <_dtoa_r+0xa8c>
 800c5a2:	2331      	movs	r3, #49	@ 0x31
 800c5a4:	f108 0801 	add.w	r8, r8, #1
 800c5a8:	f88a 3000 	strb.w	r3, [sl]
 800c5ac:	e4ad      	b.n	800bf0a <_dtoa_r+0x4a2>
 800c5ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c5b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c60c <_dtoa_r+0xba4>
 800c5b4:	b11b      	cbz	r3, 800c5be <_dtoa_r+0xb56>
 800c5b6:	f10a 0308 	add.w	r3, sl, #8
 800c5ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c5bc:	6013      	str	r3, [r2, #0]
 800c5be:	4650      	mov	r0, sl
 800c5c0:	b017      	add	sp, #92	@ 0x5c
 800c5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	f77f ae2e 	ble.w	800c22a <_dtoa_r+0x7c2>
 800c5ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5d2:	2001      	movs	r0, #1
 800c5d4:	e64d      	b.n	800c272 <_dtoa_r+0x80a>
 800c5d6:	f1bb 0f00 	cmp.w	fp, #0
 800c5da:	f77f aed9 	ble.w	800c390 <_dtoa_r+0x928>
 800c5de:	4656      	mov	r6, sl
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	9803      	ldr	r0, [sp, #12]
 800c5e4:	f7ff f9b7 	bl	800b956 <quorem>
 800c5e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c5ec:	f806 3b01 	strb.w	r3, [r6], #1
 800c5f0:	eba6 020a 	sub.w	r2, r6, sl
 800c5f4:	4593      	cmp	fp, r2
 800c5f6:	ddb4      	ble.n	800c562 <_dtoa_r+0xafa>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	220a      	movs	r2, #10
 800c5fc:	4648      	mov	r0, r9
 800c5fe:	9903      	ldr	r1, [sp, #12]
 800c600:	f000 f966 	bl	800c8d0 <__multadd>
 800c604:	9003      	str	r0, [sp, #12]
 800c606:	e7eb      	b.n	800c5e0 <_dtoa_r+0xb78>
 800c608:	0800d902 	.word	0x0800d902
 800c60c:	0800d886 	.word	0x0800d886

0800c610 <_free_r>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	4605      	mov	r5, r0
 800c614:	2900      	cmp	r1, #0
 800c616:	d040      	beq.n	800c69a <_free_r+0x8a>
 800c618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c61c:	1f0c      	subs	r4, r1, #4
 800c61e:	2b00      	cmp	r3, #0
 800c620:	bfb8      	it	lt
 800c622:	18e4      	addlt	r4, r4, r3
 800c624:	f000 f8e6 	bl	800c7f4 <__malloc_lock>
 800c628:	4a1c      	ldr	r2, [pc, #112]	@ (800c69c <_free_r+0x8c>)
 800c62a:	6813      	ldr	r3, [r2, #0]
 800c62c:	b933      	cbnz	r3, 800c63c <_free_r+0x2c>
 800c62e:	6063      	str	r3, [r4, #4]
 800c630:	6014      	str	r4, [r2, #0]
 800c632:	4628      	mov	r0, r5
 800c634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c638:	f000 b8e2 	b.w	800c800 <__malloc_unlock>
 800c63c:	42a3      	cmp	r3, r4
 800c63e:	d908      	bls.n	800c652 <_free_r+0x42>
 800c640:	6820      	ldr	r0, [r4, #0]
 800c642:	1821      	adds	r1, r4, r0
 800c644:	428b      	cmp	r3, r1
 800c646:	bf01      	itttt	eq
 800c648:	6819      	ldreq	r1, [r3, #0]
 800c64a:	685b      	ldreq	r3, [r3, #4]
 800c64c:	1809      	addeq	r1, r1, r0
 800c64e:	6021      	streq	r1, [r4, #0]
 800c650:	e7ed      	b.n	800c62e <_free_r+0x1e>
 800c652:	461a      	mov	r2, r3
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	b10b      	cbz	r3, 800c65c <_free_r+0x4c>
 800c658:	42a3      	cmp	r3, r4
 800c65a:	d9fa      	bls.n	800c652 <_free_r+0x42>
 800c65c:	6811      	ldr	r1, [r2, #0]
 800c65e:	1850      	adds	r0, r2, r1
 800c660:	42a0      	cmp	r0, r4
 800c662:	d10b      	bne.n	800c67c <_free_r+0x6c>
 800c664:	6820      	ldr	r0, [r4, #0]
 800c666:	4401      	add	r1, r0
 800c668:	1850      	adds	r0, r2, r1
 800c66a:	4283      	cmp	r3, r0
 800c66c:	6011      	str	r1, [r2, #0]
 800c66e:	d1e0      	bne.n	800c632 <_free_r+0x22>
 800c670:	6818      	ldr	r0, [r3, #0]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	4408      	add	r0, r1
 800c676:	6010      	str	r0, [r2, #0]
 800c678:	6053      	str	r3, [r2, #4]
 800c67a:	e7da      	b.n	800c632 <_free_r+0x22>
 800c67c:	d902      	bls.n	800c684 <_free_r+0x74>
 800c67e:	230c      	movs	r3, #12
 800c680:	602b      	str	r3, [r5, #0]
 800c682:	e7d6      	b.n	800c632 <_free_r+0x22>
 800c684:	6820      	ldr	r0, [r4, #0]
 800c686:	1821      	adds	r1, r4, r0
 800c688:	428b      	cmp	r3, r1
 800c68a:	bf01      	itttt	eq
 800c68c:	6819      	ldreq	r1, [r3, #0]
 800c68e:	685b      	ldreq	r3, [r3, #4]
 800c690:	1809      	addeq	r1, r1, r0
 800c692:	6021      	streq	r1, [r4, #0]
 800c694:	6063      	str	r3, [r4, #4]
 800c696:	6054      	str	r4, [r2, #4]
 800c698:	e7cb      	b.n	800c632 <_free_r+0x22>
 800c69a:	bd38      	pop	{r3, r4, r5, pc}
 800c69c:	20004aac 	.word	0x20004aac

0800c6a0 <malloc>:
 800c6a0:	4b02      	ldr	r3, [pc, #8]	@ (800c6ac <malloc+0xc>)
 800c6a2:	4601      	mov	r1, r0
 800c6a4:	6818      	ldr	r0, [r3, #0]
 800c6a6:	f000 b825 	b.w	800c6f4 <_malloc_r>
 800c6aa:	bf00      	nop
 800c6ac:	2000001c 	.word	0x2000001c

0800c6b0 <sbrk_aligned>:
 800c6b0:	b570      	push	{r4, r5, r6, lr}
 800c6b2:	4e0f      	ldr	r6, [pc, #60]	@ (800c6f0 <sbrk_aligned+0x40>)
 800c6b4:	460c      	mov	r4, r1
 800c6b6:	6831      	ldr	r1, [r6, #0]
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	b911      	cbnz	r1, 800c6c2 <sbrk_aligned+0x12>
 800c6bc:	f000 fcc8 	bl	800d050 <_sbrk_r>
 800c6c0:	6030      	str	r0, [r6, #0]
 800c6c2:	4621      	mov	r1, r4
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	f000 fcc3 	bl	800d050 <_sbrk_r>
 800c6ca:	1c43      	adds	r3, r0, #1
 800c6cc:	d103      	bne.n	800c6d6 <sbrk_aligned+0x26>
 800c6ce:	f04f 34ff 	mov.w	r4, #4294967295
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	bd70      	pop	{r4, r5, r6, pc}
 800c6d6:	1cc4      	adds	r4, r0, #3
 800c6d8:	f024 0403 	bic.w	r4, r4, #3
 800c6dc:	42a0      	cmp	r0, r4
 800c6de:	d0f8      	beq.n	800c6d2 <sbrk_aligned+0x22>
 800c6e0:	1a21      	subs	r1, r4, r0
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	f000 fcb4 	bl	800d050 <_sbrk_r>
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	d1f2      	bne.n	800c6d2 <sbrk_aligned+0x22>
 800c6ec:	e7ef      	b.n	800c6ce <sbrk_aligned+0x1e>
 800c6ee:	bf00      	nop
 800c6f0:	20004aa8 	.word	0x20004aa8

0800c6f4 <_malloc_r>:
 800c6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6f8:	1ccd      	adds	r5, r1, #3
 800c6fa:	f025 0503 	bic.w	r5, r5, #3
 800c6fe:	3508      	adds	r5, #8
 800c700:	2d0c      	cmp	r5, #12
 800c702:	bf38      	it	cc
 800c704:	250c      	movcc	r5, #12
 800c706:	2d00      	cmp	r5, #0
 800c708:	4606      	mov	r6, r0
 800c70a:	db01      	blt.n	800c710 <_malloc_r+0x1c>
 800c70c:	42a9      	cmp	r1, r5
 800c70e:	d904      	bls.n	800c71a <_malloc_r+0x26>
 800c710:	230c      	movs	r3, #12
 800c712:	6033      	str	r3, [r6, #0]
 800c714:	2000      	movs	r0, #0
 800c716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c71a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c7f0 <_malloc_r+0xfc>
 800c71e:	f000 f869 	bl	800c7f4 <__malloc_lock>
 800c722:	f8d8 3000 	ldr.w	r3, [r8]
 800c726:	461c      	mov	r4, r3
 800c728:	bb44      	cbnz	r4, 800c77c <_malloc_r+0x88>
 800c72a:	4629      	mov	r1, r5
 800c72c:	4630      	mov	r0, r6
 800c72e:	f7ff ffbf 	bl	800c6b0 <sbrk_aligned>
 800c732:	1c43      	adds	r3, r0, #1
 800c734:	4604      	mov	r4, r0
 800c736:	d158      	bne.n	800c7ea <_malloc_r+0xf6>
 800c738:	f8d8 4000 	ldr.w	r4, [r8]
 800c73c:	4627      	mov	r7, r4
 800c73e:	2f00      	cmp	r7, #0
 800c740:	d143      	bne.n	800c7ca <_malloc_r+0xd6>
 800c742:	2c00      	cmp	r4, #0
 800c744:	d04b      	beq.n	800c7de <_malloc_r+0xea>
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	4639      	mov	r1, r7
 800c74a:	4630      	mov	r0, r6
 800c74c:	eb04 0903 	add.w	r9, r4, r3
 800c750:	f000 fc7e 	bl	800d050 <_sbrk_r>
 800c754:	4581      	cmp	r9, r0
 800c756:	d142      	bne.n	800c7de <_malloc_r+0xea>
 800c758:	6821      	ldr	r1, [r4, #0]
 800c75a:	4630      	mov	r0, r6
 800c75c:	1a6d      	subs	r5, r5, r1
 800c75e:	4629      	mov	r1, r5
 800c760:	f7ff ffa6 	bl	800c6b0 <sbrk_aligned>
 800c764:	3001      	adds	r0, #1
 800c766:	d03a      	beq.n	800c7de <_malloc_r+0xea>
 800c768:	6823      	ldr	r3, [r4, #0]
 800c76a:	442b      	add	r3, r5
 800c76c:	6023      	str	r3, [r4, #0]
 800c76e:	f8d8 3000 	ldr.w	r3, [r8]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	bb62      	cbnz	r2, 800c7d0 <_malloc_r+0xdc>
 800c776:	f8c8 7000 	str.w	r7, [r8]
 800c77a:	e00f      	b.n	800c79c <_malloc_r+0xa8>
 800c77c:	6822      	ldr	r2, [r4, #0]
 800c77e:	1b52      	subs	r2, r2, r5
 800c780:	d420      	bmi.n	800c7c4 <_malloc_r+0xd0>
 800c782:	2a0b      	cmp	r2, #11
 800c784:	d917      	bls.n	800c7b6 <_malloc_r+0xc2>
 800c786:	1961      	adds	r1, r4, r5
 800c788:	42a3      	cmp	r3, r4
 800c78a:	6025      	str	r5, [r4, #0]
 800c78c:	bf18      	it	ne
 800c78e:	6059      	strne	r1, [r3, #4]
 800c790:	6863      	ldr	r3, [r4, #4]
 800c792:	bf08      	it	eq
 800c794:	f8c8 1000 	streq.w	r1, [r8]
 800c798:	5162      	str	r2, [r4, r5]
 800c79a:	604b      	str	r3, [r1, #4]
 800c79c:	4630      	mov	r0, r6
 800c79e:	f000 f82f 	bl	800c800 <__malloc_unlock>
 800c7a2:	f104 000b 	add.w	r0, r4, #11
 800c7a6:	1d23      	adds	r3, r4, #4
 800c7a8:	f020 0007 	bic.w	r0, r0, #7
 800c7ac:	1ac2      	subs	r2, r0, r3
 800c7ae:	bf1c      	itt	ne
 800c7b0:	1a1b      	subne	r3, r3, r0
 800c7b2:	50a3      	strne	r3, [r4, r2]
 800c7b4:	e7af      	b.n	800c716 <_malloc_r+0x22>
 800c7b6:	6862      	ldr	r2, [r4, #4]
 800c7b8:	42a3      	cmp	r3, r4
 800c7ba:	bf0c      	ite	eq
 800c7bc:	f8c8 2000 	streq.w	r2, [r8]
 800c7c0:	605a      	strne	r2, [r3, #4]
 800c7c2:	e7eb      	b.n	800c79c <_malloc_r+0xa8>
 800c7c4:	4623      	mov	r3, r4
 800c7c6:	6864      	ldr	r4, [r4, #4]
 800c7c8:	e7ae      	b.n	800c728 <_malloc_r+0x34>
 800c7ca:	463c      	mov	r4, r7
 800c7cc:	687f      	ldr	r7, [r7, #4]
 800c7ce:	e7b6      	b.n	800c73e <_malloc_r+0x4a>
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	42a3      	cmp	r3, r4
 800c7d6:	d1fb      	bne.n	800c7d0 <_malloc_r+0xdc>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	6053      	str	r3, [r2, #4]
 800c7dc:	e7de      	b.n	800c79c <_malloc_r+0xa8>
 800c7de:	230c      	movs	r3, #12
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	6033      	str	r3, [r6, #0]
 800c7e4:	f000 f80c 	bl	800c800 <__malloc_unlock>
 800c7e8:	e794      	b.n	800c714 <_malloc_r+0x20>
 800c7ea:	6005      	str	r5, [r0, #0]
 800c7ec:	e7d6      	b.n	800c79c <_malloc_r+0xa8>
 800c7ee:	bf00      	nop
 800c7f0:	20004aac 	.word	0x20004aac

0800c7f4 <__malloc_lock>:
 800c7f4:	4801      	ldr	r0, [pc, #4]	@ (800c7fc <__malloc_lock+0x8>)
 800c7f6:	f7ff b890 	b.w	800b91a <__retarget_lock_acquire_recursive>
 800c7fa:	bf00      	nop
 800c7fc:	20004aa4 	.word	0x20004aa4

0800c800 <__malloc_unlock>:
 800c800:	4801      	ldr	r0, [pc, #4]	@ (800c808 <__malloc_unlock+0x8>)
 800c802:	f7ff b88b 	b.w	800b91c <__retarget_lock_release_recursive>
 800c806:	bf00      	nop
 800c808:	20004aa4 	.word	0x20004aa4

0800c80c <_Balloc>:
 800c80c:	b570      	push	{r4, r5, r6, lr}
 800c80e:	69c6      	ldr	r6, [r0, #28]
 800c810:	4604      	mov	r4, r0
 800c812:	460d      	mov	r5, r1
 800c814:	b976      	cbnz	r6, 800c834 <_Balloc+0x28>
 800c816:	2010      	movs	r0, #16
 800c818:	f7ff ff42 	bl	800c6a0 <malloc>
 800c81c:	4602      	mov	r2, r0
 800c81e:	61e0      	str	r0, [r4, #28]
 800c820:	b920      	cbnz	r0, 800c82c <_Balloc+0x20>
 800c822:	216b      	movs	r1, #107	@ 0x6b
 800c824:	4b17      	ldr	r3, [pc, #92]	@ (800c884 <_Balloc+0x78>)
 800c826:	4818      	ldr	r0, [pc, #96]	@ (800c888 <_Balloc+0x7c>)
 800c828:	f000 fc22 	bl	800d070 <__assert_func>
 800c82c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c830:	6006      	str	r6, [r0, #0]
 800c832:	60c6      	str	r6, [r0, #12]
 800c834:	69e6      	ldr	r6, [r4, #28]
 800c836:	68f3      	ldr	r3, [r6, #12]
 800c838:	b183      	cbz	r3, 800c85c <_Balloc+0x50>
 800c83a:	69e3      	ldr	r3, [r4, #28]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c842:	b9b8      	cbnz	r0, 800c874 <_Balloc+0x68>
 800c844:	2101      	movs	r1, #1
 800c846:	fa01 f605 	lsl.w	r6, r1, r5
 800c84a:	1d72      	adds	r2, r6, #5
 800c84c:	4620      	mov	r0, r4
 800c84e:	0092      	lsls	r2, r2, #2
 800c850:	f000 fc2c 	bl	800d0ac <_calloc_r>
 800c854:	b160      	cbz	r0, 800c870 <_Balloc+0x64>
 800c856:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c85a:	e00e      	b.n	800c87a <_Balloc+0x6e>
 800c85c:	2221      	movs	r2, #33	@ 0x21
 800c85e:	2104      	movs	r1, #4
 800c860:	4620      	mov	r0, r4
 800c862:	f000 fc23 	bl	800d0ac <_calloc_r>
 800c866:	69e3      	ldr	r3, [r4, #28]
 800c868:	60f0      	str	r0, [r6, #12]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d1e4      	bne.n	800c83a <_Balloc+0x2e>
 800c870:	2000      	movs	r0, #0
 800c872:	bd70      	pop	{r4, r5, r6, pc}
 800c874:	6802      	ldr	r2, [r0, #0]
 800c876:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c87a:	2300      	movs	r3, #0
 800c87c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c880:	e7f7      	b.n	800c872 <_Balloc+0x66>
 800c882:	bf00      	nop
 800c884:	0800d893 	.word	0x0800d893
 800c888:	0800d913 	.word	0x0800d913

0800c88c <_Bfree>:
 800c88c:	b570      	push	{r4, r5, r6, lr}
 800c88e:	69c6      	ldr	r6, [r0, #28]
 800c890:	4605      	mov	r5, r0
 800c892:	460c      	mov	r4, r1
 800c894:	b976      	cbnz	r6, 800c8b4 <_Bfree+0x28>
 800c896:	2010      	movs	r0, #16
 800c898:	f7ff ff02 	bl	800c6a0 <malloc>
 800c89c:	4602      	mov	r2, r0
 800c89e:	61e8      	str	r0, [r5, #28]
 800c8a0:	b920      	cbnz	r0, 800c8ac <_Bfree+0x20>
 800c8a2:	218f      	movs	r1, #143	@ 0x8f
 800c8a4:	4b08      	ldr	r3, [pc, #32]	@ (800c8c8 <_Bfree+0x3c>)
 800c8a6:	4809      	ldr	r0, [pc, #36]	@ (800c8cc <_Bfree+0x40>)
 800c8a8:	f000 fbe2 	bl	800d070 <__assert_func>
 800c8ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8b0:	6006      	str	r6, [r0, #0]
 800c8b2:	60c6      	str	r6, [r0, #12]
 800c8b4:	b13c      	cbz	r4, 800c8c6 <_Bfree+0x3a>
 800c8b6:	69eb      	ldr	r3, [r5, #28]
 800c8b8:	6862      	ldr	r2, [r4, #4]
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8c0:	6021      	str	r1, [r4, #0]
 800c8c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8c6:	bd70      	pop	{r4, r5, r6, pc}
 800c8c8:	0800d893 	.word	0x0800d893
 800c8cc:	0800d913 	.word	0x0800d913

0800c8d0 <__multadd>:
 800c8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d4:	4607      	mov	r7, r0
 800c8d6:	460c      	mov	r4, r1
 800c8d8:	461e      	mov	r6, r3
 800c8da:	2000      	movs	r0, #0
 800c8dc:	690d      	ldr	r5, [r1, #16]
 800c8de:	f101 0c14 	add.w	ip, r1, #20
 800c8e2:	f8dc 3000 	ldr.w	r3, [ip]
 800c8e6:	3001      	adds	r0, #1
 800c8e8:	b299      	uxth	r1, r3
 800c8ea:	fb02 6101 	mla	r1, r2, r1, r6
 800c8ee:	0c1e      	lsrs	r6, r3, #16
 800c8f0:	0c0b      	lsrs	r3, r1, #16
 800c8f2:	fb02 3306 	mla	r3, r2, r6, r3
 800c8f6:	b289      	uxth	r1, r1
 800c8f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c8fc:	4285      	cmp	r5, r0
 800c8fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c902:	f84c 1b04 	str.w	r1, [ip], #4
 800c906:	dcec      	bgt.n	800c8e2 <__multadd+0x12>
 800c908:	b30e      	cbz	r6, 800c94e <__multadd+0x7e>
 800c90a:	68a3      	ldr	r3, [r4, #8]
 800c90c:	42ab      	cmp	r3, r5
 800c90e:	dc19      	bgt.n	800c944 <__multadd+0x74>
 800c910:	6861      	ldr	r1, [r4, #4]
 800c912:	4638      	mov	r0, r7
 800c914:	3101      	adds	r1, #1
 800c916:	f7ff ff79 	bl	800c80c <_Balloc>
 800c91a:	4680      	mov	r8, r0
 800c91c:	b928      	cbnz	r0, 800c92a <__multadd+0x5a>
 800c91e:	4602      	mov	r2, r0
 800c920:	21ba      	movs	r1, #186	@ 0xba
 800c922:	4b0c      	ldr	r3, [pc, #48]	@ (800c954 <__multadd+0x84>)
 800c924:	480c      	ldr	r0, [pc, #48]	@ (800c958 <__multadd+0x88>)
 800c926:	f000 fba3 	bl	800d070 <__assert_func>
 800c92a:	6922      	ldr	r2, [r4, #16]
 800c92c:	f104 010c 	add.w	r1, r4, #12
 800c930:	3202      	adds	r2, #2
 800c932:	0092      	lsls	r2, r2, #2
 800c934:	300c      	adds	r0, #12
 800c936:	f7ff f800 	bl	800b93a <memcpy>
 800c93a:	4621      	mov	r1, r4
 800c93c:	4638      	mov	r0, r7
 800c93e:	f7ff ffa5 	bl	800c88c <_Bfree>
 800c942:	4644      	mov	r4, r8
 800c944:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c948:	3501      	adds	r5, #1
 800c94a:	615e      	str	r6, [r3, #20]
 800c94c:	6125      	str	r5, [r4, #16]
 800c94e:	4620      	mov	r0, r4
 800c950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c954:	0800d902 	.word	0x0800d902
 800c958:	0800d913 	.word	0x0800d913

0800c95c <__hi0bits>:
 800c95c:	4603      	mov	r3, r0
 800c95e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c962:	bf3a      	itte	cc
 800c964:	0403      	lslcc	r3, r0, #16
 800c966:	2010      	movcc	r0, #16
 800c968:	2000      	movcs	r0, #0
 800c96a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c96e:	bf3c      	itt	cc
 800c970:	021b      	lslcc	r3, r3, #8
 800c972:	3008      	addcc	r0, #8
 800c974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c978:	bf3c      	itt	cc
 800c97a:	011b      	lslcc	r3, r3, #4
 800c97c:	3004      	addcc	r0, #4
 800c97e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c982:	bf3c      	itt	cc
 800c984:	009b      	lslcc	r3, r3, #2
 800c986:	3002      	addcc	r0, #2
 800c988:	2b00      	cmp	r3, #0
 800c98a:	db05      	blt.n	800c998 <__hi0bits+0x3c>
 800c98c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c990:	f100 0001 	add.w	r0, r0, #1
 800c994:	bf08      	it	eq
 800c996:	2020      	moveq	r0, #32
 800c998:	4770      	bx	lr

0800c99a <__lo0bits>:
 800c99a:	6803      	ldr	r3, [r0, #0]
 800c99c:	4602      	mov	r2, r0
 800c99e:	f013 0007 	ands.w	r0, r3, #7
 800c9a2:	d00b      	beq.n	800c9bc <__lo0bits+0x22>
 800c9a4:	07d9      	lsls	r1, r3, #31
 800c9a6:	d421      	bmi.n	800c9ec <__lo0bits+0x52>
 800c9a8:	0798      	lsls	r0, r3, #30
 800c9aa:	bf49      	itett	mi
 800c9ac:	085b      	lsrmi	r3, r3, #1
 800c9ae:	089b      	lsrpl	r3, r3, #2
 800c9b0:	2001      	movmi	r0, #1
 800c9b2:	6013      	strmi	r3, [r2, #0]
 800c9b4:	bf5c      	itt	pl
 800c9b6:	2002      	movpl	r0, #2
 800c9b8:	6013      	strpl	r3, [r2, #0]
 800c9ba:	4770      	bx	lr
 800c9bc:	b299      	uxth	r1, r3
 800c9be:	b909      	cbnz	r1, 800c9c4 <__lo0bits+0x2a>
 800c9c0:	2010      	movs	r0, #16
 800c9c2:	0c1b      	lsrs	r3, r3, #16
 800c9c4:	b2d9      	uxtb	r1, r3
 800c9c6:	b909      	cbnz	r1, 800c9cc <__lo0bits+0x32>
 800c9c8:	3008      	adds	r0, #8
 800c9ca:	0a1b      	lsrs	r3, r3, #8
 800c9cc:	0719      	lsls	r1, r3, #28
 800c9ce:	bf04      	itt	eq
 800c9d0:	091b      	lsreq	r3, r3, #4
 800c9d2:	3004      	addeq	r0, #4
 800c9d4:	0799      	lsls	r1, r3, #30
 800c9d6:	bf04      	itt	eq
 800c9d8:	089b      	lsreq	r3, r3, #2
 800c9da:	3002      	addeq	r0, #2
 800c9dc:	07d9      	lsls	r1, r3, #31
 800c9de:	d403      	bmi.n	800c9e8 <__lo0bits+0x4e>
 800c9e0:	085b      	lsrs	r3, r3, #1
 800c9e2:	f100 0001 	add.w	r0, r0, #1
 800c9e6:	d003      	beq.n	800c9f0 <__lo0bits+0x56>
 800c9e8:	6013      	str	r3, [r2, #0]
 800c9ea:	4770      	bx	lr
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	4770      	bx	lr
 800c9f0:	2020      	movs	r0, #32
 800c9f2:	4770      	bx	lr

0800c9f4 <__i2b>:
 800c9f4:	b510      	push	{r4, lr}
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	2101      	movs	r1, #1
 800c9fa:	f7ff ff07 	bl	800c80c <_Balloc>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	b928      	cbnz	r0, 800ca0e <__i2b+0x1a>
 800ca02:	f240 1145 	movw	r1, #325	@ 0x145
 800ca06:	4b04      	ldr	r3, [pc, #16]	@ (800ca18 <__i2b+0x24>)
 800ca08:	4804      	ldr	r0, [pc, #16]	@ (800ca1c <__i2b+0x28>)
 800ca0a:	f000 fb31 	bl	800d070 <__assert_func>
 800ca0e:	2301      	movs	r3, #1
 800ca10:	6144      	str	r4, [r0, #20]
 800ca12:	6103      	str	r3, [r0, #16]
 800ca14:	bd10      	pop	{r4, pc}
 800ca16:	bf00      	nop
 800ca18:	0800d902 	.word	0x0800d902
 800ca1c:	0800d913 	.word	0x0800d913

0800ca20 <__multiply>:
 800ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	4617      	mov	r7, r2
 800ca26:	690a      	ldr	r2, [r1, #16]
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	4689      	mov	r9, r1
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	bfa2      	ittt	ge
 800ca30:	463b      	movge	r3, r7
 800ca32:	460f      	movge	r7, r1
 800ca34:	4699      	movge	r9, r3
 800ca36:	693d      	ldr	r5, [r7, #16]
 800ca38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	6879      	ldr	r1, [r7, #4]
 800ca40:	eb05 060a 	add.w	r6, r5, sl
 800ca44:	42b3      	cmp	r3, r6
 800ca46:	b085      	sub	sp, #20
 800ca48:	bfb8      	it	lt
 800ca4a:	3101      	addlt	r1, #1
 800ca4c:	f7ff fede 	bl	800c80c <_Balloc>
 800ca50:	b930      	cbnz	r0, 800ca60 <__multiply+0x40>
 800ca52:	4602      	mov	r2, r0
 800ca54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ca58:	4b40      	ldr	r3, [pc, #256]	@ (800cb5c <__multiply+0x13c>)
 800ca5a:	4841      	ldr	r0, [pc, #260]	@ (800cb60 <__multiply+0x140>)
 800ca5c:	f000 fb08 	bl	800d070 <__assert_func>
 800ca60:	f100 0414 	add.w	r4, r0, #20
 800ca64:	4623      	mov	r3, r4
 800ca66:	2200      	movs	r2, #0
 800ca68:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ca6c:	4573      	cmp	r3, lr
 800ca6e:	d320      	bcc.n	800cab2 <__multiply+0x92>
 800ca70:	f107 0814 	add.w	r8, r7, #20
 800ca74:	f109 0114 	add.w	r1, r9, #20
 800ca78:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ca7c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ca80:	9302      	str	r3, [sp, #8]
 800ca82:	1beb      	subs	r3, r5, r7
 800ca84:	3b15      	subs	r3, #21
 800ca86:	f023 0303 	bic.w	r3, r3, #3
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	3715      	adds	r7, #21
 800ca8e:	42bd      	cmp	r5, r7
 800ca90:	bf38      	it	cc
 800ca92:	2304      	movcc	r3, #4
 800ca94:	9301      	str	r3, [sp, #4]
 800ca96:	9b02      	ldr	r3, [sp, #8]
 800ca98:	9103      	str	r1, [sp, #12]
 800ca9a:	428b      	cmp	r3, r1
 800ca9c:	d80c      	bhi.n	800cab8 <__multiply+0x98>
 800ca9e:	2e00      	cmp	r6, #0
 800caa0:	dd03      	ble.n	800caaa <__multiply+0x8a>
 800caa2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d055      	beq.n	800cb56 <__multiply+0x136>
 800caaa:	6106      	str	r6, [r0, #16]
 800caac:	b005      	add	sp, #20
 800caae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab2:	f843 2b04 	str.w	r2, [r3], #4
 800cab6:	e7d9      	b.n	800ca6c <__multiply+0x4c>
 800cab8:	f8b1 a000 	ldrh.w	sl, [r1]
 800cabc:	f1ba 0f00 	cmp.w	sl, #0
 800cac0:	d01f      	beq.n	800cb02 <__multiply+0xe2>
 800cac2:	46c4      	mov	ip, r8
 800cac4:	46a1      	mov	r9, r4
 800cac6:	2700      	movs	r7, #0
 800cac8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cacc:	f8d9 3000 	ldr.w	r3, [r9]
 800cad0:	fa1f fb82 	uxth.w	fp, r2
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	fb0a 330b 	mla	r3, sl, fp, r3
 800cada:	443b      	add	r3, r7
 800cadc:	f8d9 7000 	ldr.w	r7, [r9]
 800cae0:	0c12      	lsrs	r2, r2, #16
 800cae2:	0c3f      	lsrs	r7, r7, #16
 800cae4:	fb0a 7202 	mla	r2, sl, r2, r7
 800cae8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800caec:	b29b      	uxth	r3, r3
 800caee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800caf2:	4565      	cmp	r5, ip
 800caf4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800caf8:	f849 3b04 	str.w	r3, [r9], #4
 800cafc:	d8e4      	bhi.n	800cac8 <__multiply+0xa8>
 800cafe:	9b01      	ldr	r3, [sp, #4]
 800cb00:	50e7      	str	r7, [r4, r3]
 800cb02:	9b03      	ldr	r3, [sp, #12]
 800cb04:	3104      	adds	r1, #4
 800cb06:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cb0a:	f1b9 0f00 	cmp.w	r9, #0
 800cb0e:	d020      	beq.n	800cb52 <__multiply+0x132>
 800cb10:	4647      	mov	r7, r8
 800cb12:	46a4      	mov	ip, r4
 800cb14:	f04f 0a00 	mov.w	sl, #0
 800cb18:	6823      	ldr	r3, [r4, #0]
 800cb1a:	f8b7 b000 	ldrh.w	fp, [r7]
 800cb1e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	fb09 220b 	mla	r2, r9, fp, r2
 800cb28:	4452      	add	r2, sl
 800cb2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb2e:	f84c 3b04 	str.w	r3, [ip], #4
 800cb32:	f857 3b04 	ldr.w	r3, [r7], #4
 800cb36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb3a:	f8bc 3000 	ldrh.w	r3, [ip]
 800cb3e:	42bd      	cmp	r5, r7
 800cb40:	fb09 330a 	mla	r3, r9, sl, r3
 800cb44:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cb48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb4c:	d8e5      	bhi.n	800cb1a <__multiply+0xfa>
 800cb4e:	9a01      	ldr	r2, [sp, #4]
 800cb50:	50a3      	str	r3, [r4, r2]
 800cb52:	3404      	adds	r4, #4
 800cb54:	e79f      	b.n	800ca96 <__multiply+0x76>
 800cb56:	3e01      	subs	r6, #1
 800cb58:	e7a1      	b.n	800ca9e <__multiply+0x7e>
 800cb5a:	bf00      	nop
 800cb5c:	0800d902 	.word	0x0800d902
 800cb60:	0800d913 	.word	0x0800d913

0800cb64 <__pow5mult>:
 800cb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb68:	4615      	mov	r5, r2
 800cb6a:	f012 0203 	ands.w	r2, r2, #3
 800cb6e:	4607      	mov	r7, r0
 800cb70:	460e      	mov	r6, r1
 800cb72:	d007      	beq.n	800cb84 <__pow5mult+0x20>
 800cb74:	4c25      	ldr	r4, [pc, #148]	@ (800cc0c <__pow5mult+0xa8>)
 800cb76:	3a01      	subs	r2, #1
 800cb78:	2300      	movs	r3, #0
 800cb7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb7e:	f7ff fea7 	bl	800c8d0 <__multadd>
 800cb82:	4606      	mov	r6, r0
 800cb84:	10ad      	asrs	r5, r5, #2
 800cb86:	d03d      	beq.n	800cc04 <__pow5mult+0xa0>
 800cb88:	69fc      	ldr	r4, [r7, #28]
 800cb8a:	b97c      	cbnz	r4, 800cbac <__pow5mult+0x48>
 800cb8c:	2010      	movs	r0, #16
 800cb8e:	f7ff fd87 	bl	800c6a0 <malloc>
 800cb92:	4602      	mov	r2, r0
 800cb94:	61f8      	str	r0, [r7, #28]
 800cb96:	b928      	cbnz	r0, 800cba4 <__pow5mult+0x40>
 800cb98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cb9c:	4b1c      	ldr	r3, [pc, #112]	@ (800cc10 <__pow5mult+0xac>)
 800cb9e:	481d      	ldr	r0, [pc, #116]	@ (800cc14 <__pow5mult+0xb0>)
 800cba0:	f000 fa66 	bl	800d070 <__assert_func>
 800cba4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cba8:	6004      	str	r4, [r0, #0]
 800cbaa:	60c4      	str	r4, [r0, #12]
 800cbac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cbb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbb4:	b94c      	cbnz	r4, 800cbca <__pow5mult+0x66>
 800cbb6:	f240 2171 	movw	r1, #625	@ 0x271
 800cbba:	4638      	mov	r0, r7
 800cbbc:	f7ff ff1a 	bl	800c9f4 <__i2b>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	f8c8 0008 	str.w	r0, [r8, #8]
 800cbc8:	6003      	str	r3, [r0, #0]
 800cbca:	f04f 0900 	mov.w	r9, #0
 800cbce:	07eb      	lsls	r3, r5, #31
 800cbd0:	d50a      	bpl.n	800cbe8 <__pow5mult+0x84>
 800cbd2:	4631      	mov	r1, r6
 800cbd4:	4622      	mov	r2, r4
 800cbd6:	4638      	mov	r0, r7
 800cbd8:	f7ff ff22 	bl	800ca20 <__multiply>
 800cbdc:	4680      	mov	r8, r0
 800cbde:	4631      	mov	r1, r6
 800cbe0:	4638      	mov	r0, r7
 800cbe2:	f7ff fe53 	bl	800c88c <_Bfree>
 800cbe6:	4646      	mov	r6, r8
 800cbe8:	106d      	asrs	r5, r5, #1
 800cbea:	d00b      	beq.n	800cc04 <__pow5mult+0xa0>
 800cbec:	6820      	ldr	r0, [r4, #0]
 800cbee:	b938      	cbnz	r0, 800cc00 <__pow5mult+0x9c>
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	4621      	mov	r1, r4
 800cbf4:	4638      	mov	r0, r7
 800cbf6:	f7ff ff13 	bl	800ca20 <__multiply>
 800cbfa:	6020      	str	r0, [r4, #0]
 800cbfc:	f8c0 9000 	str.w	r9, [r0]
 800cc00:	4604      	mov	r4, r0
 800cc02:	e7e4      	b.n	800cbce <__pow5mult+0x6a>
 800cc04:	4630      	mov	r0, r6
 800cc06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc0a:	bf00      	nop
 800cc0c:	0800d9c4 	.word	0x0800d9c4
 800cc10:	0800d893 	.word	0x0800d893
 800cc14:	0800d913 	.word	0x0800d913

0800cc18 <__lshift>:
 800cc18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	4607      	mov	r7, r0
 800cc20:	4691      	mov	r9, r2
 800cc22:	6923      	ldr	r3, [r4, #16]
 800cc24:	6849      	ldr	r1, [r1, #4]
 800cc26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc2a:	68a3      	ldr	r3, [r4, #8]
 800cc2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc30:	f108 0601 	add.w	r6, r8, #1
 800cc34:	42b3      	cmp	r3, r6
 800cc36:	db0b      	blt.n	800cc50 <__lshift+0x38>
 800cc38:	4638      	mov	r0, r7
 800cc3a:	f7ff fde7 	bl	800c80c <_Balloc>
 800cc3e:	4605      	mov	r5, r0
 800cc40:	b948      	cbnz	r0, 800cc56 <__lshift+0x3e>
 800cc42:	4602      	mov	r2, r0
 800cc44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cc48:	4b27      	ldr	r3, [pc, #156]	@ (800cce8 <__lshift+0xd0>)
 800cc4a:	4828      	ldr	r0, [pc, #160]	@ (800ccec <__lshift+0xd4>)
 800cc4c:	f000 fa10 	bl	800d070 <__assert_func>
 800cc50:	3101      	adds	r1, #1
 800cc52:	005b      	lsls	r3, r3, #1
 800cc54:	e7ee      	b.n	800cc34 <__lshift+0x1c>
 800cc56:	2300      	movs	r3, #0
 800cc58:	f100 0114 	add.w	r1, r0, #20
 800cc5c:	f100 0210 	add.w	r2, r0, #16
 800cc60:	4618      	mov	r0, r3
 800cc62:	4553      	cmp	r3, sl
 800cc64:	db33      	blt.n	800ccce <__lshift+0xb6>
 800cc66:	6920      	ldr	r0, [r4, #16]
 800cc68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc6c:	f104 0314 	add.w	r3, r4, #20
 800cc70:	f019 091f 	ands.w	r9, r9, #31
 800cc74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc7c:	d02b      	beq.n	800ccd6 <__lshift+0xbe>
 800cc7e:	468a      	mov	sl, r1
 800cc80:	2200      	movs	r2, #0
 800cc82:	f1c9 0e20 	rsb	lr, r9, #32
 800cc86:	6818      	ldr	r0, [r3, #0]
 800cc88:	fa00 f009 	lsl.w	r0, r0, r9
 800cc8c:	4310      	orrs	r0, r2
 800cc8e:	f84a 0b04 	str.w	r0, [sl], #4
 800cc92:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc96:	459c      	cmp	ip, r3
 800cc98:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc9c:	d8f3      	bhi.n	800cc86 <__lshift+0x6e>
 800cc9e:	ebac 0304 	sub.w	r3, ip, r4
 800cca2:	3b15      	subs	r3, #21
 800cca4:	f023 0303 	bic.w	r3, r3, #3
 800cca8:	3304      	adds	r3, #4
 800ccaa:	f104 0015 	add.w	r0, r4, #21
 800ccae:	4560      	cmp	r0, ip
 800ccb0:	bf88      	it	hi
 800ccb2:	2304      	movhi	r3, #4
 800ccb4:	50ca      	str	r2, [r1, r3]
 800ccb6:	b10a      	cbz	r2, 800ccbc <__lshift+0xa4>
 800ccb8:	f108 0602 	add.w	r6, r8, #2
 800ccbc:	3e01      	subs	r6, #1
 800ccbe:	4638      	mov	r0, r7
 800ccc0:	4621      	mov	r1, r4
 800ccc2:	612e      	str	r6, [r5, #16]
 800ccc4:	f7ff fde2 	bl	800c88c <_Bfree>
 800ccc8:	4628      	mov	r0, r5
 800ccca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccce:	f842 0f04 	str.w	r0, [r2, #4]!
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	e7c5      	b.n	800cc62 <__lshift+0x4a>
 800ccd6:	3904      	subs	r1, #4
 800ccd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccdc:	459c      	cmp	ip, r3
 800ccde:	f841 2f04 	str.w	r2, [r1, #4]!
 800cce2:	d8f9      	bhi.n	800ccd8 <__lshift+0xc0>
 800cce4:	e7ea      	b.n	800ccbc <__lshift+0xa4>
 800cce6:	bf00      	nop
 800cce8:	0800d902 	.word	0x0800d902
 800ccec:	0800d913 	.word	0x0800d913

0800ccf0 <__mcmp>:
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	690a      	ldr	r2, [r1, #16]
 800ccf4:	6900      	ldr	r0, [r0, #16]
 800ccf6:	b530      	push	{r4, r5, lr}
 800ccf8:	1a80      	subs	r0, r0, r2
 800ccfa:	d10e      	bne.n	800cd1a <__mcmp+0x2a>
 800ccfc:	3314      	adds	r3, #20
 800ccfe:	3114      	adds	r1, #20
 800cd00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cd04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cd08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd10:	4295      	cmp	r5, r2
 800cd12:	d003      	beq.n	800cd1c <__mcmp+0x2c>
 800cd14:	d205      	bcs.n	800cd22 <__mcmp+0x32>
 800cd16:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1a:	bd30      	pop	{r4, r5, pc}
 800cd1c:	42a3      	cmp	r3, r4
 800cd1e:	d3f3      	bcc.n	800cd08 <__mcmp+0x18>
 800cd20:	e7fb      	b.n	800cd1a <__mcmp+0x2a>
 800cd22:	2001      	movs	r0, #1
 800cd24:	e7f9      	b.n	800cd1a <__mcmp+0x2a>
	...

0800cd28 <__mdiff>:
 800cd28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2c:	4689      	mov	r9, r1
 800cd2e:	4606      	mov	r6, r0
 800cd30:	4611      	mov	r1, r2
 800cd32:	4648      	mov	r0, r9
 800cd34:	4614      	mov	r4, r2
 800cd36:	f7ff ffdb 	bl	800ccf0 <__mcmp>
 800cd3a:	1e05      	subs	r5, r0, #0
 800cd3c:	d112      	bne.n	800cd64 <__mdiff+0x3c>
 800cd3e:	4629      	mov	r1, r5
 800cd40:	4630      	mov	r0, r6
 800cd42:	f7ff fd63 	bl	800c80c <_Balloc>
 800cd46:	4602      	mov	r2, r0
 800cd48:	b928      	cbnz	r0, 800cd56 <__mdiff+0x2e>
 800cd4a:	f240 2137 	movw	r1, #567	@ 0x237
 800cd4e:	4b3e      	ldr	r3, [pc, #248]	@ (800ce48 <__mdiff+0x120>)
 800cd50:	483e      	ldr	r0, [pc, #248]	@ (800ce4c <__mdiff+0x124>)
 800cd52:	f000 f98d 	bl	800d070 <__assert_func>
 800cd56:	2301      	movs	r3, #1
 800cd58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	b003      	add	sp, #12
 800cd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd64:	bfbc      	itt	lt
 800cd66:	464b      	movlt	r3, r9
 800cd68:	46a1      	movlt	r9, r4
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cd70:	bfba      	itte	lt
 800cd72:	461c      	movlt	r4, r3
 800cd74:	2501      	movlt	r5, #1
 800cd76:	2500      	movge	r5, #0
 800cd78:	f7ff fd48 	bl	800c80c <_Balloc>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	b918      	cbnz	r0, 800cd88 <__mdiff+0x60>
 800cd80:	f240 2145 	movw	r1, #581	@ 0x245
 800cd84:	4b30      	ldr	r3, [pc, #192]	@ (800ce48 <__mdiff+0x120>)
 800cd86:	e7e3      	b.n	800cd50 <__mdiff+0x28>
 800cd88:	f100 0b14 	add.w	fp, r0, #20
 800cd8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cd90:	f109 0310 	add.w	r3, r9, #16
 800cd94:	60c5      	str	r5, [r0, #12]
 800cd96:	f04f 0c00 	mov.w	ip, #0
 800cd9a:	f109 0514 	add.w	r5, r9, #20
 800cd9e:	46d9      	mov	r9, fp
 800cda0:	6926      	ldr	r6, [r4, #16]
 800cda2:	f104 0e14 	add.w	lr, r4, #20
 800cda6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cdaa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cdae:	9301      	str	r3, [sp, #4]
 800cdb0:	9b01      	ldr	r3, [sp, #4]
 800cdb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cdb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cdba:	b281      	uxth	r1, r0
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	fa1f f38a 	uxth.w	r3, sl
 800cdc2:	1a5b      	subs	r3, r3, r1
 800cdc4:	0c00      	lsrs	r0, r0, #16
 800cdc6:	4463      	add	r3, ip
 800cdc8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cdcc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cdd6:	4576      	cmp	r6, lr
 800cdd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cddc:	f849 3b04 	str.w	r3, [r9], #4
 800cde0:	d8e6      	bhi.n	800cdb0 <__mdiff+0x88>
 800cde2:	1b33      	subs	r3, r6, r4
 800cde4:	3b15      	subs	r3, #21
 800cde6:	f023 0303 	bic.w	r3, r3, #3
 800cdea:	3415      	adds	r4, #21
 800cdec:	3304      	adds	r3, #4
 800cdee:	42a6      	cmp	r6, r4
 800cdf0:	bf38      	it	cc
 800cdf2:	2304      	movcc	r3, #4
 800cdf4:	441d      	add	r5, r3
 800cdf6:	445b      	add	r3, fp
 800cdf8:	461e      	mov	r6, r3
 800cdfa:	462c      	mov	r4, r5
 800cdfc:	4544      	cmp	r4, r8
 800cdfe:	d30e      	bcc.n	800ce1e <__mdiff+0xf6>
 800ce00:	f108 0103 	add.w	r1, r8, #3
 800ce04:	1b49      	subs	r1, r1, r5
 800ce06:	f021 0103 	bic.w	r1, r1, #3
 800ce0a:	3d03      	subs	r5, #3
 800ce0c:	45a8      	cmp	r8, r5
 800ce0e:	bf38      	it	cc
 800ce10:	2100      	movcc	r1, #0
 800ce12:	440b      	add	r3, r1
 800ce14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce18:	b199      	cbz	r1, 800ce42 <__mdiff+0x11a>
 800ce1a:	6117      	str	r7, [r2, #16]
 800ce1c:	e79e      	b.n	800cd5c <__mdiff+0x34>
 800ce1e:	46e6      	mov	lr, ip
 800ce20:	f854 1b04 	ldr.w	r1, [r4], #4
 800ce24:	fa1f fc81 	uxth.w	ip, r1
 800ce28:	44f4      	add	ip, lr
 800ce2a:	0c08      	lsrs	r0, r1, #16
 800ce2c:	4471      	add	r1, lr
 800ce2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ce32:	b289      	uxth	r1, r1
 800ce34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ce38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce3c:	f846 1b04 	str.w	r1, [r6], #4
 800ce40:	e7dc      	b.n	800cdfc <__mdiff+0xd4>
 800ce42:	3f01      	subs	r7, #1
 800ce44:	e7e6      	b.n	800ce14 <__mdiff+0xec>
 800ce46:	bf00      	nop
 800ce48:	0800d902 	.word	0x0800d902
 800ce4c:	0800d913 	.word	0x0800d913

0800ce50 <__d2b>:
 800ce50:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ce54:	2101      	movs	r1, #1
 800ce56:	4690      	mov	r8, r2
 800ce58:	4699      	mov	r9, r3
 800ce5a:	9e08      	ldr	r6, [sp, #32]
 800ce5c:	f7ff fcd6 	bl	800c80c <_Balloc>
 800ce60:	4604      	mov	r4, r0
 800ce62:	b930      	cbnz	r0, 800ce72 <__d2b+0x22>
 800ce64:	4602      	mov	r2, r0
 800ce66:	f240 310f 	movw	r1, #783	@ 0x30f
 800ce6a:	4b23      	ldr	r3, [pc, #140]	@ (800cef8 <__d2b+0xa8>)
 800ce6c:	4823      	ldr	r0, [pc, #140]	@ (800cefc <__d2b+0xac>)
 800ce6e:	f000 f8ff 	bl	800d070 <__assert_func>
 800ce72:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce7a:	b10d      	cbz	r5, 800ce80 <__d2b+0x30>
 800ce7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce80:	9301      	str	r3, [sp, #4]
 800ce82:	f1b8 0300 	subs.w	r3, r8, #0
 800ce86:	d024      	beq.n	800ced2 <__d2b+0x82>
 800ce88:	4668      	mov	r0, sp
 800ce8a:	9300      	str	r3, [sp, #0]
 800ce8c:	f7ff fd85 	bl	800c99a <__lo0bits>
 800ce90:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ce94:	b1d8      	cbz	r0, 800cece <__d2b+0x7e>
 800ce96:	f1c0 0320 	rsb	r3, r0, #32
 800ce9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce9e:	430b      	orrs	r3, r1
 800cea0:	40c2      	lsrs	r2, r0
 800cea2:	6163      	str	r3, [r4, #20]
 800cea4:	9201      	str	r2, [sp, #4]
 800cea6:	9b01      	ldr	r3, [sp, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	bf0c      	ite	eq
 800ceac:	2201      	moveq	r2, #1
 800ceae:	2202      	movne	r2, #2
 800ceb0:	61a3      	str	r3, [r4, #24]
 800ceb2:	6122      	str	r2, [r4, #16]
 800ceb4:	b1ad      	cbz	r5, 800cee2 <__d2b+0x92>
 800ceb6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ceba:	4405      	add	r5, r0
 800cebc:	6035      	str	r5, [r6, #0]
 800cebe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec4:	6018      	str	r0, [r3, #0]
 800cec6:	4620      	mov	r0, r4
 800cec8:	b002      	add	sp, #8
 800ceca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800cece:	6161      	str	r1, [r4, #20]
 800ced0:	e7e9      	b.n	800cea6 <__d2b+0x56>
 800ced2:	a801      	add	r0, sp, #4
 800ced4:	f7ff fd61 	bl	800c99a <__lo0bits>
 800ced8:	9b01      	ldr	r3, [sp, #4]
 800ceda:	2201      	movs	r2, #1
 800cedc:	6163      	str	r3, [r4, #20]
 800cede:	3020      	adds	r0, #32
 800cee0:	e7e7      	b.n	800ceb2 <__d2b+0x62>
 800cee2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cee6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ceea:	6030      	str	r0, [r6, #0]
 800ceec:	6918      	ldr	r0, [r3, #16]
 800ceee:	f7ff fd35 	bl	800c95c <__hi0bits>
 800cef2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cef6:	e7e4      	b.n	800cec2 <__d2b+0x72>
 800cef8:	0800d902 	.word	0x0800d902
 800cefc:	0800d913 	.word	0x0800d913

0800cf00 <__sflush_r>:
 800cf00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf06:	0716      	lsls	r6, r2, #28
 800cf08:	4605      	mov	r5, r0
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	d454      	bmi.n	800cfb8 <__sflush_r+0xb8>
 800cf0e:	684b      	ldr	r3, [r1, #4]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	dc02      	bgt.n	800cf1a <__sflush_r+0x1a>
 800cf14:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	dd48      	ble.n	800cfac <__sflush_r+0xac>
 800cf1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf1c:	2e00      	cmp	r6, #0
 800cf1e:	d045      	beq.n	800cfac <__sflush_r+0xac>
 800cf20:	2300      	movs	r3, #0
 800cf22:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf26:	682f      	ldr	r7, [r5, #0]
 800cf28:	6a21      	ldr	r1, [r4, #32]
 800cf2a:	602b      	str	r3, [r5, #0]
 800cf2c:	d030      	beq.n	800cf90 <__sflush_r+0x90>
 800cf2e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	0759      	lsls	r1, r3, #29
 800cf34:	d505      	bpl.n	800cf42 <__sflush_r+0x42>
 800cf36:	6863      	ldr	r3, [r4, #4]
 800cf38:	1ad2      	subs	r2, r2, r3
 800cf3a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf3c:	b10b      	cbz	r3, 800cf42 <__sflush_r+0x42>
 800cf3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf40:	1ad2      	subs	r2, r2, r3
 800cf42:	2300      	movs	r3, #0
 800cf44:	4628      	mov	r0, r5
 800cf46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf48:	6a21      	ldr	r1, [r4, #32]
 800cf4a:	47b0      	blx	r6
 800cf4c:	1c43      	adds	r3, r0, #1
 800cf4e:	89a3      	ldrh	r3, [r4, #12]
 800cf50:	d106      	bne.n	800cf60 <__sflush_r+0x60>
 800cf52:	6829      	ldr	r1, [r5, #0]
 800cf54:	291d      	cmp	r1, #29
 800cf56:	d82b      	bhi.n	800cfb0 <__sflush_r+0xb0>
 800cf58:	4a28      	ldr	r2, [pc, #160]	@ (800cffc <__sflush_r+0xfc>)
 800cf5a:	40ca      	lsrs	r2, r1
 800cf5c:	07d6      	lsls	r6, r2, #31
 800cf5e:	d527      	bpl.n	800cfb0 <__sflush_r+0xb0>
 800cf60:	2200      	movs	r2, #0
 800cf62:	6062      	str	r2, [r4, #4]
 800cf64:	6922      	ldr	r2, [r4, #16]
 800cf66:	04d9      	lsls	r1, r3, #19
 800cf68:	6022      	str	r2, [r4, #0]
 800cf6a:	d504      	bpl.n	800cf76 <__sflush_r+0x76>
 800cf6c:	1c42      	adds	r2, r0, #1
 800cf6e:	d101      	bne.n	800cf74 <__sflush_r+0x74>
 800cf70:	682b      	ldr	r3, [r5, #0]
 800cf72:	b903      	cbnz	r3, 800cf76 <__sflush_r+0x76>
 800cf74:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf78:	602f      	str	r7, [r5, #0]
 800cf7a:	b1b9      	cbz	r1, 800cfac <__sflush_r+0xac>
 800cf7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf80:	4299      	cmp	r1, r3
 800cf82:	d002      	beq.n	800cf8a <__sflush_r+0x8a>
 800cf84:	4628      	mov	r0, r5
 800cf86:	f7ff fb43 	bl	800c610 <_free_r>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf8e:	e00d      	b.n	800cfac <__sflush_r+0xac>
 800cf90:	2301      	movs	r3, #1
 800cf92:	4628      	mov	r0, r5
 800cf94:	47b0      	blx	r6
 800cf96:	4602      	mov	r2, r0
 800cf98:	1c50      	adds	r0, r2, #1
 800cf9a:	d1c9      	bne.n	800cf30 <__sflush_r+0x30>
 800cf9c:	682b      	ldr	r3, [r5, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d0c6      	beq.n	800cf30 <__sflush_r+0x30>
 800cfa2:	2b1d      	cmp	r3, #29
 800cfa4:	d001      	beq.n	800cfaa <__sflush_r+0xaa>
 800cfa6:	2b16      	cmp	r3, #22
 800cfa8:	d11d      	bne.n	800cfe6 <__sflush_r+0xe6>
 800cfaa:	602f      	str	r7, [r5, #0]
 800cfac:	2000      	movs	r0, #0
 800cfae:	e021      	b.n	800cff4 <__sflush_r+0xf4>
 800cfb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfb4:	b21b      	sxth	r3, r3
 800cfb6:	e01a      	b.n	800cfee <__sflush_r+0xee>
 800cfb8:	690f      	ldr	r7, [r1, #16]
 800cfba:	2f00      	cmp	r7, #0
 800cfbc:	d0f6      	beq.n	800cfac <__sflush_r+0xac>
 800cfbe:	0793      	lsls	r3, r2, #30
 800cfc0:	bf18      	it	ne
 800cfc2:	2300      	movne	r3, #0
 800cfc4:	680e      	ldr	r6, [r1, #0]
 800cfc6:	bf08      	it	eq
 800cfc8:	694b      	ldreq	r3, [r1, #20]
 800cfca:	1bf6      	subs	r6, r6, r7
 800cfcc:	600f      	str	r7, [r1, #0]
 800cfce:	608b      	str	r3, [r1, #8]
 800cfd0:	2e00      	cmp	r6, #0
 800cfd2:	ddeb      	ble.n	800cfac <__sflush_r+0xac>
 800cfd4:	4633      	mov	r3, r6
 800cfd6:	463a      	mov	r2, r7
 800cfd8:	4628      	mov	r0, r5
 800cfda:	6a21      	ldr	r1, [r4, #32]
 800cfdc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cfe0:	47e0      	blx	ip
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	dc07      	bgt.n	800cff6 <__sflush_r+0xf6>
 800cfe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfee:	f04f 30ff 	mov.w	r0, #4294967295
 800cff2:	81a3      	strh	r3, [r4, #12]
 800cff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cff6:	4407      	add	r7, r0
 800cff8:	1a36      	subs	r6, r6, r0
 800cffa:	e7e9      	b.n	800cfd0 <__sflush_r+0xd0>
 800cffc:	20400001 	.word	0x20400001

0800d000 <_fflush_r>:
 800d000:	b538      	push	{r3, r4, r5, lr}
 800d002:	690b      	ldr	r3, [r1, #16]
 800d004:	4605      	mov	r5, r0
 800d006:	460c      	mov	r4, r1
 800d008:	b913      	cbnz	r3, 800d010 <_fflush_r+0x10>
 800d00a:	2500      	movs	r5, #0
 800d00c:	4628      	mov	r0, r5
 800d00e:	bd38      	pop	{r3, r4, r5, pc}
 800d010:	b118      	cbz	r0, 800d01a <_fflush_r+0x1a>
 800d012:	6a03      	ldr	r3, [r0, #32]
 800d014:	b90b      	cbnz	r3, 800d01a <_fflush_r+0x1a>
 800d016:	f7fe fb8b 	bl	800b730 <__sinit>
 800d01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d0f3      	beq.n	800d00a <_fflush_r+0xa>
 800d022:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d024:	07d0      	lsls	r0, r2, #31
 800d026:	d404      	bmi.n	800d032 <_fflush_r+0x32>
 800d028:	0599      	lsls	r1, r3, #22
 800d02a:	d402      	bmi.n	800d032 <_fflush_r+0x32>
 800d02c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d02e:	f7fe fc74 	bl	800b91a <__retarget_lock_acquire_recursive>
 800d032:	4628      	mov	r0, r5
 800d034:	4621      	mov	r1, r4
 800d036:	f7ff ff63 	bl	800cf00 <__sflush_r>
 800d03a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d03c:	4605      	mov	r5, r0
 800d03e:	07da      	lsls	r2, r3, #31
 800d040:	d4e4      	bmi.n	800d00c <_fflush_r+0xc>
 800d042:	89a3      	ldrh	r3, [r4, #12]
 800d044:	059b      	lsls	r3, r3, #22
 800d046:	d4e1      	bmi.n	800d00c <_fflush_r+0xc>
 800d048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d04a:	f7fe fc67 	bl	800b91c <__retarget_lock_release_recursive>
 800d04e:	e7dd      	b.n	800d00c <_fflush_r+0xc>

0800d050 <_sbrk_r>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	2300      	movs	r3, #0
 800d054:	4d05      	ldr	r5, [pc, #20]	@ (800d06c <_sbrk_r+0x1c>)
 800d056:	4604      	mov	r4, r0
 800d058:	4608      	mov	r0, r1
 800d05a:	602b      	str	r3, [r5, #0]
 800d05c:	f7f4 fb82 	bl	8001764 <_sbrk>
 800d060:	1c43      	adds	r3, r0, #1
 800d062:	d102      	bne.n	800d06a <_sbrk_r+0x1a>
 800d064:	682b      	ldr	r3, [r5, #0]
 800d066:	b103      	cbz	r3, 800d06a <_sbrk_r+0x1a>
 800d068:	6023      	str	r3, [r4, #0]
 800d06a:	bd38      	pop	{r3, r4, r5, pc}
 800d06c:	20004aa0 	.word	0x20004aa0

0800d070 <__assert_func>:
 800d070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d072:	4614      	mov	r4, r2
 800d074:	461a      	mov	r2, r3
 800d076:	4b09      	ldr	r3, [pc, #36]	@ (800d09c <__assert_func+0x2c>)
 800d078:	4605      	mov	r5, r0
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68d8      	ldr	r0, [r3, #12]
 800d07e:	b14c      	cbz	r4, 800d094 <__assert_func+0x24>
 800d080:	4b07      	ldr	r3, [pc, #28]	@ (800d0a0 <__assert_func+0x30>)
 800d082:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d086:	9100      	str	r1, [sp, #0]
 800d088:	462b      	mov	r3, r5
 800d08a:	4906      	ldr	r1, [pc, #24]	@ (800d0a4 <__assert_func+0x34>)
 800d08c:	f000 f842 	bl	800d114 <fiprintf>
 800d090:	f000 f852 	bl	800d138 <abort>
 800d094:	4b04      	ldr	r3, [pc, #16]	@ (800d0a8 <__assert_func+0x38>)
 800d096:	461c      	mov	r4, r3
 800d098:	e7f3      	b.n	800d082 <__assert_func+0x12>
 800d09a:	bf00      	nop
 800d09c:	2000001c 	.word	0x2000001c
 800d0a0:	0800d976 	.word	0x0800d976
 800d0a4:	0800d983 	.word	0x0800d983
 800d0a8:	0800d9b1 	.word	0x0800d9b1

0800d0ac <_calloc_r>:
 800d0ac:	b570      	push	{r4, r5, r6, lr}
 800d0ae:	fba1 5402 	umull	r5, r4, r1, r2
 800d0b2:	b934      	cbnz	r4, 800d0c2 <_calloc_r+0x16>
 800d0b4:	4629      	mov	r1, r5
 800d0b6:	f7ff fb1d 	bl	800c6f4 <_malloc_r>
 800d0ba:	4606      	mov	r6, r0
 800d0bc:	b928      	cbnz	r0, 800d0ca <_calloc_r+0x1e>
 800d0be:	4630      	mov	r0, r6
 800d0c0:	bd70      	pop	{r4, r5, r6, pc}
 800d0c2:	220c      	movs	r2, #12
 800d0c4:	2600      	movs	r6, #0
 800d0c6:	6002      	str	r2, [r0, #0]
 800d0c8:	e7f9      	b.n	800d0be <_calloc_r+0x12>
 800d0ca:	462a      	mov	r2, r5
 800d0cc:	4621      	mov	r1, r4
 800d0ce:	f7fe fbb8 	bl	800b842 <memset>
 800d0d2:	e7f4      	b.n	800d0be <_calloc_r+0x12>

0800d0d4 <__ascii_mbtowc>:
 800d0d4:	b082      	sub	sp, #8
 800d0d6:	b901      	cbnz	r1, 800d0da <__ascii_mbtowc+0x6>
 800d0d8:	a901      	add	r1, sp, #4
 800d0da:	b142      	cbz	r2, 800d0ee <__ascii_mbtowc+0x1a>
 800d0dc:	b14b      	cbz	r3, 800d0f2 <__ascii_mbtowc+0x1e>
 800d0de:	7813      	ldrb	r3, [r2, #0]
 800d0e0:	600b      	str	r3, [r1, #0]
 800d0e2:	7812      	ldrb	r2, [r2, #0]
 800d0e4:	1e10      	subs	r0, r2, #0
 800d0e6:	bf18      	it	ne
 800d0e8:	2001      	movne	r0, #1
 800d0ea:	b002      	add	sp, #8
 800d0ec:	4770      	bx	lr
 800d0ee:	4610      	mov	r0, r2
 800d0f0:	e7fb      	b.n	800d0ea <__ascii_mbtowc+0x16>
 800d0f2:	f06f 0001 	mvn.w	r0, #1
 800d0f6:	e7f8      	b.n	800d0ea <__ascii_mbtowc+0x16>

0800d0f8 <__ascii_wctomb>:
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	4608      	mov	r0, r1
 800d0fc:	b141      	cbz	r1, 800d110 <__ascii_wctomb+0x18>
 800d0fe:	2aff      	cmp	r2, #255	@ 0xff
 800d100:	d904      	bls.n	800d10c <__ascii_wctomb+0x14>
 800d102:	228a      	movs	r2, #138	@ 0x8a
 800d104:	f04f 30ff 	mov.w	r0, #4294967295
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	4770      	bx	lr
 800d10c:	2001      	movs	r0, #1
 800d10e:	700a      	strb	r2, [r1, #0]
 800d110:	4770      	bx	lr
	...

0800d114 <fiprintf>:
 800d114:	b40e      	push	{r1, r2, r3}
 800d116:	b503      	push	{r0, r1, lr}
 800d118:	4601      	mov	r1, r0
 800d11a:	ab03      	add	r3, sp, #12
 800d11c:	4805      	ldr	r0, [pc, #20]	@ (800d134 <fiprintf+0x20>)
 800d11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d122:	6800      	ldr	r0, [r0, #0]
 800d124:	9301      	str	r3, [sp, #4]
 800d126:	f000 f835 	bl	800d194 <_vfiprintf_r>
 800d12a:	b002      	add	sp, #8
 800d12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d130:	b003      	add	sp, #12
 800d132:	4770      	bx	lr
 800d134:	2000001c 	.word	0x2000001c

0800d138 <abort>:
 800d138:	2006      	movs	r0, #6
 800d13a:	b508      	push	{r3, lr}
 800d13c:	f000 f9fe 	bl	800d53c <raise>
 800d140:	2001      	movs	r0, #1
 800d142:	f7f4 fab6 	bl	80016b2 <_exit>

0800d146 <__sfputc_r>:
 800d146:	6893      	ldr	r3, [r2, #8]
 800d148:	b410      	push	{r4}
 800d14a:	3b01      	subs	r3, #1
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	6093      	str	r3, [r2, #8]
 800d150:	da07      	bge.n	800d162 <__sfputc_r+0x1c>
 800d152:	6994      	ldr	r4, [r2, #24]
 800d154:	42a3      	cmp	r3, r4
 800d156:	db01      	blt.n	800d15c <__sfputc_r+0x16>
 800d158:	290a      	cmp	r1, #10
 800d15a:	d102      	bne.n	800d162 <__sfputc_r+0x1c>
 800d15c:	bc10      	pop	{r4}
 800d15e:	f000 b931 	b.w	800d3c4 <__swbuf_r>
 800d162:	6813      	ldr	r3, [r2, #0]
 800d164:	1c58      	adds	r0, r3, #1
 800d166:	6010      	str	r0, [r2, #0]
 800d168:	7019      	strb	r1, [r3, #0]
 800d16a:	4608      	mov	r0, r1
 800d16c:	bc10      	pop	{r4}
 800d16e:	4770      	bx	lr

0800d170 <__sfputs_r>:
 800d170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d172:	4606      	mov	r6, r0
 800d174:	460f      	mov	r7, r1
 800d176:	4614      	mov	r4, r2
 800d178:	18d5      	adds	r5, r2, r3
 800d17a:	42ac      	cmp	r4, r5
 800d17c:	d101      	bne.n	800d182 <__sfputs_r+0x12>
 800d17e:	2000      	movs	r0, #0
 800d180:	e007      	b.n	800d192 <__sfputs_r+0x22>
 800d182:	463a      	mov	r2, r7
 800d184:	4630      	mov	r0, r6
 800d186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d18a:	f7ff ffdc 	bl	800d146 <__sfputc_r>
 800d18e:	1c43      	adds	r3, r0, #1
 800d190:	d1f3      	bne.n	800d17a <__sfputs_r+0xa>
 800d192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d194 <_vfiprintf_r>:
 800d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d198:	460d      	mov	r5, r1
 800d19a:	4614      	mov	r4, r2
 800d19c:	4698      	mov	r8, r3
 800d19e:	4606      	mov	r6, r0
 800d1a0:	b09d      	sub	sp, #116	@ 0x74
 800d1a2:	b118      	cbz	r0, 800d1ac <_vfiprintf_r+0x18>
 800d1a4:	6a03      	ldr	r3, [r0, #32]
 800d1a6:	b90b      	cbnz	r3, 800d1ac <_vfiprintf_r+0x18>
 800d1a8:	f7fe fac2 	bl	800b730 <__sinit>
 800d1ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1ae:	07d9      	lsls	r1, r3, #31
 800d1b0:	d405      	bmi.n	800d1be <_vfiprintf_r+0x2a>
 800d1b2:	89ab      	ldrh	r3, [r5, #12]
 800d1b4:	059a      	lsls	r2, r3, #22
 800d1b6:	d402      	bmi.n	800d1be <_vfiprintf_r+0x2a>
 800d1b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1ba:	f7fe fbae 	bl	800b91a <__retarget_lock_acquire_recursive>
 800d1be:	89ab      	ldrh	r3, [r5, #12]
 800d1c0:	071b      	lsls	r3, r3, #28
 800d1c2:	d501      	bpl.n	800d1c8 <_vfiprintf_r+0x34>
 800d1c4:	692b      	ldr	r3, [r5, #16]
 800d1c6:	b99b      	cbnz	r3, 800d1f0 <_vfiprintf_r+0x5c>
 800d1c8:	4629      	mov	r1, r5
 800d1ca:	4630      	mov	r0, r6
 800d1cc:	f000 f938 	bl	800d440 <__swsetup_r>
 800d1d0:	b170      	cbz	r0, 800d1f0 <_vfiprintf_r+0x5c>
 800d1d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1d4:	07dc      	lsls	r4, r3, #31
 800d1d6:	d504      	bpl.n	800d1e2 <_vfiprintf_r+0x4e>
 800d1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1dc:	b01d      	add	sp, #116	@ 0x74
 800d1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e2:	89ab      	ldrh	r3, [r5, #12]
 800d1e4:	0598      	lsls	r0, r3, #22
 800d1e6:	d4f7      	bmi.n	800d1d8 <_vfiprintf_r+0x44>
 800d1e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1ea:	f7fe fb97 	bl	800b91c <__retarget_lock_release_recursive>
 800d1ee:	e7f3      	b.n	800d1d8 <_vfiprintf_r+0x44>
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1f4:	2320      	movs	r3, #32
 800d1f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d1fa:	2330      	movs	r3, #48	@ 0x30
 800d1fc:	f04f 0901 	mov.w	r9, #1
 800d200:	f8cd 800c 	str.w	r8, [sp, #12]
 800d204:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d3b0 <_vfiprintf_r+0x21c>
 800d208:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d20c:	4623      	mov	r3, r4
 800d20e:	469a      	mov	sl, r3
 800d210:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d214:	b10a      	cbz	r2, 800d21a <_vfiprintf_r+0x86>
 800d216:	2a25      	cmp	r2, #37	@ 0x25
 800d218:	d1f9      	bne.n	800d20e <_vfiprintf_r+0x7a>
 800d21a:	ebba 0b04 	subs.w	fp, sl, r4
 800d21e:	d00b      	beq.n	800d238 <_vfiprintf_r+0xa4>
 800d220:	465b      	mov	r3, fp
 800d222:	4622      	mov	r2, r4
 800d224:	4629      	mov	r1, r5
 800d226:	4630      	mov	r0, r6
 800d228:	f7ff ffa2 	bl	800d170 <__sfputs_r>
 800d22c:	3001      	adds	r0, #1
 800d22e:	f000 80a7 	beq.w	800d380 <_vfiprintf_r+0x1ec>
 800d232:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d234:	445a      	add	r2, fp
 800d236:	9209      	str	r2, [sp, #36]	@ 0x24
 800d238:	f89a 3000 	ldrb.w	r3, [sl]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f000 809f 	beq.w	800d380 <_vfiprintf_r+0x1ec>
 800d242:	2300      	movs	r3, #0
 800d244:	f04f 32ff 	mov.w	r2, #4294967295
 800d248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d24c:	f10a 0a01 	add.w	sl, sl, #1
 800d250:	9304      	str	r3, [sp, #16]
 800d252:	9307      	str	r3, [sp, #28]
 800d254:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d258:	931a      	str	r3, [sp, #104]	@ 0x68
 800d25a:	4654      	mov	r4, sl
 800d25c:	2205      	movs	r2, #5
 800d25e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d262:	4853      	ldr	r0, [pc, #332]	@ (800d3b0 <_vfiprintf_r+0x21c>)
 800d264:	f7fe fb5b 	bl	800b91e <memchr>
 800d268:	9a04      	ldr	r2, [sp, #16]
 800d26a:	b9d8      	cbnz	r0, 800d2a4 <_vfiprintf_r+0x110>
 800d26c:	06d1      	lsls	r1, r2, #27
 800d26e:	bf44      	itt	mi
 800d270:	2320      	movmi	r3, #32
 800d272:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d276:	0713      	lsls	r3, r2, #28
 800d278:	bf44      	itt	mi
 800d27a:	232b      	movmi	r3, #43	@ 0x2b
 800d27c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d280:	f89a 3000 	ldrb.w	r3, [sl]
 800d284:	2b2a      	cmp	r3, #42	@ 0x2a
 800d286:	d015      	beq.n	800d2b4 <_vfiprintf_r+0x120>
 800d288:	4654      	mov	r4, sl
 800d28a:	2000      	movs	r0, #0
 800d28c:	f04f 0c0a 	mov.w	ip, #10
 800d290:	9a07      	ldr	r2, [sp, #28]
 800d292:	4621      	mov	r1, r4
 800d294:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d298:	3b30      	subs	r3, #48	@ 0x30
 800d29a:	2b09      	cmp	r3, #9
 800d29c:	d94b      	bls.n	800d336 <_vfiprintf_r+0x1a2>
 800d29e:	b1b0      	cbz	r0, 800d2ce <_vfiprintf_r+0x13a>
 800d2a0:	9207      	str	r2, [sp, #28]
 800d2a2:	e014      	b.n	800d2ce <_vfiprintf_r+0x13a>
 800d2a4:	eba0 0308 	sub.w	r3, r0, r8
 800d2a8:	fa09 f303 	lsl.w	r3, r9, r3
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	46a2      	mov	sl, r4
 800d2b0:	9304      	str	r3, [sp, #16]
 800d2b2:	e7d2      	b.n	800d25a <_vfiprintf_r+0xc6>
 800d2b4:	9b03      	ldr	r3, [sp, #12]
 800d2b6:	1d19      	adds	r1, r3, #4
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	9103      	str	r1, [sp, #12]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	bfbb      	ittet	lt
 800d2c0:	425b      	neglt	r3, r3
 800d2c2:	f042 0202 	orrlt.w	r2, r2, #2
 800d2c6:	9307      	strge	r3, [sp, #28]
 800d2c8:	9307      	strlt	r3, [sp, #28]
 800d2ca:	bfb8      	it	lt
 800d2cc:	9204      	strlt	r2, [sp, #16]
 800d2ce:	7823      	ldrb	r3, [r4, #0]
 800d2d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2d2:	d10a      	bne.n	800d2ea <_vfiprintf_r+0x156>
 800d2d4:	7863      	ldrb	r3, [r4, #1]
 800d2d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2d8:	d132      	bne.n	800d340 <_vfiprintf_r+0x1ac>
 800d2da:	9b03      	ldr	r3, [sp, #12]
 800d2dc:	3402      	adds	r4, #2
 800d2de:	1d1a      	adds	r2, r3, #4
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	9203      	str	r2, [sp, #12]
 800d2e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2e8:	9305      	str	r3, [sp, #20]
 800d2ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d3b4 <_vfiprintf_r+0x220>
 800d2ee:	2203      	movs	r2, #3
 800d2f0:	4650      	mov	r0, sl
 800d2f2:	7821      	ldrb	r1, [r4, #0]
 800d2f4:	f7fe fb13 	bl	800b91e <memchr>
 800d2f8:	b138      	cbz	r0, 800d30a <_vfiprintf_r+0x176>
 800d2fa:	2240      	movs	r2, #64	@ 0x40
 800d2fc:	9b04      	ldr	r3, [sp, #16]
 800d2fe:	eba0 000a 	sub.w	r0, r0, sl
 800d302:	4082      	lsls	r2, r0
 800d304:	4313      	orrs	r3, r2
 800d306:	3401      	adds	r4, #1
 800d308:	9304      	str	r3, [sp, #16]
 800d30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30e:	2206      	movs	r2, #6
 800d310:	4829      	ldr	r0, [pc, #164]	@ (800d3b8 <_vfiprintf_r+0x224>)
 800d312:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d316:	f7fe fb02 	bl	800b91e <memchr>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d03f      	beq.n	800d39e <_vfiprintf_r+0x20a>
 800d31e:	4b27      	ldr	r3, [pc, #156]	@ (800d3bc <_vfiprintf_r+0x228>)
 800d320:	bb1b      	cbnz	r3, 800d36a <_vfiprintf_r+0x1d6>
 800d322:	9b03      	ldr	r3, [sp, #12]
 800d324:	3307      	adds	r3, #7
 800d326:	f023 0307 	bic.w	r3, r3, #7
 800d32a:	3308      	adds	r3, #8
 800d32c:	9303      	str	r3, [sp, #12]
 800d32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d330:	443b      	add	r3, r7
 800d332:	9309      	str	r3, [sp, #36]	@ 0x24
 800d334:	e76a      	b.n	800d20c <_vfiprintf_r+0x78>
 800d336:	460c      	mov	r4, r1
 800d338:	2001      	movs	r0, #1
 800d33a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d33e:	e7a8      	b.n	800d292 <_vfiprintf_r+0xfe>
 800d340:	2300      	movs	r3, #0
 800d342:	f04f 0c0a 	mov.w	ip, #10
 800d346:	4619      	mov	r1, r3
 800d348:	3401      	adds	r4, #1
 800d34a:	9305      	str	r3, [sp, #20]
 800d34c:	4620      	mov	r0, r4
 800d34e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d352:	3a30      	subs	r2, #48	@ 0x30
 800d354:	2a09      	cmp	r2, #9
 800d356:	d903      	bls.n	800d360 <_vfiprintf_r+0x1cc>
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d0c6      	beq.n	800d2ea <_vfiprintf_r+0x156>
 800d35c:	9105      	str	r1, [sp, #20]
 800d35e:	e7c4      	b.n	800d2ea <_vfiprintf_r+0x156>
 800d360:	4604      	mov	r4, r0
 800d362:	2301      	movs	r3, #1
 800d364:	fb0c 2101 	mla	r1, ip, r1, r2
 800d368:	e7f0      	b.n	800d34c <_vfiprintf_r+0x1b8>
 800d36a:	ab03      	add	r3, sp, #12
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	462a      	mov	r2, r5
 800d370:	4630      	mov	r0, r6
 800d372:	4b13      	ldr	r3, [pc, #76]	@ (800d3c0 <_vfiprintf_r+0x22c>)
 800d374:	a904      	add	r1, sp, #16
 800d376:	f7fd fd93 	bl	800aea0 <_printf_float>
 800d37a:	4607      	mov	r7, r0
 800d37c:	1c78      	adds	r0, r7, #1
 800d37e:	d1d6      	bne.n	800d32e <_vfiprintf_r+0x19a>
 800d380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d382:	07d9      	lsls	r1, r3, #31
 800d384:	d405      	bmi.n	800d392 <_vfiprintf_r+0x1fe>
 800d386:	89ab      	ldrh	r3, [r5, #12]
 800d388:	059a      	lsls	r2, r3, #22
 800d38a:	d402      	bmi.n	800d392 <_vfiprintf_r+0x1fe>
 800d38c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d38e:	f7fe fac5 	bl	800b91c <__retarget_lock_release_recursive>
 800d392:	89ab      	ldrh	r3, [r5, #12]
 800d394:	065b      	lsls	r3, r3, #25
 800d396:	f53f af1f 	bmi.w	800d1d8 <_vfiprintf_r+0x44>
 800d39a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d39c:	e71e      	b.n	800d1dc <_vfiprintf_r+0x48>
 800d39e:	ab03      	add	r3, sp, #12
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	462a      	mov	r2, r5
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	4b06      	ldr	r3, [pc, #24]	@ (800d3c0 <_vfiprintf_r+0x22c>)
 800d3a8:	a904      	add	r1, sp, #16
 800d3aa:	f7fe f817 	bl	800b3dc <_printf_i>
 800d3ae:	e7e4      	b.n	800d37a <_vfiprintf_r+0x1e6>
 800d3b0:	0800d9b2 	.word	0x0800d9b2
 800d3b4:	0800d9b8 	.word	0x0800d9b8
 800d3b8:	0800d9bc 	.word	0x0800d9bc
 800d3bc:	0800aea1 	.word	0x0800aea1
 800d3c0:	0800d171 	.word	0x0800d171

0800d3c4 <__swbuf_r>:
 800d3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c6:	460e      	mov	r6, r1
 800d3c8:	4614      	mov	r4, r2
 800d3ca:	4605      	mov	r5, r0
 800d3cc:	b118      	cbz	r0, 800d3d6 <__swbuf_r+0x12>
 800d3ce:	6a03      	ldr	r3, [r0, #32]
 800d3d0:	b90b      	cbnz	r3, 800d3d6 <__swbuf_r+0x12>
 800d3d2:	f7fe f9ad 	bl	800b730 <__sinit>
 800d3d6:	69a3      	ldr	r3, [r4, #24]
 800d3d8:	60a3      	str	r3, [r4, #8]
 800d3da:	89a3      	ldrh	r3, [r4, #12]
 800d3dc:	071a      	lsls	r2, r3, #28
 800d3de:	d501      	bpl.n	800d3e4 <__swbuf_r+0x20>
 800d3e0:	6923      	ldr	r3, [r4, #16]
 800d3e2:	b943      	cbnz	r3, 800d3f6 <__swbuf_r+0x32>
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	4628      	mov	r0, r5
 800d3e8:	f000 f82a 	bl	800d440 <__swsetup_r>
 800d3ec:	b118      	cbz	r0, 800d3f6 <__swbuf_r+0x32>
 800d3ee:	f04f 37ff 	mov.w	r7, #4294967295
 800d3f2:	4638      	mov	r0, r7
 800d3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3f6:	6823      	ldr	r3, [r4, #0]
 800d3f8:	6922      	ldr	r2, [r4, #16]
 800d3fa:	b2f6      	uxtb	r6, r6
 800d3fc:	1a98      	subs	r0, r3, r2
 800d3fe:	6963      	ldr	r3, [r4, #20]
 800d400:	4637      	mov	r7, r6
 800d402:	4283      	cmp	r3, r0
 800d404:	dc05      	bgt.n	800d412 <__swbuf_r+0x4e>
 800d406:	4621      	mov	r1, r4
 800d408:	4628      	mov	r0, r5
 800d40a:	f7ff fdf9 	bl	800d000 <_fflush_r>
 800d40e:	2800      	cmp	r0, #0
 800d410:	d1ed      	bne.n	800d3ee <__swbuf_r+0x2a>
 800d412:	68a3      	ldr	r3, [r4, #8]
 800d414:	3b01      	subs	r3, #1
 800d416:	60a3      	str	r3, [r4, #8]
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	1c5a      	adds	r2, r3, #1
 800d41c:	6022      	str	r2, [r4, #0]
 800d41e:	701e      	strb	r6, [r3, #0]
 800d420:	6962      	ldr	r2, [r4, #20]
 800d422:	1c43      	adds	r3, r0, #1
 800d424:	429a      	cmp	r2, r3
 800d426:	d004      	beq.n	800d432 <__swbuf_r+0x6e>
 800d428:	89a3      	ldrh	r3, [r4, #12]
 800d42a:	07db      	lsls	r3, r3, #31
 800d42c:	d5e1      	bpl.n	800d3f2 <__swbuf_r+0x2e>
 800d42e:	2e0a      	cmp	r6, #10
 800d430:	d1df      	bne.n	800d3f2 <__swbuf_r+0x2e>
 800d432:	4621      	mov	r1, r4
 800d434:	4628      	mov	r0, r5
 800d436:	f7ff fde3 	bl	800d000 <_fflush_r>
 800d43a:	2800      	cmp	r0, #0
 800d43c:	d0d9      	beq.n	800d3f2 <__swbuf_r+0x2e>
 800d43e:	e7d6      	b.n	800d3ee <__swbuf_r+0x2a>

0800d440 <__swsetup_r>:
 800d440:	b538      	push	{r3, r4, r5, lr}
 800d442:	4b29      	ldr	r3, [pc, #164]	@ (800d4e8 <__swsetup_r+0xa8>)
 800d444:	4605      	mov	r5, r0
 800d446:	6818      	ldr	r0, [r3, #0]
 800d448:	460c      	mov	r4, r1
 800d44a:	b118      	cbz	r0, 800d454 <__swsetup_r+0x14>
 800d44c:	6a03      	ldr	r3, [r0, #32]
 800d44e:	b90b      	cbnz	r3, 800d454 <__swsetup_r+0x14>
 800d450:	f7fe f96e 	bl	800b730 <__sinit>
 800d454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d458:	0719      	lsls	r1, r3, #28
 800d45a:	d422      	bmi.n	800d4a2 <__swsetup_r+0x62>
 800d45c:	06da      	lsls	r2, r3, #27
 800d45e:	d407      	bmi.n	800d470 <__swsetup_r+0x30>
 800d460:	2209      	movs	r2, #9
 800d462:	602a      	str	r2, [r5, #0]
 800d464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d468:	f04f 30ff 	mov.w	r0, #4294967295
 800d46c:	81a3      	strh	r3, [r4, #12]
 800d46e:	e033      	b.n	800d4d8 <__swsetup_r+0x98>
 800d470:	0758      	lsls	r0, r3, #29
 800d472:	d512      	bpl.n	800d49a <__swsetup_r+0x5a>
 800d474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d476:	b141      	cbz	r1, 800d48a <__swsetup_r+0x4a>
 800d478:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d47c:	4299      	cmp	r1, r3
 800d47e:	d002      	beq.n	800d486 <__swsetup_r+0x46>
 800d480:	4628      	mov	r0, r5
 800d482:	f7ff f8c5 	bl	800c610 <_free_r>
 800d486:	2300      	movs	r3, #0
 800d488:	6363      	str	r3, [r4, #52]	@ 0x34
 800d48a:	89a3      	ldrh	r3, [r4, #12]
 800d48c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d490:	81a3      	strh	r3, [r4, #12]
 800d492:	2300      	movs	r3, #0
 800d494:	6063      	str	r3, [r4, #4]
 800d496:	6923      	ldr	r3, [r4, #16]
 800d498:	6023      	str	r3, [r4, #0]
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	f043 0308 	orr.w	r3, r3, #8
 800d4a0:	81a3      	strh	r3, [r4, #12]
 800d4a2:	6923      	ldr	r3, [r4, #16]
 800d4a4:	b94b      	cbnz	r3, 800d4ba <__swsetup_r+0x7a>
 800d4a6:	89a3      	ldrh	r3, [r4, #12]
 800d4a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d4ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4b0:	d003      	beq.n	800d4ba <__swsetup_r+0x7a>
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f000 f882 	bl	800d5be <__smakebuf_r>
 800d4ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4be:	f013 0201 	ands.w	r2, r3, #1
 800d4c2:	d00a      	beq.n	800d4da <__swsetup_r+0x9a>
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	60a2      	str	r2, [r4, #8]
 800d4c8:	6962      	ldr	r2, [r4, #20]
 800d4ca:	4252      	negs	r2, r2
 800d4cc:	61a2      	str	r2, [r4, #24]
 800d4ce:	6922      	ldr	r2, [r4, #16]
 800d4d0:	b942      	cbnz	r2, 800d4e4 <__swsetup_r+0xa4>
 800d4d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d4d6:	d1c5      	bne.n	800d464 <__swsetup_r+0x24>
 800d4d8:	bd38      	pop	{r3, r4, r5, pc}
 800d4da:	0799      	lsls	r1, r3, #30
 800d4dc:	bf58      	it	pl
 800d4de:	6962      	ldrpl	r2, [r4, #20]
 800d4e0:	60a2      	str	r2, [r4, #8]
 800d4e2:	e7f4      	b.n	800d4ce <__swsetup_r+0x8e>
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	e7f7      	b.n	800d4d8 <__swsetup_r+0x98>
 800d4e8:	2000001c 	.word	0x2000001c

0800d4ec <_raise_r>:
 800d4ec:	291f      	cmp	r1, #31
 800d4ee:	b538      	push	{r3, r4, r5, lr}
 800d4f0:	4605      	mov	r5, r0
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	d904      	bls.n	800d500 <_raise_r+0x14>
 800d4f6:	2316      	movs	r3, #22
 800d4f8:	6003      	str	r3, [r0, #0]
 800d4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d4fe:	bd38      	pop	{r3, r4, r5, pc}
 800d500:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d502:	b112      	cbz	r2, 800d50a <_raise_r+0x1e>
 800d504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d508:	b94b      	cbnz	r3, 800d51e <_raise_r+0x32>
 800d50a:	4628      	mov	r0, r5
 800d50c:	f000 f830 	bl	800d570 <_getpid_r>
 800d510:	4622      	mov	r2, r4
 800d512:	4601      	mov	r1, r0
 800d514:	4628      	mov	r0, r5
 800d516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d51a:	f000 b817 	b.w	800d54c <_kill_r>
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d00a      	beq.n	800d538 <_raise_r+0x4c>
 800d522:	1c59      	adds	r1, r3, #1
 800d524:	d103      	bne.n	800d52e <_raise_r+0x42>
 800d526:	2316      	movs	r3, #22
 800d528:	6003      	str	r3, [r0, #0]
 800d52a:	2001      	movs	r0, #1
 800d52c:	e7e7      	b.n	800d4fe <_raise_r+0x12>
 800d52e:	2100      	movs	r1, #0
 800d530:	4620      	mov	r0, r4
 800d532:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d536:	4798      	blx	r3
 800d538:	2000      	movs	r0, #0
 800d53a:	e7e0      	b.n	800d4fe <_raise_r+0x12>

0800d53c <raise>:
 800d53c:	4b02      	ldr	r3, [pc, #8]	@ (800d548 <raise+0xc>)
 800d53e:	4601      	mov	r1, r0
 800d540:	6818      	ldr	r0, [r3, #0]
 800d542:	f7ff bfd3 	b.w	800d4ec <_raise_r>
 800d546:	bf00      	nop
 800d548:	2000001c 	.word	0x2000001c

0800d54c <_kill_r>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	2300      	movs	r3, #0
 800d550:	4d06      	ldr	r5, [pc, #24]	@ (800d56c <_kill_r+0x20>)
 800d552:	4604      	mov	r4, r0
 800d554:	4608      	mov	r0, r1
 800d556:	4611      	mov	r1, r2
 800d558:	602b      	str	r3, [r5, #0]
 800d55a:	f7f4 f89a 	bl	8001692 <_kill>
 800d55e:	1c43      	adds	r3, r0, #1
 800d560:	d102      	bne.n	800d568 <_kill_r+0x1c>
 800d562:	682b      	ldr	r3, [r5, #0]
 800d564:	b103      	cbz	r3, 800d568 <_kill_r+0x1c>
 800d566:	6023      	str	r3, [r4, #0]
 800d568:	bd38      	pop	{r3, r4, r5, pc}
 800d56a:	bf00      	nop
 800d56c:	20004aa0 	.word	0x20004aa0

0800d570 <_getpid_r>:
 800d570:	f7f4 b888 	b.w	8001684 <_getpid>

0800d574 <__swhatbuf_r>:
 800d574:	b570      	push	{r4, r5, r6, lr}
 800d576:	460c      	mov	r4, r1
 800d578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d57c:	4615      	mov	r5, r2
 800d57e:	2900      	cmp	r1, #0
 800d580:	461e      	mov	r6, r3
 800d582:	b096      	sub	sp, #88	@ 0x58
 800d584:	da0c      	bge.n	800d5a0 <__swhatbuf_r+0x2c>
 800d586:	89a3      	ldrh	r3, [r4, #12]
 800d588:	2100      	movs	r1, #0
 800d58a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d58e:	bf14      	ite	ne
 800d590:	2340      	movne	r3, #64	@ 0x40
 800d592:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d596:	2000      	movs	r0, #0
 800d598:	6031      	str	r1, [r6, #0]
 800d59a:	602b      	str	r3, [r5, #0]
 800d59c:	b016      	add	sp, #88	@ 0x58
 800d59e:	bd70      	pop	{r4, r5, r6, pc}
 800d5a0:	466a      	mov	r2, sp
 800d5a2:	f000 f849 	bl	800d638 <_fstat_r>
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	dbed      	blt.n	800d586 <__swhatbuf_r+0x12>
 800d5aa:	9901      	ldr	r1, [sp, #4]
 800d5ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d5b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d5b4:	4259      	negs	r1, r3
 800d5b6:	4159      	adcs	r1, r3
 800d5b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5bc:	e7eb      	b.n	800d596 <__swhatbuf_r+0x22>

0800d5be <__smakebuf_r>:
 800d5be:	898b      	ldrh	r3, [r1, #12]
 800d5c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5c2:	079d      	lsls	r5, r3, #30
 800d5c4:	4606      	mov	r6, r0
 800d5c6:	460c      	mov	r4, r1
 800d5c8:	d507      	bpl.n	800d5da <__smakebuf_r+0x1c>
 800d5ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d5ce:	6023      	str	r3, [r4, #0]
 800d5d0:	6123      	str	r3, [r4, #16]
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	6163      	str	r3, [r4, #20]
 800d5d6:	b003      	add	sp, #12
 800d5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5da:	466a      	mov	r2, sp
 800d5dc:	ab01      	add	r3, sp, #4
 800d5de:	f7ff ffc9 	bl	800d574 <__swhatbuf_r>
 800d5e2:	9f00      	ldr	r7, [sp, #0]
 800d5e4:	4605      	mov	r5, r0
 800d5e6:	4639      	mov	r1, r7
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f7ff f883 	bl	800c6f4 <_malloc_r>
 800d5ee:	b948      	cbnz	r0, 800d604 <__smakebuf_r+0x46>
 800d5f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5f4:	059a      	lsls	r2, r3, #22
 800d5f6:	d4ee      	bmi.n	800d5d6 <__smakebuf_r+0x18>
 800d5f8:	f023 0303 	bic.w	r3, r3, #3
 800d5fc:	f043 0302 	orr.w	r3, r3, #2
 800d600:	81a3      	strh	r3, [r4, #12]
 800d602:	e7e2      	b.n	800d5ca <__smakebuf_r+0xc>
 800d604:	89a3      	ldrh	r3, [r4, #12]
 800d606:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d60a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d60e:	81a3      	strh	r3, [r4, #12]
 800d610:	9b01      	ldr	r3, [sp, #4]
 800d612:	6020      	str	r0, [r4, #0]
 800d614:	b15b      	cbz	r3, 800d62e <__smakebuf_r+0x70>
 800d616:	4630      	mov	r0, r6
 800d618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d61c:	f000 f81e 	bl	800d65c <_isatty_r>
 800d620:	b128      	cbz	r0, 800d62e <__smakebuf_r+0x70>
 800d622:	89a3      	ldrh	r3, [r4, #12]
 800d624:	f023 0303 	bic.w	r3, r3, #3
 800d628:	f043 0301 	orr.w	r3, r3, #1
 800d62c:	81a3      	strh	r3, [r4, #12]
 800d62e:	89a3      	ldrh	r3, [r4, #12]
 800d630:	431d      	orrs	r5, r3
 800d632:	81a5      	strh	r5, [r4, #12]
 800d634:	e7cf      	b.n	800d5d6 <__smakebuf_r+0x18>
	...

0800d638 <_fstat_r>:
 800d638:	b538      	push	{r3, r4, r5, lr}
 800d63a:	2300      	movs	r3, #0
 800d63c:	4d06      	ldr	r5, [pc, #24]	@ (800d658 <_fstat_r+0x20>)
 800d63e:	4604      	mov	r4, r0
 800d640:	4608      	mov	r0, r1
 800d642:	4611      	mov	r1, r2
 800d644:	602b      	str	r3, [r5, #0]
 800d646:	f7f4 f867 	bl	8001718 <_fstat>
 800d64a:	1c43      	adds	r3, r0, #1
 800d64c:	d102      	bne.n	800d654 <_fstat_r+0x1c>
 800d64e:	682b      	ldr	r3, [r5, #0]
 800d650:	b103      	cbz	r3, 800d654 <_fstat_r+0x1c>
 800d652:	6023      	str	r3, [r4, #0]
 800d654:	bd38      	pop	{r3, r4, r5, pc}
 800d656:	bf00      	nop
 800d658:	20004aa0 	.word	0x20004aa0

0800d65c <_isatty_r>:
 800d65c:	b538      	push	{r3, r4, r5, lr}
 800d65e:	2300      	movs	r3, #0
 800d660:	4d05      	ldr	r5, [pc, #20]	@ (800d678 <_isatty_r+0x1c>)
 800d662:	4604      	mov	r4, r0
 800d664:	4608      	mov	r0, r1
 800d666:	602b      	str	r3, [r5, #0]
 800d668:	f7f4 f865 	bl	8001736 <_isatty>
 800d66c:	1c43      	adds	r3, r0, #1
 800d66e:	d102      	bne.n	800d676 <_isatty_r+0x1a>
 800d670:	682b      	ldr	r3, [r5, #0]
 800d672:	b103      	cbz	r3, 800d676 <_isatty_r+0x1a>
 800d674:	6023      	str	r3, [r4, #0]
 800d676:	bd38      	pop	{r3, r4, r5, pc}
 800d678:	20004aa0 	.word	0x20004aa0

0800d67c <_init>:
 800d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67e:	bf00      	nop
 800d680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d682:	bc08      	pop	{r3}
 800d684:	469e      	mov	lr, r3
 800d686:	4770      	bx	lr

0800d688 <_fini>:
 800d688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d68a:	bf00      	nop
 800d68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68e:	bc08      	pop	{r3}
 800d690:	469e      	mov	lr, r3
 800d692:	4770      	bx	lr
