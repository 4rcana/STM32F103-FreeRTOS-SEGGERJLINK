
STM32F103-FreeRTOS-SEGGERJLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009504  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08009618  08009618  0000a618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b4c  08009b4c  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009b4c  08009b4c  0000ab4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b54  08009b54  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b54  08009b54  0000ab54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b58  08009b58  0000ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009b5c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004940  200001d8  08009d34  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000470  20004b18  08009d34  0000bb18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d955  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055fd  00000000  00000000  00038b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000180fe  00000000  00000000  0003e153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b00  00000000  00000000  00056258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000290a  00000000  00000000  00057d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005dad  00000000  00000000  0005a662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d4af  00000000  00000000  0006040f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b26c8  00000000  00000000  0008d8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ff86  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060d0  00000000  00000000  0013ffcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b6  00000000  00000000  0014609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080095fc 	.word	0x080095fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080095fc 	.word	0x080095fc

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	@ 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20004230 	.word	0x20004230

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fmul>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d06f      	beq.n	8000e28 <__aeabi_fmul+0xf8>
 8000d48:	441a      	add	r2, r3
 8000d4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4e:	0240      	lsls	r0, r0, #9
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d56:	d01e      	beq.n	8000d96 <__aeabi_fmul+0x66>
 8000d58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d64:	fba0 3101 	umull	r3, r1, r0, r1
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d6c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d70:	bf3e      	ittt	cc
 8000d72:	0049      	lslcc	r1, r1, #1
 8000d74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d78:	005b      	lslcc	r3, r3, #1
 8000d7a:	ea40 0001 	orr.w	r0, r0, r1
 8000d7e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d82:	2afd      	cmp	r2, #253	@ 0xfd
 8000d84:	d81d      	bhi.n	8000dc2 <__aeabi_fmul+0x92>
 8000d86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	0249      	lsleq	r1, r1, #9
 8000da2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000daa:	3a7f      	subs	r2, #127	@ 0x7f
 8000dac:	bfc2      	ittt	gt
 8000dae:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db6:	4770      	bxgt	lr
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	dc5d      	bgt.n	8000e80 <__aeabi_fmul+0x150>
 8000dc4:	f112 0f19 	cmn.w	r2, #25
 8000dc8:	bfdc      	itt	le
 8000dca:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dce:	4770      	bxle	lr
 8000dd0:	f1c2 0200 	rsb	r2, r2, #0
 8000dd4:	0041      	lsls	r1, r0, #1
 8000dd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dda:	f1c2 0220 	rsb	r2, r2, #32
 8000dde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de6:	f140 0000 	adc.w	r0, r0, #0
 8000dea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dee:	bf08      	it	eq
 8000df0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df4:	4770      	bx	lr
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0040      	lsleq	r0, r0, #1
 8000e02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e06:	3a01      	subeq	r2, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xce>
 8000e0a:	ea40 000c 	orr.w	r0, r0, ip
 8000e0e:	f093 0f00 	teq	r3, #0
 8000e12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0049      	lsleq	r1, r1, #1
 8000e1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e1e:	3b01      	subeq	r3, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xe6>
 8000e22:	ea41 010c 	orr.w	r1, r1, ip
 8000e26:	e78f      	b.n	8000d48 <__aeabi_fmul+0x18>
 8000e28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	bf18      	it	ne
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d00a      	beq.n	8000e4e <__aeabi_fmul+0x11e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e42:	d1d8      	bne.n	8000df6 <__aeabi_fmul+0xc6>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	bf17      	itett	ne
 8000e54:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e58:	4608      	moveq	r0, r1
 8000e5a:	f091 0f00 	teqne	r1, #0
 8000e5e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e62:	d014      	beq.n	8000e8e <__aeabi_fmul+0x15e>
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	d101      	bne.n	8000e6e <__aeabi_fmul+0x13e>
 8000e6a:	0242      	lsls	r2, r0, #9
 8000e6c:	d10f      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e6e:	ea93 0f0c 	teq	r3, ip
 8000e72:	d103      	bne.n	8000e7c <__aeabi_fmul+0x14c>
 8000e74:	024b      	lsls	r3, r1, #9
 8000e76:	bf18      	it	ne
 8000e78:	4608      	movne	r0, r1
 8000e7a:	d108      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e8c:	4770      	bx	lr
 8000e8e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e92:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e96:	4770      	bx	lr

08000e98 <__aeabi_fdiv>:
 8000e98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea0:	bf1e      	ittt	ne
 8000ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea6:	ea92 0f0c 	teqne	r2, ip
 8000eaa:	ea93 0f0c 	teqne	r3, ip
 8000eae:	d069      	beq.n	8000f84 <__aeabi_fdiv+0xec>
 8000eb0:	eba2 0203 	sub.w	r2, r2, r3
 8000eb4:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ebe:	d037      	beq.n	8000f30 <__aeabi_fdiv+0x98>
 8000ec0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ecc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf38      	it	cc
 8000ed4:	005b      	lslcc	r3, r3, #1
 8000ed6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eda:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	bf24      	itt	cs
 8000ee2:	1a5b      	subcs	r3, r3, r1
 8000ee4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efa:	bf24      	itt	cs
 8000efc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	bf18      	it	ne
 8000f16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1a:	d1e0      	bne.n	8000ede <__aeabi_fdiv+0x46>
 8000f1c:	2afd      	cmp	r2, #253	@ 0xfd
 8000f1e:	f63f af50 	bhi.w	8000dc2 <__aeabi_fmul+0x92>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f28:	bf08      	it	eq
 8000f2a:	f020 0001 	biceq.w	r0, r0, #1
 8000f2e:	4770      	bx	lr
 8000f30:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f38:	327f      	adds	r2, #127	@ 0x7f
 8000f3a:	bfc2      	ittt	gt
 8000f3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f44:	4770      	bxgt	lr
 8000f46:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	3a01      	subs	r2, #1
 8000f50:	e737      	b.n	8000dc2 <__aeabi_fmul+0x92>
 8000f52:	f092 0f00 	teq	r2, #0
 8000f56:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0040      	lsleq	r0, r0, #1
 8000f5e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f62:	3a01      	subeq	r2, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xc2>
 8000f66:	ea40 000c 	orr.w	r0, r0, ip
 8000f6a:	f093 0f00 	teq	r3, #0
 8000f6e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0049      	lsleq	r1, r1, #1
 8000f76:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7a:	3b01      	subeq	r3, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xda>
 8000f7e:	ea41 010c 	orr.w	r1, r1, ip
 8000f82:	e795      	b.n	8000eb0 <__aeabi_fdiv+0x18>
 8000f84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d108      	bne.n	8000fa0 <__aeabi_fdiv+0x108>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	f47f af7d 	bne.w	8000e8e <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	f47f af70 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e776      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	d104      	bne.n	8000fb0 <__aeabi_fdiv+0x118>
 8000fa6:	024b      	lsls	r3, r1, #9
 8000fa8:	f43f af4c 	beq.w	8000e44 <__aeabi_fmul+0x114>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e76e      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb4:	bf18      	it	ne
 8000fb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fba:	d1ca      	bne.n	8000f52 <__aeabi_fdiv+0xba>
 8000fbc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc0:	f47f af5c 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000fc4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fc8:	f47f af3c 	bne.w	8000e44 <__aeabi_fmul+0x114>
 8000fcc:	e75f      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fce:	bf00      	nop

08000fd0 <SensorRead>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void SensorRead(void *argument)
{
 8000fd0:	b508      	push	{r3, lr}
    for(;;)
    {
	if(Left_Button_State == TEMP)
 8000fd2:	4d09      	ldr	r5, [pc, #36]	@ (8000ff8 <SensorRead+0x28>)
	{
	    LPS25HB_Measure_Temperature_IT(&hi2c2);
	}
	else if(Left_Button_State == PRESS)
	{
	    LPS25HB_Measure_Pressure_IT(&hi2c2);
 8000fd4:	4c09      	ldr	r4, [pc, #36]	@ (8000ffc <SensorRead+0x2c>)
	if(Left_Button_State == TEMP)
 8000fd6:	782b      	ldrb	r3, [r5, #0]
 8000fd8:	b93b      	cbnz	r3, 8000fea <SensorRead+0x1a>
	    LPS25HB_Measure_Temperature_IT(&hi2c2);
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f002 fcf4 	bl	80039c8 <LPS25HB_Measure_Temperature_IT>
	}
	osDelay(1000);
 8000fe0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe4:	f002 fdf6 	bl	8003bd4 <osDelay>
	if(Left_Button_State == TEMP)
 8000fe8:	e7f5      	b.n	8000fd6 <SensorRead+0x6>
	else if(Left_Button_State == PRESS)
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d1f8      	bne.n	8000fe0 <SensorRead+0x10>
	    LPS25HB_Measure_Pressure_IT(&hi2c2);
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f002 fd0e 	bl	8003a10 <LPS25HB_Measure_Pressure_IT>
 8000ff4:	e7f4      	b.n	8000fe0 <SensorRead+0x10>
 8000ff6:	bf00      	nop
 8000ff8:	2000021c 	.word	0x2000021c
 8000ffc:	20000274 	.word	0x20000274

08001000 <DataTransfer>:
    }
}

void DataTransfer(void *argument)
{
 8001000:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t ReceivedMSG = 0, counter = 0;
 8001004:	2400      	movs	r4, #0
		HAL_UART_Transmit(&huart2,(uint8_t *)message_buffer,40,HAL_MAX_DELAY);
		temp = 0;
		counter = 0;
	    }
	    else if(Left_Button_State == PRESS && counter == 3){
		pressure =  temp / 4096.0f;						// Calculated pressure is in hPa
 8001006:	f04f 5766 	mov.w	r7, #964689920	@ 0x39800000
    uint8_t ReceivedMSG = 0, counter = 0;
 800100a:	46a0      	mov	r8, r4
		else { temperature = 42.5f + temp / 480.0f; }				// Calculated temperature is in degrees celsius.
 800100c:	4d28      	ldr	r5, [pc, #160]	@ (80010b0 <DataTransfer+0xb0>)
 800100e:	4e29      	ldr	r6, [pc, #164]	@ (80010b4 <DataTransfer+0xb4>)
    uint8_t ReceivedMSG = 0, counter = 0;
 8001010:	f88d 4007 	strb.w	r4, [sp, #7]
	if(osMessageQueueGet(SensorRAWQueueHandle, &ReceivedMSG, NULL, osWaitForever) == osOK){
 8001014:	4828      	ldr	r0, [pc, #160]	@ (80010b8 <DataTransfer+0xb8>)
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	2200      	movs	r2, #0
 800101c:	6800      	ldr	r0, [r0, #0]
 800101e:	f10d 0107 	add.w	r1, sp, #7
 8001022:	f002 fe53 	bl	8003ccc <osMessageQueueGet>
 8001026:	bb78      	cbnz	r0, 8001088 <DataTransfer+0x88>
	    temp |= ReceivedMSG << (counter * 8);
 8001028:	f89d 2007 	ldrb.w	r2, [sp, #7]
	    counter++;
 800102c:	f108 0301 	add.w	r3, r8, #1
	    temp |= ReceivedMSG << (counter * 8);
 8001030:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001034:	fa02 f208 	lsl.w	r2, r2, r8
 8001038:	4314      	orrs	r4, r2
	    if(Left_Button_State == TEMP && counter == 2){
 800103a:	4a20      	ldr	r2, [pc, #128]	@ (80010bc <DataTransfer+0xbc>)
	    counter++;
 800103c:	b2db      	uxtb	r3, r3
	    if(Left_Button_State == TEMP && counter == 2){
 800103e:	7812      	ldrb	r2, [r2, #0]
 8001040:	bb2a      	cbnz	r2, 800108e <DataTransfer+0x8e>
 8001042:	2b02      	cmp	r3, #2
 8001044:	d121      	bne.n	800108a <DataTransfer+0x8a>
		if(temp > 32767) { temperature = 42.5f + (temp - 65535) / 480.0f; }	// Because value should be interpreted in 2's complement and int32_t is being used
 8001046:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800104a:	bfaa      	itet	ge
 800104c:	f5a4 407f 	subge.w	r0, r4, #65280	@ 0xff00
		else { temperature = 42.5f + temp / 480.0f; }				// Calculated temperature is in degrees celsius.
 8001050:	4620      	movlt	r0, r4
		if(temp > 32767) { temperature = 42.5f + (temp - 65535) / 480.0f; }	// Because value should be interpreted in 2's complement and int32_t is being used
 8001052:	38ff      	subge	r0, #255	@ 0xff
		else { temperature = 42.5f + temp / 480.0f; }				// Calculated temperature is in degrees celsius.
 8001054:	f7ff fe18 	bl	8000c88 <__aeabi_i2f>
 8001058:	4629      	mov	r1, r5
 800105a:	f7ff ff1d 	bl	8000e98 <__aeabi_fdiv>
 800105e:	4631      	mov	r1, r6
 8001060:	f7ff fd5e 	bl	8000b20 <__addsf3>
		sprintf(message_buffer,"Temperature: %.2f C\r\n",temperature);
 8001064:	f7ff fa26 	bl	80004b4 <__aeabi_f2d>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4914      	ldr	r1, [pc, #80]	@ (80010c0 <DataTransfer+0xc0>)
		temp = 0;
 800106e:	2400      	movs	r4, #0
		sprintf(message_buffer,"Temperature: %.2f C\r\n",temperature);
 8001070:	4814      	ldr	r0, [pc, #80]	@ (80010c4 <DataTransfer+0xc4>)
 8001072:	f006 f989 	bl	8007388 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)message_buffer,40,HAL_MAX_DELAY);
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	2228      	movs	r2, #40	@ 0x28
 800107c:	4911      	ldr	r1, [pc, #68]	@ (80010c4 <DataTransfer+0xc4>)
 800107e:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <DataTransfer+0xc8>)
 8001080:	f002 fc2b 	bl	80038da <HAL_UART_Transmit>
		counter = 0;
 8001084:	4623      	mov	r3, r4
 8001086:	e000      	b.n	800108a <DataTransfer+0x8a>
 8001088:	4643      	mov	r3, r8
 800108a:	4698      	mov	r8, r3
 800108c:	e7c2      	b.n	8001014 <DataTransfer+0x14>
	    else if(Left_Button_State == PRESS && counter == 3){
 800108e:	2a01      	cmp	r2, #1
 8001090:	d1fb      	bne.n	800108a <DataTransfer+0x8a>
 8001092:	2b03      	cmp	r3, #3
 8001094:	d1f9      	bne.n	800108a <DataTransfer+0x8a>
		pressure =  temp / 4096.0f;						// Calculated pressure is in hPa
 8001096:	4620      	mov	r0, r4
 8001098:	f7ff fdf6 	bl	8000c88 <__aeabi_i2f>
 800109c:	4639      	mov	r1, r7
 800109e:	f7ff fe47 	bl	8000d30 <__aeabi_fmul>
		sprintf(message_buffer,"Pressure: %.2f hPa\r\n",pressure);
 80010a2:	f7ff fa07 	bl	80004b4 <__aeabi_f2d>
 80010a6:	460b      	mov	r3, r1
 80010a8:	4602      	mov	r2, r0
 80010aa:	4908      	ldr	r1, [pc, #32]	@ (80010cc <DataTransfer+0xcc>)
 80010ac:	e7df      	b.n	800106e <DataTransfer+0x6e>
 80010ae:	bf00      	nop
 80010b0:	43f00000 	.word	0x43f00000
 80010b4:	422a0000 	.word	0x422a0000
 80010b8:	20000220 	.word	0x20000220
 80010bc:	2000021c 	.word	0x2000021c
 80010c0:	08009618 	.word	0x08009618
 80010c4:	200001f4 	.word	0x200001f4
 80010c8:	2000022c 	.word	0x2000022c
 80010cc:	0800962e 	.word	0x0800962e

080010d0 <SystemClock_Config>:
{
 80010d0:	b510      	push	{r4, lr}
 80010d2:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d4:	2220      	movs	r2, #32
 80010d6:	2100      	movs	r1, #0
 80010d8:	a807      	add	r0, sp, #28
 80010da:	f006 f9ca 	bl	8007472 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010de:	2214      	movs	r2, #20
 80010e0:	2100      	movs	r1, #0
 80010e2:	a801      	add	r0, sp, #4
 80010e4:	f006 f9c5 	bl	8007472 <memset>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2310      	movs	r3, #16
 80010ea:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ec:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010f2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f8:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010fc:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fe:	f001 ff63 	bl	8002fc8 <HAL_RCC_OscConfig>
 8001102:	b108      	cbz	r0, 8001108 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001106:	e7fe      	b.n	8001106 <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001118:	4621      	mov	r1, r4
 800111a:	a801      	add	r0, sp, #4
 800111c:	f002 f916 	bl	800334c <HAL_RCC_ClockConfig>
 8001120:	b108      	cbz	r0, 8001126 <SystemClock_Config+0x56>
 8001122:	b672      	cpsid	i
  while (1)
 8001124:	e7fe      	b.n	8001124 <SystemClock_Config+0x54>
}
 8001126:	b010      	add	sp, #64	@ 0x40
 8001128:	bd10      	pop	{r4, pc}
	...

0800112c <main>:
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
  HAL_Init();
 8001130:	f000 fa64 	bl	80015fc <HAL_Init>
  SystemClock_Config();
 8001134:	f7ff ffcc 	bl	80010d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	2210      	movs	r2, #16
 800113a:	2100      	movs	r1, #0
 800113c:	eb0d 0002 	add.w	r0, sp, r2
 8001140:	f006 f997 	bl	8007472 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	4b5b      	ldr	r3, [pc, #364]	@ (80012b4 <main+0x188>)
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001146:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800114a:	485b      	ldr	r0, [pc, #364]	@ (80012b8 <main+0x18c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	f042 0210 	orr.w	r2, r2, #16
 8001150:	619a      	str	r2, [r3, #24]
 8001152:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	f002 0210 	and.w	r2, r2, #16
 800115a:	9201      	str	r2, [sp, #4]
 800115c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001160:	4f56      	ldr	r7, [pc, #344]	@ (80012bc <main+0x190>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	f042 0204 	orr.w	r2, r2, #4
 8001166:	619a      	str	r2, [r3, #24]
 8001168:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	f002 0204 	and.w	r2, r2, #4
 8001170:	9202      	str	r2, [sp, #8]
 8001172:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2502      	movs	r5, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	f042 0208 	orr.w	r2, r2, #8
 800117c:	619a      	str	r2, [r3, #24]
 800117e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	9303      	str	r3, [sp, #12]
 8001188:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800118a:	f000 fbc9 	bl	8001920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001194:	484a      	ldr	r0, [pc, #296]	@ (80012c0 <main+0x194>)
 8001196:	f000 fbc3 	bl	8001920 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800119a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800119e:	4849      	ldr	r0, [pc, #292]	@ (80012c4 <main+0x198>)
 80011a0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011a2:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f000 fae6 	bl	8001778 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011ae:	4842      	ldr	r0, [pc, #264]	@ (80012b8 <main+0x18c>)
 80011b0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f000 fadd 	bl	8001778 <HAL_GPIO_Init>
  HAL_GPIO_Init(Left_Button_GPIO_Port, &GPIO_InitStruct);
 80011be:	4840      	ldr	r0, [pc, #256]	@ (80012c0 <main+0x194>)
 80011c0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c6:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(Left_Button_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f000 fad6 	bl	8001778 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin;
 80011cc:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	483c      	ldr	r0, [pc, #240]	@ (80012c0 <main+0x194>)
 80011d0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f000 face 	bl	8001778 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80011dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	4837      	ldr	r0, [pc, #220]	@ (80012c0 <main+0x194>)
 80011e2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f000 fac4 	bl	8001778 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 13, 0);
 80011f0:	4622      	mov	r2, r4
 80011f2:	210d      	movs	r1, #13
 80011f4:	2006      	movs	r0, #6
 80011f6:	f000 fa37 	bl	8001668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011fa:	2006      	movs	r0, #6
 80011fc:	f000 fa64 	bl	80016c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 47, 0);
 8001200:	4622      	mov	r2, r4
 8001202:	212f      	movs	r1, #47	@ 0x2f
 8001204:	2028      	movs	r0, #40	@ 0x28
 8001206:	f000 fa2f 	bl	8001668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800120a:	2028      	movs	r0, #40	@ 0x28
 800120c:	f000 fa5c 	bl	80016c8 <HAL_NVIC_EnableIRQ>
  hi2c2.Instance = I2C2;
 8001210:	4d2d      	ldr	r5, [pc, #180]	@ (80012c8 <main+0x19c>)
  hi2c2.Init.ClockSpeed = 100000;
 8001212:	492e      	ldr	r1, [pc, #184]	@ (80012cc <main+0x1a0>)
 8001214:	4b2e      	ldr	r3, [pc, #184]	@ (80012d0 <main+0x1a4>)
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001216:	4628      	mov	r0, r5
  hi2c2.Init.ClockSpeed = 100000;
 8001218:	e9c5 1300 	strd	r1, r3, [r5]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 8001220:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	e9c5 3404 	strd	r3, r4, [r5, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001228:	e9c5 4406 	strd	r4, r4, [r5, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122c:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800122e:	f000 fd8b 	bl	8001d48 <HAL_I2C_Init>
 8001232:	4604      	mov	r4, r0
 8001234:	b108      	cbz	r0, 800123a <main+0x10e>
 8001236:	b672      	cpsid	i
  while (1)
 8001238:	e7fe      	b.n	8001238 <main+0x10c>
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 40, 0); // Set priority
 800123a:	4602      	mov	r2, r0
 800123c:	2128      	movs	r1, #40	@ 0x28
 800123e:	2021      	movs	r0, #33	@ 0x21
 8001240:	f000 fa12 	bl	8001668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn); // Enable interrupt
 8001244:	2021      	movs	r0, #33	@ 0x21
 8001246:	f000 fa3f 	bl	80016c8 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 115200;
 800124a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Instance = USART2;
 800124e:	4821      	ldr	r0, [pc, #132]	@ (80012d4 <main+0x1a8>)
  huart2.Init.BaudRate = 115200;
 8001250:	4a21      	ldr	r2, [pc, #132]	@ (80012d8 <main+0x1ac>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001252:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001256:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125a:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 800125c:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001262:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001264:	f002 fb0a 	bl	800387c <HAL_UART_Init>
 8001268:	4604      	mov	r4, r0
 800126a:	b108      	cbz	r0, 8001270 <main+0x144>
 800126c:	b672      	cpsid	i
  while (1)
 800126e:	e7fe      	b.n	800126e <main+0x142>
  LPS25HB_Initialise(&hi2c2);
 8001270:	4628      	mov	r0, r5
 8001272:	f002 fb81 	bl	8003978 <LPS25HB_Initialise>
  SEGGER_SYSVIEW_Conf();
 8001276:	f004 fc53 	bl	8005b20 <SEGGER_SYSVIEW_Conf>
  osKernelInitialize();
 800127a:	f002 fc39 	bl	8003af0 <osKernelInitialize>
  SensorRAWQueueHandle = osMessageQueueNew(3, sizeof(uint8_t), &SensorRAWQueue_attributes);
 800127e:	4631      	mov	r1, r6
 8001280:	4a16      	ldr	r2, [pc, #88]	@ (80012dc <main+0x1b0>)
 8001282:	2003      	movs	r0, #3
 8001284:	f002 fcb2 	bl	8003bec <osMessageQueueNew>
 8001288:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <main+0x1b4>)
  SensorReadTaskHandle = osThreadNew(SensorRead, NULL, &SensorReadTask_attributes);
 800128a:	4621      	mov	r1, r4
  SensorRAWQueueHandle = osMessageQueueNew(3, sizeof(uint8_t), &SensorRAWQueue_attributes);
 800128c:	6018      	str	r0, [r3, #0]
  SensorReadTaskHandle = osThreadNew(SensorRead, NULL, &SensorReadTask_attributes);
 800128e:	4a15      	ldr	r2, [pc, #84]	@ (80012e4 <main+0x1b8>)
 8001290:	4815      	ldr	r0, [pc, #84]	@ (80012e8 <main+0x1bc>)
 8001292:	f002 fc59 	bl	8003b48 <osThreadNew>
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <main+0x1c0>)
  DataTransferTaskHandle = osThreadNew(DataTransfer, NULL, &DataTransferTask_attributes);
 8001298:	4621      	mov	r1, r4
  SensorReadTaskHandle = osThreadNew(SensorRead, NULL, &SensorReadTask_attributes);
 800129a:	6018      	str	r0, [r3, #0]
  DataTransferTaskHandle = osThreadNew(DataTransfer, NULL, &DataTransferTask_attributes);
 800129c:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <main+0x1c4>)
 800129e:	4815      	ldr	r0, [pc, #84]	@ (80012f4 <main+0x1c8>)
 80012a0:	f002 fc52 	bl	8003b48 <osThreadNew>
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <main+0x1cc>)
 80012a6:	6018      	str	r0, [r3, #0]
  SEGGER_SYSVIEW_Conf();
 80012a8:	f004 fc3a 	bl	8005b20 <SEGGER_SYSVIEW_Conf>
  osKernelStart();
 80012ac:	f002 fc32 	bl	8003b14 <osKernelStart>
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <main+0x184>
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010800 	.word	0x40010800
 80012bc:	10210000 	.word	0x10210000
 80012c0:	40010c00 	.word	0x40010c00
 80012c4:	40011000 	.word	0x40011000
 80012c8:	20000274 	.word	0x20000274
 80012cc:	40005800 	.word	0x40005800
 80012d0:	000186a0 	.word	0x000186a0
 80012d4:	2000022c 	.word	0x2000022c
 80012d8:	40004400 	.word	0x40004400
 80012dc:	08009894 	.word	0x08009894
 80012e0:	20000220 	.word	0x20000220
 80012e4:	080098d0 	.word	0x080098d0
 80012e8:	08000fd1 	.word	0x08000fd1
 80012ec:	20000228 	.word	0x20000228
 80012f0:	080098ac 	.word	0x080098ac
 80012f4:	08001001 	.word	0x08001001
 80012f8:	20000224 	.word	0x20000224

080012fc <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM4)
 80012fc:	6802      	ldr	r2, [r0, #0]
 80012fe:	4b03      	ldr	r3, [pc, #12]	@ (800130c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001300:	429a      	cmp	r2, r3
 8001302:	d101      	bne.n	8001308 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001304:	f000 b98c 	b.w	8001620 <HAL_IncTick>
}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40000800 	.word	0x40000800

08001310 <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == Left_Button_Pin){
 8001310:	2801      	cmp	r0, #1
 8001312:	d106      	bne.n	8001322 <HAL_GPIO_EXTI_Callback+0x12>
		if(Left_Button_State == TEMP){
 8001314:	4b03      	ldr	r3, [pc, #12]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x14>)
 8001316:	781a      	ldrb	r2, [r3, #0]
 8001318:	b90a      	cbnz	r2, 800131e <HAL_GPIO_EXTI_Callback+0xe>
		    Left_Button_State = PRESS;
 800131a:	7018      	strb	r0, [r3, #0]
 800131c:	4770      	bx	lr
		    Left_Button_State = TEMP;
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
}
 8001322:	4770      	bx	lr
 8001324:	2000021c 	.word	0x2000021c

08001328 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_MspInit+0x48>)
{
 800132a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800132c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800132e:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001330:	f042 0201 	orr.w	r2, r2, #1
 8001334:	619a      	str	r2, [r3, #24]
 8001336:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001338:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 800133c:	f002 0201 	and.w	r2, r2, #1
 8001340:	9200      	str	r2, [sp, #0]
 8001342:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001344:	69da      	ldr	r2, [r3, #28]
 8001346:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800134a:	61da      	str	r2, [r3, #28]
 800134c:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800134e:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001358:	f000 f986 	bl	8001668 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800135c:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <HAL_MspInit+0x4c>)
 800135e:	6853      	ldr	r3, [r2, #4]
 8001360:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001364:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001368:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	b003      	add	sp, #12
 800136c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000

08001378 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001378:	b510      	push	{r4, lr}
 800137a:	4604      	mov	r4, r0
 800137c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	2210      	movs	r2, #16
 8001380:	2100      	movs	r1, #0
 8001382:	a802      	add	r0, sp, #8
 8001384:	f006 f875 	bl	8007472 <memset>
  if(hi2c->Instance==I2C2)
 8001388:	6822      	ldr	r2, [r4, #0]
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_I2C_MspInit+0x58>)
 800138c:	429a      	cmp	r2, r3
 800138e:	d11d      	bne.n	80013cc <HAL_I2C_MspInit+0x54>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	4c10      	ldr	r4, [pc, #64]	@ (80013d4 <HAL_I2C_MspInit+0x5c>)
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_LPS25HB_Pin|SDA_LPS25HB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001392:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	480f      	ldr	r0, [pc, #60]	@ (80013d8 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	61a3      	str	r3, [r4, #24]
 80013a0:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ac:	2312      	movs	r3, #18
 80013ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f000 f9df 	bl	8001778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013ba:	69e3      	ldr	r3, [r4, #28]
 80013bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013c0:	61e3      	str	r3, [r4, #28]
 80013c2:	69e3      	ldr	r3, [r4, #28]
 80013c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80013cc:	b006      	add	sp, #24
 80013ce:	bd10      	pop	{r4, pc}
 80013d0:	40005800 	.word	0x40005800
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010c00 	.word	0x40010c00

080013dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013dc:	b510      	push	{r4, lr}
 80013de:	4604      	mov	r4, r0
 80013e0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	2210      	movs	r2, #16
 80013e4:	2100      	movs	r1, #0
 80013e6:	a802      	add	r0, sp, #8
 80013e8:	f006 f843 	bl	8007472 <memset>
  if(huart->Instance==USART2)
 80013ec:	6822      	ldr	r2, [r4, #0]
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <HAL_UART_MspInit+0x58>)
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d11c      	bne.n	800142e <HAL_UART_MspInit+0x52>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f4:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 80013f8:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	480f      	ldr	r0, [pc, #60]	@ (8001438 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80013fc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001400:	61da      	str	r2, [r3, #28]
 8001402:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8001406:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800140a:	9200      	str	r2, [sp, #0]
 800140c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	699a      	ldr	r2, [r3, #24]
 8001410:	f042 0204 	orr.w	r2, r2, #4
 8001414:	619a      	str	r2, [r3, #24]
 8001416:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f000 f9a5 	bl	8001778 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800142e:	b006      	add	sp, #24
 8001430:	bd10      	pop	{r4, pc}
 8001432:	bf00      	nop
 8001434:	40004400 	.word	0x40004400
 8001438:	40010800 	.word	0x40010800

0800143c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b570      	push	{r4, r5, r6, lr}
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800143e:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <HAL_InitTick+0x88>)
{
 8001440:	b088      	sub	sp, #32
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001442:	69da      	ldr	r2, [r3, #28]
{
 8001444:	4605      	mov	r5, r0
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001446:	f042 0204 	orr.w	r2, r2, #4
 800144a:	61da      	str	r2, [r3, #28]
 800144c:	69db      	ldr	r3, [r3, #28]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800144e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001456:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001458:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800145a:	f002 f833 	bl	80034c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800145e:	9b06      	ldr	r3, [sp, #24]
 8001460:	bb4b      	cbnz	r3, 80014b6 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001462:	f002 f80f 	bl	8003484 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001466:	4e18      	ldr	r6, [pc, #96]	@ (80014c8 <HAL_InitTick+0x8c>)
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <HAL_InitTick+0x90>)
 800146a:	6033      	str	r3, [r6, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800146c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001470:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <HAL_InitTick+0x94>)
 8001474:	fbb0 f3f3 	udiv	r3, r0, r3
 8001478:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 800147a:	6073      	str	r3, [r6, #4]
  htim4.Init.ClockDivision = 0;
 800147c:	2300      	movs	r3, #0
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim4);
 800147e:	4630      	mov	r0, r6
  htim4.Init.ClockDivision = 0;
 8001480:	6133      	str	r3, [r6, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	60b3      	str	r3, [r6, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim4);
 8001486:	f002 f931 	bl	80036ec <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800148a:	4604      	mov	r4, r0
 800148c:	b980      	cbnz	r0, 80014b0 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800148e:	4630      	mov	r0, r6
 8001490:	f002 f838 	bl	8003504 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001494:	4604      	mov	r4, r0
 8001496:	b958      	cbnz	r0, 80014b0 <HAL_InitTick+0x74>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001498:	201e      	movs	r0, #30
 800149a:	f000 f915 	bl	80016c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	2d0f      	cmp	r5, #15
 80014a0:	d80d      	bhi.n	80014be <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80014a2:	4622      	mov	r2, r4
 80014a4:	4629      	mov	r1, r5
 80014a6:	201e      	movs	r0, #30
 80014a8:	f000 f8de 	bl	8001668 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_InitTick+0x98>)
 80014ae:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80014b0:	4620      	mov	r0, r4
 80014b2:	b008      	add	sp, #32
 80014b4:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014b6:	f001 ffe5 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 80014ba:	0040      	lsls	r0, r0, #1
 80014bc:	e7d3      	b.n	8001466 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80014be:	2401      	movs	r4, #1
 80014c0:	e7f6      	b.n	80014b0 <HAL_InitTick+0x74>
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000
 80014c8:	200002c8 	.word	0x200002c8
 80014cc:	40000800 	.word	0x40000800
 80014d0:	000f4240 	.word	0x000f4240
 80014d4:	20000008 	.word	0x20000008

080014d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d8:	e7fe      	b.n	80014d8 <NMI_Handler>

080014da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler>

080014dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler>

080014de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <BusFault_Handler>

080014e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler>

080014e2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e2:	4770      	bx	lr

080014e4 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_Button_Pin);
 80014e4:	2001      	movs	r0, #1
 80014e6:	f000 ba21 	b.w	800192c <HAL_GPIO_EXTI_IRQHandler>
	...

080014ec <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014ec:	4801      	ldr	r0, [pc, #4]	@ (80014f4 <TIM4_IRQHandler+0x8>)
 80014ee:	f002 b837 	b.w	8003560 <HAL_TIM_IRQHandler>
 80014f2:	bf00      	nop
 80014f4:	200002c8 	.word	0x200002c8

080014f8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014fc:	f000 ba16 	b.w	800192c <HAL_GPIO_EXTI_IRQHandler>

08001500 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001500:	4801      	ldr	r0, [pc, #4]	@ (8001508 <I2C2_EV_IRQHandler+0x8>)
 8001502:	f001 b869 	b.w	80025d8 <HAL_I2C_EV_IRQHandler>
 8001506:	bf00      	nop
 8001508:	20000274 	.word	0x20000274

0800150c <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800150c:	4801      	ldr	r0, [pc, #4]	@ (8001514 <I2C2_ER_IRQHandler+0x8>)
 800150e:	f001 bcbb 	b.w	8002e88 <HAL_I2C_ER_IRQHandler>
 8001512:	bf00      	nop
 8001514:	20000274 	.word	0x20000274

08001518 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001518:	2001      	movs	r0, #1
 800151a:	4770      	bx	lr

0800151c <_kill>:

int _kill(int pid, int sig)
{
 800151c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800151e:	f005 ffe9 	bl	80074f4 <__errno>
 8001522:	2316      	movs	r3, #22
 8001524:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001526:	f04f 30ff 	mov.w	r0, #4294967295
 800152a:	bd08      	pop	{r3, pc}

0800152c <_exit>:

void _exit (int status)
{
 800152c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800152e:	f005 ffe1 	bl	80074f4 <__errno>
 8001532:	2316      	movs	r3, #22
 8001534:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001536:	e7fe      	b.n	8001536 <_exit+0xa>

08001538 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001538:	b570      	push	{r4, r5, r6, lr}
 800153a:	460d      	mov	r5, r1
 800153c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	460e      	mov	r6, r1
 8001540:	1b73      	subs	r3, r6, r5
 8001542:	429c      	cmp	r4, r3
 8001544:	dc01      	bgt.n	800154a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001546:	4620      	mov	r0, r4
 8001548:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800154a:	f3af 8000 	nop.w
 800154e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	e7f5      	b.n	8001540 <_read+0x8>

08001554 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	4770      	bx	lr

0800155a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800155a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 800155e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001560:	604b      	str	r3, [r1, #4]
}
 8001562:	4770      	bx	lr

08001564 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001564:	2001      	movs	r0, #1
 8001566:	4770      	bx	lr

08001568 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001568:	2000      	movs	r0, #0
 800156a:	4770      	bx	lr

0800156c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800156c:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <_sbrk+0x30>)
{
 800156e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001570:	6811      	ldr	r1, [r2, #0]
{
 8001572:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001574:	b909      	cbnz	r1, 800157a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001576:	490a      	ldr	r1, [pc, #40]	@ (80015a0 <_sbrk+0x34>)
 8001578:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157a:	6810      	ldr	r0, [r2, #0]
 800157c:	4909      	ldr	r1, [pc, #36]	@ (80015a4 <_sbrk+0x38>)
 800157e:	4c0a      	ldr	r4, [pc, #40]	@ (80015a8 <_sbrk+0x3c>)
 8001580:	4403      	add	r3, r0
 8001582:	1b09      	subs	r1, r1, r4
 8001584:	428b      	cmp	r3, r1
 8001586:	d906      	bls.n	8001596 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001588:	f005 ffb4 	bl	80074f4 <__errno>
 800158c:	230c      	movs	r3, #12
 800158e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001590:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001594:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001596:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001598:	e7fc      	b.n	8001594 <_sbrk+0x28>
 800159a:	bf00      	nop
 800159c:	20000310 	.word	0x20000310
 80015a0:	20004b18 	.word	0x20004b18
 80015a4:	20005000 	.word	0x20005000
 80015a8:	00000270 	.word	0x00000270

080015ac <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	4770      	bx	lr
	...

080015b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b0:	f7ff fffc 	bl	80015ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b4:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015b6:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015b8:	4a0c      	ldr	r2, [pc, #48]	@ (80015ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015cc:	4c09      	ldr	r4, [pc, #36]	@ (80015f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015da:	f005 ff91 	bl	8007500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015de:	f7ff fda5 	bl	800112c <main>
  bx lr
 80015e2:	4770      	bx	lr
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80015ec:	08009b5c 	.word	0x08009b5c
  ldr r2, =_sbss
 80015f0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80015f4:	20004b18 	.word	0x20004b18

080015f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC1_2_IRQHandler>
	...

080015fc <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4a07      	ldr	r2, [pc, #28]	@ (800161c <HAL_Init+0x20>)
{
 80015fe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001602:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160a:	f000 f81b 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	200f      	movs	r0, #15
 8001610:	f7ff ff14 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fe88 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001618:	2000      	movs	r0, #0
 800161a:	bd08      	pop	{r3, pc}
 800161c:	40022000 	.word	0x40022000

08001620 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001620:	4a03      	ldr	r2, [pc, #12]	@ (8001630 <HAL_IncTick+0x10>)
 8001622:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <HAL_IncTick+0x14>)
 8001624:	6811      	ldr	r1, [r2, #0]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	440b      	add	r3, r1
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000314 	.word	0x20000314
 8001634:	20000004 	.word	0x20000004

08001638 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001638:	4b01      	ldr	r3, [pc, #4]	@ (8001640 <HAL_GetTick+0x8>)
 800163a:	6818      	ldr	r0, [r3, #0]
}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000314 	.word	0x20000314

08001644 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4907      	ldr	r1, [pc, #28]	@ (8001664 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001646:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001648:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800164a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001652:	0412      	lsls	r2, r2, #16
 8001654:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001660:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166a:	b530      	push	{r4, r5, lr}
 800166c:	68dc      	ldr	r4, [r3, #12]
 800166e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001672:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	2b04      	cmp	r3, #4
 800167a:	bf28      	it	cs
 800167c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001684:	bf94      	ite	ls
 8001686:	2400      	movls	r4, #0
 8001688:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168a:	fa05 f303 	lsl.w	r3, r5, r3
 800168e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001692:	40a5      	lsls	r5, r4
 8001694:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800169a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a0:	bfac      	ite	ge
 80016a2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	4a07      	ldrlt	r2, [pc, #28]	@ (80016c4 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	bfab      	itete	ge
 80016b0:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016be:	bd30      	pop	{r4, r5, pc}
 80016c0:	e000ed00 	.word	0xe000ed00
 80016c4:	e000ed14 	.word	0xe000ed14

080016c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80016c8:	2800      	cmp	r0, #0
 80016ca:	db07      	blt.n	80016dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016cc:	2301      	movs	r3, #1
 80016ce:	0941      	lsrs	r1, r0, #5
 80016d0:	4a03      	ldr	r2, [pc, #12]	@ (80016e0 <HAL_NVIC_EnableIRQ+0x18>)
 80016d2:	f000 001f 	and.w	r0, r0, #31
 80016d6:	4083      	lsls	r3, r0
 80016d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016e4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016e6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d003      	beq.n	80016f6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ee:	2304      	movs	r3, #4
 80016f0:	6383      	str	r3, [r0, #56]	@ 0x38
        
    status = HAL_ERROR;
 80016f2:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80016f4:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f6:	6803      	ldr	r3, [r0, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	f022 020e 	bic.w	r2, r2, #14
 80016fe:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001708:	4a17      	ldr	r2, [pc, #92]	@ (8001768 <HAL_DMA_Abort_IT+0x84>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d01f      	beq.n	800174e <HAL_DMA_Abort_IT+0x6a>
 800170e:	3214      	adds	r2, #20
 8001710:	4293      	cmp	r3, r2
 8001712:	d01e      	beq.n	8001752 <HAL_DMA_Abort_IT+0x6e>
 8001714:	3214      	adds	r2, #20
 8001716:	4293      	cmp	r3, r2
 8001718:	d01d      	beq.n	8001756 <HAL_DMA_Abort_IT+0x72>
 800171a:	3214      	adds	r2, #20
 800171c:	4293      	cmp	r3, r2
 800171e:	d01d      	beq.n	800175c <HAL_DMA_Abort_IT+0x78>
 8001720:	3214      	adds	r2, #20
 8001722:	4293      	cmp	r3, r2
 8001724:	d01d      	beq.n	8001762 <HAL_DMA_Abort_IT+0x7e>
 8001726:	3214      	adds	r2, #20
 8001728:	4293      	cmp	r3, r2
 800172a:	bf14      	ite	ne
 800172c:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8001730:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <HAL_DMA_Abort_IT+0x88>)
 8001736:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001738:	2301      	movs	r3, #1
 800173a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 800173e:	2300      	movs	r3, #0
 8001740:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001744:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001746:	b103      	cbz	r3, 800174a <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8001748:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800174a:	2000      	movs	r0, #0
 800174c:	e7d2      	b.n	80016f4 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800174e:	2301      	movs	r3, #1
 8001750:	e7f0      	b.n	8001734 <HAL_DMA_Abort_IT+0x50>
 8001752:	2310      	movs	r3, #16
 8001754:	e7ee      	b.n	8001734 <HAL_DMA_Abort_IT+0x50>
 8001756:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800175a:	e7eb      	b.n	8001734 <HAL_DMA_Abort_IT+0x50>
 800175c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001760:	e7e8      	b.n	8001734 <HAL_DMA_Abort_IT+0x50>
 8001762:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001766:	e7e5      	b.n	8001734 <HAL_DMA_Abort_IT+0x50>
 8001768:	40020008 	.word	0x40020008
 800176c:	40020000 	.word	0x40020000

08001770 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8001770:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
}
 8001774:	4770      	bx	lr
	...

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800177c:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800177e:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 8001782:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001784:	f8df c184 	ldr.w	ip, [pc, #388]	@ 800190c <HAL_GPIO_Init+0x194>
 8001788:	4b61      	ldr	r3, [pc, #388]	@ (8001910 <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800178a:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	680a      	ldr	r2, [r1, #0]
 8001790:	fa32 f506 	lsrs.w	r5, r2, r6
 8001794:	d102      	bne.n	800179c <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8001796:	b003      	add	sp, #12
 8001798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800179c:	2501      	movs	r5, #1
 800179e:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a2:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 80017a6:	ea37 0202 	bics.w	r2, r7, r2
 80017aa:	d176      	bne.n	800189a <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 80017ac:	684a      	ldr	r2, [r1, #4]
 80017ae:	2a03      	cmp	r2, #3
 80017b0:	d807      	bhi.n	80017c2 <HAL_GPIO_Init+0x4a>
 80017b2:	3a01      	subs	r2, #1
 80017b4:	2a02      	cmp	r2, #2
 80017b6:	f200 8083 	bhi.w	80018c0 <HAL_GPIO_Init+0x148>
 80017ba:	e8df f002 	tbb	[pc, r2]
 80017be:	9691      	.short	0x9691
 80017c0:	9c          	.byte	0x9c
 80017c1:	00          	.byte	0x00
 80017c2:	2a12      	cmp	r2, #18
 80017c4:	f000 8094 	beq.w	80018f0 <HAL_GPIO_Init+0x178>
 80017c8:	d869      	bhi.n	800189e <HAL_GPIO_Init+0x126>
 80017ca:	2a11      	cmp	r2, #17
 80017cc:	f000 808a 	beq.w	80018e4 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d0:	2dff      	cmp	r5, #255	@ 0xff
 80017d2:	bf94      	ite	ls
 80017d4:	4681      	movls	r9, r0
 80017d6:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017d8:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017dc:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e0:	bf88      	it	hi
 80017e2:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017e4:	fa0e fa02 	lsl.w	sl, lr, r2
 80017e8:	ea27 070a 	bic.w	r7, r7, sl
 80017ec:	fa04 f202 	lsl.w	r2, r4, r2
 80017f0:	4317      	orrs	r7, r2
 80017f2:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f6:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80017fa:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 80017fe:	d04c      	beq.n	800189a <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001800:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001804:	f026 0703 	bic.w	r7, r6, #3
 8001808:	f042 0201 	orr.w	r2, r2, #1
 800180c:	f8cc 2018 	str.w	r2, [ip, #24]
 8001810:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001814:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001818:	f002 0201 	and.w	r2, r2, #1
 800181c:	9201      	str	r2, [sp, #4]
 800181e:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001822:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001826:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001828:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800182c:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800182e:	fa0e fb0a 	lsl.w	fp, lr, sl
 8001832:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001836:	4a37      	ldr	r2, [pc, #220]	@ (8001914 <HAL_GPIO_Init+0x19c>)
 8001838:	4290      	cmp	r0, r2
 800183a:	d060      	beq.n	80018fe <HAL_GPIO_Init+0x186>
 800183c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001840:	4290      	cmp	r0, r2
 8001842:	d05e      	beq.n	8001902 <HAL_GPIO_Init+0x18a>
 8001844:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001848:	4290      	cmp	r0, r2
 800184a:	d05c      	beq.n	8001906 <HAL_GPIO_Init+0x18e>
 800184c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001850:	4290      	cmp	r0, r2
 8001852:	bf14      	ite	ne
 8001854:	2204      	movne	r2, #4
 8001856:	2203      	moveq	r2, #3
 8001858:	fa02 f20a 	lsl.w	r2, r2, sl
 800185c:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8001860:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001862:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001864:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001868:	bf14      	ite	ne
 800186a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800186c:	43aa      	biceq	r2, r5
 800186e:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001870:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001872:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001876:	bf14      	ite	ne
 8001878:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800187a:	43aa      	biceq	r2, r5
 800187c:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800187e:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001880:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001884:	bf14      	ite	ne
 8001886:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001888:	43aa      	biceq	r2, r5
 800188a:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 800188c:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800188e:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001892:	bf14      	ite	ne
 8001894:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001896:	43aa      	biceq	r2, r5
 8001898:	601a      	str	r2, [r3, #0]
	position++;
 800189a:	3601      	adds	r6, #1
 800189c:	e777      	b.n	800178e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800189e:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8001918 <HAL_GPIO_Init+0x1a0>
 80018a2:	454a      	cmp	r2, r9
 80018a4:	d00c      	beq.n	80018c0 <HAL_GPIO_Init+0x148>
 80018a6:	d814      	bhi.n	80018d2 <HAL_GPIO_Init+0x15a>
 80018a8:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80018ac:	454a      	cmp	r2, r9
 80018ae:	d007      	beq.n	80018c0 <HAL_GPIO_Init+0x148>
 80018b0:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 80018b4:	454a      	cmp	r2, r9
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x148>
 80018b8:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80018bc:	454a      	cmp	r2, r9
 80018be:	d187      	bne.n	80017d0 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018c0:	688a      	ldr	r2, [r1, #8]
 80018c2:	b1d2      	cbz	r2, 80018fa <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c4:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c6:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 80018ca:	bf0c      	ite	eq
 80018cc:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 80018ce:	6147      	strne	r7, [r0, #20]
 80018d0:	e77e      	b.n	80017d0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80018d2:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 800191c <HAL_GPIO_Init+0x1a4>
 80018d6:	454a      	cmp	r2, r9
 80018d8:	d0f2      	beq.n	80018c0 <HAL_GPIO_Init+0x148>
 80018da:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 80018de:	e7ed      	b.n	80018bc <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018e0:	68cc      	ldr	r4, [r1, #12]
          break;
 80018e2:	e775      	b.n	80017d0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e4:	68cc      	ldr	r4, [r1, #12]
 80018e6:	3404      	adds	r4, #4
          break;
 80018e8:	e772      	b.n	80017d0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ea:	68cc      	ldr	r4, [r1, #12]
 80018ec:	3408      	adds	r4, #8
          break;
 80018ee:	e76f      	b.n	80017d0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f0:	68cc      	ldr	r4, [r1, #12]
 80018f2:	340c      	adds	r4, #12
          break;
 80018f4:	e76c      	b.n	80017d0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80018f6:	2400      	movs	r4, #0
 80018f8:	e76a      	b.n	80017d0 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018fa:	2404      	movs	r4, #4
 80018fc:	e768      	b.n	80017d0 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018fe:	2200      	movs	r2, #0
 8001900:	e7aa      	b.n	8001858 <HAL_GPIO_Init+0xe0>
 8001902:	2201      	movs	r2, #1
 8001904:	e7a8      	b.n	8001858 <HAL_GPIO_Init+0xe0>
 8001906:	2202      	movs	r2, #2
 8001908:	e7a6      	b.n	8001858 <HAL_GPIO_Init+0xe0>
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	40010400 	.word	0x40010400
 8001914:	40010800 	.word	0x40010800
 8001918:	10220000 	.word	0x10220000
 800191c:	10310000 	.word	0x10310000

08001920 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001920:	b10a      	cbz	r2, 8001926 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001922:	6101      	str	r1, [r0, #16]
  }
}
 8001924:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001926:	0409      	lsls	r1, r1, #16
 8001928:	e7fb      	b.n	8001922 <HAL_GPIO_WritePin+0x2>
	...

0800192c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800192c:	4a04      	ldr	r2, [pc, #16]	@ (8001940 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800192e:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001930:	6951      	ldr	r1, [r2, #20]
 8001932:	4201      	tst	r1, r0
 8001934:	d002      	beq.n	800193c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001936:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001938:	f7ff fcea 	bl	8001310 <HAL_GPIO_EXTI_Callback>
  }
}
 800193c:	bd08      	pop	{r3, pc}
 800193e:	bf00      	nop
 8001940:	40010400 	.word	0x40010400

08001944 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001944:	6801      	ldr	r1, [r0, #0]
 8001946:	2200      	movs	r2, #0
 8001948:	694b      	ldr	r3, [r1, #20]
 800194a:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 800194e:	d010      	beq.n	8001972 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001950:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8001954:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001956:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001958:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800195a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800195e:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001962:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001964:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 800196e:	2001      	movs	r0, #1
 8001970:	4770      	bx	lr
  }
  return HAL_OK;
 8001972:	4618      	mov	r0, r3
}
 8001974:	4770      	bx	lr

08001976 <I2C_WaitOnFlagUntilTimeout>:
{
 8001976:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800197a:	4606      	mov	r6, r0
 800197c:	460f      	mov	r7, r1
 800197e:	4691      	mov	r9, r2
 8001980:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001982:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001986:	6833      	ldr	r3, [r6, #0]
 8001988:	f1ba 0f01 	cmp.w	sl, #1
 800198c:	bf0c      	ite	eq
 800198e:	695c      	ldreq	r4, [r3, #20]
 8001990:	699c      	ldrne	r4, [r3, #24]
 8001992:	ea27 0404 	bic.w	r4, r7, r4
 8001996:	b2a4      	uxth	r4, r4
 8001998:	fab4 f484 	clz	r4, r4
 800199c:	0964      	lsrs	r4, r4, #5
 800199e:	45a1      	cmp	r9, r4
 80019a0:	d001      	beq.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80019a2:	2000      	movs	r0, #0
 80019a4:	e025      	b.n	80019f2 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80019a6:	1c6a      	adds	r2, r5, #1
 80019a8:	d0ee      	beq.n	8001988 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019aa:	f7ff fe45 	bl	8001638 <HAL_GetTick>
 80019ae:	9b08      	ldr	r3, [sp, #32]
 80019b0:	1ac0      	subs	r0, r0, r3
 80019b2:	42a8      	cmp	r0, r5
 80019b4:	d801      	bhi.n	80019ba <I2C_WaitOnFlagUntilTimeout+0x44>
 80019b6:	2d00      	cmp	r5, #0
 80019b8:	d1e5      	bne.n	8001986 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019ba:	6833      	ldr	r3, [r6, #0]
 80019bc:	f1ba 0f01 	cmp.w	sl, #1
 80019c0:	bf0c      	ite	eq
 80019c2:	695b      	ldreq	r3, [r3, #20]
 80019c4:	699b      	ldrne	r3, [r3, #24]
 80019c6:	ea27 0303 	bic.w	r3, r7, r3
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	095b      	lsrs	r3, r3, #5
 80019d2:	4599      	cmp	r9, r3
 80019d4:	d1d7      	bne.n	8001986 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80019d6:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 80019d8:	2220      	movs	r2, #32
          return HAL_ERROR;
 80019da:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 80019dc:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80019de:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019e2:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019e6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80019e8:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019ec:	f042 0220 	orr.w	r2, r2, #32
 80019f0:	6432      	str	r2, [r6, #64]	@ 0x40
}
 80019f2:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080019f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80019f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019fa:	4604      	mov	r4, r0
 80019fc:	460f      	mov	r7, r1
 80019fe:	4616      	mov	r6, r2
 8001a00:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a02:	6825      	ldr	r5, [r4, #0]
 8001a04:	6968      	ldr	r0, [r5, #20]
 8001a06:	ea27 0000 	bic.w	r0, r7, r0
 8001a0a:	b280      	uxth	r0, r0
 8001a0c:	b1c0      	cbz	r0, 8001a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a0e:	696b      	ldr	r3, [r5, #20]
 8001a10:	055a      	lsls	r2, r3, #21
 8001a12:	d517      	bpl.n	8001a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a14:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a16:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a1c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a1e:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8001a22:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a28:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a2c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a32:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a36:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001a38:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001a3a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8001a3c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001a44:	1c73      	adds	r3, r6, #1
 8001a46:	d0dd      	beq.n	8001a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a48:	f7ff fdf6 	bl	8001638 <HAL_GetTick>
 8001a4c:	eba0 0008 	sub.w	r0, r0, r8
 8001a50:	42b0      	cmp	r0, r6
 8001a52:	d801      	bhi.n	8001a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8001a54:	2e00      	cmp	r6, #0
 8001a56:	d1d4      	bne.n	8001a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	ea27 0202 	bic.w	r2, r7, r2
 8001a60:	b292      	uxth	r2, r2
 8001a62:	2a00      	cmp	r2, #0
 8001a64:	d0cd      	beq.n	8001a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a66:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a68:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a6a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a6c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a70:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a76:	4313      	orrs	r3, r2
 8001a78:	e7dd      	b.n	8001a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08001a7a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001a7a:	b570      	push	{r4, r5, r6, lr}
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	460d      	mov	r5, r1
 8001a80:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	061b      	lsls	r3, r3, #24
 8001a88:	d501      	bpl.n	8001a8e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	e01e      	b.n	8001acc <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff ff58 	bl	8001944 <I2C_IsAcknowledgeFailed>
 8001a94:	b9c8      	cbnz	r0, 8001aca <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001a96:	1c6a      	adds	r2, r5, #1
 8001a98:	d0f3      	beq.n	8001a82 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a9a:	f7ff fdcd 	bl	8001638 <HAL_GetTick>
 8001a9e:	1b80      	subs	r0, r0, r6
 8001aa0:	42a8      	cmp	r0, r5
 8001aa2:	d801      	bhi.n	8001aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001aa4:	2d00      	cmp	r5, #0
 8001aa6:	d1ec      	bne.n	8001a82 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8001ab0:	d1e7      	bne.n	8001a82 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ab2:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ab4:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ab6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aba:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001abe:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001ac0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ac4:	f042 0220 	orr.w	r2, r2, #32
 8001ac8:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001aca:	2001      	movs	r0, #1
}
 8001acc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ad0 <I2C_RequestMemoryWrite>:
{
 8001ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ad4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ad6:	6802      	ldr	r2, [r0, #0]
{
 8001ad8:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ada:	6813      	ldr	r3, [r2, #0]
{
 8001adc:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae2:	6013      	str	r3, [r2, #0]
{
 8001ae4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8001ae8:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aea:	463b      	mov	r3, r7
 8001aec:	2200      	movs	r2, #0
 8001aee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001af2:	f8cd 8000 	str.w	r8, [sp]
{
 8001af6:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001af8:	f7ff ff3d 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	b138      	cbz	r0, 8001b10 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	05db      	lsls	r3, r3, #23
 8001b04:	d502      	bpl.n	8001b0c <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b0a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001b0c:	2603      	movs	r6, #3
 8001b0e:	e020      	b.n	8001b52 <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b10:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8001b14:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b16:	463a      	mov	r2, r7
 8001b18:	4643      	mov	r3, r8
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4918      	ldr	r1, [pc, #96]	@ (8001b80 <I2C_RequestMemoryWrite+0xb0>)
 8001b1e:	f7ff ff6a 	bl	80019f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b22:	b9a8      	cbnz	r0, 8001b50 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b24:	6823      	ldr	r3, [r4, #0]
 8001b26:	9003      	str	r0, [sp, #12]
 8001b28:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b2a:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b2c:	9203      	str	r2, [sp, #12]
 8001b2e:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b30:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b32:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b34:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b36:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b38:	f7ff ff9f 	bl	8001a7a <I2C_WaitOnTXEFlagUntilTimeout>
 8001b3c:	4606      	mov	r6, r0
 8001b3e:	b160      	cbz	r0, 8001b5a <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b42:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b44:	bf01      	itttt	eq
 8001b46:	6822      	ldreq	r2, [r4, #0]
 8001b48:	6813      	ldreq	r3, [r2, #0]
 8001b4a:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8001b4e:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8001b50:	2601      	movs	r6, #1
}
 8001b52:	4630      	mov	r0, r6
 8001b54:	b005      	add	sp, #20
 8001b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b5a:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b60:	d102      	bne.n	8001b68 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b62:	b2ed      	uxtb	r5, r5
 8001b64:	611d      	str	r5, [r3, #16]
 8001b66:	e7f4      	b.n	8001b52 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b68:	0a2a      	lsrs	r2, r5, #8
 8001b6a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b6c:	4639      	mov	r1, r7
 8001b6e:	4642      	mov	r2, r8
 8001b70:	4620      	mov	r0, r4
 8001b72:	f7ff ff82 	bl	8001a7a <I2C_WaitOnTXEFlagUntilTimeout>
 8001b76:	2800      	cmp	r0, #0
 8001b78:	d1e2      	bne.n	8001b40 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	e7f1      	b.n	8001b62 <I2C_RequestMemoryWrite+0x92>
 8001b7e:	bf00      	nop
 8001b80:	00010002 	.word	0x00010002

08001b84 <I2C_RequestMemoryRead>:
{
 8001b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b88:	469a      	mov	sl, r3
 8001b8a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b8e:	6803      	ldr	r3, [r0, #0]
{
 8001b90:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b92:	681a      	ldr	r2, [r3, #0]
{
 8001b94:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b9a:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b9c:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ba2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ba6:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ba8:	463b      	mov	r3, r7
 8001baa:	2200      	movs	r2, #0
 8001bac:	f8cd 8000 	str.w	r8, [sp]
{
 8001bb0:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bb2:	f7ff fee0 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	b148      	cbz	r0, 8001bce <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bba:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bbc:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bbe:	bf48      	it	mi
 8001bc0:	f44f 7300 	movmi.w	r3, #512	@ 0x200
    return HAL_TIMEOUT;
 8001bc4:	f04f 0003 	mov.w	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bc8:	bf48      	it	mi
 8001bca:	6423      	strmi	r3, [r4, #64]	@ 0x40
 8001bcc:	e021      	b.n	8001c12 <I2C_RequestMemoryRead+0x8e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bce:	fa5f f986 	uxtb.w	r9, r6
 8001bd2:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8001bd6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bd8:	463a      	mov	r2, r7
 8001bda:	4643      	mov	r3, r8
 8001bdc:	4620      	mov	r0, r4
 8001bde:	492a      	ldr	r1, [pc, #168]	@ (8001c88 <I2C_RequestMemoryRead+0x104>)
 8001be0:	f7ff ff09 	bl	80019f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001be4:	b9a0      	cbnz	r0, 8001c10 <I2C_RequestMemoryRead+0x8c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	9003      	str	r0, [sp, #12]
 8001bea:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bec:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bee:	9203      	str	r2, [sp, #12]
 8001bf0:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf2:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf4:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf6:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf8:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfa:	f7ff ff3e 	bl	8001a7a <I2C_WaitOnTXEFlagUntilTimeout>
 8001bfe:	b158      	cbz	r0, 8001c18 <I2C_RequestMemoryRead+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c02:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c04:	bf01      	itttt	eq
 8001c06:	6822      	ldreq	r2, [r4, #0]
 8001c08:	6813      	ldreq	r3, [r2, #0]
 8001c0a:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8001c0e:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8001c10:	2001      	movs	r0, #1
}
 8001c12:	b004      	add	sp, #16
 8001c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c18:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c1e:	d11a      	bne.n	8001c56 <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c20:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c22:	4642      	mov	r2, r8
 8001c24:	4639      	mov	r1, r7
 8001c26:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c28:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2a:	f7ff ff26 	bl	8001a7a <I2C_WaitOnTXEFlagUntilTimeout>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	2800      	cmp	r0, #0
 8001c32:	d1e5      	bne.n	8001c00 <I2C_RequestMemoryRead+0x7c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c34:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c36:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c38:	680b      	ldr	r3, [r1, #0]
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3e:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c40:	463b      	mov	r3, r7
 8001c42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c46:	f8cd 8000 	str.w	r8, [sp]
 8001c4a:	f7ff fe94 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8001c4e:	6822      	ldr	r2, [r4, #0]
 8001c50:	b160      	cbz	r0, 8001c6c <I2C_RequestMemoryRead+0xe8>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c52:	6813      	ldr	r3, [r2, #0]
 8001c54:	e7b2      	b.n	8001bbc <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c56:	0a2a      	lsrs	r2, r5, #8
 8001c58:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c5a:	4639      	mov	r1, r7
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7ff ff0b 	bl	8001a7a <I2C_WaitOnTXEFlagUntilTimeout>
 8001c64:	2800      	cmp	r0, #0
 8001c66:	d1cb      	bne.n	8001c00 <I2C_RequestMemoryRead+0x7c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	e7d9      	b.n	8001c20 <I2C_RequestMemoryRead+0x9c>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c6c:	f049 0301 	orr.w	r3, r9, #1
 8001c70:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c72:	4620      	mov	r0, r4
 8001c74:	4643      	mov	r3, r8
 8001c76:	463a      	mov	r2, r7
 8001c78:	4903      	ldr	r1, [pc, #12]	@ (8001c88 <I2C_RequestMemoryRead+0x104>)
 8001c7a:	f7ff febc 	bl	80019f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c7e:	3800      	subs	r0, #0
 8001c80:	bf18      	it	ne
 8001c82:	2001      	movne	r0, #1
 8001c84:	e7c5      	b.n	8001c12 <I2C_RequestMemoryRead+0x8e>
 8001c86:	bf00      	nop
 8001c88:	00010002 	.word	0x00010002

08001c8c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001c8c:	b570      	push	{r4, r5, r6, lr}
 8001c8e:	4604      	mov	r4, r0
 8001c90:	460d      	mov	r5, r1
 8001c92:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	075b      	lsls	r3, r3, #29
 8001c9a:	d501      	bpl.n	8001ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	e01e      	b.n	8001cde <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff fe4f 	bl	8001944 <I2C_IsAcknowledgeFailed>
 8001ca6:	b9c8      	cbnz	r0, 8001cdc <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001ca8:	1c6a      	adds	r2, r5, #1
 8001caa:	d0f3      	beq.n	8001c94 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cac:	f7ff fcc4 	bl	8001638 <HAL_GetTick>
 8001cb0:	1b80      	subs	r0, r0, r6
 8001cb2:	42a8      	cmp	r0, r5
 8001cb4:	d801      	bhi.n	8001cba <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001cb6:	2d00      	cmp	r5, #0
 8001cb8:	d1ec      	bne.n	8001c94 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f013 0304 	ands.w	r3, r3, #4
 8001cc2:	d1e7      	bne.n	8001c94 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cc4:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc6:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cc8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ccc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cd0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001cd2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cd6:	f042 0220 	orr.w	r2, r2, #32
 8001cda:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001cdc:	2001      	movs	r0, #1
}
 8001cde:	bd70      	pop	{r4, r5, r6, pc}

08001ce0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001ce0:	b570      	push	{r4, r5, r6, lr}
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	460d      	mov	r5, r1
 8001ce6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ce8:	6821      	ldr	r1, [r4, #0]
 8001cea:	694b      	ldr	r3, [r1, #20]
 8001cec:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8001cf0:	d001      	beq.n	8001cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	e011      	b.n	8001d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cf6:	694a      	ldr	r2, [r1, #20]
 8001cf8:	06d2      	lsls	r2, r2, #27
 8001cfa:	d50f      	bpl.n	8001d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cfc:	f06f 0210 	mvn.w	r2, #16
 8001d00:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d02:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d04:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d06:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d0a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d10:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8001d12:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001d14:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 8001d16:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1c:	f7ff fc8c 	bl	8001638 <HAL_GetTick>
 8001d20:	1b80      	subs	r0, r0, r6
 8001d22:	42a8      	cmp	r0, r5
 8001d24:	d801      	bhi.n	8001d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001d26:	2d00      	cmp	r5, #0
 8001d28:	d1de      	bne.n	8001ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8001d32:	d1d9      	bne.n	8001ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d34:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d36:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d38:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d3c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d42:	4313      	orrs	r3, r2
 8001d44:	e7e4      	b.n	8001d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08001d48 <HAL_I2C_Init>:
{
 8001d48:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	b908      	cbnz	r0, 8001d52 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001d4e:	2001      	movs	r0, #1
}
 8001d50:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d52:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001d56:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001d5a:	b91b      	cbnz	r3, 8001d64 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001d5c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8001d60:	f7ff fb0a 	bl	8001378 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d64:	2324      	movs	r3, #36	@ 0x24
 8001d66:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d82:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d84:	f001 fb7e 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d88:	4b3f      	ldr	r3, [pc, #252]	@ (8001e88 <HAL_I2C_Init+0x140>)
 8001d8a:	6865      	ldr	r5, [r4, #4]
 8001d8c:	429d      	cmp	r5, r3
 8001d8e:	bf94      	ite	ls
 8001d90:	4b3e      	ldrls	r3, [pc, #248]	@ (8001e8c <HAL_I2C_Init+0x144>)
 8001d92:	4b3f      	ldrhi	r3, [pc, #252]	@ (8001e90 <HAL_I2C_Init+0x148>)
 8001d94:	4298      	cmp	r0, r3
 8001d96:	bf8c      	ite	hi
 8001d98:	2300      	movhi	r3, #0
 8001d9a:	2301      	movls	r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1d6      	bne.n	8001d4e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001da0:	4e39      	ldr	r6, [pc, #228]	@ (8001e88 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001da2:	4b3c      	ldr	r3, [pc, #240]	@ (8001e94 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001da4:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8001da6:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001daa:	bf88      	it	hi
 8001dac:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001db0:	6822      	ldr	r2, [r4, #0]
 8001db2:	6851      	ldr	r1, [r2, #4]
 8001db4:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8001db8:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dbc:	bf82      	ittt	hi
 8001dbe:	4373      	mulhi	r3, r6
 8001dc0:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8001dc4:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dc8:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dca:	6a11      	ldr	r1, [r2, #32]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dd6:	69d1      	ldr	r1, [r2, #28]
 8001dd8:	1e43      	subs	r3, r0, #1
 8001dda:	482b      	ldr	r0, [pc, #172]	@ (8001e88 <HAL_I2C_Init+0x140>)
 8001ddc:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8001de0:	4285      	cmp	r5, r0
 8001de2:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8001de6:	d832      	bhi.n	8001e4e <HAL_I2C_Init+0x106>
 8001de8:	006d      	lsls	r5, r5, #1
 8001dea:	fbb3 f3f5 	udiv	r3, r3, r5
 8001dee:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001df2:	3301      	adds	r3, #1
 8001df4:	4203      	tst	r3, r0
 8001df6:	d042      	beq.n	8001e7e <HAL_I2C_Init+0x136>
 8001df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfc:	4319      	orrs	r1, r3
 8001dfe:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e00:	6811      	ldr	r1, [r2, #0]
 8001e02:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001e06:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8001e0a:	4303      	orrs	r3, r0
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e10:	6891      	ldr	r1, [r2, #8]
 8001e12:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001e16:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8001e1a:	4303      	orrs	r3, r0
 8001e1c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8001e20:	430b      	orrs	r3, r1
 8001e22:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e24:	68d1      	ldr	r1, [r2, #12]
 8001e26:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001e2a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8001e2e:	4303      	orrs	r3, r0
 8001e30:	430b      	orrs	r3, r1
 8001e32:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001e34:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e36:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e40:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e46:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e48:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8001e4c:	e780      	b.n	8001d50 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e4e:	68a0      	ldr	r0, [r4, #8]
 8001e50:	b950      	cbnz	r0, 8001e68 <HAL_I2C_Init+0x120>
 8001e52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e56:	fbb3 f3f5 	udiv	r3, r3, r5
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e60:	b17b      	cbz	r3, 8001e82 <HAL_I2C_Init+0x13a>
 8001e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e66:	e7c9      	b.n	8001dfc <HAL_I2C_Init+0xb4>
 8001e68:	2019      	movs	r0, #25
 8001e6a:	4368      	muls	r0, r5
 8001e6c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001e70:	3301      	adds	r3, #1
 8001e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e76:	b123      	cbz	r3, 8001e82 <HAL_I2C_Init+0x13a>
 8001e78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e7c:	e7be      	b.n	8001dfc <HAL_I2C_Init+0xb4>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e7bc      	b.n	8001dfc <HAL_I2C_Init+0xb4>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e7ba      	b.n	8001dfc <HAL_I2C_Init+0xb4>
 8001e86:	bf00      	nop
 8001e88:	000186a0 	.word	0x000186a0
 8001e8c:	001e847f 	.word	0x001e847f
 8001e90:	003d08ff 	.word	0x003d08ff
 8001e94:	000f4240 	.word	0x000f4240

08001e98 <HAL_I2C_Mem_Write>:
{
 8001e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e9c:	4604      	mov	r4, r0
 8001e9e:	4699      	mov	r9, r3
 8001ea0:	460f      	mov	r7, r1
 8001ea2:	4690      	mov	r8, r2
 8001ea4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8001ea6:	f7ff fbc7 	bl	8001638 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eaa:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001eae:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d003      	beq.n	8001ebc <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8001eb4:	2002      	movs	r0, #2
}
 8001eb6:	b003      	add	sp, #12
 8001eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ebc:	9000      	str	r0, [sp, #0]
 8001ebe:	2319      	movs	r3, #25
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	493a      	ldr	r1, [pc, #232]	@ (8001fb0 <HAL_I2C_Mem_Write+0x118>)
 8001ec6:	f7ff fd56 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8001eca:	2800      	cmp	r0, #0
 8001ecc:	d1f2      	bne.n	8001eb4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001ece:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d0ee      	beq.n	8001eb4 <HAL_I2C_Mem_Write+0x1c>
 8001ed6:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ed8:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8001eda:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ede:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ee0:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ee2:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001ee4:	bf58      	it	pl
 8001ee6:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ee8:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8001eea:	bf5c      	itt	pl
 8001eec:	f043 0301 	orrpl.w	r3, r3, #1
 8001ef0:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ef2:	6803      	ldr	r3, [r0, #0]
 8001ef4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ef8:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001efa:	2321      	movs	r3, #33	@ 0x21
 8001efc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f00:	2340      	movs	r3, #64	@ 0x40
 8001f02:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001f0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f0c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8001f0e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f10:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8001f14:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f16:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001f18:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f1a:	4b26      	ldr	r3, [pc, #152]	@ (8001fb4 <HAL_I2C_Mem_Write+0x11c>)
 8001f1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f1e:	464b      	mov	r3, r9
 8001f20:	e9cd 6500 	strd	r6, r5, [sp]
 8001f24:	f7ff fdd4 	bl	8001ad0 <I2C_RequestMemoryWrite>
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	d02a      	beq.n	8001f82 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	e7c2      	b.n	8001eb6 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f30:	f7ff fda3 	bl	8001a7a <I2C_WaitOnTXEFlagUntilTimeout>
 8001f34:	b140      	cbz	r0, 8001f48 <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f38:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3a:	bf01      	itttt	eq
 8001f3c:	6822      	ldreq	r2, [r4, #0]
 8001f3e:	6813      	ldreq	r3, [r2, #0]
 8001f40:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8001f44:	6013      	streq	r3, [r2, #0]
 8001f46:	e7f1      	b.n	8001f2c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f48:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f4a:	6827      	ldr	r7, [r4, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001f52:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001f54:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001f56:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f58:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001f5a:	3a01      	subs	r2, #1
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f60:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001f62:	1e48      	subs	r0, r1, #1
 8001f64:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f66:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001f68:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f6a:	d50a      	bpl.n	8001f82 <HAL_I2C_Mem_Write+0xea>
 8001f6c:	b148      	cbz	r0, 8001f82 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f6e:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8001f70:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f72:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001f74:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8001f76:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f78:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001f7e:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8001f80:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f82:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f84:	462a      	mov	r2, r5
 8001f86:	4631      	mov	r1, r6
 8001f88:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1d0      	bne.n	8001f30 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8e:	f7ff fe7d 	bl	8001c8c <I2C_WaitOnBTFFlagUntilTimeout>
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d1cf      	bne.n	8001f36 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f96:	6822      	ldr	r2, [r4, #0]
 8001f98:	6813      	ldr	r3, [r2, #0]
 8001f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f9e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fa0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001fa2:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001fa6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001faa:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8001fae:	e782      	b.n	8001eb6 <HAL_I2C_Mem_Write+0x1e>
 8001fb0:	00100002 	.word	0x00100002
 8001fb4:	ffff0000 	.word	0xffff0000

08001fb8 <HAL_I2C_Mem_Read>:
{
 8001fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fbc:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8001fbe:	2300      	movs	r3, #0
{
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	b089      	sub	sp, #36	@ 0x24
  __IO uint32_t count = 0U;
 8001fc4:	9303      	str	r3, [sp, #12]
{
 8001fc6:	460d      	mov	r5, r1
 8001fc8:	4690      	mov	r8, r2
 8001fca:	9f12      	ldr	r7, [sp, #72]	@ 0x48
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff fb34 	bl	8001638 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d004      	beq.n	8001fe4 <HAL_I2C_Mem_Read+0x2c>
      return HAL_BUSY;
 8001fda:	2502      	movs	r5, #2
}
 8001fdc:	4628      	mov	r0, r5
 8001fde:	b009      	add	sp, #36	@ 0x24
 8001fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fe4:	9000      	str	r0, [sp, #0]
 8001fe6:	2319      	movs	r3, #25
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4620      	mov	r0, r4
 8001fec:	4990      	ldr	r1, [pc, #576]	@ (8002230 <HAL_I2C_Mem_Read+0x278>)
 8001fee:	f7ff fcc2 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d1f1      	bne.n	8001fda <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8001ff6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d0ed      	beq.n	8001fda <HAL_I2C_Mem_Read+0x22>
 8001ffe:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002000:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8002002:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002006:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002008:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800200a:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800200c:	bf58      	it	pl
 800200e:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002010:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8002012:	bf5c      	itt	pl
 8002014:	f043 0301 	orrpl.w	r3, r3, #1
 8002018:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800201a:	6803      	ldr	r3, [r0, #0]
 800201c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002020:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002022:	2322      	movs	r3, #34	@ 0x22
 8002024:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002028:	2340      	movs	r3, #64	@ 0x40
 800202a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202e:	2300      	movs	r3, #0
 8002030:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002032:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002034:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8002036:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002038:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800203c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800203e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002040:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002042:	4b7c      	ldr	r3, [pc, #496]	@ (8002234 <HAL_I2C_Mem_Read+0x27c>)
 8002044:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002046:	464b      	mov	r3, r9
 8002048:	e9cd 7600 	strd	r7, r6, [sp]
 800204c:	f7ff fd9a 	bl	8001b84 <I2C_RequestMemoryRead>
 8002050:	4605      	mov	r5, r0
 8002052:	2800      	cmp	r0, #0
 8002054:	f040 80ba 	bne.w	80021cc <HAL_I2C_Mem_Read+0x214>
    if (hi2c->XferSize == 0U)
 8002058:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800205a:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800205c:	b9c2      	cbnz	r2, 8002090 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800205e:	9004      	str	r0, [sp, #16]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	9204      	str	r2, [sp, #16]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	9204      	str	r2, [sp, #16]
 8002068:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002070:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002072:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8002238 <HAL_I2C_Mem_Read+0x280>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002076:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800223c <HAL_I2C_Mem_Read+0x284>
    while (hi2c->XferSize > 0U)
 800207a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800207c:	2b00      	cmp	r3, #0
 800207e:	d137      	bne.n	80020f0 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8002080:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002082:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002086:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800208a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 800208e:	e7a5      	b.n	8001fdc <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8002090:	2a01      	cmp	r2, #1
 8002092:	d111      	bne.n	80020b8 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	9005      	str	r0, [sp, #20]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	9205      	str	r2, [sp, #20]
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	9205      	str	r2, [sp, #20]
 80020aa:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020b4:	b662      	cpsie	i
}
 80020b6:	e7dc      	b.n	8002072 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 80020b8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ba:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80020bc:	d10e      	bne.n	80020dc <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020c4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	9006      	str	r0, [sp, #24]
 80020ca:	695a      	ldr	r2, [r3, #20]
 80020cc:	9206      	str	r2, [sp, #24]
 80020ce:	699a      	ldr	r2, [r3, #24]
 80020d0:	9206      	str	r2, [sp, #24]
 80020d2:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020da:	e7ea      	b.n	80020b2 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020e0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e2:	9007      	str	r0, [sp, #28]
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	9207      	str	r2, [sp, #28]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	9307      	str	r3, [sp, #28]
 80020ec:	9b07      	ldr	r3, [sp, #28]
 80020ee:	e7c0      	b.n	8002072 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d878      	bhi.n	80021e6 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d115      	bne.n	8002124 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f8:	4632      	mov	r2, r6
 80020fa:	4639      	mov	r1, r7
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7ff fdef 	bl	8001ce0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002102:	2800      	cmp	r0, #0
 8002104:	d162      	bne.n	80021cc <HAL_I2C_Mem_Read+0x214>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800210c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800210e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002110:	3301      	adds	r3, #1
 8002112:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002114:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002116:	3b01      	subs	r3, #1
 8002118:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800211a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800211c:	3b01      	subs	r3, #1
 800211e:	b29b      	uxth	r3, r3
 8002120:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002122:	e7aa      	b.n	800207a <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8002124:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	463b      	mov	r3, r7
 800212c:	4641      	mov	r1, r8
 800212e:	4620      	mov	r0, r4
 8002130:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8002132:	d118      	bne.n	8002166 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002134:	f7ff fc1f 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8002138:	2800      	cmp	r0, #0
 800213a:	d147      	bne.n	80021cc <HAL_I2C_Mem_Read+0x214>
 800213c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002146:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800214c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800214e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002150:	3301      	adds	r3, #1
 8002152:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002154:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002156:	3b01      	subs	r3, #1
 8002158:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800215a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800215c:	3b01      	subs	r3, #1
 800215e:	b29b      	uxth	r3, r3
 8002160:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002162:	b662      	cpsie	i
 8002164:	e7cf      	b.n	8002106 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002166:	f7ff fc06 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 800216a:	2800      	cmp	r0, #0
 800216c:	d12e      	bne.n	80021cc <HAL_I2C_Mem_Read+0x214>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800216e:	6822      	ldr	r2, [r4, #0]
 8002170:	6813      	ldr	r3, [r2, #0]
 8002172:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002176:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002178:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800217a:	f246 11a8 	movw	r1, #25000	@ 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002184:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002186:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002188:	1c53      	adds	r3, r2, #1
 800218a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800218c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800218e:	3b01      	subs	r3, #1
 8002190:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002192:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002194:	3b01      	subs	r3, #1
 8002196:	b29b      	uxth	r3, r3
 8002198:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800219a:	f8d9 3000 	ldr.w	r3, [r9]
 800219e:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a2:	2123      	movs	r1, #35	@ 0x23
 80021a4:	434b      	muls	r3, r1
 80021a6:	9303      	str	r3, [sp, #12]
            count--;
 80021a8:	9b03      	ldr	r3, [sp, #12]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 80021ae:	9b03      	ldr	r3, [sp, #12]
 80021b0:	b973      	cbnz	r3, 80021d0 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 80021b2:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80021b4:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80021b6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ba:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021be:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80021c0:	f042 0220 	orr.w	r2, r2, #32
 80021c4:	6422      	str	r2, [r4, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80021c6:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80021c8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80021cc:	2501      	movs	r5, #1
 80021ce:	e705      	b.n	8001fdc <HAL_I2C_Mem_Read+0x24>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	6959      	ldr	r1, [r3, #20]
 80021d4:	0749      	lsls	r1, r1, #29
 80021d6:	d5e7      	bpl.n	80021a8 <HAL_I2C_Mem_Read+0x1f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d8:	6819      	ldr	r1, [r3, #0]
 80021da:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 80021de:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	7053      	strb	r3, [r2, #1]
 80021e4:	e7b3      	b.n	800214e <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e6:	4632      	mov	r2, r6
 80021e8:	4639      	mov	r1, r7
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7ff fd78 	bl	8001ce0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d1eb      	bne.n	80021cc <HAL_I2C_Mem_Read+0x214>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80021fa:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 80021fc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 80021fe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002200:	3a01      	subs	r2, #1
 8002202:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8002204:	1c4b      	adds	r3, r1, #1
        hi2c->XferCount--;
 8002206:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002208:	6822      	ldr	r2, [r4, #0]
        hi2c->pBuffPtr++;
 800220a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 800220c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800220e:	6950      	ldr	r0, [r2, #20]
        hi2c->XferSize--;
 8002210:	3b01      	subs	r3, #1
 8002212:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002214:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8002216:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002218:	f57f af2f 	bpl.w	800207a <HAL_I2C_Mem_Read+0xc2>
          if (hi2c->XferSize == 3U)
 800221c:	2b03      	cmp	r3, #3
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221e:	bf02      	ittt	eq
 8002220:	6813      	ldreq	r3, [r2, #0]
 8002222:	f423 6380 	biceq.w	r3, r3, #1024	@ 0x400
 8002226:	6013      	streq	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002228:	6913      	ldr	r3, [r2, #16]
 800222a:	704b      	strb	r3, [r1, #1]
 800222c:	e76f      	b.n	800210e <HAL_I2C_Mem_Read+0x156>
 800222e:	bf00      	nop
 8002230:	00100002 	.word	0x00100002
 8002234:	ffff0000 	.word	0xffff0000
 8002238:	00010004 	.word	0x00010004
 800223c:	20000000 	.word	0x20000000

08002240 <HAL_I2C_Mem_Read_IT>:
{
 8002240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8002242:	2400      	movs	r4, #0
 8002244:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002246:	f890 403d 	ldrb.w	r4, [r0, #61]	@ 0x3d
 800224a:	2c20      	cmp	r4, #32
 800224c:	d002      	beq.n	8002254 <HAL_I2C_Mem_Read_IT+0x14>
        return HAL_BUSY;
 800224e:	2002      	movs	r0, #2
}
 8002250:	b003      	add	sp, #12
 8002252:	bdf0      	pop	{r4, r5, r6, r7, pc}
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002254:	f246 15a8 	movw	r5, #25000	@ 0x61a8
 8002258:	4c28      	ldr	r4, [pc, #160]	@ (80022fc <HAL_I2C_Mem_Read_IT+0xbc>)
 800225a:	6824      	ldr	r4, [r4, #0]
 800225c:	fbb4 f4f5 	udiv	r4, r4, r5
 8002260:	2519      	movs	r5, #25
 8002262:	436c      	muls	r4, r5
 8002264:	9401      	str	r4, [sp, #4]
      count--;
 8002266:	9c01      	ldr	r4, [sp, #4]
 8002268:	3c01      	subs	r4, #1
 800226a:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 800226c:	9c01      	ldr	r4, [sp, #4]
 800226e:	b954      	cbnz	r4, 8002286 <HAL_I2C_Mem_Read_IT+0x46>
        hi2c->State               = HAL_I2C_STATE_READY;
 8002270:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002272:	6304      	str	r4, [r0, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002274:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002278:	f880 403e 	strb.w	r4, [r0, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800227e:	f043 0320 	orr.w	r3, r3, #32
 8002282:	6403      	str	r3, [r0, #64]	@ 0x40
        return HAL_BUSY;
 8002284:	e7e3      	b.n	800224e <HAL_I2C_Mem_Read_IT+0xe>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002286:	6804      	ldr	r4, [r0, #0]
 8002288:	69a5      	ldr	r5, [r4, #24]
 800228a:	07ae      	lsls	r6, r5, #30
 800228c:	d4eb      	bmi.n	8002266 <HAL_I2C_Mem_Read_IT+0x26>
    __HAL_LOCK(hi2c);
 800228e:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 8002292:	2d01      	cmp	r5, #1
 8002294:	d0db      	beq.n	800224e <HAL_I2C_Mem_Read_IT+0xe>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002296:	6825      	ldr	r5, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002298:	2600      	movs	r6, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800229a:	07ed      	lsls	r5, r5, #31
      __HAL_I2C_ENABLE(hi2c);
 800229c:	bf58      	it	pl
 800229e:	6825      	ldrpl	r5, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022a0:	4f17      	ldr	r7, [pc, #92]	@ (8002300 <HAL_I2C_Mem_Read_IT+0xc0>)
      __HAL_I2C_ENABLE(hi2c);
 80022a2:	bf5c      	itt	pl
 80022a4:	f045 0501 	orrpl.w	r5, r5, #1
 80022a8:	6025      	strpl	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022aa:	6825      	ldr	r5, [r4, #0]
 80022ac:	f425 6500 	bic.w	r5, r5, #2048	@ 0x800
 80022b0:	6025      	str	r5, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022b2:	2522      	movs	r5, #34	@ 0x22
 80022b4:	f880 503d 	strb.w	r5, [r0, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022b8:	2540      	movs	r5, #64	@ 0x40
 80022ba:	f880 503e 	strb.w	r5, [r0, #62]	@ 0x3e
    hi2c->pBuffPtr    = pData;
 80022be:	9d08      	ldr	r5, [sp, #32]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c0:	6406      	str	r6, [r0, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80022c2:	6245      	str	r5, [r0, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022c4:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 80022c8:	8545      	strh	r5, [r0, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ca:	8d45      	ldrh	r5, [r0, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022cc:	62c7      	str	r7, [r0, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80022ce:	6441      	str	r1, [r0, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80022d0:	6482      	str	r2, [r0, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80022d2:	64c3      	str	r3, [r0, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80022d4:	6506      	str	r6, [r0, #80]	@ 0x50
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d6:	6823      	ldr	r3, [r4, #0]
    hi2c->XferSize    = hi2c->XferCount;
 80022d8:	b2ad      	uxth	r5, r5
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
    hi2c->XferSize    = hi2c->XferCount;
 80022de:	8505      	strh	r5, [r0, #40]	@ 0x28
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e0:	6023      	str	r3, [r4, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e8:	6023      	str	r3, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80022ea:	f880 603c 	strb.w	r6, [r0, #60]	@ 0x3c
    if (hi2c->XferSize > 0U)
 80022ee:	b11d      	cbz	r5, 80022f8 <HAL_I2C_Mem_Read_IT+0xb8>
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022f0:	6863      	ldr	r3, [r4, #4]
 80022f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022f6:	6063      	str	r3, [r4, #4]
    return HAL_OK;
 80022f8:	2000      	movs	r0, #0
 80022fa:	e7a9      	b.n	8002250 <HAL_I2C_Mem_Read_IT+0x10>
 80022fc:	20000000 	.word	0x20000000
 8002300:	ffff0000 	.word	0xffff0000

08002304 <HAL_I2C_MasterTxCpltCallback>:
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002304:	4770      	bx	lr

08002306 <HAL_I2C_MasterRxCpltCallback>:
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002306:	4770      	bx	lr

08002308 <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002308:	4770      	bx	lr

0800230a <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 800230a:	4770      	bx	lr

0800230c <HAL_I2C_AddrCallback>:
}
 800230c:	4770      	bx	lr

0800230e <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 800230e:	4770      	bx	lr

08002310 <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002310:	4770      	bx	lr

08002312 <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002312:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
{
 8002316:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 8002318:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800231a:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 800231c:	b983      	cbnz	r3, 8002340 <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800231e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002320:	6802      	ldr	r2, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002322:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002324:	6c83      	ldr	r3, [r0, #72]	@ 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002326:	d105      	bne.n	8002334 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002328:	b2db      	uxtb	r3, r3
 800232a:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 800232c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800232e:	3302      	adds	r3, #2
      hi2c->EventCount++;
 8002330:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8002332:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002334:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002338:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 800233a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800233c:	3301      	adds	r3, #1
 800233e:	e7f7      	b.n	8002330 <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 8002340:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002342:	2b01      	cmp	r3, #1
 8002344:	d103      	bne.n	800234e <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002346:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002348:	6802      	ldr	r2, [r0, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	e7f4      	b.n	8002338 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 800234e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002350:	2b02      	cmp	r3, #2
 8002352:	d12f      	bne.n	80023b4 <I2C_MemoryTransmit_TXE_BTF+0xa2>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002354:	2a22      	cmp	r2, #34	@ 0x22
 8002356:	d105      	bne.n	8002364 <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002358:	6802      	ldr	r2, [r0, #0]
 800235a:	6813      	ldr	r3, [r2, #0]
 800235c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002360:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8002362:	e7ea      	b.n	800233a <I2C_MemoryTransmit_TXE_BTF+0x28>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002364:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	b163      	cbz	r3, 8002384 <I2C_MemoryTransmit_TXE_BTF+0x72>
 800236a:	2a21      	cmp	r2, #33	@ 0x21
 800236c:	d10a      	bne.n	8002384 <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800236e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002370:	6802      	ldr	r2, [r0, #0]
 8002372:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002376:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 8002378:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 800237a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800237c:	3b01      	subs	r3, #1
 800237e:	b29b      	uxth	r3, r3
 8002380:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8002382:	e7d6      	b.n	8002332 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002384:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002386:	b29b      	uxth	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1d2      	bne.n	8002332 <I2C_MemoryTransmit_TXE_BTF+0x20>
 800238c:	2a21      	cmp	r2, #33	@ 0x21
 800238e:	d1d0      	bne.n	8002332 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002390:	6802      	ldr	r2, [r0, #0]
 8002392:	6851      	ldr	r1, [r2, #4]
 8002394:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8002398:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239a:	6811      	ldr	r1, [r2, #0]
 800239c:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 80023a0:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80023a4:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023aa:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80023ae:	f7ff ffaf 	bl	8002310 <HAL_I2C_MemTxCpltCallback>
 80023b2:	e7be      	b.n	8002332 <I2C_MemoryTransmit_TXE_BTF+0x20>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80023b4:	6803      	ldr	r3, [r0, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	0612      	lsls	r2, r2, #24
    hi2c->Instance->DR = 0x00U;
 80023ba:	bf44      	itt	mi
 80023bc:	2200      	movmi	r2, #0
 80023be:	611a      	strmi	r2, [r3, #16]
}
 80023c0:	e7b7      	b.n	8002332 <I2C_MemoryTransmit_TXE_BTF+0x20>

080023c2 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 80023c2:	4770      	bx	lr

080023c4 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 80023c4:	4770      	bx	lr
	...

080023c8 <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 80023c8:	2300      	movs	r3, #0
{
 80023ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023cc:	f246 11a8 	movw	r1, #25000	@ 0x61a8
  __IO uint32_t count = 0U;
 80023d0:	9301      	str	r3, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002484 <I2C_DMAAbort+0xbc>)
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80023d4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023d6:	681b      	ldr	r3, [r3, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023d8:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e0:	2123      	movs	r1, #35	@ 0x23
 80023e2:	434b      	muls	r3, r1
 80023e4:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80023e6:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023e8:	b2d2      	uxtb	r2, r2
    if (count == 0U)
 80023ea:	9901      	ldr	r1, [sp, #4]
 80023ec:	bb41      	cbnz	r1, 8002440 <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ee:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80023f0:	f041 0120 	orr.w	r1, r1, #32
 80023f4:	6401      	str	r1, [r0, #64]	@ 0x40
  if (hi2c->hdmatx != NULL)
 80023f6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80023f8:	b10c      	cbz	r4, 80023fe <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80023fa:	2100      	movs	r1, #0
 80023fc:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hi2c->hdmarx != NULL)
 80023fe:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8002400:	b109      	cbz	r1, 8002406 <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002402:	2500      	movs	r5, #0
 8002404:	628d      	str	r5, [r1, #40]	@ 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002406:	681d      	ldr	r5, [r3, #0]
 8002408:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800240c:	601d      	str	r5, [r3, #0]
  hi2c->XferCount = 0U;
 800240e:	2500      	movs	r5, #0
 8002410:	8545      	strh	r5, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 8002412:	b104      	cbz	r4, 8002416 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002414:	6365      	str	r5, [r4, #52]	@ 0x34
  if (hi2c->hdmarx != NULL)
 8002416:	b101      	cbz	r1, 800241a <I2C_DMAAbort+0x52>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002418:	634d      	str	r5, [r1, #52]	@ 0x34
  __HAL_I2C_DISABLE(hi2c);
 800241a:	6819      	ldr	r1, [r3, #0]
 800241c:	f021 0101 	bic.w	r1, r1, #1
 8002420:	6019      	str	r1, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002422:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
 8002426:	2960      	cmp	r1, #96	@ 0x60
 8002428:	d111      	bne.n	800244e <I2C_DMAAbort+0x86>
    hi2c->State         = HAL_I2C_STATE_READY;
 800242a:	2320      	movs	r3, #32
 800242c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002430:	2300      	movs	r3, #0
 8002432:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002436:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002438:	f7ff ffc4 	bl	80023c4 <HAL_I2C_AbortCpltCallback>
}
 800243c:	b003      	add	sp, #12
 800243e:	bd30      	pop	{r4, r5, pc}
    count--;
 8002440:	9901      	ldr	r1, [sp, #4]
 8002442:	3901      	subs	r1, #1
 8002444:	9101      	str	r1, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002446:	6819      	ldr	r1, [r3, #0]
 8002448:	0589      	lsls	r1, r1, #22
 800244a:	d4ce      	bmi.n	80023ea <I2C_DMAAbort+0x22>
 800244c:	e7d3      	b.n	80023f6 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800244e:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8002452:	2a28      	cmp	r2, #40	@ 0x28
 8002454:	d10e      	bne.n	8002474 <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 8002456:	6819      	ldr	r1, [r3, #0]
 8002458:	f041 0101 	orr.w	r1, r1, #1
 800245c:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800245e:	6819      	ldr	r1, [r3, #0]
 8002460:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8002464:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002466:	2300      	movs	r3, #0
 8002468:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800246a:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 800246e:	f7ff ffa8 	bl	80023c2 <HAL_I2C_ErrorCallback>
}
 8002472:	e7e3      	b.n	800243c <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 8002474:	2320      	movs	r3, #32
 8002476:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800247a:	2300      	movs	r3, #0
 800247c:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 8002480:	e7f5      	b.n	800246e <I2C_DMAAbort+0xa6>
 8002482:	bf00      	nop
 8002484:	20000000 	.word	0x20000000

08002488 <I2C_ITError>:
{
 8002488:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800248a:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800248e:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
{
 8002492:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002494:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002496:	b2d9      	uxtb	r1, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002498:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800249a:	6803      	ldr	r3, [r0, #0]
 800249c:	d001      	beq.n	80024a2 <I2C_ITError+0x1a>
 800249e:	2940      	cmp	r1, #64	@ 0x40
 80024a0:	d113      	bne.n	80024ca <I2C_ITError+0x42>
 80024a2:	2a22      	cmp	r2, #34	@ 0x22
 80024a4:	d111      	bne.n	80024ca <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80024a6:	6819      	ldr	r1, [r3, #0]
 80024a8:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 80024ac:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	f411 6100 	ands.w	r1, r1, #2048	@ 0x800
 80024b4:	d106      	bne.n	80024c4 <I2C_ITError+0x3c>
 80024b6:	2a60      	cmp	r2, #96	@ 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 80024b8:	bf1e      	ittt	ne
 80024ba:	2220      	movne	r2, #32
 80024bc:	f884 203d 	strbne.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	f884 103e 	strbne.w	r1, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80024c4:	2200      	movs	r2, #0
 80024c6:	6322      	str	r2, [r4, #48]	@ 0x30
 80024c8:	e007      	b.n	80024da <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80024ca:	f002 0128 	and.w	r1, r2, #40	@ 0x28
 80024ce:	2928      	cmp	r1, #40	@ 0x28
 80024d0:	d1ed      	bne.n	80024ae <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 80024d2:	2200      	movs	r2, #0
 80024d4:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80024d6:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 80024e0:	d04f      	beq.n	8002582 <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80024e2:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80024e4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80024e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ea:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80024ec:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	4b37      	ldr	r3, [pc, #220]	@ (80025d0 <I2C_ITError+0x148>)
 80024f4:	d02b      	beq.n	800254e <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80024f6:	6343      	str	r3, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80024f8:	f7ff f8f4 	bl	80016e4 <HAL_DMA_Abort_IT>
 80024fc:	b150      	cbz	r0, 8002514 <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 80024fe:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002500:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002502:	6813      	ldr	r3, [r2, #0]
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800250a:	2320      	movs	r3, #32
 800250c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002510:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002512:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8002514:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002516:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002518:	bf1f      	itttt	ne
 800251a:	6822      	ldrne	r2, [r4, #0]
 800251c:	6853      	ldrne	r3, [r2, #4]
 800251e:	f423 63e0 	bicne.w	r3, r3, #1792	@ 0x700
 8002522:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8002524:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002528:	6c22      	ldr	r2, [r4, #64]	@ 0x40
  CurrentState = hi2c->State;
 800252a:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800252c:	0752      	lsls	r2, r2, #29
 800252e:	d50d      	bpl.n	800254c <I2C_ITError+0xc4>
 8002530:	2b28      	cmp	r3, #40	@ 0x28
 8002532:	d10b      	bne.n	800254c <I2C_ITError+0xc4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002534:	4b27      	ldr	r3, [pc, #156]	@ (80025d4 <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8002536:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002538:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800253a:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 800253c:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 800253e:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002540:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002544:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002548:	f7ff fee1 	bl	800230e <HAL_I2C_ListenCpltCallback>
}
 800254c:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800254e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002550:	6343      	str	r3, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002552:	f7ff f8c7 	bl	80016e4 <HAL_DMA_Abort_IT>
 8002556:	2800      	cmp	r0, #0
 8002558:	d0dc      	beq.n	8002514 <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	0651      	lsls	r1, r2, #25
 8002560:	d505      	bpl.n	800256e <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002566:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002568:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800256a:	3301      	adds	r3, #1
 800256c:	6263      	str	r3, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 800256e:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002570:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        __HAL_I2C_DISABLE(hi2c);
 8002572:	6813      	ldr	r3, [r2, #0]
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800257a:	2320      	movs	r3, #32
 800257c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002580:	e7c6      	b.n	8002510 <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002582:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8002586:	2960      	cmp	r1, #96	@ 0x60
 8002588:	d115      	bne.n	80025b6 <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800258a:	2120      	movs	r1, #32
 800258c:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002590:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	0652      	lsls	r2, r2, #25
 8002596:	d505      	bpl.n	80025a4 <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800259c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800259e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80025a0:	3301      	adds	r3, #1
 80025a2:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 80025a4:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80025a6:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 80025a8:	6813      	ldr	r3, [r2, #0]
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80025b0:	f7ff ff08 	bl	80023c4 <HAL_I2C_AbortCpltCallback>
 80025b4:	e7ae      	b.n	8002514 <I2C_ITError+0x8c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	0650      	lsls	r0, r2, #25
 80025ba:	d505      	bpl.n	80025c8 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80025c0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80025c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80025c4:	3301      	adds	r3, #1
 80025c6:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80025c8:	4620      	mov	r0, r4
 80025ca:	f7ff fefa 	bl	80023c2 <HAL_I2C_ErrorCallback>
 80025ce:	e7a1      	b.n	8002514 <I2C_ITError+0x8c>
 80025d0:	080023c9 	.word	0x080023c9
 80025d4:	ffff0000 	.word	0xffff0000

080025d8 <HAL_I2C_EV_IRQHandler>:
{
 80025d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025da:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80025dc:	6803      	ldr	r3, [r0, #0]
{
 80025de:	b08f      	sub	sp, #60	@ 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80025e0:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80025e2:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80025e4:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025e8:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80025ec:	2810      	cmp	r0, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80025ee:	b2c5      	uxtb	r5, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025f0:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80025f2:	d002      	beq.n	80025fa <HAL_I2C_EV_IRQHandler+0x22>
 80025f4:	2d40      	cmp	r5, #64	@ 0x40
 80025f6:	f040 82e5 	bne.w	8002bc4 <HAL_I2C_EV_IRQHandler+0x5ec>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80025fa:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025fc:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80025fe:	f010 0f01 	tst.w	r0, #1
 8002602:	d107      	bne.n	8002614 <HAL_I2C_EV_IRQHandler+0x3c>
 8002604:	f5b6 0f2a 	cmp.w	r6, #11141120	@ 0xaa0000
 8002608:	d002      	beq.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
 800260a:	f1b6 4f2a 	cmp.w	r6, #2852126720	@ 0xaa000000
 800260e:	d151      	bne.n	80026b4 <HAL_I2C_EV_IRQHandler+0xdc>
}
 8002610:	b00f      	add	sp, #60	@ 0x3c
 8002612:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002614:	0596      	lsls	r6, r2, #22
 8002616:	d54d      	bpl.n	80026b4 <HAL_I2C_EV_IRQHandler+0xdc>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002618:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800261a:	f5b2 0f2a 	cmp.w	r2, #11141120	@ 0xaa0000
 800261e:	d10c      	bne.n	800263a <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002620:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002622:	62e2      	str	r2, [r4, #44]	@ 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002624:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8002628:	2a40      	cmp	r2, #64	@ 0x40
 800262a:	d111      	bne.n	8002650 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 800262c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800262e:	b952      	cbnz	r2, 8002646 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002630:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002632:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002636:	611a      	str	r2, [r3, #16]
 8002638:	e7ea      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800263a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800263c:	f1b2 4f2a 	cmp.w	r2, #2852126720	@ 0xaa000000
 8002640:	d1f0      	bne.n	8002624 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002642:	2208      	movs	r2, #8
 8002644:	e7ed      	b.n	8002622 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002646:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	e7f2      	b.n	8002636 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002650:	6922      	ldr	r2, [r4, #16]
 8002652:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8002656:	d11a      	bne.n	800268e <HAL_I2C_EV_IRQHandler+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002658:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800265c:	2a21      	cmp	r2, #33	@ 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800265e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002660:	d111      	bne.n	8002686 <HAL_I2C_EV_IRQHandler+0xae>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002662:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002666:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002668:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800266a:	b10a      	cbz	r2, 8002670 <HAL_I2C_EV_IRQHandler+0x98>
 800266c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800266e:	b92a      	cbnz	r2, 800267c <HAL_I2C_EV_IRQHandler+0xa4>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002670:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002672:	2a00      	cmp	r2, #0
 8002674:	d0cc      	beq.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
 8002676:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002678:	2a00      	cmp	r2, #0
 800267a:	d0c9      	beq.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	e7c4      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	e7eb      	b.n	8002666 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 800268e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002690:	b932      	cbnz	r2, 80026a0 <HAL_I2C_EV_IRQHandler+0xc8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002692:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002694:	11d2      	asrs	r2, r2, #7
 8002696:	f002 0206 	and.w	r2, r2, #6
 800269a:	f042 02f0 	orr.w	r2, r2, #240	@ 0xf0
 800269e:	e7ca      	b.n	8002636 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 80026a0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80026a2:	2a01      	cmp	r2, #1
 80026a4:	d1b4      	bne.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80026a6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80026a8:	11d2      	asrs	r2, r2, #7
 80026aa:	f002 0206 	and.w	r2, r2, #6
 80026ae:	f042 02f1 	orr.w	r2, r2, #241	@ 0xf1
 80026b2:	e7c0      	b.n	8002636 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026b4:	0706      	lsls	r6, r0, #28
 80026b6:	d503      	bpl.n	80026c0 <HAL_I2C_EV_IRQHandler+0xe8>
 80026b8:	0596      	lsls	r6, r2, #22
 80026ba:	d501      	bpl.n	80026c0 <HAL_I2C_EV_IRQHandler+0xe8>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80026bc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80026be:	e7e4      	b.n	800268a <HAL_I2C_EV_IRQHandler+0xb2>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026c0:	0786      	lsls	r6, r0, #30
 80026c2:	f140 80f0 	bpl.w	80028a6 <HAL_I2C_EV_IRQHandler+0x2ce>
 80026c6:	0596      	lsls	r6, r2, #22
 80026c8:	f140 80ed 	bpl.w	80028a6 <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80026cc:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80026d0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80026d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026d4:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80026d8:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026da:	2822      	cmp	r0, #34	@ 0x22
 80026dc:	f040 80db 	bne.w	8002896 <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80026e0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80026e2:	b940      	cbnz	r0, 80026f6 <HAL_I2C_EV_IRQHandler+0x11e>
 80026e4:	2940      	cmp	r1, #64	@ 0x40
 80026e6:	d106      	bne.n	80026f6 <HAL_I2C_EV_IRQHandler+0x11e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e8:	9000      	str	r0, [sp, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	9200      	str	r2, [sp, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	9b00      	ldr	r3, [sp, #0]
 80026f4:	e78c      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80026f6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80026f8:	b989      	cbnz	r1, 800271e <HAL_I2C_EV_IRQHandler+0x146>
 80026fa:	6920      	ldr	r0, [r4, #16]
 80026fc:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 8002700:	d10d      	bne.n	800271e <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002702:	9101      	str	r1, [sp, #4]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	9201      	str	r2, [sp, #4]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	9201      	str	r2, [sp, #4]
 800270c:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002714:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002716:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002718:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 800271a:	6523      	str	r3, [r4, #80]	@ 0x50
 800271c:	e778      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 800271e:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8002720:	b289      	uxth	r1, r1
 8002722:	b951      	cbnz	r1, 800273a <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002724:	9102      	str	r1, [sp, #8]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	9202      	str	r2, [sp, #8]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	9202      	str	r2, [sp, #8]
 800272e:	9a02      	ldr	r2, [sp, #8]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e019      	b.n	800276e <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 800273a:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 800273c:	b289      	uxth	r1, r1
 800273e:	2901      	cmp	r1, #1
 8002740:	d149      	bne.n	80027d6 <HAL_I2C_EV_IRQHandler+0x1fe>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002742:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8002746:	d11b      	bne.n	8002780 <HAL_I2C_EV_IRQHandler+0x1a8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800274e:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8002756:	d00c      	beq.n	8002772 <HAL_I2C_EV_IRQHandler+0x19a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800275e:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002760:	2200      	movs	r2, #0
 8002762:	9203      	str	r2, [sp, #12]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	9203      	str	r2, [sp, #12]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	9303      	str	r3, [sp, #12]
 800276c:	9b03      	ldr	r3, [sp, #12]
      hi2c->EventCount = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	e7d3      	b.n	800271a <HAL_I2C_EV_IRQHandler+0x142>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002772:	9204      	str	r2, [sp, #16]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	9204      	str	r2, [sp, #16]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	9204      	str	r2, [sp, #16]
 800277c:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277e:	e7d7      	b.n	8002730 <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002780:	2a08      	cmp	r2, #8
 8002782:	d01c      	beq.n	80027be <HAL_I2C_EV_IRQHandler+0x1e6>
 8002784:	2a20      	cmp	r2, #32
 8002786:	d01a      	beq.n	80027be <HAL_I2C_EV_IRQHandler+0x1e6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002788:	2d12      	cmp	r5, #18
 800278a:	d10d      	bne.n	80027a8 <HAL_I2C_EV_IRQHandler+0x1d0>
 800278c:	2a01      	cmp	r2, #1
 800278e:	d116      	bne.n	80027be <HAL_I2C_EV_IRQHandler+0x1e6>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002796:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002798:	2200      	movs	r2, #0
 800279a:	9205      	str	r2, [sp, #20]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	9205      	str	r2, [sp, #20]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	9305      	str	r3, [sp, #20]
 80027a4:	9b05      	ldr	r3, [sp, #20]
 80027a6:	e7e2      	b.n	800276e <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80027a8:	2a10      	cmp	r2, #16
 80027aa:	d8f1      	bhi.n	8002790 <HAL_I2C_EV_IRQHandler+0x1b8>
 80027ac:	4986      	ldr	r1, [pc, #536]	@ (80029c8 <HAL_I2C_EV_IRQHandler+0x3f0>)
 80027ae:	fa41 f202 	asr.w	r2, r1, r2
 80027b2:	07d7      	lsls	r7, r2, #31
 80027b4:	d4ec      	bmi.n	8002790 <HAL_I2C_EV_IRQHandler+0x1b8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027bc:	e7eb      	b.n	8002796 <HAL_I2C_EV_IRQHandler+0x1be>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027c4:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c6:	2200      	movs	r2, #0
 80027c8:	9206      	str	r2, [sp, #24]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	9206      	str	r2, [sp, #24]
 80027ce:	699a      	ldr	r2, [r3, #24]
 80027d0:	9206      	str	r2, [sp, #24]
 80027d2:	9a06      	ldr	r2, [sp, #24]
 80027d4:	e7ac      	b.n	8002730 <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 80027d6:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80027d8:	b289      	uxth	r1, r1
 80027da:	2902      	cmp	r1, #2
 80027dc:	d138      	bne.n	8002850 <HAL_I2C_EV_IRQHandler+0x278>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80027de:	2a10      	cmp	r2, #16
 80027e0:	d803      	bhi.n	80027ea <HAL_I2C_EV_IRQHandler+0x212>
 80027e2:	497a      	ldr	r1, [pc, #488]	@ (80029cc <HAL_I2C_EV_IRQHandler+0x3f4>)
 80027e4:	40d1      	lsrs	r1, r2
 80027e6:	07ce      	lsls	r6, r1, #31
 80027e8:	d418      	bmi.n	800281c <HAL_I2C_EV_IRQHandler+0x244>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 80027f0:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f2:	2100      	movs	r1, #0
 80027f4:	9107      	str	r1, [sp, #28]
 80027f6:	6959      	ldr	r1, [r3, #20]
 80027f8:	9107      	str	r1, [sp, #28]
 80027fa:	6999      	ldr	r1, [r3, #24]
 80027fc:	9107      	str	r1, [sp, #28]
 80027fe:	9907      	ldr	r1, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002800:	6819      	ldr	r1, [r3, #0]
 8002802:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8002806:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	050d      	lsls	r5, r1, #20
 800280c:	d5af      	bpl.n	800276e <HAL_I2C_EV_IRQHandler+0x196>
 800280e:	2a20      	cmp	r2, #32
 8002810:	d81b      	bhi.n	800284a <HAL_I2C_EV_IRQHandler+0x272>
 8002812:	2a07      	cmp	r2, #7
 8002814:	d80e      	bhi.n	8002834 <HAL_I2C_EV_IRQHandler+0x25c>
 8002816:	2a01      	cmp	r2, #1
 8002818:	d1a9      	bne.n	800276e <HAL_I2C_EV_IRQHandler+0x196>
 800281a:	e011      	b.n	8002840 <HAL_I2C_EV_IRQHandler+0x268>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800281c:	6819      	ldr	r1, [r3, #0]
 800281e:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8002822:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002824:	2100      	movs	r1, #0
 8002826:	9108      	str	r1, [sp, #32]
 8002828:	6959      	ldr	r1, [r3, #20]
 800282a:	9108      	str	r1, [sp, #32]
 800282c:	6999      	ldr	r1, [r3, #24]
 800282e:	9108      	str	r1, [sp, #32]
 8002830:	9908      	ldr	r1, [sp, #32]
 8002832:	e7e9      	b.n	8002808 <HAL_I2C_EV_IRQHandler+0x230>
 8002834:	f1a2 0108 	sub.w	r1, r2, #8
 8002838:	4a65      	ldr	r2, [pc, #404]	@ (80029d0 <HAL_I2C_EV_IRQHandler+0x3f8>)
 800283a:	40ca      	lsrs	r2, r1
 800283c:	07d0      	lsls	r0, r2, #31
 800283e:	d596      	bpl.n	800276e <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	e791      	b.n	800276e <HAL_I2C_EV_IRQHandler+0x196>
 800284a:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 800284e:	e7e3      	b.n	8002818 <HAL_I2C_EV_IRQHandler+0x240>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8002856:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	0509      	lsls	r1, r1, #20
 800285c:	d510      	bpl.n	8002880 <HAL_I2C_EV_IRQHandler+0x2a8>
 800285e:	2a20      	cmp	r2, #32
 8002860:	d816      	bhi.n	8002890 <HAL_I2C_EV_IRQHandler+0x2b8>
 8002862:	2a07      	cmp	r2, #7
 8002864:	d806      	bhi.n	8002874 <HAL_I2C_EV_IRQHandler+0x29c>
 8002866:	2a01      	cmp	r2, #1
 8002868:	d10a      	bne.n	8002880 <HAL_I2C_EV_IRQHandler+0x2a8>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	e005      	b.n	8002880 <HAL_I2C_EV_IRQHandler+0x2a8>
 8002874:	f1a2 0108 	sub.w	r1, r2, #8
 8002878:	4a55      	ldr	r2, [pc, #340]	@ (80029d0 <HAL_I2C_EV_IRQHandler+0x3f8>)
 800287a:	40ca      	lsrs	r2, r1
 800287c:	07d2      	lsls	r2, r2, #31
 800287e:	d4f4      	bmi.n	800286a <HAL_I2C_EV_IRQHandler+0x292>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002880:	2200      	movs	r2, #0
 8002882:	9209      	str	r2, [sp, #36]	@ 0x24
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	9209      	str	r2, [sp, #36]	@ 0x24
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	9309      	str	r3, [sp, #36]	@ 0x24
 800288c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800288e:	e76e      	b.n	800276e <HAL_I2C_EV_IRQHandler+0x196>
 8002890:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8002894:	e7e8      	b.n	8002868 <HAL_I2C_EV_IRQHandler+0x290>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002896:	2200      	movs	r2, #0
 8002898:	920a      	str	r2, [sp, #40]	@ 0x28
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	920a      	str	r2, [sp, #40]	@ 0x28
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80028a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80028a4:	e6b4      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80028a6:	077f      	lsls	r7, r7, #29
 80028a8:	f140 8094 	bpl.w	80029d4 <HAL_I2C_EV_IRQHandler+0x3fc>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80028ac:	685e      	ldr	r6, [r3, #4]
 80028ae:	0536      	lsls	r6, r6, #20
 80028b0:	f53f aeae 	bmi.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028b4:	0607      	lsls	r7, r0, #24
 80028b6:	f000 0604 	and.w	r6, r0, #4
 80028ba:	d53e      	bpl.n	800293a <HAL_I2C_EV_IRQHandler+0x362>
 80028bc:	0550      	lsls	r0, r2, #21
 80028be:	d53c      	bpl.n	800293a <HAL_I2C_EV_IRQHandler+0x362>
 80028c0:	2e00      	cmp	r6, #0
 80028c2:	d13d      	bne.n	8002940 <HAL_I2C_EV_IRQHandler+0x368>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028c4:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028c8:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028ca:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028ce:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028d0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028d2:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028d4:	b9c5      	cbnz	r5, 8002908 <HAL_I2C_EV_IRQHandler+0x330>
 80028d6:	2a21      	cmp	r2, #33	@ 0x21
 80028d8:	d118      	bne.n	800290c <HAL_I2C_EV_IRQHandler+0x334>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028da:	2808      	cmp	r0, #8
 80028dc:	d058      	beq.n	8002990 <HAL_I2C_EV_IRQHandler+0x3b8>
 80028de:	2820      	cmp	r0, #32
 80028e0:	d056      	beq.n	8002990 <HAL_I2C_EV_IRQHandler+0x3b8>
 80028e2:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 80028e6:	d053      	beq.n	8002990 <HAL_I2C_EV_IRQHandler+0x3b8>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028ee:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028f0:	2311      	movs	r3, #17
 80028f2:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	2320      	movs	r3, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028fc:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002902:	f7ff fcff 	bl	8002304 <HAL_I2C_MasterTxCpltCallback>
 8002906:	e683      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002908:	2a21      	cmp	r2, #33	@ 0x21
 800290a:	d005      	beq.n	8002918 <HAL_I2C_EV_IRQHandler+0x340>
 800290c:	2940      	cmp	r1, #64	@ 0x40
 800290e:	f47f ae7f 	bne.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002912:	2a22      	cmp	r2, #34	@ 0x22
 8002914:	f47f ae7c 	bne.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8002918:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800291a:	b292      	uxth	r2, r2
 800291c:	b91a      	cbnz	r2, 8002926 <HAL_I2C_EV_IRQHandler+0x34e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002924:	e6ad      	b.n	8002682 <HAL_I2C_EV_IRQHandler+0xaa>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002926:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 800292a:	2a40      	cmp	r2, #64	@ 0x40
 800292c:	d116      	bne.n	800295c <HAL_I2C_EV_IRQHandler+0x384>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800292e:	4620      	mov	r0, r4
}
 8002930:	b00f      	add	sp, #60	@ 0x3c
 8002932:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002936:	f7ff bcec 	b.w	8002312 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800293a:	2e00      	cmp	r6, #0
 800293c:	f43f ae68 	beq.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
 8002940:	0597      	lsls	r7, r2, #22
 8002942:	f57f ae65 	bpl.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002946:	2921      	cmp	r1, #33	@ 0x21
 8002948:	d139      	bne.n	80029be <HAL_I2C_EV_IRQHandler+0x3e6>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800294a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800294c:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8002950:	2a21      	cmp	r2, #33	@ 0x21
 8002952:	f47f ae5d 	bne.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8002956:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002958:	b292      	uxth	r2, r2
 800295a:	b14a      	cbz	r2, 8002970 <HAL_I2C_EV_IRQHandler+0x398>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800295c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800295e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002962:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8002964:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8002966:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002968:	3b01      	subs	r3, #1
 800296a:	b29b      	uxth	r3, r3
 800296c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      }
 800296e:	e64f      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002970:	2908      	cmp	r1, #8
 8002972:	d00d      	beq.n	8002990 <HAL_I2C_EV_IRQHandler+0x3b8>
 8002974:	2920      	cmp	r1, #32
 8002976:	d00b      	beq.n	8002990 <HAL_I2C_EV_IRQHandler+0x3b8>
 8002978:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 800297c:	d008      	beq.n	8002990 <HAL_I2C_EV_IRQHandler+0x3b8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8002984:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002986:	2311      	movs	r3, #17
 8002988:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800298a:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 800298e:	e7b4      	b.n	80028fa <HAL_I2C_EV_IRQHandler+0x322>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002990:	685a      	ldr	r2, [r3, #4]
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002992:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002994:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002998:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029a0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80029a2:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80029a4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80029a6:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029a8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029ac:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029b4:	2a40      	cmp	r2, #64	@ 0x40
 80029b6:	d1a4      	bne.n	8002902 <HAL_I2C_EV_IRQHandler+0x32a>
          HAL_I2C_MemTxCpltCallback(hi2c);
 80029b8:	f7ff fcaa 	bl	8002310 <HAL_I2C_MemTxCpltCallback>
 80029bc:	e628      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80029be:	2d40      	cmp	r5, #64	@ 0x40
 80029c0:	f47f ae26 	bne.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
 80029c4:	e7b3      	b.n	800292e <HAL_I2C_EV_IRQHandler+0x356>
 80029c6:	bf00      	nop
 80029c8:	fffeffeb 	.word	0xfffeffeb
 80029cc:	00010014 	.word	0x00010014
 80029d0:	01000101 	.word	0x01000101
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	050e      	lsls	r6, r1, #20
 80029d8:	f53f ae1a 	bmi.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029dc:	0645      	lsls	r5, r0, #25
 80029de:	f000 0104 	and.w	r1, r0, #4
 80029e2:	f140 8086 	bpl.w	8002af2 <HAL_I2C_EV_IRQHandler+0x51a>
 80029e6:	0550      	lsls	r0, r2, #21
 80029e8:	f140 8083 	bpl.w	8002af2 <HAL_I2C_EV_IRQHandler+0x51a>
 80029ec:	2900      	cmp	r1, #0
 80029ee:	f040 8083 	bne.w	8002af8 <HAL_I2C_EV_IRQHandler+0x520>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029f2:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80029f6:	2a22      	cmp	r2, #34	@ 0x22
 80029f8:	f47f ae0a 	bne.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
    CurrentXferOptions = hi2c->XferOptions;
 80029fc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 80029fe:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002a00:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8002a02:	2a03      	cmp	r2, #3
 8002a04:	d914      	bls.n	8002a30 <HAL_I2C_EV_IRQHandler+0x458>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a0a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002a0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a0e:	3301      	adds	r3, #1
 8002a10:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002a12:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8002a1a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	f47f adf6 	bne.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a24:	6822      	ldr	r2, [r4, #0]
 8002a26:	6853      	ldr	r3, [r2, #4]
 8002a28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a2c:	6053      	str	r3, [r2, #4]
 8002a2e:	e5ef      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002a30:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8002a32:	2d02      	cmp	r5, #2
 8002a34:	f43f af73 	beq.w	800291e <HAL_I2C_EV_IRQHandler+0x346>
 8002a38:	2a01      	cmp	r2, #1
 8002a3a:	f63f af70 	bhi.w	800291e <HAL_I2C_EV_IRQHandler+0x346>
  __IO uint32_t count = 0U;
 8002a3e:	910b      	str	r1, [sp, #44]	@ 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a40:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8002a44:	4a78      	ldr	r2, [pc, #480]	@ (8002c28 <HAL_I2C_EV_IRQHandler+0x650>)
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	fbb2 f2f1 	udiv	r2, r2, r1
 8002a4c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a50:	920b      	str	r2, [sp, #44]	@ 0x2c
    count--;
 8002a52:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002a54:	3a01      	subs	r2, #1
 8002a56:	920b      	str	r2, [sp, #44]	@ 0x2c
    if (count == 0U)
 8002a58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002a5a:	b9d1      	cbnz	r1, 8002a92 <HAL_I2C_EV_IRQHandler+0x4ba>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        HAL_I2C_ErrorCallback(hi2c);
 8002a5e:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a60:	f042 0220 	orr.w	r2, r2, #32
 8002a64:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a6c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a72:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a74:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a76:	3301      	adds	r3, #1
 8002a78:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002a7a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	2320      	movs	r3, #32
 8002a84:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002a8c:	f7ff fc99 	bl	80023c2 <HAL_I2C_ErrorCallback>
 8002a90:	e5be      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
 8002a98:	d1db      	bne.n	8002a52 <HAL_I2C_EV_IRQHandler+0x47a>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8002aa0:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8002aa8:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aaa:	6919      	ldr	r1, [r3, #16]
 8002aac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002aae:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 8002ab0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002ab6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ac4:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac8:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002acc:	2b40      	cmp	r3, #64	@ 0x40
 8002ace:	d104      	bne.n	8002ada <HAL_I2C_EV_IRQHandler+0x502>
          hi2c->PreviousState = I2C_STATE_NONE;
 8002ad0:	6322      	str	r2, [r4, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	f000 ffc0 	bl	8003a58 <HAL_I2C_MemRxCpltCallback>
 8002ad8:	e59a      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002ada:	2808      	cmp	r0, #8
 8002adc:	d001      	beq.n	8002ae2 <HAL_I2C_EV_IRQHandler+0x50a>
 8002ade:	2820      	cmp	r0, #32
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002ae0:	d101      	bne.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x50e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_I2C_EV_IRQHandler+0x510>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ae6:	2312      	movs	r3, #18
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ae8:	4620      	mov	r0, r4
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002aea:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002aec:	f7ff fc0b 	bl	8002306 <HAL_I2C_MasterRxCpltCallback>
 8002af0:	e58e      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002af2:	2900      	cmp	r1, #0
 8002af4:	f43f ad8c 	beq.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
 8002af8:	0592      	lsls	r2, r2, #22
 8002afa:	f57f ad89 	bpl.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002afe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 8002b00:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b02:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  if (hi2c->XferCount == 4U)
 8002b04:	b280      	uxth	r0, r0
 8002b06:	2804      	cmp	r0, #4
 8002b08:	d109      	bne.n	8002b1e <HAL_I2C_EV_IRQHandler+0x546>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b10:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002b16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002b18:	3301      	adds	r3, #1
 8002b1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b1c:	e723      	b.n	8002966 <HAL_I2C_EV_IRQHandler+0x38e>
  else if (hi2c->XferCount == 3U)
 8002b1e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8002b20:	b280      	uxth	r0, r0
 8002b22:	2803      	cmp	r0, #3
 8002b24:	d10c      	bne.n	8002b40 <HAL_I2C_EV_IRQHandler+0x568>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b26:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002b28:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b2a:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 8002b2e:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002b30:	d0ef      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x53a>
 8002b32:	2a02      	cmp	r2, #2
 8002b34:	d0ed      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x53a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b3c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3e:	e7e8      	b.n	8002b12 <HAL_I2C_EV_IRQHandler+0x53a>
  else if (hi2c->XferCount == 2U)
 8002b40:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8002b42:	b280      	uxth	r0, r0
 8002b44:	2802      	cmp	r0, #2
 8002b46:	d1e4      	bne.n	8002b12 <HAL_I2C_EV_IRQHandler+0x53a>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002b48:	2a04      	cmp	r2, #4
 8002b4a:	d033      	beq.n	8002bb4 <HAL_I2C_EV_IRQHandler+0x5dc>
 8002b4c:	d807      	bhi.n	8002b5e <HAL_I2C_EV_IRQHandler+0x586>
 8002b4e:	2a01      	cmp	r2, #1
 8002b50:	d007      	beq.n	8002b62 <HAL_I2C_EV_IRQHandler+0x58a>
 8002b52:	2a02      	cmp	r2, #2
 8002b54:	d02e      	beq.n	8002bb4 <HAL_I2C_EV_IRQHandler+0x5dc>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8002b5c:	e004      	b.n	8002b68 <HAL_I2C_EV_IRQHandler+0x590>
 8002b5e:	2a10      	cmp	r2, #16
 8002b60:	d1f9      	bne.n	8002b56 <HAL_I2C_EV_IRQHandler+0x57e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	6018      	str	r0, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002b6e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002b70:	1c4b      	adds	r3, r1, #1
 8002b72:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8002b74:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 8002b82:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002b84:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8002b86:	3301      	adds	r3, #1
 8002b88:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8002b8a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	8563      	strh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002b92:	684b      	ldr	r3, [r1, #4]
 8002b94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b98:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ba0:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8002ba4:	2b40      	cmp	r3, #64	@ 0x40
 8002ba6:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002baa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bae:	d105      	bne.n	8002bbc <HAL_I2C_EV_IRQHandler+0x5e4>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8002bb2:	e78e      	b.n	8002ad2 <HAL_I2C_EV_IRQHandler+0x4fa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 8002bba:	e7d5      	b.n	8002b68 <HAL_I2C_EV_IRQHandler+0x590>
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002bbc:	2a08      	cmp	r2, #8
 8002bbe:	d090      	beq.n	8002ae2 <HAL_I2C_EV_IRQHandler+0x50a>
 8002bc0:	2a20      	cmp	r2, #32
 8002bc2:	e78d      	b.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x508>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bc4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002bc6:	b310      	cbz	r0, 8002c0e <HAL_I2C_EV_IRQHandler+0x636>
  uint32_t sr2itflags               = 0U;
 8002bc8:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002bca:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bcc:	0787      	lsls	r7, r0, #30
 8002bce:	d52d      	bpl.n	8002c2c <HAL_I2C_EV_IRQHandler+0x654>
 8002bd0:	0596      	lsls	r6, r2, #22
 8002bd2:	d52b      	bpl.n	8002c2c <HAL_I2C_EV_IRQHandler+0x654>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bd4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002bd6:	b102      	cbz	r2, 8002bda <HAL_I2C_EV_IRQHandler+0x602>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bd8:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bda:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8002bde:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8002be2:	2a28      	cmp	r2, #40	@ 0x28
 8002be4:	d116      	bne.n	8002c14 <HAL_I2C_EV_IRQHandler+0x63c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002be6:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002be8:	062f      	lsls	r7, r5, #24
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bee:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hi2c);
 8002bf0:	f04f 0300 	mov.w	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002bf4:	f085 0104 	eor.w	r1, r5, #4
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002bf8:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002bfa:	bf54      	ite	pl
 8002bfc:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002bfe:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002c00:	f3c1 0180 	ubfx	r1, r1, #2, #1
    __HAL_UNLOCK(hi2c);
 8002c04:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002c08:	f7ff fb80 	bl	800230c <HAL_I2C_AddrCallback>
 8002c0c:	e500      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c0e:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c10:	6958      	ldr	r0, [r3, #20]
 8002c12:	e7db      	b.n	8002bcc <HAL_I2C_EV_IRQHandler+0x5f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c14:	2200      	movs	r2, #0
 8002c16:	920c      	str	r2, [sp, #48]	@ 0x30
 8002c18:	6959      	ldr	r1, [r3, #20]
 8002c1a:	910c      	str	r1, [sp, #48]	@ 0x30
 8002c1c:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 8002c1e:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c22:	930c      	str	r3, [sp, #48]	@ 0x30
 8002c24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002c26:	e4f3      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
 8002c28:	20000000 	.word	0x20000000
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c2c:	06c6      	lsls	r6, r0, #27
 8002c2e:	f140 80b1 	bpl.w	8002d94 <HAL_I2C_EV_IRQHandler+0x7bc>
 8002c32:	0595      	lsls	r5, r2, #22
 8002c34:	f140 80ae 	bpl.w	8002d94 <HAL_I2C_EV_IRQHandler+0x7bc>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c38:	f894 503d 	ldrb.w	r5, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c3c:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c3e:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c40:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c44:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002c46:	2200      	movs	r2, #0
 8002c48:	920d      	str	r2, [sp, #52]	@ 0x34
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	920d      	str	r2, [sp, #52]	@ 0x34
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c5e:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	0510      	lsls	r0, r2, #20
 8002c64:	d520      	bpl.n	8002ca8 <HAL_I2C_EV_IRQHandler+0x6d0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c66:	f005 02f7 	and.w	r2, r5, #247	@ 0xf7
 8002c6a:	2a22      	cmp	r2, #34	@ 0x22
 8002c6c:	d14a      	bne.n	8002d04 <HAL_I2C_EV_IRQHandler+0x72c>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002c6e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002c70:	6802      	ldr	r2, [r0, #0]
 8002c72:	6852      	ldr	r2, [r2, #4]
 8002c74:	b292      	uxth	r2, r2
 8002c76:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8002c78:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002c7a:	b292      	uxth	r2, r2
 8002c7c:	b11a      	cbz	r2, 8002c86 <HAL_I2C_EV_IRQHandler+0x6ae>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c7e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002c80:	f042 0204 	orr.w	r2, r2, #4
 8002c84:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c8c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c8e:	f7fe fd6f 	bl	8001770 <HAL_DMA_GetState>
 8002c92:	2801      	cmp	r0, #1
 8002c94:	d008      	beq.n	8002ca8 <HAL_I2C_EV_IRQHandler+0x6d0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c96:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002c98:	4b79      	ldr	r3, [pc, #484]	@ (8002e80 <HAL_I2C_EV_IRQHandler+0x8a8>)
 8002c9a:	6343      	str	r3, [r0, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c9c:	f7fe fd22 	bl	80016e4 <HAL_DMA_Abort_IT>
 8002ca0:	b110      	cbz	r0, 8002ca8 <HAL_I2C_EV_IRQHandler+0x6d0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ca2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ca4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002ca6:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8002ca8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	b313      	cbz	r3, 8002cf4 <HAL_I2C_EV_IRQHandler+0x71c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	0751      	lsls	r1, r2, #29
 8002cb4:	d509      	bpl.n	8002cca <HAL_I2C_EV_IRQHandler+0x6f2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002cba:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002cbc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002cc2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	0652      	lsls	r2, r2, #25
 8002cd0:	d509      	bpl.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x70e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002cd6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002cd8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002cda:	3301      	adds	r3, #1
 8002cdc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002cde:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8002ce6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b11b      	cbz	r3, 8002cf4 <HAL_I2C_EV_IRQHandler+0x71c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002cee:	f043 0304 	orr.w	r3, r3, #4
 8002cf2:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002cf6:	b313      	cbz	r3, 8002d3e <HAL_I2C_EV_IRQHandler+0x766>
    I2C_ITError(hi2c);
 8002cf8:	4620      	mov	r0, r4
}
 8002cfa:	b00f      	add	sp, #60	@ 0x3c
 8002cfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8002d00:	f7ff bbc2 	b.w	8002488 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002d04:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002d06:	6802      	ldr	r2, [r0, #0]
 8002d08:	6852      	ldr	r2, [r2, #4]
 8002d0a:	b292      	uxth	r2, r2
 8002d0c:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8002d0e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002d10:	b292      	uxth	r2, r2
 8002d12:	b11a      	cbz	r2, 8002d1c <HAL_I2C_EV_IRQHandler+0x744>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d14:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002d16:	f042 0204 	orr.w	r2, r2, #4
 8002d1a:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d22:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d24:	f7fe fd24 	bl	8001770 <HAL_DMA_GetState>
 8002d28:	2801      	cmp	r0, #1
 8002d2a:	d0bd      	beq.n	8002ca8 <HAL_I2C_EV_IRQHandler+0x6d0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d2c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002d2e:	4b54      	ldr	r3, [pc, #336]	@ (8002e80 <HAL_I2C_EV_IRQHandler+0x8a8>)
 8002d30:	6343      	str	r3, [r0, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d32:	f7fe fcd7 	bl	80016e4 <HAL_DMA_Abort_IT>
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d0b6      	beq.n	8002ca8 <HAL_I2C_EV_IRQHandler+0x6d0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d3a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002d3c:	e7b2      	b.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x6cc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002d3e:	2d2a      	cmp	r5, #42	@ 0x2a
 8002d40:	d106      	bne.n	8002d50 <HAL_I2C_EV_IRQHandler+0x778>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d42:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d44:	2328      	movs	r3, #40	@ 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d46:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d48:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d4c:	f7ff fadd 	bl	800230a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d50:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002d54:	2b28      	cmp	r3, #40	@ 0x28
 8002d56:	d10c      	bne.n	8002d72 <HAL_I2C_EV_IRQHandler+0x79a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d58:	4b4a      	ldr	r3, [pc, #296]	@ (8002e84 <HAL_I2C_EV_IRQHandler+0x8ac>)
      hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d5e:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 8002d60:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d62:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d68:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002d6c:	f7ff facf 	bl	800230e <HAL_I2C_ListenCpltCallback>
 8002d70:	e44e      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002d74:	2b22      	cmp	r3, #34	@ 0x22
 8002d76:	d002      	beq.n	8002d7e <HAL_I2C_EV_IRQHandler+0x7a6>
 8002d78:	2d22      	cmp	r5, #34	@ 0x22
 8002d7a:	f47f ac49 	bne.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d7e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002d80:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d82:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d88:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f7ff fabc 	bl	800230a <HAL_I2C_SlaveRxCpltCallback>
 8002d92:	e43d      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d94:	f001 01f7 	and.w	r1, r1, #247	@ 0xf7
 8002d98:	2921      	cmp	r1, #33	@ 0x21
 8002d9a:	f000 0504 	and.w	r5, r0, #4
 8002d9e:	d135      	bne.n	8002e0c <HAL_I2C_EV_IRQHandler+0x834>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002da0:	0607      	lsls	r7, r0, #24
 8002da2:	d527      	bpl.n	8002df4 <HAL_I2C_EV_IRQHandler+0x81c>
 8002da4:	0556      	lsls	r6, r2, #21
 8002da6:	d525      	bpl.n	8002df4 <HAL_I2C_EV_IRQHandler+0x81c>
 8002da8:	bb3d      	cbnz	r5, 8002dfa <HAL_I2C_EV_IRQHandler+0x822>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002daa:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 8002dae:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002db0:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8002db2:	b292      	uxth	r2, r2
 8002db4:	2a00      	cmp	r2, #0
 8002db6:	f43f ac2b 	beq.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002dbc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002dc0:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8002dc2:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8002dc4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002dc6:	3a01      	subs	r2, #1
 8002dc8:	b292      	uxth	r2, r2
 8002dca:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002dcc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002dce:	b292      	uxth	r2, r2
 8002dd0:	2a00      	cmp	r2, #0
 8002dd2:	f47f ac1d 	bne.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
 8002dd6:	2829      	cmp	r0, #41	@ 0x29
 8002dd8:	f47f ac1a 	bne.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ddc:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002dde:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002de0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de4:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002de6:	2328      	movs	r3, #40	@ 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002de8:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002dee:	f7ff fa8b 	bl	8002308 <HAL_I2C_SlaveTxCpltCallback>
 8002df2:	e40d      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002df4:	2d00      	cmp	r5, #0
 8002df6:	f43f ac0b 	beq.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
 8002dfa:	0595      	lsls	r5, r2, #22
 8002dfc:	f57f ac08 	bpl.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8002e00:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002e02:	b292      	uxth	r2, r2
 8002e04:	2a00      	cmp	r2, #0
 8002e06:	f43f ac03 	beq.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
 8002e0a:	e5a7      	b.n	800295c <HAL_I2C_EV_IRQHandler+0x384>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e0c:	0640      	lsls	r0, r0, #25
 8002e0e:	d527      	bpl.n	8002e60 <HAL_I2C_EV_IRQHandler+0x888>
 8002e10:	0551      	lsls	r1, r2, #21
 8002e12:	d525      	bpl.n	8002e60 <HAL_I2C_EV_IRQHandler+0x888>
 8002e14:	bb3d      	cbnz	r5, 8002e66 <HAL_I2C_EV_IRQHandler+0x88e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e16:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 8002e1a:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e1c:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8002e1e:	b289      	uxth	r1, r1
 8002e20:	2900      	cmp	r1, #0
 8002e22:	f43f abf5 	beq.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e26:	6919      	ldr	r1, [r3, #16]
 8002e28:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e2a:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8002e2c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e2e:	3301      	adds	r3, #1
 8002e30:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8002e32:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e3a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f47f abe6 	bne.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
 8002e44:	2a2a      	cmp	r2, #42	@ 0x2a
 8002e46:	f47f abe3 	bne.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e4a:	6822      	ldr	r2, [r4, #0]
 8002e4c:	6853      	ldr	r3, [r2, #4]
 8002e4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e52:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e54:	2322      	movs	r3, #34	@ 0x22
 8002e56:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e58:	2328      	movs	r3, #40	@ 0x28
 8002e5a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 8002e5e:	e795      	b.n	8002d8c <HAL_I2C_EV_IRQHandler+0x7b4>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e60:	2d00      	cmp	r5, #0
 8002e62:	f43f abd5 	beq.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
 8002e66:	0592      	lsls	r2, r2, #22
 8002e68:	f57f abd2 	bpl.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8002e6c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002e6e:	b292      	uxth	r2, r2
 8002e70:	2a00      	cmp	r2, #0
 8002e72:	f43f abcd 	beq.w	8002610 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	e64b      	b.n	8002b16 <HAL_I2C_EV_IRQHandler+0x53e>
 8002e7e:	bf00      	nop
 8002e80:	080023c9 	.word	0x080023c9
 8002e84:	ffff0000 	.word	0xffff0000

08002e88 <HAL_I2C_ER_IRQHandler>:
{
 8002e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002e8a:	6803      	ldr	r3, [r0, #0]
{
 8002e8c:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002e8e:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002e90:	685e      	ldr	r6, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e92:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e96:	f417 7580 	ands.w	r5, r7, #256	@ 0x100
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e9a:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_I2C_ER_IRQHandler+0x2c>
 8002e9e:	f416 7580 	ands.w	r5, r6, #256	@ 0x100
 8002ea2:	d007      	beq.n	8002eb4 <HAL_I2C_ER_IRQHandler+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ea4:	f46f 7180 	mvn.w	r1, #256	@ 0x100
    error |= HAL_I2C_ERROR_BERR;
 8002ea8:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eaa:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002eac:	6819      	ldr	r1, [r3, #0]
 8002eae:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002eb2:	6019      	str	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002eb4:	05b8      	lsls	r0, r7, #22
 8002eb6:	d506      	bpl.n	8002ec6 <HAL_I2C_ER_IRQHandler+0x3e>
 8002eb8:	05f1      	lsls	r1, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002eba:	bf42      	ittt	mi
 8002ebc:	f46f 7100 	mvnmi.w	r1, #512	@ 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8002ec0:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ec4:	6159      	strmi	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ec6:	0578      	lsls	r0, r7, #21
 8002ec8:	d536      	bpl.n	8002f38 <HAL_I2C_ER_IRQHandler+0xb0>
 8002eca:	05f1      	lsls	r1, r6, #23
 8002ecc:	d534      	bpl.n	8002f38 <HAL_I2C_ER_IRQHandler+0xb0>
    tmp2 = hi2c->XferCount;
 8002ece:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    tmp3 = hi2c->State;
 8002ed0:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002ed4:	2a20      	cmp	r2, #32
    tmp4 = hi2c->PreviousState;
 8002ed6:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
    tmp2 = hi2c->XferCount;
 8002eda:	b280      	uxth	r0, r0
    tmp3 = hi2c->State;
 8002edc:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002ede:	d15f      	bne.n	8002fa0 <HAL_I2C_ER_IRQHandler+0x118>
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	d15d      	bne.n	8002fa0 <HAL_I2C_ER_IRQHandler+0x118>
 8002ee4:	f001 00f7 	and.w	r0, r1, #247	@ 0xf7
 8002ee8:	2821      	cmp	r0, #33	@ 0x21
 8002eea:	d004      	beq.n	8002ef6 <HAL_I2C_ER_IRQHandler+0x6e>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002eec:	2928      	cmp	r1, #40	@ 0x28
 8002eee:	d157      	bne.n	8002fa0 <HAL_I2C_ER_IRQHandler+0x118>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002ef0:	f1bc 0f21 	cmp.w	ip, #33	@ 0x21
 8002ef4:	d154      	bne.n	8002fa0 <HAL_I2C_ER_IRQHandler+0x118>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ef6:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002efa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002efc:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002efe:	2908      	cmp	r1, #8
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_ER_IRQHandler+0x7e>
 8002f02:	2920      	cmp	r1, #32
 8002f04:	d12a      	bne.n	8002f5c <HAL_I2C_ER_IRQHandler+0xd4>
 8002f06:	2a28      	cmp	r2, #40	@ 0x28
 8002f08:	d128      	bne.n	8002f5c <HAL_I2C_ER_IRQHandler+0xd4>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc4 <HAL_I2C_ER_IRQHandler+0x13c>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f0c:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f0e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f16:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f1c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f24:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f28:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f2a:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f2c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f30:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f34:	f7ff f9eb 	bl	800230e <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f38:	053a      	lsls	r2, r7, #20
 8002f3a:	d53f      	bpl.n	8002fbc <HAL_I2C_ER_IRQHandler+0x134>
 8002f3c:	05f3      	lsls	r3, r6, #23
 8002f3e:	d53d      	bpl.n	8002fbc <HAL_I2C_ER_IRQHandler+0x134>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f40:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002f44:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 8002f46:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f4a:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8002f4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002f4e:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 8002f50:	432b      	orrs	r3, r5
 8002f52:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8002f54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8002f58:	f7ff ba96 	b.w	8002488 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f5c:	2a21      	cmp	r2, #33	@ 0x21
 8002f5e:	d11b      	bne.n	8002f98 <HAL_I2C_ER_IRQHandler+0x110>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f60:	4918      	ldr	r1, [pc, #96]	@ (8002fc4 <HAL_I2C_ER_IRQHandler+0x13c>)
 8002f62:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f64:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f66:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f6e:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f78:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f7e:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f86:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	0610      	lsls	r0, r2, #24
    hi2c->Instance->DR = 0x00U;
 8002f8c:	bf48      	it	mi
 8002f8e:	6119      	strmi	r1, [r3, #16]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f90:	4620      	mov	r0, r4
 8002f92:	f7ff f9b9 	bl	8002308 <HAL_I2C_SlaveTxCpltCallback>
 8002f96:	e7cf      	b.n	8002f38 <HAL_I2C_ER_IRQHandler+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f9c:	615a      	str	r2, [r3, #20]
 8002f9e:	e7cb      	b.n	8002f38 <HAL_I2C_ER_IRQHandler+0xb0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa0:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fa4:	2a10      	cmp	r2, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa6:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8002fa8:	f045 0504 	orr.w	r5, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_ER_IRQHandler+0x12a>
 8002fae:	2a40      	cmp	r2, #64	@ 0x40
 8002fb0:	d1c2      	bne.n	8002f38 <HAL_I2C_ER_IRQHandler+0xb0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e7bd      	b.n	8002f38 <HAL_I2C_ER_IRQHandler+0xb0>
  if (error != HAL_I2C_ERROR_NONE)
 8002fbc:	2d00      	cmp	r5, #0
 8002fbe:	d1c5      	bne.n	8002f4c <HAL_I2C_ER_IRQHandler+0xc4>
}
 8002fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	ffff0000 	.word	0xffff0000

08002fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fcc:	4605      	mov	r5, r0
 8002fce:	b338      	cbz	r0, 8003020 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd0:	6803      	ldr	r3, [r0, #0]
 8002fd2:	07db      	lsls	r3, r3, #31
 8002fd4:	d410      	bmi.n	8002ff8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	079f      	lsls	r7, r3, #30
 8002fda:	d45e      	bmi.n	800309a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fdc:	682b      	ldr	r3, [r5, #0]
 8002fde:	0719      	lsls	r1, r3, #28
 8002fe0:	f100 8095 	bmi.w	800310e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	075a      	lsls	r2, r3, #29
 8002fe8:	f100 80c1 	bmi.w	800316e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fec:	69eb      	ldr	r3, [r5, #28]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 812c 	bne.w	800324c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	e029      	b.n	800304c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ff8:	4c90      	ldr	r4, [pc, #576]	@ (800323c <HAL_RCC_OscConfig+0x274>)
 8002ffa:	6863      	ldr	r3, [r4, #4]
 8002ffc:	f003 030c 	and.w	r3, r3, #12
 8003000:	2b04      	cmp	r3, #4
 8003002:	d007      	beq.n	8003014 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003004:	6863      	ldr	r3, [r4, #4]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b08      	cmp	r3, #8
 800300c:	d10a      	bne.n	8003024 <HAL_RCC_OscConfig+0x5c>
 800300e:	6863      	ldr	r3, [r4, #4]
 8003010:	03de      	lsls	r6, r3, #15
 8003012:	d507      	bpl.n	8003024 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	039c      	lsls	r4, r3, #14
 8003018:	d5dd      	bpl.n	8002fd6 <HAL_RCC_OscConfig+0xe>
 800301a:	686b      	ldr	r3, [r5, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1da      	bne.n	8002fd6 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8003020:	2001      	movs	r0, #1
 8003022:	e013      	b.n	800304c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003024:	686b      	ldr	r3, [r5, #4]
 8003026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800302a:	d112      	bne.n	8003052 <HAL_RCC_OscConfig+0x8a>
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003032:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003034:	f7fe fb00 	bl	8001638 <HAL_GetTick>
 8003038:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	0398      	lsls	r0, r3, #14
 800303e:	d4ca      	bmi.n	8002fd6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003040:	f7fe fafa 	bl	8001638 <HAL_GetTick>
 8003044:	1b80      	subs	r0, r0, r6
 8003046:	2864      	cmp	r0, #100	@ 0x64
 8003048:	d9f7      	bls.n	800303a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800304a:	2003      	movs	r0, #3
}
 800304c:	b002      	add	sp, #8
 800304e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003052:	b99b      	cbnz	r3, 800307c <HAL_RCC_OscConfig+0xb4>
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800305a:	6023      	str	r3, [r4, #0]
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003062:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003064:	f7fe fae8 	bl	8001638 <HAL_GetTick>
 8003068:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	0399      	lsls	r1, r3, #14
 800306e:	d5b2      	bpl.n	8002fd6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe fae2 	bl	8001638 <HAL_GetTick>
 8003074:	1b80      	subs	r0, r0, r6
 8003076:	2864      	cmp	r0, #100	@ 0x64
 8003078:	d9f7      	bls.n	800306a <HAL_RCC_OscConfig+0xa2>
 800307a:	e7e6      	b.n	800304a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	d103      	bne.n	800308c <HAL_RCC_OscConfig+0xc4>
 8003084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003088:	6023      	str	r3, [r4, #0]
 800308a:	e7cf      	b.n	800302c <HAL_RCC_OscConfig+0x64>
 800308c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003090:	6023      	str	r3, [r4, #0]
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003098:	e7cb      	b.n	8003032 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800309a:	4c68      	ldr	r4, [pc, #416]	@ (800323c <HAL_RCC_OscConfig+0x274>)
 800309c:	6863      	ldr	r3, [r4, #4]
 800309e:	f013 0f0c 	tst.w	r3, #12
 80030a2:	d007      	beq.n	80030b4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030a4:	6863      	ldr	r3, [r4, #4]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d110      	bne.n	80030d0 <HAL_RCC_OscConfig+0x108>
 80030ae:	6863      	ldr	r3, [r4, #4]
 80030b0:	03da      	lsls	r2, r3, #15
 80030b2:	d40d      	bmi.n	80030d0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	079b      	lsls	r3, r3, #30
 80030b8:	d502      	bpl.n	80030c0 <HAL_RCC_OscConfig+0xf8>
 80030ba:	692b      	ldr	r3, [r5, #16]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d1af      	bne.n	8003020 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	696a      	ldr	r2, [r5, #20]
 80030c4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80030c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80030cc:	6023      	str	r3, [r4, #0]
 80030ce:	e785      	b.n	8002fdc <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030d0:	692a      	ldr	r2, [r5, #16]
 80030d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003240 <HAL_RCC_OscConfig+0x278>)
 80030d4:	b16a      	cbz	r2, 80030f2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80030da:	f7fe faad 	bl	8001638 <HAL_GetTick>
 80030de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	079f      	lsls	r7, r3, #30
 80030e4:	d4ec      	bmi.n	80030c0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e6:	f7fe faa7 	bl	8001638 <HAL_GetTick>
 80030ea:	1b80      	subs	r0, r0, r6
 80030ec:	2802      	cmp	r0, #2
 80030ee:	d9f7      	bls.n	80030e0 <HAL_RCC_OscConfig+0x118>
 80030f0:	e7ab      	b.n	800304a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80030f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80030f4:	f7fe faa0 	bl	8001638 <HAL_GetTick>
 80030f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	0798      	lsls	r0, r3, #30
 80030fe:	f57f af6d 	bpl.w	8002fdc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003102:	f7fe fa99 	bl	8001638 <HAL_GetTick>
 8003106:	1b80      	subs	r0, r0, r6
 8003108:	2802      	cmp	r0, #2
 800310a:	d9f6      	bls.n	80030fa <HAL_RCC_OscConfig+0x132>
 800310c:	e79d      	b.n	800304a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310e:	69aa      	ldr	r2, [r5, #24]
 8003110:	4e4a      	ldr	r6, [pc, #296]	@ (800323c <HAL_RCC_OscConfig+0x274>)
 8003112:	4b4b      	ldr	r3, [pc, #300]	@ (8003240 <HAL_RCC_OscConfig+0x278>)
 8003114:	b1e2      	cbz	r2, 8003150 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8003116:	2201      	movs	r2, #1
 8003118:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800311c:	f7fe fa8c 	bl	8001638 <HAL_GetTick>
 8003120:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003124:	079b      	lsls	r3, r3, #30
 8003126:	d50d      	bpl.n	8003144 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003128:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800312c:	4b45      	ldr	r3, [pc, #276]	@ (8003244 <HAL_RCC_OscConfig+0x27c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	fbb3 f3f2 	udiv	r3, r3, r2
 8003134:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003136:	bf00      	nop
  }
  while (Delay --);
 8003138:	9b01      	ldr	r3, [sp, #4]
 800313a:	1e5a      	subs	r2, r3, #1
 800313c:	9201      	str	r2, [sp, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f9      	bne.n	8003136 <HAL_RCC_OscConfig+0x16e>
 8003142:	e74f      	b.n	8002fe4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003144:	f7fe fa78 	bl	8001638 <HAL_GetTick>
 8003148:	1b00      	subs	r0, r0, r4
 800314a:	2802      	cmp	r0, #2
 800314c:	d9e9      	bls.n	8003122 <HAL_RCC_OscConfig+0x15a>
 800314e:	e77c      	b.n	800304a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8003150:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8003154:	f7fe fa70 	bl	8001638 <HAL_GetTick>
 8003158:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800315c:	079f      	lsls	r7, r3, #30
 800315e:	f57f af41 	bpl.w	8002fe4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003162:	f7fe fa69 	bl	8001638 <HAL_GetTick>
 8003166:	1b00      	subs	r0, r0, r4
 8003168:	2802      	cmp	r0, #2
 800316a:	d9f6      	bls.n	800315a <HAL_RCC_OscConfig+0x192>
 800316c:	e76d      	b.n	800304a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316e:	4c33      	ldr	r4, [pc, #204]	@ (800323c <HAL_RCC_OscConfig+0x274>)
 8003170:	69e3      	ldr	r3, [r4, #28]
 8003172:	00d8      	lsls	r0, r3, #3
 8003174:	d424      	bmi.n	80031c0 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8003176:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003178:	69e3      	ldr	r3, [r4, #28]
 800317a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800317e:	61e3      	str	r3, [r4, #28]
 8003180:	69e3      	ldr	r3, [r4, #28]
 8003182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318a:	4e2f      	ldr	r6, [pc, #188]	@ (8003248 <HAL_RCC_OscConfig+0x280>)
 800318c:	6833      	ldr	r3, [r6, #0]
 800318e:	05d9      	lsls	r1, r3, #23
 8003190:	d518      	bpl.n	80031c4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003192:	68eb      	ldr	r3, [r5, #12]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d126      	bne.n	80031e6 <HAL_RCC_OscConfig+0x21e>
 8003198:	6a23      	ldr	r3, [r4, #32]
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80031a0:	f7fe fa4a 	bl	8001638 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80031a8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031aa:	6a23      	ldr	r3, [r4, #32]
 80031ac:	079b      	lsls	r3, r3, #30
 80031ae:	d53f      	bpl.n	8003230 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	f43f af1b 	beq.w	8002fec <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b6:	69e3      	ldr	r3, [r4, #28]
 80031b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031bc:	61e3      	str	r3, [r4, #28]
 80031be:	e715      	b.n	8002fec <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80031c0:	2700      	movs	r7, #0
 80031c2:	e7e2      	b.n	800318a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c4:	6833      	ldr	r3, [r6, #0]
 80031c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ca:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80031cc:	f7fe fa34 	bl	8001638 <HAL_GetTick>
 80031d0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	6833      	ldr	r3, [r6, #0]
 80031d4:	05da      	lsls	r2, r3, #23
 80031d6:	d4dc      	bmi.n	8003192 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7fe fa2e 	bl	8001638 <HAL_GetTick>
 80031dc:	eba0 0008 	sub.w	r0, r0, r8
 80031e0:	2864      	cmp	r0, #100	@ 0x64
 80031e2:	d9f6      	bls.n	80031d2 <HAL_RCC_OscConfig+0x20a>
 80031e4:	e731      	b.n	800304a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e6:	b9ab      	cbnz	r3, 8003214 <HAL_RCC_OscConfig+0x24c>
 80031e8:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6223      	str	r3, [r4, #32]
 80031f4:	6a23      	ldr	r3, [r4, #32]
 80031f6:	f023 0304 	bic.w	r3, r3, #4
 80031fa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80031fc:	f7fe fa1c 	bl	8001638 <HAL_GetTick>
 8003200:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003202:	6a23      	ldr	r3, [r4, #32]
 8003204:	0798      	lsls	r0, r3, #30
 8003206:	d5d3      	bpl.n	80031b0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003208:	f7fe fa16 	bl	8001638 <HAL_GetTick>
 800320c:	1b80      	subs	r0, r0, r6
 800320e:	4540      	cmp	r0, r8
 8003210:	d9f7      	bls.n	8003202 <HAL_RCC_OscConfig+0x23a>
 8003212:	e71a      	b.n	800304a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003214:	2b05      	cmp	r3, #5
 8003216:	6a23      	ldr	r3, [r4, #32]
 8003218:	d103      	bne.n	8003222 <HAL_RCC_OscConfig+0x25a>
 800321a:	f043 0304 	orr.w	r3, r3, #4
 800321e:	6223      	str	r3, [r4, #32]
 8003220:	e7ba      	b.n	8003198 <HAL_RCC_OscConfig+0x1d0>
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	6223      	str	r3, [r4, #32]
 8003228:	6a23      	ldr	r3, [r4, #32]
 800322a:	f023 0304 	bic.w	r3, r3, #4
 800322e:	e7b6      	b.n	800319e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fe fa02 	bl	8001638 <HAL_GetTick>
 8003234:	1b80      	subs	r0, r0, r6
 8003236:	4540      	cmp	r0, r8
 8003238:	d9b7      	bls.n	80031aa <HAL_RCC_OscConfig+0x1e2>
 800323a:	e706      	b.n	800304a <HAL_RCC_OscConfig+0x82>
 800323c:	40021000 	.word	0x40021000
 8003240:	42420000 	.word	0x42420000
 8003244:	20000000 	.word	0x20000000
 8003248:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800324c:	4c2a      	ldr	r4, [pc, #168]	@ (80032f8 <HAL_RCC_OscConfig+0x330>)
 800324e:	6862      	ldr	r2, [r4, #4]
 8003250:	f002 020c 	and.w	r2, r2, #12
 8003254:	2a08      	cmp	r2, #8
 8003256:	d03e      	beq.n	80032d6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003258:	2200      	movs	r2, #0
 800325a:	2b02      	cmp	r3, #2
 800325c:	4b27      	ldr	r3, [pc, #156]	@ (80032fc <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 800325e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003260:	d12c      	bne.n	80032bc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8003262:	f7fe f9e9 	bl	8001638 <HAL_GetTick>
 8003266:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	0199      	lsls	r1, r3, #6
 800326c:	d420      	bmi.n	80032b0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800326e:	6a2b      	ldr	r3, [r5, #32]
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003274:	d105      	bne.n	8003282 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003276:	6862      	ldr	r2, [r4, #4]
 8003278:	68a9      	ldr	r1, [r5, #8]
 800327a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800327e:	430a      	orrs	r2, r1
 8003280:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003282:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8003284:	6862      	ldr	r2, [r4, #4]
 8003286:	430b      	orrs	r3, r1
 8003288:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800328c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800328e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003290:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8003292:	4b1a      	ldr	r3, [pc, #104]	@ (80032fc <HAL_RCC_OscConfig+0x334>)
 8003294:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003296:	f7fe f9cf 	bl	8001638 <HAL_GetTick>
 800329a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	019a      	lsls	r2, r3, #6
 80032a0:	f53f aea8 	bmi.w	8002ff4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fe f9c8 	bl	8001638 <HAL_GetTick>
 80032a8:	1b40      	subs	r0, r0, r5
 80032aa:	2802      	cmp	r0, #2
 80032ac:	d9f6      	bls.n	800329c <HAL_RCC_OscConfig+0x2d4>
 80032ae:	e6cc      	b.n	800304a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe f9c2 	bl	8001638 <HAL_GetTick>
 80032b4:	1b80      	subs	r0, r0, r6
 80032b6:	2802      	cmp	r0, #2
 80032b8:	d9d6      	bls.n	8003268 <HAL_RCC_OscConfig+0x2a0>
 80032ba:	e6c6      	b.n	800304a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80032bc:	f7fe f9bc 	bl	8001638 <HAL_GetTick>
 80032c0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	019b      	lsls	r3, r3, #6
 80032c6:	f57f ae95 	bpl.w	8002ff4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe f9b5 	bl	8001638 <HAL_GetTick>
 80032ce:	1b40      	subs	r0, r0, r5
 80032d0:	2802      	cmp	r0, #2
 80032d2:	d9f6      	bls.n	80032c2 <HAL_RCC_OscConfig+0x2fa>
 80032d4:	e6b9      	b.n	800304a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	f43f aea2 	beq.w	8003020 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 80032dc:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	6a2b      	ldr	r3, [r5, #32]
 80032e0:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80032e4:	429a      	cmp	r2, r3
 80032e6:	f47f ae9b 	bne.w	8003020 <HAL_RCC_OscConfig+0x58>
 80032ea:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032ec:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f0:	1ac0      	subs	r0, r0, r3
 80032f2:	bf18      	it	ne
 80032f4:	2001      	movne	r0, #1
 80032f6:	e6a9      	b.n	800304c <HAL_RCC_OscConfig+0x84>
 80032f8:	40021000 	.word	0x40021000
 80032fc:	42420000 	.word	0x42420000

08003300 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003300:	4a0d      	ldr	r2, [pc, #52]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x38>)
 8003302:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003304:	f003 010c 	and.w	r1, r3, #12
 8003308:	2908      	cmp	r1, #8
 800330a:	d112      	bne.n	8003332 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800330c:	480b      	ldr	r0, [pc, #44]	@ (800333c <HAL_RCC_GetSysClockFreq+0x3c>)
 800330e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003312:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003314:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003316:	d509      	bpl.n	800332c <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003318:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800331a:	4a09      	ldr	r2, [pc, #36]	@ (8003340 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800331c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003320:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003322:	4a08      	ldr	r2, [pc, #32]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x44>)
 8003324:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003326:	fbb0 f0f3 	udiv	r0, r0, r3
 800332a:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x48>)
 800332e:	4358      	muls	r0, r3
 8003330:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003332:	4803      	ldr	r0, [pc, #12]	@ (8003340 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	0800990e 	.word	0x0800990e
 8003340:	007a1200 	.word	0x007a1200
 8003344:	0800990c 	.word	0x0800990c
 8003348:	003d0900 	.word	0x003d0900

0800334c <HAL_RCC_ClockConfig>:
{
 800334c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003350:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003352:	4604      	mov	r4, r0
 8003354:	b910      	cbnz	r0, 800335c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003356:	2001      	movs	r0, #1
}
 8003358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800335c:	4a44      	ldr	r2, [pc, #272]	@ (8003470 <HAL_RCC_ClockConfig+0x124>)
 800335e:	6813      	ldr	r3, [r2, #0]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	428b      	cmp	r3, r1
 8003366:	d328      	bcc.n	80033ba <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003368:	6821      	ldr	r1, [r4, #0]
 800336a:	078e      	lsls	r6, r1, #30
 800336c:	d430      	bmi.n	80033d0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336e:	07ca      	lsls	r2, r1, #31
 8003370:	d443      	bmi.n	80033fa <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003372:	4a3f      	ldr	r2, [pc, #252]	@ (8003470 <HAL_RCC_ClockConfig+0x124>)
 8003374:	6813      	ldr	r3, [r2, #0]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	42ab      	cmp	r3, r5
 800337c:	d865      	bhi.n	800344a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337e:	6822      	ldr	r2, [r4, #0]
 8003380:	4d3c      	ldr	r5, [pc, #240]	@ (8003474 <HAL_RCC_ClockConfig+0x128>)
 8003382:	f012 0f04 	tst.w	r2, #4
 8003386:	d16c      	bne.n	8003462 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	0713      	lsls	r3, r2, #28
 800338a:	d506      	bpl.n	800339a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800338c:	686b      	ldr	r3, [r5, #4]
 800338e:	6922      	ldr	r2, [r4, #16]
 8003390:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003394:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003398:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800339a:	f7ff ffb1 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 800339e:	686b      	ldr	r3, [r5, #4]
 80033a0:	4a35      	ldr	r2, [pc, #212]	@ (8003478 <HAL_RCC_ClockConfig+0x12c>)
 80033a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80033a6:	5cd3      	ldrb	r3, [r2, r3]
 80033a8:	40d8      	lsrs	r0, r3
 80033aa:	4b34      	ldr	r3, [pc, #208]	@ (800347c <HAL_RCC_ClockConfig+0x130>)
 80033ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80033ae:	4b34      	ldr	r3, [pc, #208]	@ (8003480 <HAL_RCC_ClockConfig+0x134>)
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	f7fe f843 	bl	800143c <HAL_InitTick>
  return HAL_OK;
 80033b6:	2000      	movs	r0, #0
 80033b8:	e7ce      	b.n	8003358 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	6813      	ldr	r3, [r2, #0]
 80033bc:	f023 0307 	bic.w	r3, r3, #7
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c4:	6813      	ldr	r3, [r2, #0]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	428b      	cmp	r3, r1
 80033cc:	d1c3      	bne.n	8003356 <HAL_RCC_ClockConfig+0xa>
 80033ce:	e7cb      	b.n	8003368 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	4b28      	ldr	r3, [pc, #160]	@ (8003474 <HAL_RCC_ClockConfig+0x128>)
 80033d2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d6:	bf1e      	ittt	ne
 80033d8:	685a      	ldrne	r2, [r3, #4]
 80033da:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 80033de:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e2:	bf42      	ittt	mi
 80033e4:	685a      	ldrmi	r2, [r3, #4]
 80033e6:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 80033ea:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	68a0      	ldr	r0, [r4, #8]
 80033f0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80033f4:	4302      	orrs	r2, r0
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	e7b9      	b.n	800336e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033fa:	6862      	ldr	r2, [r4, #4]
 80033fc:	4e1d      	ldr	r6, [pc, #116]	@ (8003474 <HAL_RCC_ClockConfig+0x128>)
 80033fe:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003400:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	d11a      	bne.n	800343a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003404:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003408:	d0a5      	beq.n	8003356 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003410:	f023 0303 	bic.w	r3, r3, #3
 8003414:	4313      	orrs	r3, r2
 8003416:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003418:	f7fe f90e 	bl	8001638 <HAL_GetTick>
 800341c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	6873      	ldr	r3, [r6, #4]
 8003420:	6862      	ldr	r2, [r4, #4]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800342a:	d0a2      	beq.n	8003372 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fe f904 	bl	8001638 <HAL_GetTick>
 8003430:	1bc0      	subs	r0, r0, r7
 8003432:	4540      	cmp	r0, r8
 8003434:	d9f3      	bls.n	800341e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003436:	2003      	movs	r0, #3
 8003438:	e78e      	b.n	8003358 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343a:	2a02      	cmp	r2, #2
 800343c:	d102      	bne.n	8003444 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003442:	e7e1      	b.n	8003408 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003444:	f013 0f02 	tst.w	r3, #2
 8003448:	e7de      	b.n	8003408 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	f023 0307 	bic.w	r3, r3, #7
 8003450:	432b      	orrs	r3, r5
 8003452:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003454:	6813      	ldr	r3, [r2, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	42ab      	cmp	r3, r5
 800345c:	f47f af7b 	bne.w	8003356 <HAL_RCC_ClockConfig+0xa>
 8003460:	e78d      	b.n	800337e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003462:	686b      	ldr	r3, [r5, #4]
 8003464:	68e1      	ldr	r1, [r4, #12]
 8003466:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800346a:	430b      	orrs	r3, r1
 800346c:	606b      	str	r3, [r5, #4]
 800346e:	e78b      	b.n	8003388 <HAL_RCC_ClockConfig+0x3c>
 8003470:	40022000 	.word	0x40022000
 8003474:	40021000 	.word	0x40021000
 8003478:	080098fc 	.word	0x080098fc
 800347c:	20000000 	.word	0x20000000
 8003480:	20000008 	.word	0x20000008

08003484 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003484:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003486:	4a05      	ldr	r2, [pc, #20]	@ (800349c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	4a03      	ldr	r2, [pc, #12]	@ (80034a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003492:	6810      	ldr	r0, [r2, #0]
}
 8003494:	40d8      	lsrs	r0, r3
 8003496:	4770      	bx	lr
 8003498:	40021000 	.word	0x40021000
 800349c:	080098f4 	.word	0x080098f4
 80034a0:	20000000 	.word	0x20000000

080034a4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034a4:	4b04      	ldr	r3, [pc, #16]	@ (80034b8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80034a6:	4a05      	ldr	r2, [pc, #20]	@ (80034bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80034ae:	5cd3      	ldrb	r3, [r2, r3]
 80034b0:	4a03      	ldr	r2, [pc, #12]	@ (80034c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80034b2:	6810      	ldr	r0, [r2, #0]
}
 80034b4:	40d8      	lsrs	r0, r3
 80034b6:	4770      	bx	lr
 80034b8:	40021000 	.word	0x40021000
 80034bc:	080098f4 	.word	0x080098f4
 80034c0:	20000000 	.word	0x20000000

080034c4 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034c4:	230f      	movs	r3, #15
 80034c6:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <HAL_RCC_GetClockConfig+0x34>)
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	f002 0203 	and.w	r2, r2, #3
 80034d0:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80034d8:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80034e0:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	08db      	lsrs	r3, r3, #3
 80034e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034ea:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034ec:	4b03      	ldr	r3, [pc, #12]	@ (80034fc <HAL_RCC_GetClockConfig+0x38>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	600b      	str	r3, [r1, #0]
}
 80034f6:	4770      	bx	lr
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40022000 	.word	0x40022000

08003500 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003500:	4770      	bx	lr
	...

08003504 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003504:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003508:	2b01      	cmp	r3, #1
 800350a:	d120      	bne.n	800354e <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	2302      	movs	r3, #2
 800350e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003512:	6803      	ldr	r3, [r0, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351c:	4a0d      	ldr	r2, [pc, #52]	@ (8003554 <HAL_TIM_Base_Start_IT+0x50>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00a      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x34>
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003526:	d007      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x34>
 8003528:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x34>
 8003530:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003534:	4293      	cmp	r3, r2
 8003536:	d104      	bne.n	8003542 <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353e:	2a06      	cmp	r2, #6
 8003540:	d003      	beq.n	800354a <HAL_TIM_Base_Start_IT+0x46>
    {
      __HAL_TIM_ENABLE(htim);
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800354a:	2000      	movs	r0, #0
 800354c:	4770      	bx	lr
    return HAL_ERROR;
 800354e:	2001      	movs	r0, #1
}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40012c00 	.word	0x40012c00

08003558 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003558:	4770      	bx	lr

0800355a <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800355a:	4770      	bx	lr

0800355c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800355c:	4770      	bx	lr

0800355e <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800355e:	4770      	bx	lr

08003560 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8003560:	6803      	ldr	r3, [r0, #0]
{
 8003562:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003564:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003566:	691e      	ldr	r6, [r3, #16]
{
 8003568:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800356a:	07b1      	lsls	r1, r6, #30
 800356c:	d50d      	bpl.n	800358a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800356e:	07aa      	lsls	r2, r5, #30
 8003570:	d50b      	bpl.n	800358a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003572:	f06f 0202 	mvn.w	r2, #2
 8003576:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003578:	2201      	movs	r2, #1
 800357a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	079b      	lsls	r3, r3, #30
 8003580:	d069      	beq.n	8003656 <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 8003582:	f7ff ffea 	bl	800355a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003586:	2300      	movs	r3, #0
 8003588:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800358a:	0771      	lsls	r1, r6, #29
 800358c:	d510      	bpl.n	80035b0 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800358e:	076a      	lsls	r2, r5, #29
 8003590:	d50e      	bpl.n	80035b0 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003592:	f06f 0204 	mvn.w	r2, #4
 8003596:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8003598:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800359a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800359c:	2202      	movs	r2, #2
 800359e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80035a6:	d05c      	beq.n	8003662 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80035a8:	f7ff ffd7 	bl	800355a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ac:	2300      	movs	r3, #0
 80035ae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035b0:	0733      	lsls	r3, r6, #28
 80035b2:	d50f      	bpl.n	80035d4 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035b4:	0728      	lsls	r0, r5, #28
 80035b6:	d50d      	bpl.n	80035d4 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035b8:	f06f 0208 	mvn.w	r2, #8
 80035bc:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 80035be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c2:	2204      	movs	r2, #4
 80035c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	0799      	lsls	r1, r3, #30
 80035ca:	d050      	beq.n	800366e <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 80035cc:	f7ff ffc5 	bl	800355a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d0:	2300      	movs	r3, #0
 80035d2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035d4:	06f2      	lsls	r2, r6, #27
 80035d6:	d510      	bpl.n	80035fa <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035d8:	06eb      	lsls	r3, r5, #27
 80035da:	d50e      	bpl.n	80035fa <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035dc:	f06f 0210 	mvn.w	r2, #16
 80035e0:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e6:	2208      	movs	r2, #8
 80035e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80035f0:	d043      	beq.n	800367a <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 80035f2:	f7ff ffb2 	bl	800355a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	2300      	movs	r3, #0
 80035f8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035fa:	07f0      	lsls	r0, r6, #31
 80035fc:	d508      	bpl.n	8003610 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035fe:	07e9      	lsls	r1, r5, #31
 8003600:	d506      	bpl.n	8003610 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003602:	f06f 0201 	mvn.w	r2, #1
 8003606:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003608:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800360a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800360c:	f7fd fe76 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003610:	0632      	lsls	r2, r6, #24
 8003612:	d508      	bpl.n	8003626 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003614:	062b      	lsls	r3, r5, #24
 8003616:	d506      	bpl.n	8003626 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003618:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800361c:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 800361e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003620:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003622:	f000 f890 	bl	8003746 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003626:	0670      	lsls	r0, r6, #25
 8003628:	d508      	bpl.n	800363c <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800362a:	0669      	lsls	r1, r5, #25
 800362c:	d506      	bpl.n	800363c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800362e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003632:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 8003634:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003636:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003638:	f7ff ff91 	bl	800355e <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800363c:	06b2      	lsls	r2, r6, #26
 800363e:	d522      	bpl.n	8003686 <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003640:	06ab      	lsls	r3, r5, #26
 8003642:	d520      	bpl.n	8003686 <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003644:	f06f 0220 	mvn.w	r2, #32
 8003648:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 800364a:	4620      	mov	r0, r4
}
 800364c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003650:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003652:	f000 b877 	b.w	8003744 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	f7ff ff7f 	bl	8003558 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365a:	4620      	mov	r0, r4
 800365c:	f7ff ff7e 	bl	800355c <HAL_TIM_PWM_PulseFinishedCallback>
 8003660:	e791      	b.n	8003586 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	f7ff ff79 	bl	8003558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003666:	4620      	mov	r0, r4
 8003668:	f7ff ff78 	bl	800355c <HAL_TIM_PWM_PulseFinishedCallback>
 800366c:	e79e      	b.n	80035ac <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	f7ff ff73 	bl	8003558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003672:	4620      	mov	r0, r4
 8003674:	f7ff ff72 	bl	800355c <HAL_TIM_PWM_PulseFinishedCallback>
 8003678:	e7aa      	b.n	80035d0 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	f7ff ff6d 	bl	8003558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367e:	4620      	mov	r0, r4
 8003680:	f7ff ff6c 	bl	800355c <HAL_TIM_PWM_PulseFinishedCallback>
 8003684:	e7b7      	b.n	80035f6 <HAL_TIM_IRQHandler+0x96>
}
 8003686:	bd70      	pop	{r4, r5, r6, pc}

08003688 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003688:	4a17      	ldr	r2, [pc, #92]	@ (80036e8 <TIM_Base_SetConfig+0x60>)
  tmpcr1 = TIMx->CR1;
 800368a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800368c:	4290      	cmp	r0, r2
 800368e:	d00a      	beq.n	80036a6 <TIM_Base_SetConfig+0x1e>
 8003690:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003694:	d007      	beq.n	80036a6 <TIM_Base_SetConfig+0x1e>
 8003696:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800369a:	4290      	cmp	r0, r2
 800369c:	d003      	beq.n	80036a6 <TIM_Base_SetConfig+0x1e>
 800369e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80036a2:	4290      	cmp	r0, r2
 80036a4:	d107      	bne.n	80036b6 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80036a6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80036ac:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ae:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80036b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036b4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b6:	694a      	ldr	r2, [r1, #20]
 80036b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036bc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80036be:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c0:	688b      	ldr	r3, [r1, #8]
 80036c2:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c4:	680b      	ldr	r3, [r1, #0]
 80036c6:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c8:	4b07      	ldr	r3, [pc, #28]	@ (80036e8 <TIM_Base_SetConfig+0x60>)
 80036ca:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036cc:	bf04      	itt	eq
 80036ce:	690b      	ldreq	r3, [r1, #16]
 80036d0:	6303      	streq	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d2:	2301      	movs	r3, #1
 80036d4:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036d6:	6903      	ldr	r3, [r0, #16]
 80036d8:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036da:	bf42      	ittt	mi
 80036dc:	6903      	ldrmi	r3, [r0, #16]
 80036de:	f023 0301 	bicmi.w	r3, r3, #1
 80036e2:	6103      	strmi	r3, [r0, #16]
  }
}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40012c00 	.word	0x40012c00

080036ec <HAL_TIM_Base_Init>:
{
 80036ec:	b510      	push	{r4, lr}
  if (htim == NULL)
 80036ee:	4604      	mov	r4, r0
 80036f0:	b330      	cbz	r0, 8003740 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80036f2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80036f6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80036fa:	b91b      	cbnz	r3, 8003704 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80036fc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003700:	f7ff fefe 	bl	8003500 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003706:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370c:	1d21      	adds	r1, r4, #4
 800370e:	f7ff ffbb 	bl	8003688 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003712:	2301      	movs	r3, #1
  return HAL_OK;
 8003714:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003716:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800371e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003722:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003726:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800372e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003732:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003736:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800373a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800373e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003740:	2001      	movs	r0, #1
 8003742:	e7fc      	b.n	800373e <HAL_TIM_Base_Init+0x52>

08003744 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003744:	4770      	bx	lr

08003746 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003746:	4770      	bx	lr

08003748 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003748:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	f102 030c 	add.w	r3, r2, #12
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	320c      	adds	r2, #12
 8003758:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800375c:	6802      	ldr	r2, [r0, #0]
 800375e:	2900      	cmp	r1, #0
 8003760:	d1f2      	bne.n	8003748 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	f102 0314 	add.w	r3, r2, #20
 8003766:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	f102 0c14 	add.w	ip, r2, #20
 8003772:	e84c 3100 	strex	r1, r3, [ip]
 8003776:	2900      	cmp	r1, #0
 8003778:	d1f3      	bne.n	8003762 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800377a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800377c:	2b01      	cmp	r3, #1
 800377e:	d10b      	bne.n	8003798 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	f102 030c 	add.w	r3, r2, #12
 8003784:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003788:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	f102 0c0c 	add.w	ip, r2, #12
 8003790:	e84c 3100 	strex	r1, r3, [ip]
 8003794:	2900      	cmp	r1, #0
 8003796:	d1f3      	bne.n	8003780 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003798:	2320      	movs	r3, #32
 800379a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379e:	2300      	movs	r3, #0
 80037a0:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80037a2:	4770      	bx	lr

080037a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a4:	b510      	push	{r4, lr}
 80037a6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a8:	6803      	ldr	r3, [r0, #0]
 80037aa:	68c1      	ldr	r1, [r0, #12]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80037b2:	430a      	orrs	r2, r1
 80037b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037b6:	6882      	ldr	r2, [r0, #8]
 80037b8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80037ba:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037bc:	4302      	orrs	r2, r0
 80037be:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80037c0:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 80037c4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037c8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80037ca:	430a      	orrs	r2, r1
 80037cc:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	69a1      	ldr	r1, [r4, #24]
 80037d2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80037d6:	430a      	orrs	r2, r1
 80037d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037da:	4a0e      	ldr	r2, [pc, #56]	@ (8003814 <UART_SetConfig+0x70>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d115      	bne.n	800380c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037e0:	f7ff fe60 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e4:	2319      	movs	r3, #25
 80037e6:	4343      	muls	r3, r0
 80037e8:	6862      	ldr	r2, [r4, #4]
 80037ea:	6820      	ldr	r0, [r4, #0]
 80037ec:	0092      	lsls	r2, r2, #2
 80037ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80037f2:	2264      	movs	r2, #100	@ 0x64
 80037f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80037f8:	fb02 3311 	mls	r3, r2, r1, r3
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	3332      	adds	r3, #50	@ 0x32
 8003800:	fbb3 f3f2 	udiv	r3, r3, r2
 8003804:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003808:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800380a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800380c:	f7ff fe3a 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 8003810:	e7e8      	b.n	80037e4 <UART_SetConfig+0x40>
 8003812:	bf00      	nop
 8003814:	40013800 	.word	0x40013800

08003818 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8003818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800381a:	4605      	mov	r5, r0
 800381c:	460c      	mov	r4, r1
 800381e:	4617      	mov	r7, r2
 8003820:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003822:	682a      	ldr	r2, [r5, #0]
 8003824:	6813      	ldr	r3, [r2, #0]
 8003826:	ea34 0303 	bics.w	r3, r4, r3
 800382a:	d101      	bne.n	8003830 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 800382c:	2000      	movs	r0, #0
 800382e:	e021      	b.n	8003874 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8003830:	1c70      	adds	r0, r6, #1
 8003832:	d0f7      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003834:	f7fd ff00 	bl	8001638 <HAL_GetTick>
 8003838:	1bc0      	subs	r0, r0, r7
 800383a:	4286      	cmp	r6, r0
 800383c:	d31c      	bcc.n	8003878 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 800383e:	b1de      	cbz	r6, 8003878 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003840:	682b      	ldr	r3, [r5, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	0751      	lsls	r1, r2, #29
 8003846:	d5ec      	bpl.n	8003822 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8003848:	2c80      	cmp	r4, #128	@ 0x80
 800384a:	d0ea      	beq.n	8003822 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800384c:	2c40      	cmp	r4, #64	@ 0x40
 800384e:	d0e8      	beq.n	8003822 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	0712      	lsls	r2, r2, #28
 8003854:	d5e5      	bpl.n	8003822 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003856:	2400      	movs	r4, #0
 8003858:	9401      	str	r4, [sp, #4]
 800385a:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 800385c:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 800385e:	9201      	str	r2, [sp, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8003866:	f7ff ff6f 	bl	8003748 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800386a:	2308      	movs	r3, #8
          return HAL_ERROR;
 800386c:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800386e:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8003870:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
}
 8003874:	b003      	add	sp, #12
 8003876:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003878:	2003      	movs	r0, #3
 800387a:	e7fb      	b.n	8003874 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

0800387c <HAL_UART_Init>:
{
 800387c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800387e:	4604      	mov	r4, r0
 8003880:	b348      	cbz	r0, 80038d6 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003882:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003886:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800388a:	b91b      	cbnz	r3, 8003894 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800388c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003890:	f7fd fda4 	bl	80013dc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003894:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8003896:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003898:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800389c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800389e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80038a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038a4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80038a6:	f7ff ff7d 	bl	80037a4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038aa:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ac:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b6:	695a      	ldr	r2, [r3, #20]
 80038b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038bc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038c4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80038c6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038ca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038ce:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d2:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80038d4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80038d6:	2001      	movs	r0, #1
 80038d8:	e7fc      	b.n	80038d4 <HAL_UART_Init+0x58>

080038da <HAL_UART_Transmit>:
{
 80038da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038de:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80038e0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80038e4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80038e6:	2b20      	cmp	r3, #32
{
 80038e8:	460e      	mov	r6, r1
 80038ea:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80038ec:	d13f      	bne.n	800396e <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 80038ee:	2900      	cmp	r1, #0
 80038f0:	d03f      	beq.n	8003972 <HAL_UART_Transmit+0x98>
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	d03d      	beq.n	8003972 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038f6:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f8:	2500      	movs	r5, #0
 80038fa:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038fc:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8003900:	f7fd fe9a 	bl	8001638 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003904:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003906:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 800390c:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800390e:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003910:	d103      	bne.n	800391a <HAL_UART_Transmit+0x40>
 8003912:	6923      	ldr	r3, [r4, #16]
 8003914:	b90b      	cbnz	r3, 800391a <HAL_UART_Transmit+0x40>
      pdata16bits = (const uint16_t *) pData;
 8003916:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003918:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800391a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800391c:	b29b      	uxth	r3, r3
 800391e:	b953      	cbnz	r3, 8003936 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003920:	4643      	mov	r3, r8
 8003922:	464a      	mov	r2, r9
 8003924:	2140      	movs	r1, #64	@ 0x40
 8003926:	4620      	mov	r0, r4
 8003928:	f7ff ff76 	bl	8003818 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800392c:	2320      	movs	r3, #32
 800392e:	b950      	cbnz	r0, 8003946 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8003930:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8003934:	e00a      	b.n	800394c <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003936:	4643      	mov	r3, r8
 8003938:	464a      	mov	r2, r9
 800393a:	2180      	movs	r1, #128	@ 0x80
 800393c:	4620      	mov	r0, r4
 800393e:	f7ff ff6b 	bl	8003818 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003942:	b128      	cbz	r0, 8003950 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8003944:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8003946:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8003948:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800394c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003950:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003952:	b94e      	cbnz	r6, 8003968 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003954:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003958:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800395c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800395e:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8003960:	3901      	subs	r1, #1
 8003962:	b289      	uxth	r1, r1
 8003964:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8003966:	e7d8      	b.n	800391a <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003968:	f816 3b01 	ldrb.w	r3, [r6], #1
 800396c:	e7f6      	b.n	800395c <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800396e:	2002      	movs	r0, #2
 8003970:	e7ec      	b.n	800394c <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8003972:	2001      	movs	r0, #1
 8003974:	e7ea      	b.n	800394c <HAL_UART_Transmit+0x72>
	...

08003978 <LPS25HB_Initialise>:
/**
 * @brief Initialize the LPS25HB sensor.
 * @param i2cHandle The I2C handle to use.
 * @return 0 on success, 1 on error.
 */
uint8_t LPS25HB_Initialise(I2C_HandleTypeDef * i2cHandle) {
 8003978:	b5f0      	push	{r4, r5, r6, r7, lr}

  // Check the ID of the sensor.
  HAL_I2C_Mem_Read(i2cHandle, LPS25HB_ADDRESS, LPS25HB_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, & chipID, 1, 100);
 800397a:	2401      	movs	r4, #1
 800397c:	2664      	movs	r6, #100	@ 0x64
 800397e:	4f10      	ldr	r7, [pc, #64]	@ (80039c0 <LPS25HB_Initialise+0x48>)
uint8_t LPS25HB_Initialise(I2C_HandleTypeDef * i2cHandle) {
 8003980:	b085      	sub	sp, #20
  HAL_I2C_Mem_Read(i2cHandle, LPS25HB_ADDRESS, LPS25HB_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, & chipID, 1, 100);
 8003982:	4623      	mov	r3, r4
 8003984:	220f      	movs	r2, #15
 8003986:	21b8      	movs	r1, #184	@ 0xb8
 8003988:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800398c:	9700      	str	r7, [sp, #0]
uint8_t LPS25HB_Initialise(I2C_HandleTypeDef * i2cHandle) {
 800398e:	4605      	mov	r5, r0
  HAL_I2C_Mem_Read(i2cHandle, LPS25HB_ADDRESS, LPS25HB_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, & chipID, 1, 100);
 8003990:	f7fe fb12 	bl	8001fb8 <HAL_I2C_Mem_Read>

  if (chipID != LPS25HB_DEVICE_ID) {
 8003994:	783b      	ldrb	r3, [r7, #0]
 8003996:	2bbd      	cmp	r3, #189	@ 0xbd
 8003998:	d110      	bne.n	80039bc <LPS25HB_Initialise+0x44>
    return 1; // If the ID does not match, initialization is aborted.
  } 

	// Power on the sensor.
  datatowrite = (0x01 << 7); //power on PD
 800399a:	2280      	movs	r2, #128	@ 0x80
 800399c:	4b09      	ldr	r3, [pc, #36]	@ (80039c4 <LPS25HB_Initialise+0x4c>)
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 800399e:	21b8      	movs	r1, #184	@ 0xb8
  datatowrite = (0x01 << 7); //power on PD
 80039a0:	701a      	strb	r2, [r3, #0]
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 80039a2:	4628      	mov	r0, r5
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2220      	movs	r2, #32
 80039a8:	4623      	mov	r3, r4
 80039aa:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80039ae:	f7fe fa73 	bl	8001e98 <HAL_I2C_Mem_Write>
 80039b2:	3800      	subs	r0, #0
 80039b4:	bf18      	it	ne
 80039b6:	2001      	movne	r0, #1
    return 1;
  }
  return 0;
}
 80039b8:	b005      	add	sp, #20
 80039ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1; // If the ID does not match, initialization is aborted.
 80039bc:	4620      	mov	r0, r4
 80039be:	e7fb      	b.n	80039b8 <LPS25HB_Initialise+0x40>
 80039c0:	2000031e 	.word	0x2000031e
 80039c4:	2000031d 	.word	0x2000031d

080039c8 <LPS25HB_Measure_Temperature_IT>:
/**
 * @brief Measure the temperature using the LPS25HB sensor.
 * @param i2cHandle The I2C handle to use.
 * @return 0 on success, 1 on error.
 */
uint8_t LPS25HB_Measure_Temperature_IT(I2C_HandleTypeDef * i2cHandle) {
 80039c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	// Set one shot mode.
  datatowrite = (0x01 << 0); // One shot mode
 80039ca:	2501      	movs	r5, #1
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 80039cc:	2264      	movs	r2, #100	@ 0x64
  datatowrite = (0x01 << 0); // One shot mode
 80039ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003a08 <LPS25HB_Measure_Temperature_IT+0x40>)
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 80039d0:	21b8      	movs	r1, #184	@ 0xb8
  datatowrite = (0x01 << 0); // One shot mode
 80039d2:	701d      	strb	r5, [r3, #0]
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 80039d4:	e9cd 5201 	strd	r5, r2, [sp, #4]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2221      	movs	r2, #33	@ 0x21
 80039dc:	462b      	mov	r3, r5
uint8_t LPS25HB_Measure_Temperature_IT(I2C_HandleTypeDef * i2cHandle) {
 80039de:	4606      	mov	r6, r0
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 80039e0:	f7fe fa5a 	bl	8001e98 <HAL_I2C_Mem_Write>
 80039e4:	4604      	mov	r4, r0
 80039e6:	b960      	cbnz	r0, 8003a02 <LPS25HB_Measure_Temperature_IT+0x3a>
    return 1;
  }
	
  // Start the temperature measurement.
  HAL_I2C_Mem_Read_IT(i2cHandle, LPS25HB_ADDRESS, LPS25HB_TEMP_OUT_L | 0x80, I2C_MEMADD_SIZE_8BIT, Temp_RAW, 2);
 80039e8:	2302      	movs	r3, #2
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	4b07      	ldr	r3, [pc, #28]	@ (8003a0c <LPS25HB_Measure_Temperature_IT+0x44>)
 80039ee:	22ab      	movs	r2, #171	@ 0xab
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	21b8      	movs	r1, #184	@ 0xb8
 80039f4:	462b      	mov	r3, r5
 80039f6:	4630      	mov	r0, r6
 80039f8:	f7fe fc22 	bl	8002240 <HAL_I2C_Mem_Read_IT>

	return 0;
}
 80039fc:	4620      	mov	r0, r4
 80039fe:	b004      	add	sp, #16
 8003a00:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
 8003a02:	462c      	mov	r4, r5
 8003a04:	e7fa      	b.n	80039fc <LPS25HB_Measure_Temperature_IT+0x34>
 8003a06:	bf00      	nop
 8003a08:	2000031d 	.word	0x2000031d
 8003a0c:	2000031b 	.word	0x2000031b

08003a10 <LPS25HB_Measure_Pressure_IT>:

uint8_t	LPS25HB_Measure_Pressure_IT(I2C_HandleTypeDef *i2cHandle) {
 8003a10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	// Set one shot mode.
  datatowrite = (0x01 << 0); // One shot mode
 8003a12:	2501      	movs	r5, #1
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 8003a14:	2264      	movs	r2, #100	@ 0x64
  datatowrite = (0x01 << 0); // One shot mode
 8003a16:	4b0e      	ldr	r3, [pc, #56]	@ (8003a50 <LPS25HB_Measure_Pressure_IT+0x40>)
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 8003a18:	21b8      	movs	r1, #184	@ 0xb8
  datatowrite = (0x01 << 0); // One shot mode
 8003a1a:	701d      	strb	r5, [r3, #0]
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 8003a1c:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2221      	movs	r2, #33	@ 0x21
 8003a24:	462b      	mov	r3, r5
uint8_t	LPS25HB_Measure_Pressure_IT(I2C_HandleTypeDef *i2cHandle) {
 8003a26:	4606      	mov	r6, r0
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 8003a28:	f7fe fa36 	bl	8001e98 <HAL_I2C_Mem_Write>
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	b960      	cbnz	r0, 8003a4a <LPS25HB_Measure_Pressure_IT+0x3a>
    return 1;
  }

  // Start the pressure measurement.
  HAL_I2C_Mem_Read_IT(i2cHandle, LPS25HB_ADDRESS, LPS25HB_PRESS_OUT_XL | 0x80, I2C_MEMADD_SIZE_8BIT, Press_RAW, 3);
 8003a30:	2303      	movs	r3, #3
 8003a32:	9301      	str	r3, [sp, #4]
 8003a34:	4b07      	ldr	r3, [pc, #28]	@ (8003a54 <LPS25HB_Measure_Pressure_IT+0x44>)
 8003a36:	22a8      	movs	r2, #168	@ 0xa8
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	21b8      	movs	r1, #184	@ 0xb8
 8003a3c:	462b      	mov	r3, r5
 8003a3e:	4630      	mov	r0, r6
 8003a40:	f7fe fbfe 	bl	8002240 <HAL_I2C_Mem_Read_IT>

	return 0;
}
 8003a44:	4620      	mov	r0, r4
 8003a46:	b004      	add	sp, #16
 8003a48:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
 8003a4a:	462c      	mov	r4, r5
 8003a4c:	e7fa      	b.n	8003a44 <LPS25HB_Measure_Pressure_IT+0x34>
 8003a4e:	bf00      	nop
 8003a50:	2000031d 	.word	0x2000031d
 8003a54:	20000318 	.word	0x20000318

08003a58 <HAL_I2C_MemRxCpltCallback>:
/**
 * @brief This function is called when the I2C read operation is complete.
 * @param hi2c The I2C handle.
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
  if (hi2c->Instance == I2C2) {
 8003a58:	6802      	ldr	r2, [r0, #0]
 8003a5a:	4b19      	ldr	r3, [pc, #100]	@ (8003ac0 <HAL_I2C_MemRxCpltCallback+0x68>)
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8003a5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hi2c->Instance == I2C2) {
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d118      	bne.n	8003a94 <HAL_I2C_MemRxCpltCallback+0x3c>
      uint8_t msg;
    // The read operation for I2C2 is complete.
	if (Left_Button_State == TEMP){
 8003a62:	4b18      	ldr	r3, [pc, #96]	@ (8003ac4 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8003a64:	781c      	ldrb	r4, [r3, #0]
 8003a66:	b9bc      	cbnz	r4, 8003a98 <HAL_I2C_MemRxCpltCallback+0x40>
	    for(int i=0; i<2; i++){
		msg = Temp_RAW[i];
 8003a68:	4e17      	ldr	r6, [pc, #92]	@ (8003ac8 <HAL_I2C_MemRxCpltCallback+0x70>)
		osMessageQueuePut(SensorRAWQueueHandle, &msg, 0, 0);
 8003a6a:	4d18      	ldr	r5, [pc, #96]	@ (8003acc <HAL_I2C_MemRxCpltCallback+0x74>)
		msg = Temp_RAW[i];
 8003a6c:	7833      	ldrb	r3, [r6, #0]
		osMessageQueuePut(SensorRAWQueueHandle, &msg, 0, 0);
 8003a6e:	4622      	mov	r2, r4
		msg = Temp_RAW[i];
 8003a70:	f88d 3007 	strb.w	r3, [sp, #7]
		osMessageQueuePut(SensorRAWQueueHandle, &msg, 0, 0);
 8003a74:	f10d 0107 	add.w	r1, sp, #7
 8003a78:	4623      	mov	r3, r4
 8003a7a:	6828      	ldr	r0, [r5, #0]
 8003a7c:	f000 f8f1 	bl	8003c62 <osMessageQueuePut>
		msg = Temp_RAW[i];
 8003a80:	7873      	ldrb	r3, [r6, #1]
		osMessageQueuePut(SensorRAWQueueHandle, &msg, 0, 0);
 8003a82:	4622      	mov	r2, r4
		msg = Temp_RAW[i];
 8003a84:	f88d 3007 	strb.w	r3, [sp, #7]
		osMessageQueuePut(SensorRAWQueueHandle, &msg, 0, 0);
 8003a88:	6828      	ldr	r0, [r5, #0]
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	f10d 0107 	add.w	r1, sp, #7
 8003a90:	f000 f8e7 	bl	8003c62 <osMessageQueuePut>
		msg = Press_RAW[i];
		osMessageQueuePut(SensorRAWQueueHandle, &msg, 0, 0);
	    }
	}
  }
}
 8003a94:	b002      	add	sp, #8
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
	else if(Left_Button_State == PRESS){
 8003a98:	2c01      	cmp	r4, #1
 8003a9a:	d1fb      	bne.n	8003a94 <HAL_I2C_MemRxCpltCallback+0x3c>
	    for(int i=0; i<3; i++){
 8003a9c:	2400      	movs	r4, #0
 8003a9e:	4d0c      	ldr	r5, [pc, #48]	@ (8003ad0 <HAL_I2C_MemRxCpltCallback+0x78>)
		osMessageQueuePut(SensorRAWQueueHandle, &msg, 0, 0);
 8003aa0:	4e0a      	ldr	r6, [pc, #40]	@ (8003acc <HAL_I2C_MemRxCpltCallback+0x74>)
		msg = Press_RAW[i];
 8003aa2:	f815 3b01 	ldrb.w	r3, [r5], #1
		osMessageQueuePut(SensorRAWQueueHandle, &msg, 0, 0);
 8003aa6:	6830      	ldr	r0, [r6, #0]
		msg = Press_RAW[i];
 8003aa8:	f88d 3007 	strb.w	r3, [sp, #7]
		osMessageQueuePut(SensorRAWQueueHandle, &msg, 0, 0);
 8003aac:	2300      	movs	r3, #0
 8003aae:	f10d 0107 	add.w	r1, sp, #7
 8003ab2:	461a      	mov	r2, r3
	    for(int i=0; i<3; i++){
 8003ab4:	3401      	adds	r4, #1
		osMessageQueuePut(SensorRAWQueueHandle, &msg, 0, 0);
 8003ab6:	f000 f8d4 	bl	8003c62 <osMessageQueuePut>
	    for(int i=0; i<3; i++){
 8003aba:	2c03      	cmp	r4, #3
 8003abc:	d1f1      	bne.n	8003aa2 <HAL_I2C_MemRxCpltCallback+0x4a>
 8003abe:	e7e9      	b.n	8003a94 <HAL_I2C_MemRxCpltCallback+0x3c>
 8003ac0:	40005800 	.word	0x40005800
 8003ac4:	2000021c 	.word	0x2000021c
 8003ac8:	2000031b 	.word	0x2000031b
 8003acc:	20000220 	.word	0x20000220
 8003ad0:	20000318 	.word	0x20000318

08003ad4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ad4:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8003ad6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003ada:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003adc:	f001 fb14 	bl	8005108 <xTaskGetSchedulerState>
 8003ae0:	2801      	cmp	r0, #1
 8003ae2:	d003      	beq.n	8003aec <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8003ae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003ae8:	f001 bdd2 	b.w	8005690 <xPortSysTickHandler>
}
 8003aec:	bd08      	pop	{r3, pc}
	...

08003af0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003af0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003af4:	b92b      	cbnz	r3, 8003b02 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8003af6:	4b06      	ldr	r3, [pc, #24]	@ (8003b10 <osKernelInitialize+0x20>)
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	b928      	cbnz	r0, 8003b08 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b00:	4770      	bx	lr
    stat = osErrorISR;
 8003b02:	f06f 0005 	mvn.w	r0, #5
 8003b06:	4770      	bx	lr
    } else {
      stat = osError;
 8003b08:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000fd8 	.word	0x20000fd8

08003b14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b14:	b510      	push	{r4, lr}
 8003b16:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b1a:	b95c      	cbnz	r4, 8003b34 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8003b1c:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <osKernelStart+0x2c>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	2a01      	cmp	r2, #1
 8003b22:	d10a      	bne.n	8003b3a <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b24:	4a07      	ldr	r2, [pc, #28]	@ (8003b44 <osKernelStart+0x30>)
 8003b26:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b28:	2202      	movs	r2, #2
 8003b2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b2c:	f000 ff54 	bl	80049d8 <vTaskStartScheduler>
      stat = osOK;
 8003b30:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8003b32:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003b34:	f06f 0005 	mvn.w	r0, #5
 8003b38:	e7fb      	b.n	8003b32 <osKernelStart+0x1e>
      stat = osError;
 8003b3a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8003b3e:	e7f8      	b.n	8003b32 <osKernelStart+0x1e>
 8003b40:	20000fd8 	.word	0x20000fd8
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4a:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b4c:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b4e:	b087      	sub	sp, #28
 8003b50:	460b      	mov	r3, r1
  hTask = NULL;
 8003b52:	9205      	str	r2, [sp, #20]
 8003b54:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8003b58:	b9fa      	cbnz	r2, 8003b9a <osThreadNew+0x52>
 8003b5a:	b1f0      	cbz	r0, 8003b9a <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8003b5c:	b35c      	cbz	r4, 8003bb6 <osThreadNew+0x6e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003b5e:	69a5      	ldr	r5, [r4, #24]
 8003b60:	b125      	cbz	r5, 8003b6c <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b62:	1e69      	subs	r1, r5, #1
 8003b64:	2937      	cmp	r1, #55	@ 0x37
 8003b66:	d902      	bls.n	8003b6e <osThreadNew+0x26>
        return (NULL);
 8003b68:	2000      	movs	r0, #0
 8003b6a:	e017      	b.n	8003b9c <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 8003b6c:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b6e:	6862      	ldr	r2, [r4, #4]
 8003b70:	07d2      	lsls	r2, r2, #31
 8003b72:	d4f9      	bmi.n	8003b68 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 8003b74:	6966      	ldr	r6, [r4, #20]
 8003b76:	b19e      	cbz	r6, 8003ba0 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b78:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8003b7a:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b7c:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
 8003b80:	b18f      	cbz	r7, 8003ba6 <osThreadNew+0x5e>
 8003b82:	f1bc 0f5b 	cmp.w	ip, #91	@ 0x5b
 8003b86:	d908      	bls.n	8003b9a <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b88:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b8a:	b134      	cbz	r4, 8003b9a <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b8c:	b12e      	cbz	r6, 8003b9a <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b8e:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8003b92:	9500      	str	r5, [sp, #0]
 8003b94:	f000 fe9a 	bl	80048cc <xTaskCreateStatic>
 8003b98:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b9a:	9805      	ldr	r0, [sp, #20]
}
 8003b9c:	b007      	add	sp, #28
 8003b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8003ba0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ba4:	e7e9      	b.n	8003b7a <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ba6:	f1bc 0f00 	cmp.w	ip, #0
 8003baa:	d1f6      	bne.n	8003b9a <osThreadNew+0x52>
 8003bac:	6924      	ldr	r4, [r4, #16]
 8003bae:	2c00      	cmp	r4, #0
 8003bb0:	d1f3      	bne.n	8003b9a <osThreadNew+0x52>
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	e002      	b.n	8003bbc <osThreadNew+0x74>
    prio  = (UBaseType_t)osPriorityNormal;
 8003bb6:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8003bb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bbc:	a905      	add	r1, sp, #20
 8003bbe:	e9cd 5100 	strd	r5, r1, [sp]
 8003bc2:	b292      	uxth	r2, r2
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	f000 fed3 	bl	8004970 <xTaskCreate>
 8003bca:	2801      	cmp	r0, #1
            hTask = NULL;
 8003bcc:	bf1c      	itt	ne
 8003bce:	2300      	movne	r3, #0
 8003bd0:	9305      	strne	r3, [sp, #20]
 8003bd2:	e7e2      	b.n	8003b9a <osThreadNew+0x52>

08003bd4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003bd4:	b508      	push	{r3, lr}
 8003bd6:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bda:	b922      	cbnz	r2, 8003be6 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8003bdc:	b108      	cbz	r0, 8003be2 <osDelay+0xe>
      vTaskDelay(ticks);
 8003bde:	f001 f8f3 	bl	8004dc8 <vTaskDelay>
    stat = osOK;
 8003be2:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8003be4:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8003be6:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8003bea:	e7fb      	b.n	8003be4 <osDelay+0x10>

08003bec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bee:	4605      	mov	r5, r0
 8003bf0:	460e      	mov	r6, r1
 8003bf2:	4614      	mov	r4, r2
 8003bf4:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003bf8:	b11f      	cbz	r7, 8003c02 <osMessageQueueNew+0x16>
  hQueue = NULL;
 8003bfa:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	b003      	add	sp, #12
 8003c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d0f9      	beq.n	8003bfa <osMessageQueueNew+0xe>
 8003c06:	2900      	cmp	r1, #0
 8003c08:	d0f7      	beq.n	8003bfa <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8003c0a:	b1da      	cbz	r2, 8003c44 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c0c:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8003c10:	b183      	cbz	r3, 8003c34 <osMessageQueueNew+0x48>
 8003c12:	2a4f      	cmp	r2, #79	@ 0x4f
 8003c14:	d9f1      	bls.n	8003bfa <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c16:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c18:	2a00      	cmp	r2, #0
 8003c1a:	d0ee      	beq.n	8003bfa <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c1c:	434d      	muls	r5, r1
 8003c1e:	6966      	ldr	r6, [r4, #20]
 8003c20:	42ae      	cmp	r6, r5
 8003c22:	d3ea      	bcc.n	8003bfa <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003c24:	9700      	str	r7, [sp, #0]
 8003c26:	f000 f9ba 	bl	8003f9e <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8003c2a:	4605      	mov	r5, r0
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	d0e4      	beq.n	8003bfa <osMessageQueueNew+0xe>
        name = attr->name;
 8003c30:	6824      	ldr	r4, [r4, #0]
 8003c32:	e011      	b.n	8003c58 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	d1e0      	bne.n	8003bfa <osMessageQueueNew+0xe>
 8003c38:	6923      	ldr	r3, [r4, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1dd      	bne.n	8003bfa <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003c3e:	6963      	ldr	r3, [r4, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1da      	bne.n	8003bfa <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8003c44:	4628      	mov	r0, r5
 8003c46:	2200      	movs	r2, #0
 8003c48:	4631      	mov	r1, r6
 8003c4a:	f000 f9ec 	bl	8004026 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8003c4e:	4605      	mov	r5, r0
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d0d2      	beq.n	8003bfa <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8003c54:	2c00      	cmp	r4, #0
 8003c56:	d1eb      	bne.n	8003c30 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8003c58:	4621      	mov	r1, r4
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f000 fc4e 	bl	80044fc <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8003c60:	e7cc      	b.n	8003bfc <osMessageQueueNew+0x10>

08003c62 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003c62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c64:	461c      	mov	r4, r3
 8003c66:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003c6a:	b1fe      	cbz	r6, 8003cac <osMessageQueuePut+0x4a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c6c:	b358      	cbz	r0, 8003cc6 <osMessageQueuePut+0x64>
 8003c6e:	b351      	cbz	r1, 8003cc6 <osMessageQueuePut+0x64>
 8003c70:	bb4b      	cbnz	r3, 8003cc6 <osMessageQueuePut+0x64>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003c72:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8003c74:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003c76:	f000 facb 	bl	8004210 <xQueueGenericSendFromISR>
 8003c7a:	2801      	cmp	r0, #1
 8003c7c:	d003      	beq.n	8003c86 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 8003c7e:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003c82:	b002      	add	sp, #8
 8003c84:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8003c86:	9b01      	ldr	r3, [sp, #4]
 8003c88:	b16b      	cbz	r3, 8003ca6 <osMessageQueuePut+0x44>
 8003c8a:	f002 fce9 	bl	8006660 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8003c8e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c96:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	e7ed      	b.n	8003c82 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 8003ca6:	f002 fcc9 	bl	800663c <SEGGER_SYSVIEW_RecordExitISR>
 8003caa:	e7fa      	b.n	8003ca2 <osMessageQueuePut+0x40>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003cac:	b158      	cbz	r0, 8003cc6 <osMessageQueuePut+0x64>
 8003cae:	b151      	cbz	r1, 8003cc6 <osMessageQueuePut+0x64>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003cb0:	4633      	mov	r3, r6
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	f000 f9ee 	bl	8004094 <xQueueGenericSend>
 8003cb8:	2801      	cmp	r0, #1
 8003cba:	d0f2      	beq.n	8003ca2 <osMessageQueuePut+0x40>
        if (timeout != 0U) {
 8003cbc:	2c00      	cmp	r4, #0
 8003cbe:	d0de      	beq.n	8003c7e <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8003cc0:	f06f 0001 	mvn.w	r0, #1
 8003cc4:	e7dd      	b.n	8003c82 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8003cc6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8003cca:	e7da      	b.n	8003c82 <osMessageQueuePut+0x20>

08003ccc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cce:	461c      	mov	r4, r3
 8003cd0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003cd4:	b1fb      	cbz	r3, 8003d16 <osMessageQueueGet+0x4a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003cd6:	b350      	cbz	r0, 8003d2e <osMessageQueueGet+0x62>
 8003cd8:	b349      	cbz	r1, 8003d2e <osMessageQueueGet+0x62>
 8003cda:	bb44      	cbnz	r4, 8003d2e <osMessageQueueGet+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003cdc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8003cde:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003ce0:	f000 fbad 	bl	800443e <xQueueReceiveFromISR>
 8003ce4:	2801      	cmp	r0, #1
 8003ce6:	d003      	beq.n	8003cf0 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8003ce8:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003cec:	b003      	add	sp, #12
 8003cee:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8003cf0:	9b01      	ldr	r3, [sp, #4]
 8003cf2:	b16b      	cbz	r3, 8003d10 <osMessageQueueGet+0x44>
 8003cf4:	f002 fcb4 	bl	8006660 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8003cf8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003cfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d00:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	e7ed      	b.n	8003cec <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8003d10:	f002 fc94 	bl	800663c <SEGGER_SYSVIEW_RecordExitISR>
 8003d14:	e7fa      	b.n	8003d0c <osMessageQueueGet+0x40>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003d16:	b150      	cbz	r0, 8003d2e <osMessageQueueGet+0x62>
 8003d18:	b149      	cbz	r1, 8003d2e <osMessageQueueGet+0x62>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003d1a:	4622      	mov	r2, r4
 8003d1c:	f000 fae9 	bl	80042f2 <xQueueReceive>
 8003d20:	2801      	cmp	r0, #1
 8003d22:	d0f3      	beq.n	8003d0c <osMessageQueueGet+0x40>
        if (timeout != 0U) {
 8003d24:	2c00      	cmp	r4, #0
 8003d26:	d0df      	beq.n	8003ce8 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 8003d28:	f06f 0001 	mvn.w	r0, #1
 8003d2c:	e7de      	b.n	8003cec <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 8003d2e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8003d32:	e7db      	b.n	8003cec <osMessageQueueGet+0x20>

08003d34 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d34:	4b03      	ldr	r3, [pc, #12]	@ (8003d44 <vApplicationGetIdleTaskMemory+0x10>)
 8003d36:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d38:	4b03      	ldr	r3, [pc, #12]	@ (8003d48 <vApplicationGetIdleTaskMemory+0x14>)
 8003d3a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d40:	6013      	str	r3, [r2, #0]
}
 8003d42:	4770      	bx	lr
 8003d44:	20000f7c 	.word	0x20000f7c
 8003d48:	20000b7c 	.word	0x20000b7c

08003d4c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d4c:	4b03      	ldr	r3, [pc, #12]	@ (8003d5c <vApplicationGetTimerTaskMemory+0x10>)
 8003d4e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d50:	4b03      	ldr	r3, [pc, #12]	@ (8003d60 <vApplicationGetTimerTaskMemory+0x14>)
 8003d52:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d58:	6013      	str	r3, [r2, #0]
}
 8003d5a:	4770      	bx	lr
 8003d5c:	20000b20 	.word	0x20000b20
 8003d60:	20000320 	.word	0x20000320

08003d64 <vListInitialise>:

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d64:	f04f 32ff 	mov.w	r2, #4294967295
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8003d68:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8003d6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8003d70:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8003d72:	6103      	str	r3, [r0, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	6003      	str	r3, [r0, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8003d78:	f240 1019 	movw	r0, #281	@ 0x119
 8003d7c:	f002 bc82 	b.w	8006684 <SEGGER_SYSVIEW_RecordEndCall>

08003d80 <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	6103      	str	r3, [r0, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8003d84:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8003d88:	f002 bc7c 	b.w	8006684 <SEGGER_SYSVIEW_RecordEndCall>

08003d8c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003d8c:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d8e:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003d90:	1c63      	adds	r3, r4, #1
 8003d92:	d10e      	bne.n	8003db2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003d94:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003d96:	685a      	ldr	r2, [r3, #4]
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );

    traceRETURN_vListInsert();
}
 8003d98:	bc30      	pop	{r4, r5}
    pxNewListItem->pxNext = pxIterator->pxNext;
 8003d9a:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d9c:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003d9e:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 8003da0:	6059      	str	r1, [r3, #4]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003da2:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 8003da4:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003da6:	3301      	adds	r3, #1
 8003da8:	6003      	str	r3, [r0, #0]
    traceRETURN_vListInsert();
 8003daa:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8003dae:	f002 bc69 	b.w	8006684 <SEGGER_SYSVIEW_RecordEndCall>
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8003db2:	f100 0208 	add.w	r2, r0, #8
 8003db6:	4613      	mov	r3, r2
 8003db8:	6852      	ldr	r2, [r2, #4]
 8003dba:	6815      	ldr	r5, [r2, #0]
 8003dbc:	42a5      	cmp	r5, r4
 8003dbe:	d9fa      	bls.n	8003db6 <vListInsert+0x2a>
 8003dc0:	e7e9      	b.n	8003d96 <vListInsert+0xa>

08003dc2 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dc2:	b510      	push	{r4, lr}
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dc4:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003dc8:	6904      	ldr	r4, [r0, #16]
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dca:	6093      	str	r3, [r2, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dcc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003dce:	6862      	ldr	r2, [r4, #4]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8003dd0:	6821      	ldr	r1, [r4, #0]
    if( pxList->pxIndex == pxItemToRemove )
 8003dd2:	4282      	cmp	r2, r0
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dd4:	bf08      	it	eq
 8003dd6:	6063      	streq	r3, [r4, #4]
    pxItemToRemove->pxContainer = NULL;
 8003dd8:	2300      	movs	r3, #0
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8003dda:	3901      	subs	r1, #1
    pxItemToRemove->pxContainer = NULL;
 8003ddc:	6103      	str	r3, [r0, #16]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8003dde:	f240 101d 	movw	r0, #285	@ 0x11d
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8003de2:	6021      	str	r1, [r4, #0]
    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8003de4:	f002 fc6c 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
}
 8003de8:	6820      	ldr	r0, [r4, #0]
 8003dea:	bd10      	pop	{r4, pc}

08003dec <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003dec:	b510      	push	{r4, lr}
 8003dee:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003df0:	f001 fc1a 	bl	8005628 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003df4:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8003df6:	f001 fc37 	bl	8005668 <vPortExitCritical>

    return xReturn;
}
 8003dfa:	fab4 f084 	clz	r0, r4
 8003dfe:	0940      	lsrs	r0, r0, #5
 8003e00:	bd10      	pop	{r4, pc}

08003e02 <prvCopyDataToQueue>:
{
 8003e02:	b570      	push	{r4, r5, r6, lr}
 8003e04:	4616      	mov	r6, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e06:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8003e08:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e0a:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e0c:	b942      	cbnz	r2, 8003e20 <prvCopyDataToQueue+0x1e>
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e0e:	6806      	ldr	r6, [r0, #0]
 8003e10:	b99e      	cbnz	r6, 8003e3a <prvCopyDataToQueue+0x38>
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e12:	6880      	ldr	r0, [r0, #8]
 8003e14:	f001 f98e 	bl	8005134 <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e18:	60a6      	str	r6, [r4, #8]
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8003e1a:	3501      	adds	r5, #1
 8003e1c:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8003e1e:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
 8003e20:	b96e      	cbnz	r6, 8003e3e <prvCopyDataToQueue+0x3c>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003e22:	6840      	ldr	r0, [r0, #4]
 8003e24:	f003 fba1 	bl	800756a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003e28:	6863      	ldr	r3, [r4, #4]
 8003e2a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003e2c:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8003e2e:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003e30:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8003e32:	4293      	cmp	r3, r2
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e34:	bf24      	itt	cs
 8003e36:	6823      	ldrcs	r3, [r4, #0]
 8003e38:	6063      	strcs	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	e7ed      	b.n	8003e1a <prvCopyDataToQueue+0x18>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003e3e:	68c0      	ldr	r0, [r0, #12]
 8003e40:	f003 fb93 	bl	800756a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e44:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003e46:	68e3      	ldr	r3, [r4, #12]
 8003e48:	4251      	negs	r1, r2
 8003e4a:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8003e4c:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e4e:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8003e50:	4293      	cmp	r3, r2
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e52:	bf3e      	ittt	cc
 8003e54:	68a3      	ldrcc	r3, [r4, #8]
 8003e56:	185b      	addcc	r3, r3, r1
 8003e58:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 8003e5a:	2e02      	cmp	r6, #2
 8003e5c:	d1ed      	bne.n	8003e3a <prvCopyDataToQueue+0x38>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e5e:	b10d      	cbz	r5, 8003e64 <prvCopyDataToQueue+0x62>
                --uxMessagesWaiting;
 8003e60:	3d01      	subs	r5, #1
 8003e62:	e7ea      	b.n	8003e3a <prvCopyDataToQueue+0x38>
    BaseType_t xReturn = pdFALSE;
 8003e64:	4628      	mov	r0, r5
 8003e66:	e7d8      	b.n	8003e1a <prvCopyDataToQueue+0x18>

08003e68 <prvCopyDataFromQueue>:
{
 8003e68:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e70:	b162      	cbz	r2, 8003e8c <prvCopyDataFromQueue+0x24>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8003e72:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8003e74:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8003e76:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8003e78:	428c      	cmp	r4, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e7a:	bf28      	it	cs
 8003e7c:	6819      	ldrcs	r1, [r3, #0]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8003e7e:	60dc      	str	r4, [r3, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e80:	bf28      	it	cs
 8003e82:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003e84:	68d9      	ldr	r1, [r3, #12]
}
 8003e86:	bc10      	pop	{r4}
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003e88:	f003 bb6f 	b.w	800756a <memcpy>
}
 8003e8c:	bc10      	pop	{r4}
 8003e8e:	4770      	bx	lr

08003e90 <prvUnlockQueue>:
{
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8003e94:	f001 fbc8 	bl	8005628 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8003e98:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e9c:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        int8_t cTxLock = pxQueue->cTxLock;
 8003ea0:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ea2:	2d00      	cmp	r5, #0
 8003ea4:	dd01      	ble.n	8003eaa <prvUnlockQueue+0x1a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ea6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003ea8:	b9b3      	cbnz	r3, 8003ed8 <prvUnlockQueue+0x48>
        pxQueue->cTxLock = queueUNLOCKED;
 8003eaa:	23ff      	movs	r3, #255	@ 0xff
 8003eac:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8003eb0:	f001 fbda 	bl	8005668 <vPortExitCritical>
    taskENTER_CRITICAL();
 8003eb4:	f001 fbb8 	bl	8005628 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8003eb8:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ebc:	f104 0610 	add.w	r6, r4, #16
        int8_t cRxLock = pxQueue->cRxLock;
 8003ec0:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ec2:	2d00      	cmp	r5, #0
 8003ec4:	dd01      	ble.n	8003eca <prvUnlockQueue+0x3a>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ec6:	6923      	ldr	r3, [r4, #16]
 8003ec8:	b97b      	cbnz	r3, 8003eea <prvUnlockQueue+0x5a>
        pxQueue->cRxLock = queueUNLOCKED;
 8003eca:	23ff      	movs	r3, #255	@ 0xff
 8003ecc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8003ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 8003ed4:	f001 bbc8 	b.w	8005668 <vPortExitCritical>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f001 f839 	bl	8004f50 <xTaskRemoveFromEventList>
 8003ede:	b108      	cbz	r0, 8003ee4 <prvUnlockQueue+0x54>
                        vTaskMissedYield();
 8003ee0:	f001 f8f6 	bl	80050d0 <vTaskMissedYield>
            --cTxLock;
 8003ee4:	3d01      	subs	r5, #1
 8003ee6:	b26d      	sxtb	r5, r5
 8003ee8:	e7db      	b.n	8003ea2 <prvUnlockQueue+0x12>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eea:	4630      	mov	r0, r6
 8003eec:	f001 f830 	bl	8004f50 <xTaskRemoveFromEventList>
 8003ef0:	b108      	cbz	r0, 8003ef6 <prvUnlockQueue+0x66>
                    vTaskMissedYield();
 8003ef2:	f001 f8ed 	bl	80050d0 <vTaskMissedYield>
                --cRxLock;
 8003ef6:	3d01      	subs	r5, #1
 8003ef8:	b26d      	sxtb	r5, r5
 8003efa:	e7e2      	b.n	8003ec2 <prvUnlockQueue+0x32>

08003efc <xQueueGenericReset>:
{
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	460e      	mov	r6, r1
    configASSERT( pxQueue );
 8003f00:	4604      	mov	r4, r0
 8003f02:	b940      	cbnz	r0, 8003f16 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	e7fe      	b.n	8003f14 <xQueueGenericReset+0x18>
        ( pxQueue->uxLength >= 1U ) &&
 8003f16:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003f18:	b3c5      	cbz	r5, 8003f8c <xQueueGenericReset+0x90>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003f1a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003f1c:	fba3 3505 	umull	r3, r5, r3, r5
 8003f20:	bba5      	cbnz	r5, 8003f8c <xQueueGenericReset+0x90>
        taskENTER_CRITICAL();
 8003f22:	f001 fb81 	bl	8005628 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f26:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8003f2a:	434b      	muls	r3, r1
 8003f2c:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f2e:	63a5      	str	r5, [r4, #56]	@ 0x38
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f30:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8003f32:	1a5b      	subs	r3, r3, r1
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f34:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8003f36:	441a      	add	r2, r3
            pxQueue->cRxLock = queueUNLOCKED;
 8003f38:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f3a:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 8003f3c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8003f40:	60e2      	str	r2, [r4, #12]
            pxQueue->cTxLock = queueUNLOCKED;
 8003f42:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
            if( xNewQueue == pdFALSE )
 8003f46:	b9c6      	cbnz	r6, 8003f7a <xQueueGenericReset+0x7e>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f48:	6923      	ldr	r3, [r4, #16]
 8003f4a:	b173      	cbz	r3, 8003f6a <xQueueGenericReset+0x6e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f4c:	f104 0010 	add.w	r0, r4, #16
 8003f50:	f000 fffe 	bl	8004f50 <xTaskRemoveFromEventList>
 8003f54:	b148      	cbz	r0, 8003f6a <xQueueGenericReset+0x6e>
                        queueYIELD_IF_USING_PREEMPTION();
 8003f56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8003f6a:	f001 fb7d 	bl	8005668 <vPortExitCritical>
    traceRETURN_xQueueGenericReset( xReturn );
 8003f6e:	2101      	movs	r1, #1
 8003f70:	2096      	movs	r0, #150	@ 0x96
 8003f72:	f002 fba5 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
}
 8003f76:	2001      	movs	r0, #1
 8003f78:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f7a:	f104 0010 	add.w	r0, r4, #16
 8003f7e:	f7ff fef1 	bl	8003d64 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f82:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003f86:	f7ff feed 	bl	8003d64 <vListInitialise>
 8003f8a:	e7ee      	b.n	8003f6a <xQueueGenericReset+0x6e>
 8003f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
    configASSERT( xReturn != pdFAIL );
 8003f9c:	e7fe      	b.n	8003f9c <xQueueGenericReset+0xa0>

08003f9e <xQueueGenericCreateStatic>:
    {
 8003f9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fa0:	460d      	mov	r5, r1
        configASSERT( pxStaticQueue );
 8003fa2:	461c      	mov	r4, r3
 8003fa4:	b943      	cbnz	r3, 8003fb8 <xQueueGenericCreateStatic+0x1a>
 8003fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	e7fe      	b.n	8003fb6 <xQueueGenericCreateStatic+0x18>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003fb8:	b108      	cbz	r0, 8003fbe <xQueueGenericCreateStatic+0x20>
            ( pxStaticQueue != NULL ) &&
 8003fba:	b14a      	cbz	r2, 8003fd0 <xQueueGenericCreateStatic+0x32>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8003fbc:	b951      	cbnz	r1, 8003fd4 <xQueueGenericCreateStatic+0x36>
 8003fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 8003fce:	e7fe      	b.n	8003fce <xQueueGenericCreateStatic+0x30>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8003fd0:	2900      	cmp	r1, #0
 8003fd2:	d1f4      	bne.n	8003fbe <xQueueGenericCreateStatic+0x20>
                volatile size_t xSize = sizeof( StaticQueue_t );
 8003fd4:	2350      	movs	r3, #80	@ 0x50
 8003fd6:	9301      	str	r3, [sp, #4]
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8003fd8:	9b01      	ldr	r3, [sp, #4]
 8003fda:	2b50      	cmp	r3, #80	@ 0x50
 8003fdc:	d008      	beq.n	8003ff0 <xQueueGenericCreateStatic+0x52>
 8003fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	e7fe      	b.n	8003fee <xQueueGenericCreateStatic+0x50>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ff0:	2d00      	cmp	r5, #0
 8003ff2:	bf08      	it	eq
 8003ff4:	4622      	moveq	r2, r4
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	6022      	str	r2, [r4, #0]
 8003ffa:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
    pxNewQueue->uxItemSize = uxItemSize;
 8003ffe:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004002:	4620      	mov	r0, r4
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 8004004:	9b01      	ldr	r3, [sp, #4]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004006:	f7ff ff79 	bl	8003efc <xQueueGenericReset>
        pxNewQueue->ucQueueType = ucQueueType;
 800400a:	f89d 3018 	ldrb.w	r3, [sp, #24]
        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 800400e:	4620      	mov	r0, r4
        pxNewQueue->ucQueueType = ucQueueType;
 8004010:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 8004014:	f001 ffd8 	bl	8005fc8 <SEGGER_SYSVIEW_ShrinkId>
 8004018:	4601      	mov	r1, r0
 800401a:	2097      	movs	r0, #151	@ 0x97
 800401c:	f002 fb50 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
    }
 8004020:	4620      	mov	r0, r4
 8004022:	b003      	add	sp, #12
 8004024:	bd30      	pop	{r4, r5, pc}

08004026 <xQueueGenericCreate>:
    {
 8004026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800402a:	460d      	mov	r5, r1
 800402c:	4617      	mov	r7, r2
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800402e:	4606      	mov	r6, r0
 8004030:	b338      	cbz	r0, 8004082 <xQueueGenericCreate+0x5c>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004032:	fba1 3800 	umull	r3, r8, r1, r0
 8004036:	f1b8 0f00 	cmp.w	r8, #0
 800403a:	d122      	bne.n	8004082 <xQueueGenericCreate+0x5c>
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800403c:	4348      	muls	r0, r1
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800403e:	f110 0f51 	cmn.w	r0, #81	@ 0x51
 8004042:	d81e      	bhi.n	8004082 <xQueueGenericCreate+0x5c>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004044:	3050      	adds	r0, #80	@ 0x50
 8004046:	f001 fc15 	bl	8005874 <pvPortMalloc>
            if( pxNewQueue != NULL )
 800404a:	4604      	mov	r4, r0
 800404c:	b168      	cbz	r0, 800406a <xQueueGenericCreate+0x44>
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800404e:	f880 8046 	strb.w	r8, [r0, #70]	@ 0x46
    if( uxItemSize == ( UBaseType_t ) 0 )
 8004052:	b1a5      	cbz	r5, 800407e <xQueueGenericCreate+0x58>
                pucQueueStorage += sizeof( Queue_t );
 8004054:	f100 0350 	add.w	r3, r0, #80	@ 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004058:	2101      	movs	r1, #1
 800405a:	4620      	mov	r0, r4
    pxNewQueue->uxItemSize = uxItemSize;
 800405c:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8004060:	6023      	str	r3, [r4, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004062:	f7ff ff4b 	bl	8003efc <xQueueGenericReset>
        pxNewQueue->ucQueueType = ucQueueType;
 8004066:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
        traceRETURN_xQueueGenericCreate( pxNewQueue );
 800406a:	4620      	mov	r0, r4
 800406c:	f001 ffac 	bl	8005fc8 <SEGGER_SYSVIEW_ShrinkId>
 8004070:	4601      	mov	r1, r0
 8004072:	2098      	movs	r0, #152	@ 0x98
 8004074:	f002 fb24 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
    }
 8004078:	4620      	mov	r0, r4
 800407a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800407e:	4603      	mov	r3, r0
 8004080:	e7ea      	b.n	8004058 <xQueueGenericCreate+0x32>
 8004082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
            configASSERT( pxNewQueue );
 8004092:	e7fe      	b.n	8004092 <xQueueGenericCreate+0x6c>

08004094 <xQueueGenericSend>:
{
 8004094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004098:	b085      	sub	sp, #20
 800409a:	460f      	mov	r7, r1
 800409c:	461e      	mov	r6, r3
    configASSERT( pxQueue );
 800409e:	4604      	mov	r4, r0
{
 80040a0:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 80040a2:	b940      	cbnz	r0, 80040b6 <xQueueGenericSend+0x22>
 80040a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	e7fe      	b.n	80040b4 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040b6:	b951      	cbnz	r1, 80040ce <xQueueGenericSend+0x3a>
 80040b8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80040ba:	b143      	cbz	r3, 80040ce <xQueueGenericSend+0x3a>
 80040bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	e7fe      	b.n	80040cc <xQueueGenericSend+0x38>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040ce:	2e02      	cmp	r6, #2
 80040d0:	d10b      	bne.n	80040ea <xQueueGenericSend+0x56>
 80040d2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d008      	beq.n	80040ea <xQueueGenericSend+0x56>
 80040d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	e7fe      	b.n	80040e8 <xQueueGenericSend+0x54>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040ea:	f001 f80d 	bl	8005108 <xTaskGetSchedulerState>
 80040ee:	4605      	mov	r5, r0
 80040f0:	b340      	cbz	r0, 8004144 <xQueueGenericSend+0xb0>
 80040f2:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
 80040f4:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
 80040f8:	f001 fa96 	bl	8005628 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040fc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80040fe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004100:	429a      	cmp	r2, r3
 8004102:	d22b      	bcs.n	800415c <xQueueGenericSend+0xc8>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004104:	4632      	mov	r2, r6
 8004106:	4639      	mov	r1, r7
 8004108:	4620      	mov	r0, r4
 800410a:	f7ff fe7a 	bl	8003e02 <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800410e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004110:	b11b      	cbz	r3, 800411a <xQueueGenericSend+0x86>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004112:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004116:	f000 ff1b 	bl	8004f50 <xTaskRemoveFromEventList>
                    else if( xYieldRequired != pdFALSE )
 800411a:	b148      	cbz	r0, 8004130 <xQueueGenericSend+0x9c>
                        queueYIELD_IF_USING_PREEMPTION();
 800411c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004120:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004124:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8004130:	f001 fa9a 	bl	8005668 <vPortExitCritical>
                traceRETURN_xQueueGenericSend( pdPASS );
 8004134:	20a1      	movs	r0, #161	@ 0xa1
 8004136:	2101      	movs	r1, #1
 8004138:	f002 fac2 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
                return pdPASS;
 800413c:	2001      	movs	r0, #1
}
 800413e:	b005      	add	sp, #20
 8004140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004144:	9b01      	ldr	r3, [sp, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0d4      	beq.n	80040f4 <xQueueGenericSend+0x60>
 800414a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	e7fe      	b.n	800415a <xQueueGenericSend+0xc6>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800415c:	2e02      	cmp	r6, #2
 800415e:	d0d1      	beq.n	8004104 <xQueueGenericSend+0x70>
                if( xTicksToWait == ( TickType_t ) 0 )
 8004160:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004164:	f1b9 0f00 	cmp.w	r9, #0
 8004168:	d107      	bne.n	800417a <xQueueGenericSend+0xe6>
                    taskEXIT_CRITICAL();
 800416a:	f001 fa7d 	bl	8005668 <vPortExitCritical>
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 800416e:	20a1      	movs	r0, #161	@ 0xa1
 8004170:	2100      	movs	r1, #0
 8004172:	f002 faa5 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
                    return errQUEUE_FULL;
 8004176:	2000      	movs	r0, #0
 8004178:	e7e1      	b.n	800413e <xQueueGenericSend+0xaa>
                else if( xEntryTimeSet == pdFALSE )
 800417a:	b915      	cbnz	r5, 8004182 <xQueueGenericSend+0xee>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800417c:	a802      	add	r0, sp, #8
 800417e:	f000 ff59 	bl	8005034 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8004182:	f001 fa71 	bl	8005668 <vPortExitCritical>
        vTaskSuspendAll();
 8004186:	f000 fc8f 	bl	8004aa8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800418a:	f001 fa4d 	bl	8005628 <vPortEnterCritical>
 800418e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004192:	2bff      	cmp	r3, #255	@ 0xff
 8004194:	bf08      	it	eq
 8004196:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 800419a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800419e:	2bff      	cmp	r3, #255	@ 0xff
 80041a0:	bf08      	it	eq
 80041a2:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80041a6:	f001 fa5f 	bl	8005668 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041aa:	a901      	add	r1, sp, #4
 80041ac:	a802      	add	r0, sp, #8
 80041ae:	f000 ff4f 	bl	8005050 <xTaskCheckForTimeOut>
 80041b2:	bb38      	cbnz	r0, 8004204 <xQueueGenericSend+0x170>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80041b4:	f001 fa38 	bl	8005628 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041b8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80041ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80041bc:	429a      	cmp	r2, r3
 80041be:	d10e      	bne.n	80041de <xQueueGenericSend+0x14a>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 80041c0:	f001 fa52 	bl	8005668 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041c4:	9901      	ldr	r1, [sp, #4]
 80041c6:	f104 0010 	add.w	r0, r4, #16
 80041ca:	f000 fe75 	bl	8004eb8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80041ce:	4620      	mov	r0, r4
 80041d0:	f7ff fe5e 	bl	8003e90 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80041d4:	f000 fd56 	bl	8004c84 <xTaskResumeAll>
 80041d8:	b148      	cbz	r0, 80041ee <xQueueGenericSend+0x15a>
 80041da:	2501      	movs	r5, #1
 80041dc:	e78c      	b.n	80040f8 <xQueueGenericSend+0x64>
    taskEXIT_CRITICAL();
 80041de:	f001 fa43 	bl	8005668 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 80041e2:	4620      	mov	r0, r4
 80041e4:	f7ff fe54 	bl	8003e90 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80041e8:	f000 fd4c 	bl	8004c84 <xTaskResumeAll>
 80041ec:	e7f5      	b.n	80041da <xQueueGenericSend+0x146>
                    taskYIELD_WITHIN_API();
 80041ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80041f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	e7ea      	b.n	80041da <xQueueGenericSend+0x146>
            prvUnlockQueue( pxQueue );
 8004204:	4620      	mov	r0, r4
 8004206:	f7ff fe43 	bl	8003e90 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800420a:	f000 fd3b 	bl	8004c84 <xTaskResumeAll>
 800420e:	e7ae      	b.n	800416e <xQueueGenericSend+0xda>

08004210 <xQueueGenericSendFromISR>:
{
 8004210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004214:	4689      	mov	r9, r1
 8004216:	4617      	mov	r7, r2
 8004218:	461e      	mov	r6, r3
    configASSERT( pxQueue );
 800421a:	4604      	mov	r4, r0
 800421c:	b940      	cbnz	r0, 8004230 <xQueueGenericSendFromISR+0x20>
 800421e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	e7fe      	b.n	800422e <xQueueGenericSendFromISR+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004230:	b951      	cbnz	r1, 8004248 <xQueueGenericSendFromISR+0x38>
 8004232:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004234:	b143      	cbz	r3, 8004248 <xQueueGenericSendFromISR+0x38>
 8004236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	e7fe      	b.n	8004246 <xQueueGenericSendFromISR+0x36>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004248:	2e02      	cmp	r6, #2
 800424a:	d10b      	bne.n	8004264 <xQueueGenericSendFromISR+0x54>
 800424c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800424e:	2b01      	cmp	r3, #1
 8004250:	d008      	beq.n	8004264 <xQueueGenericSendFromISR+0x54>
 8004252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	e7fe      	b.n	8004262 <xQueueGenericSendFromISR+0x52>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004264:	f001 fad8 	bl	8005818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8004268:	f3ef 8811 	mrs	r8, BASEPRI
 800426c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800427c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800427e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004280:	429a      	cmp	r2, r3
 8004282:	d301      	bcc.n	8004288 <xQueueGenericSendFromISR+0x78>
 8004284:	2e02      	cmp	r6, #2
 8004286:	d132      	bne.n	80042ee <xQueueGenericSendFromISR+0xde>
            const int8_t cTxLock = pxQueue->cTxLock;
 8004288:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800428c:	4632      	mov	r2, r6
 800428e:	4649      	mov	r1, r9
 8004290:	4620      	mov	r0, r4
            const int8_t cTxLock = pxQueue->cTxLock;
 8004292:	b26d      	sxtb	r5, r5
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004294:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004296:	f7ff fdb4 	bl	8003e02 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 800429a:	1c6b      	adds	r3, r5, #1
 800429c:	d113      	bne.n	80042c6 <xQueueGenericSendFromISR+0xb6>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800429e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80042a0:	b13b      	cbz	r3, 80042b2 <xQueueGenericSendFromISR+0xa2>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80042a6:	f000 fe53 	bl	8004f50 <xTaskRemoveFromEventList>
 80042aa:	b110      	cbz	r0, 80042b2 <xQueueGenericSendFromISR+0xa2>
                            if( pxHigherPriorityTaskWoken != NULL )
 80042ac:	b10f      	cbz	r7, 80042b2 <xQueueGenericSendFromISR+0xa2>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	603b      	str	r3, [r7, #0]
            xReturn = pdPASS;
 80042b2:	2401      	movs	r4, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80042b4:	f388 8811 	msr	BASEPRI, r8
    traceRETURN_xQueueGenericSendFromISR( xReturn );
 80042b8:	20a2      	movs	r0, #162	@ 0xa2
 80042ba:	4621      	mov	r1, r4
 80042bc:	f002 fa00 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
}
 80042c0:	4620      	mov	r0, r4
 80042c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80042c6:	f000 fc13 	bl	8004af0 <uxTaskGetNumberOfTasks>
 80042ca:	4285      	cmp	r5, r0
 80042cc:	d2f1      	bcs.n	80042b2 <xQueueGenericSendFromISR+0xa2>
 80042ce:	2d7f      	cmp	r5, #127	@ 0x7f
 80042d0:	d108      	bne.n	80042e4 <xQueueGenericSendFromISR+0xd4>
    __asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	e7fe      	b.n	80042e2 <xQueueGenericSendFromISR+0xd2>
 80042e4:	3501      	adds	r5, #1
 80042e6:	b26d      	sxtb	r5, r5
 80042e8:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 80042ec:	e7e1      	b.n	80042b2 <xQueueGenericSendFromISR+0xa2>
            xReturn = errQUEUE_FULL;
 80042ee:	2400      	movs	r4, #0
 80042f0:	e7e0      	b.n	80042b4 <xQueueGenericSendFromISR+0xa4>

080042f2 <xQueueReceive>:
{
 80042f2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80042f6:	460e      	mov	r6, r1
    configASSERT( ( pxQueue ) );
 80042f8:	4604      	mov	r4, r0
{
 80042fa:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 80042fc:	b940      	cbnz	r0, 8004310 <xQueueReceive+0x1e>
 80042fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	e7fe      	b.n	800430e <xQueueReceive+0x1c>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004310:	b951      	cbnz	r1, 8004328 <xQueueReceive+0x36>
 8004312:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004314:	b143      	cbz	r3, 8004328 <xQueueReceive+0x36>
 8004316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	e7fe      	b.n	8004326 <xQueueReceive+0x34>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004328:	f000 feee 	bl	8005108 <xTaskGetSchedulerState>
 800432c:	4605      	mov	r5, r0
 800432e:	b338      	cbz	r0, 8004380 <xQueueReceive+0x8e>
 8004330:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
 8004332:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
 8004336:	f001 f977 	bl	8005628 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800433a:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800433c:	b367      	cbz	r7, 8004398 <xQueueReceive+0xa6>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800433e:	4631      	mov	r1, r6
 8004340:	4620      	mov	r0, r4
 8004342:	f7ff fd91 	bl	8003e68 <prvCopyDataFromQueue>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004346:	6923      	ldr	r3, [r4, #16]
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8004348:	3f01      	subs	r7, #1
 800434a:	63a7      	str	r7, [r4, #56]	@ 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800434c:	b173      	cbz	r3, 800436c <xQueueReceive+0x7a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800434e:	f104 0010 	add.w	r0, r4, #16
 8004352:	f000 fdfd 	bl	8004f50 <xTaskRemoveFromEventList>
 8004356:	b148      	cbz	r0, 800436c <xQueueReceive+0x7a>
                        queueYIELD_IF_USING_PREEMPTION();
 8004358:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800435c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004360:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 800436c:	f001 f97c 	bl	8005668 <vPortExitCritical>
                traceRETURN_xQueueReceive( pdPASS );
 8004370:	20a4      	movs	r0, #164	@ 0xa4
 8004372:	2101      	movs	r1, #1
 8004374:	f002 f9a4 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
                return pdPASS;
 8004378:	2001      	movs	r0, #1
}
 800437a:	b004      	add	sp, #16
 800437c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004380:	9b01      	ldr	r3, [sp, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0d5      	beq.n	8004332 <xQueueReceive+0x40>
 8004386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	e7fe      	b.n	8004396 <xQueueReceive+0xa4>
                if( xTicksToWait == ( TickType_t ) 0 )
 8004398:	9f01      	ldr	r7, [sp, #4]
 800439a:	b93f      	cbnz	r7, 80043ac <xQueueReceive+0xba>
                    taskEXIT_CRITICAL();
 800439c:	f001 f964 	bl	8005668 <vPortExitCritical>
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80043a0:	20a4      	movs	r0, #164	@ 0xa4
 80043a2:	2100      	movs	r1, #0
 80043a4:	f002 f98c 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
                    return errQUEUE_EMPTY;
 80043a8:	2000      	movs	r0, #0
 80043aa:	e7e6      	b.n	800437a <xQueueReceive+0x88>
                else if( xEntryTimeSet == pdFALSE )
 80043ac:	b915      	cbnz	r5, 80043b4 <xQueueReceive+0xc2>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80043ae:	a802      	add	r0, sp, #8
 80043b0:	f000 fe40 	bl	8005034 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 80043b4:	f001 f958 	bl	8005668 <vPortExitCritical>
        vTaskSuspendAll();
 80043b8:	f000 fb76 	bl	8004aa8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80043bc:	f001 f934 	bl	8005628 <vPortEnterCritical>
 80043c0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80043c4:	2bff      	cmp	r3, #255	@ 0xff
 80043c6:	bf08      	it	eq
 80043c8:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80043cc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80043d0:	2bff      	cmp	r3, #255	@ 0xff
 80043d2:	bf08      	it	eq
 80043d4:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80043d8:	f001 f946 	bl	8005668 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043dc:	a901      	add	r1, sp, #4
 80043de:	a802      	add	r0, sp, #8
 80043e0:	f000 fe36 	bl	8005050 <xTaskCheckForTimeOut>
 80043e4:	bb00      	cbnz	r0, 8004428 <xQueueReceive+0x136>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043e6:	4620      	mov	r0, r4
 80043e8:	f7ff fd00 	bl	8003dec <prvIsQueueEmpty>
 80043ec:	b1b0      	cbz	r0, 800441c <xQueueReceive+0x12a>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043ee:	9901      	ldr	r1, [sp, #4]
 80043f0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80043f4:	f000 fd60 	bl	8004eb8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff fd49 	bl	8003e90 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80043fe:	f000 fc41 	bl	8004c84 <xTaskResumeAll>
 8004402:	b948      	cbnz	r0, 8004418 <xQueueReceive+0x126>
                    taskYIELD_WITHIN_API();
 8004404:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800440c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	2501      	movs	r5, #1
 800441a:	e78c      	b.n	8004336 <xQueueReceive+0x44>
                prvUnlockQueue( pxQueue );
 800441c:	4620      	mov	r0, r4
 800441e:	f7ff fd37 	bl	8003e90 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004422:	f000 fc2f 	bl	8004c84 <xTaskResumeAll>
 8004426:	e7f7      	b.n	8004418 <xQueueReceive+0x126>
            prvUnlockQueue( pxQueue );
 8004428:	4620      	mov	r0, r4
 800442a:	f7ff fd31 	bl	8003e90 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800442e:	f000 fc29 	bl	8004c84 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004432:	4620      	mov	r0, r4
 8004434:	f7ff fcda 	bl	8003dec <prvIsQueueEmpty>
 8004438:	2800      	cmp	r0, #0
 800443a:	d0ed      	beq.n	8004418 <xQueueReceive+0x126>
 800443c:	e7b0      	b.n	80043a0 <xQueueReceive+0xae>

0800443e <xQueueReceiveFromISR>:
{
 800443e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004442:	4689      	mov	r9, r1
 8004444:	4690      	mov	r8, r2
    configASSERT( pxQueue );
 8004446:	4604      	mov	r4, r0
 8004448:	b940      	cbnz	r0, 800445c <xQueueReceiveFromISR+0x1e>
 800444a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	e7fe      	b.n	800445a <xQueueReceiveFromISR+0x1c>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800445c:	b951      	cbnz	r1, 8004474 <xQueueReceiveFromISR+0x36>
 800445e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004460:	b143      	cbz	r3, 8004474 <xQueueReceiveFromISR+0x36>
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	e7fe      	b.n	8004472 <xQueueReceiveFromISR+0x34>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004474:	f001 f9d0 	bl	8005818 <vPortValidateInterruptPriority>
    __asm volatile
 8004478:	f3ef 8711 	mrs	r7, BASEPRI
 800447c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800448c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800448e:	b1c6      	cbz	r6, 80044c2 <xQueueReceiveFromISR+0x84>
            const int8_t cRxLock = pxQueue->cRxLock;
 8004490:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004494:	4649      	mov	r1, r9
 8004496:	4620      	mov	r0, r4
            const int8_t cRxLock = pxQueue->cRxLock;
 8004498:	b26d      	sxtb	r5, r5
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800449a:	f7ff fce5 	bl	8003e68 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800449e:	3e01      	subs	r6, #1
            if( cRxLock == queueUNLOCKED )
 80044a0:	1c6b      	adds	r3, r5, #1
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80044a2:	63a6      	str	r6, [r4, #56]	@ 0x38
            if( cRxLock == queueUNLOCKED )
 80044a4:	d116      	bne.n	80044d4 <xQueueReceiveFromISR+0x96>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044a6:	6923      	ldr	r3, [r4, #16]
 80044a8:	b153      	cbz	r3, 80044c0 <xQueueReceiveFromISR+0x82>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044aa:	f104 0010 	add.w	r0, r4, #16
 80044ae:	f000 fd4f 	bl	8004f50 <xTaskRemoveFromEventList>
 80044b2:	b128      	cbz	r0, 80044c0 <xQueueReceiveFromISR+0x82>
                        if( pxHigherPriorityTaskWoken != NULL )
 80044b4:	f1b8 0f00 	cmp.w	r8, #0
 80044b8:	d002      	beq.n	80044c0 <xQueueReceiveFromISR+0x82>
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f8c8 3000 	str.w	r3, [r8]
            xReturn = pdPASS;
 80044c0:	2601      	movs	r6, #1
    __asm volatile
 80044c2:	f387 8811 	msr	BASEPRI, r7
    traceRETURN_xQueueReceiveFromISR( xReturn );
 80044c6:	20a7      	movs	r0, #167	@ 0xa7
 80044c8:	4631      	mov	r1, r6
 80044ca:	f002 f8f9 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
}
 80044ce:	4630      	mov	r0, r6
 80044d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 80044d4:	f000 fb0c 	bl	8004af0 <uxTaskGetNumberOfTasks>
 80044d8:	4285      	cmp	r5, r0
 80044da:	d2f1      	bcs.n	80044c0 <xQueueReceiveFromISR+0x82>
 80044dc:	2d7f      	cmp	r5, #127	@ 0x7f
 80044de:	d108      	bne.n	80044f2 <xQueueReceiveFromISR+0xb4>
    __asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	e7fe      	b.n	80044f0 <xQueueReceiveFromISR+0xb2>
 80044f2:	3501      	adds	r5, #1
 80044f4:	b26d      	sxtb	r5, r5
 80044f6:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 80044fa:	e7e1      	b.n	80044c0 <xQueueReceiveFromISR+0x82>

080044fc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80044fc:	b470      	push	{r4, r5, r6}
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80044fe:	b940      	cbnz	r0, 8004512 <vQueueAddToRegistry+0x16>
 8004500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	e7fe      	b.n	8004510 <vQueueAddToRegistry+0x14>

        if( pcQueueName != NULL )
 8004512:	b1b9      	cbz	r1, 8004544 <vQueueAddToRegistry+0x48>
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004514:	2300      	movs	r3, #0
 8004516:	4a0d      	ldr	r2, [pc, #52]	@ (800454c <vQueueAddToRegistry+0x50>)
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004518:	461c      	mov	r4, r3
 800451a:	4615      	mov	r5, r2
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800451c:	6856      	ldr	r6, [r2, #4]
 800451e:	4286      	cmp	r6, r0
 8004520:	d104      	bne.n	800452c <vQueueAddToRegistry+0x30>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004522:	eb05 03c4 	add.w	r3, r5, r4, lsl #3

        if( pxEntryToWrite != NULL )
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
            pxEntryToWrite->xHandle = xQueue;
 8004526:	e9c3 1000 	strd	r1, r0, [r3]
 800452a:	e00b      	b.n	8004544 <vQueueAddToRegistry+0x48>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800452c:	b91b      	cbnz	r3, 8004536 <vQueueAddToRegistry+0x3a>
 800452e:	6816      	ldr	r6, [r2, #0]
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004530:	2e00      	cmp	r6, #0
 8004532:	bf08      	it	eq
 8004534:	4613      	moveq	r3, r2
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004536:	3401      	adds	r4, #1
 8004538:	2c08      	cmp	r4, #8
 800453a:	f102 0208 	add.w	r2, r2, #8
 800453e:	d1ed      	bne.n	800451c <vQueueAddToRegistry+0x20>
        if( pxEntryToWrite != NULL )
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f0      	bne.n	8004526 <vQueueAddToRegistry+0x2a>

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8004544:	bc70      	pop	{r4, r5, r6}
        traceRETURN_vQueueAddToRegistry();
 8004546:	20b6      	movs	r0, #182	@ 0xb6
 8004548:	f002 b89c 	b.w	8006684 <SEGGER_SYSVIEW_RecordEndCall>
 800454c:	20000fdc 	.word	0x20000fdc

08004550 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	4604      	mov	r4, r0
 8004554:	460d      	mov	r5, r1
 8004556:	4616      	mov	r6, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004558:	f001 f866 	bl	8005628 <vPortEnterCritical>
 800455c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004560:	2bff      	cmp	r3, #255	@ 0xff
 8004562:	bf04      	itt	eq
 8004564:	2300      	moveq	r3, #0
 8004566:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 800456a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800456e:	2bff      	cmp	r3, #255	@ 0xff
 8004570:	bf04      	itt	eq
 8004572:	2300      	moveq	r3, #0
 8004574:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8004578:	f001 f876 	bl	8005668 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800457c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800457e:	b92b      	cbnz	r3, 800458c <vQueueWaitForMessageRestricted+0x3c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004580:	4632      	mov	r2, r6
 8004582:	4629      	mov	r1, r5
 8004584:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004588:	f000 fcb2 	bl	8004ef0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800458c:	4620      	mov	r0, r4
 800458e:	f7ff fc7f 	bl	8003e90 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8004592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        traceRETURN_vQueueWaitForMessageRestricted();
 8004596:	20b9      	movs	r0, #185	@ 0xb9
 8004598:	f002 b874 	b.w	8006684 <SEGGER_SYSVIEW_RecordEndCall>

0800459c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800459c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80045a0:	4604      	mov	r4, r0
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80045a2:	f001 f841 	bl	8005628 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80045a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004698 <prvAddNewTaskToReadyList+0xfc>)

            if( pxCurrentTCB == NULL )
 80045a8:	4e3c      	ldr	r6, [pc, #240]	@ (800469c <prvAddNewTaskToReadyList+0x100>)
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4f3c      	ldr	r7, [pc, #240]	@ (80046a0 <prvAddNewTaskToReadyList+0x104>)
 80045ae:	3201      	adds	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
            if( pxCurrentTCB == NULL )
 80045b2:	6835      	ldr	r5, [r6, #0]
 80045b4:	2d00      	cmp	r5, #0
 80045b6:	d163      	bne.n	8004680 <prvAddNewTaskToReadyList+0xe4>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80045b8:	6034      	str	r4, [r6, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d11f      	bne.n	8004600 <prvAddNewTaskToReadyList+0x64>
 80045c0:	46b8      	mov	r8, r7
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045c2:	4640      	mov	r0, r8
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045c4:	3501      	adds	r5, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045c6:	f7ff fbcd 	bl	8003d64 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045ca:	2d38      	cmp	r5, #56	@ 0x38
 80045cc:	f108 0814 	add.w	r8, r8, #20
 80045d0:	d1f7      	bne.n	80045c2 <prvAddNewTaskToReadyList+0x26>
    }

    vListInitialise( &xDelayedTaskList1 );
 80045d2:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 80046a4 <prvAddNewTaskToReadyList+0x108>
    vListInitialise( &xDelayedTaskList2 );
 80045d6:	4d34      	ldr	r5, [pc, #208]	@ (80046a8 <prvAddNewTaskToReadyList+0x10c>)
    vListInitialise( &xDelayedTaskList1 );
 80045d8:	4640      	mov	r0, r8
 80045da:	f7ff fbc3 	bl	8003d64 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80045de:	4628      	mov	r0, r5
 80045e0:	f7ff fbc0 	bl	8003d64 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80045e4:	4831      	ldr	r0, [pc, #196]	@ (80046ac <prvAddNewTaskToReadyList+0x110>)
 80045e6:	f7ff fbbd 	bl	8003d64 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80045ea:	4831      	ldr	r0, [pc, #196]	@ (80046b0 <prvAddNewTaskToReadyList+0x114>)
 80045ec:	f7ff fbba 	bl	8003d64 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80045f0:	4830      	ldr	r0, [pc, #192]	@ (80046b4 <prvAddNewTaskToReadyList+0x118>)
 80045f2:	f7ff fbb7 	bl	8003d64 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80045f6:	4b30      	ldr	r3, [pc, #192]	@ (80046b8 <prvAddNewTaskToReadyList+0x11c>)
 80045f8:	f8c3 8000 	str.w	r8, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045fc:	4b2f      	ldr	r3, [pc, #188]	@ (80046bc <prvAddNewTaskToReadyList+0x120>)
 80045fe:	601d      	str	r5, [r3, #0]
            uxTaskNumber++;
 8004600:	4a2f      	ldr	r2, [pc, #188]	@ (80046c0 <prvAddNewTaskToReadyList+0x124>)
            traceTASK_CREATE( pxNewTCB );
 8004602:	4620      	mov	r0, r4
            uxTaskNumber++;
 8004604:	6813      	ldr	r3, [r2, #0]
 8004606:	3301      	adds	r3, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004608:	6463      	str	r3, [r4, #68]	@ 0x44
            uxTaskNumber++;
 800460a:	6013      	str	r3, [r2, #0]
            traceTASK_CREATE( pxNewTCB );
 800460c:	f002 f896 	bl	800673c <SEGGER_SYSVIEW_OnTaskCreate>
 8004610:	4621      	mov	r1, r4
 8004612:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004614:	f851 2b34 	ldr.w	r2, [r1], #52
 8004618:	4620      	mov	r0, r4
 800461a:	1ad2      	subs	r2, r2, r3
 800461c:	9200      	str	r2, [sp, #0]
 800461e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004620:	f001 faaa 	bl	8005b78 <SYSVIEW_AddTask>
            prvAddTaskToReadyList( pxNewTCB );
 8004624:	4620      	mov	r0, r4
 8004626:	f002 f8d1 	bl	80067cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800462a:	4a26      	ldr	r2, [pc, #152]	@ (80046c4 <prvAddNewTaskToReadyList+0x128>)
 800462c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800462e:	6811      	ldr	r1, [r2, #0]
 8004630:	1d20      	adds	r0, r4, #4
 8004632:	428b      	cmp	r3, r1
 8004634:	bf88      	it	hi
 8004636:	6013      	strhi	r3, [r2, #0]
 8004638:	2214      	movs	r2, #20
 800463a:	4353      	muls	r3, r2
 800463c:	18f9      	adds	r1, r7, r3
 800463e:	684a      	ldr	r2, [r1, #4]
 8004640:	6895      	ldr	r5, [r2, #8]
 8004642:	60a2      	str	r2, [r4, #8]
 8004644:	60e5      	str	r5, [r4, #12]
 8004646:	6068      	str	r0, [r5, #4]
 8004648:	6090      	str	r0, [r2, #8]
 800464a:	58fa      	ldr	r2, [r7, r3]
 800464c:	6161      	str	r1, [r4, #20]
 800464e:	3201      	adds	r2, #1
 8004650:	50fa      	str	r2, [r7, r3]
        taskEXIT_CRITICAL();
 8004652:	f001 f809 	bl	8005668 <vPortExitCritical>
        if( xSchedulerRunning != pdFALSE )
 8004656:	4b1c      	ldr	r3, [pc, #112]	@ (80046c8 <prvAddNewTaskToReadyList+0x12c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	b173      	cbz	r3, 800467a <prvAddNewTaskToReadyList+0xde>
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800465c:	6833      	ldr	r3, [r6, #0]
 800465e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004660:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004662:	429a      	cmp	r2, r3
 8004664:	d209      	bcs.n	800467a <prvAddNewTaskToReadyList+0xde>
 8004666:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800466a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800466e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	f3bf 8f6f 	isb	sy
    }
 800467a:	b002      	add	sp, #8
 800467c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if( xSchedulerRunning == pdFALSE )
 8004680:	4b11      	ldr	r3, [pc, #68]	@ (80046c8 <prvAddNewTaskToReadyList+0x12c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1bb      	bne.n	8004600 <prvAddNewTaskToReadyList+0x64>
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004688:	6833      	ldr	r3, [r6, #0]
 800468a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800468c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800468e:	429a      	cmp	r2, r3
                        pxCurrentTCB = pxNewTCB;
 8004690:	bf98      	it	ls
 8004692:	6034      	strls	r4, [r6, #0]
 8004694:	e7b4      	b.n	8004600 <prvAddNewTaskToReadyList+0x64>
 8004696:	bf00      	nop
 8004698:	20001044 	.word	0x20001044
 800469c:	20001518 	.word	0x20001518
 80046a0:	200010b8 	.word	0x200010b8
 80046a4:	200010a4 	.word	0x200010a4
 80046a8:	20001090 	.word	0x20001090
 80046ac:	20001074 	.word	0x20001074
 80046b0:	20001060 	.word	0x20001060
 80046b4:	20001048 	.word	0x20001048
 80046b8:	2000108c 	.word	0x2000108c
 80046bc:	20001088 	.word	0x20001088
 80046c0:	20001028 	.word	0x20001028
 80046c4:	2000103c 	.word	0x2000103c
 80046c8:	20001038 	.word	0x20001038

080046cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80046cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d0:	4606      	mov	r6, r0
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80046d2:	4b21      	ldr	r3, [pc, #132]	@ (8004758 <prvAddCurrentTaskToDelayedList+0x8c>)
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046d4:	4c21      	ldr	r4, [pc, #132]	@ (800475c <prvAddCurrentTaskToDelayedList+0x90>)
    const TickType_t xConstTickCount = xTickCount;
 80046d6:	681d      	ldr	r5, [r3, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80046d8:	4b21      	ldr	r3, [pc, #132]	@ (8004760 <prvAddCurrentTaskToDelayedList+0x94>)
{
 80046da:	460f      	mov	r7, r1
    List_t * const pxDelayedList = pxDelayedTaskList;
 80046dc:	f8d3 8000 	ldr.w	r8, [r3]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80046e0:	4b20      	ldr	r3, [pc, #128]	@ (8004764 <prvAddCurrentTaskToDelayedList+0x98>)
 80046e2:	f8d3 9000 	ldr.w	r9, [r3]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046e6:	6820      	ldr	r0, [r4, #0]
 80046e8:	3004      	adds	r0, #4
 80046ea:	f7ff fb6a 	bl	8003dc2 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046ee:	1c73      	adds	r3, r6, #1
 80046f0:	d114      	bne.n	800471c <prvAddCurrentTaskToDelayedList+0x50>
 80046f2:	b19f      	cbz	r7, 800471c <prvAddCurrentTaskToDelayedList+0x50>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004768 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046f6:	6821      	ldr	r1, [r4, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	608a      	str	r2, [r1, #8]
 80046fc:	6890      	ldr	r0, [r2, #8]
 80046fe:	6821      	ldr	r1, [r4, #0]
 8004700:	60c8      	str	r0, [r1, #12]
 8004702:	6821      	ldr	r1, [r4, #0]
 8004704:	3104      	adds	r1, #4
 8004706:	6041      	str	r1, [r0, #4]
 8004708:	6821      	ldr	r1, [r4, #0]
 800470a:	3104      	adds	r1, #4
 800470c:	6091      	str	r1, [r2, #8]
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	6153      	str	r3, [r2, #20]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	3201      	adds	r2, #1
 8004716:	601a      	str	r2, [r3, #0]

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	19ad      	adds	r5, r5, r6
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004720:	f04f 0104 	mov.w	r1, #4
 8004724:	6820      	ldr	r0, [r4, #0]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004726:	605d      	str	r5, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004728:	d308      	bcc.n	800473c <prvAddCurrentTaskToDelayedList+0x70>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800472a:	f002 f873 	bl	8006814 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800472e:	6821      	ldr	r1, [r4, #0]
 8004730:	4648      	mov	r0, r9
}
 8004732:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004736:	3104      	adds	r1, #4
 8004738:	f7ff bb28 	b.w	8003d8c <vListInsert>
                traceMOVED_TASK_TO_DELAYED_LIST();
 800473c:	f002 f86a 	bl	8006814 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004740:	6821      	ldr	r1, [r4, #0]
 8004742:	4640      	mov	r0, r8
 8004744:	3104      	adds	r1, #4
 8004746:	f7ff fb21 	bl	8003d8c <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800474a:	4b08      	ldr	r3, [pc, #32]	@ (800476c <prvAddCurrentTaskToDelayedList+0xa0>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	42aa      	cmp	r2, r5
                    xNextTaskUnblockTime = xTimeToWake;
 8004750:	bf88      	it	hi
 8004752:	601d      	strhi	r5, [r3, #0]
}
 8004754:	e7e0      	b.n	8004718 <prvAddCurrentTaskToDelayedList+0x4c>
 8004756:	bf00      	nop
 8004758:	20001040 	.word	0x20001040
 800475c:	20001518 	.word	0x20001518
 8004760:	2000108c 	.word	0x2000108c
 8004764:	20001088 	.word	0x20001088
 8004768:	20001048 	.word	0x20001048
 800476c:	20001024 	.word	0x20001024

08004770 <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004770:	4a06      	ldr	r2, [pc, #24]	@ (800478c <prvResetNextTaskUnblockTime+0x1c>)
 8004772:	6813      	ldr	r3, [r2, #0]
 8004774:	6819      	ldr	r1, [r3, #0]
 8004776:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <prvResetNextTaskUnblockTime+0x20>)
 8004778:	b919      	cbnz	r1, 8004782 <prvResetNextTaskUnblockTime+0x12>
        xNextTaskUnblockTime = portMAX_DELAY;
 800477a:	f04f 32ff 	mov.w	r2, #4294967295
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800477e:	601a      	str	r2, [r3, #0]
}
 8004780:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	68d2      	ldr	r2, [r2, #12]
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	e7f9      	b.n	800477e <prvResetNextTaskUnblockTime+0xe>
 800478a:	bf00      	nop
 800478c:	2000108c 	.word	0x2000108c
 8004790:	20001024 	.word	0x20001024

08004794 <prvDeleteTCB>:
    {
 8004794:	b510      	push	{r4, lr}
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004796:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
    {
 800479a:	4604      	mov	r4, r0
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800479c:	b93b      	cbnz	r3, 80047ae <prvDeleteTCB+0x1a>
                vPortFreeStack( pxTCB->pxStack );
 800479e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80047a0:	f001 f932 	bl	8005a08 <vPortFree>
                vPortFree( pxTCB );
 80047a4:	4620      	mov	r0, r4
    }
 80047a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                vPortFree( pxTCB );
 80047aa:	f001 b92d 	b.w	8005a08 <vPortFree>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d0f9      	beq.n	80047a6 <prvDeleteTCB+0x12>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d008      	beq.n	80047c8 <prvDeleteTCB+0x34>
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	e7fe      	b.n	80047c6 <prvDeleteTCB+0x32>
    }
 80047c8:	bd10      	pop	{r4, pc}
	...

080047cc <prvCheckTasksWaitingTermination>:
{
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004800 <prvCheckTasksWaitingTermination+0x34>)
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80047d0:	4f0c      	ldr	r7, [pc, #48]	@ (8004804 <prvCheckTasksWaitingTermination+0x38>)
                        --uxCurrentNumberOfTasks;
 80047d2:	4d0d      	ldr	r5, [pc, #52]	@ (8004808 <prvCheckTasksWaitingTermination+0x3c>)
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	b903      	cbnz	r3, 80047da <prvCheckTasksWaitingTermination+0xe>
}
 80047d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                taskENTER_CRITICAL();
 80047da:	f000 ff25 	bl	8005628 <vPortEnterCritical>
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	68de      	ldr	r6, [r3, #12]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047e2:	1d30      	adds	r0, r6, #4
 80047e4:	f7ff faed 	bl	8003dc2 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	602b      	str	r3, [r5, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	6023      	str	r3, [r4, #0]
                taskEXIT_CRITICAL();
 80047f4:	f000 ff38 	bl	8005668 <vPortExitCritical>
                prvDeleteTCB( pxTCB );
 80047f8:	4630      	mov	r0, r6
 80047fa:	f7ff ffcb 	bl	8004794 <prvDeleteTCB>
 80047fe:	e7e9      	b.n	80047d4 <prvCheckTasksWaitingTermination+0x8>
 8004800:	2000105c 	.word	0x2000105c
 8004804:	20001060 	.word	0x20001060
 8004808:	20001044 	.word	0x20001044

0800480c <prvIdleTask>:
                taskYIELD();
 800480c:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8004810:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
{
 8004814:	b508      	push	{r3, lr}
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004816:	4e06      	ldr	r6, [pc, #24]	@ (8004830 <prvIdleTask+0x24>)
        prvCheckTasksWaitingTermination();
 8004818:	f7ff ffd8 	bl	80047cc <prvCheckTasksWaitingTermination>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800481c:	6833      	ldr	r3, [r6, #0]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d9fa      	bls.n	8004818 <prvIdleTask+0xc>
                taskYIELD();
 8004822:	f8c4 5d04 	str.w	r5, [r4, #3332]	@ 0xd04
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	e7f3      	b.n	8004818 <prvIdleTask+0xc>
 8004830:	200010b8 	.word	0x200010b8

08004834 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 8004834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004838:	460d      	mov	r5, r1
 800483a:	e9dd a90a 	ldrd	sl, r9, [sp, #40]	@ 0x28
 800483e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8004840:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 8004842:	4607      	mov	r7, r0
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8004844:	4632      	mov	r2, r6
 8004846:	21a5      	movs	r1, #165	@ 0xa5
 8004848:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 800484a:	4698      	mov	r8, r3
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800484c:	f002 fe11 	bl	8007472 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8004850:	f8d4 b030 	ldr.w	fp, [r4, #48]	@ 0x30
    if( pcName != NULL )
 8004854:	b16d      	cbz	r5, 8004872 <prvInitialiseNewTask.constprop.0+0x3e>
 8004856:	1e6b      	subs	r3, r5, #1
 8004858:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800485c:	350f      	adds	r5, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800485e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004862:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 8004866:	b109      	cbz	r1, 800486c <prvInitialiseNewTask.constprop.0+0x38>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004868:	42ab      	cmp	r3, r5
 800486a:	d1f8      	bne.n	800485e <prvInitialiseNewTask.constprop.0+0x2a>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800486c:	2300      	movs	r3, #0
 800486e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004872:	f1ba 0f37 	cmp.w	sl, #55	@ 0x37
 8004876:	d908      	bls.n	800488a <prvInitialiseNewTask.constprop.0+0x56>
 8004878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	e7fe      	b.n	8004888 <prvInitialiseNewTask.constprop.0+0x54>
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800488a:	1d20      	adds	r0, r4, #4
    pxNewTCB->uxPriority = uxPriority;
 800488c:	f8c4 a02c 	str.w	sl, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 8004890:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004894:	f7ff fa74 	bl	8003d80 <vListInitialiseItem>
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8004898:	3e04      	subs	r6, #4
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800489a:	f104 0018 	add.w	r0, r4, #24
 800489e:	f7ff fa6f 	bl	8003d80 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80048a2:	f1ca 0538 	rsb	r5, sl, #56	@ 0x38
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80048a6:	eb0b 0006 	add.w	r0, fp, r6
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048aa:	4642      	mov	r2, r8
 80048ac:	4639      	mov	r1, r7
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048ae:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80048b0:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048b2:	6264      	str	r4, [r4, #36]	@ 0x24
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048b4:	f020 0007 	bic.w	r0, r0, #7
 80048b8:	f000 fea4 	bl	8005604 <pxPortInitialiseStack>
 80048bc:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 80048be:	f1b9 0f00 	cmp.w	r9, #0
 80048c2:	d001      	beq.n	80048c8 <prvInitialiseNewTask.constprop.0+0x94>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048c4:	f8c9 4000 	str.w	r4, [r9]
}
 80048c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080048cc <xTaskCreateStatic>:
    {
 80048cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048d0:	460e      	mov	r6, r1
        TaskHandle_t xReturn = NULL;
 80048d2:	2100      	movs	r1, #0
    {
 80048d4:	b087      	sub	sp, #28
 80048d6:	4605      	mov	r5, r0
 80048d8:	e9dd 940f 	ldrd	r9, r4, [sp, #60]	@ 0x3c
 80048dc:	4617      	mov	r7, r2
 80048de:	4698      	mov	r8, r3
        TaskHandle_t xReturn = NULL;
 80048e0:	9104      	str	r1, [sp, #16]
        configASSERT( puxStackBuffer != NULL );
 80048e2:	f1b9 0f00 	cmp.w	r9, #0
 80048e6:	d108      	bne.n	80048fa <xTaskCreateStatic+0x2e>
 80048e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	e7fe      	b.n	80048f8 <xTaskCreateStatic+0x2c>
        configASSERT( pxTaskBuffer != NULL );
 80048fa:	b944      	cbnz	r4, 800490e <xTaskCreateStatic+0x42>
 80048fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	e7fe      	b.n	800490c <xTaskCreateStatic+0x40>
            volatile size_t xSize = sizeof( StaticTask_t );
 800490e:	235c      	movs	r3, #92	@ 0x5c
 8004910:	9305      	str	r3, [sp, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8004912:	9a05      	ldr	r2, [sp, #20]
 8004914:	429a      	cmp	r2, r3
 8004916:	d008      	beq.n	800492a <xTaskCreateStatic+0x5e>
 8004918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	e7fe      	b.n	8004928 <xTaskCreateStatic+0x5c>
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800492a:	4620      	mov	r0, r4
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 800492c:	9b05      	ldr	r3, [sp, #20]
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800492e:	f002 fda0 	bl	8007472 <memset>
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004932:	2302      	movs	r3, #2
 8004934:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004938:	ab04      	add	r3, sp, #16
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800493a:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004942:	463a      	mov	r2, r7
 8004944:	4631      	mov	r1, r6
 8004946:	4628      	mov	r0, r5
 8004948:	9402      	str	r4, [sp, #8]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	4643      	mov	r3, r8
 800494e:	f7ff ff71 	bl	8004834 <prvInitialiseNewTask.constprop.0>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004952:	4620      	mov	r0, r4
 8004954:	f7ff fe22 	bl	800459c <prvAddNewTaskToReadyList>
        traceRETURN_xTaskCreateStatic( xReturn );
 8004958:	9c04      	ldr	r4, [sp, #16]
 800495a:	4620      	mov	r0, r4
 800495c:	f001 fb34 	bl	8005fc8 <SEGGER_SYSVIEW_ShrinkId>
 8004960:	4601      	mov	r1, r0
 8004962:	20bf      	movs	r0, #191	@ 0xbf
 8004964:	f001 feac 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
    }
 8004968:	4620      	mov	r0, r4
 800496a:	b007      	add	sp, #28
 800496c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004970 <xTaskCreate>:
    {
 8004970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004974:	4607      	mov	r7, r0
 8004976:	b085      	sub	sp, #20
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8004978:	0090      	lsls	r0, r2, #2
    {
 800497a:	4688      	mov	r8, r1
 800497c:	4616      	mov	r6, r2
 800497e:	4699      	mov	r9, r3
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8004980:	f000 ff78 	bl	8005874 <pvPortMalloc>
            if( pxStack != NULL )
 8004984:	4605      	mov	r5, r0
 8004986:	b318      	cbz	r0, 80049d0 <xTaskCreate+0x60>
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8004988:	205c      	movs	r0, #92	@ 0x5c
 800498a:	f000 ff73 	bl	8005874 <pvPortMalloc>
 800498e:	4604      	mov	r4, r0
                if( pxNewTCB != NULL )
 8004990:	b1d8      	cbz	r0, 80049ca <xTaskCreate+0x5a>
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004992:	225c      	movs	r2, #92	@ 0x5c
 8004994:	2100      	movs	r1, #0
 8004996:	f002 fd6c 	bl	8007472 <memset>
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800499a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
                    pxNewTCB->pxStack = pxStack;
 800499c:	6325      	str	r5, [r4, #48]	@ 0x30
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80049a2:	4632      	mov	r2, r6
 80049a4:	4641      	mov	r1, r8
 80049a6:	4638      	mov	r0, r7
 80049a8:	9402      	str	r4, [sp, #8]
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	464b      	mov	r3, r9
 80049ae:	f7ff ff41 	bl	8004834 <prvInitialiseNewTask.constprop.0>
            prvAddNewTaskToReadyList( pxNewTCB );
 80049b2:	4620      	mov	r0, r4
 80049b4:	f7ff fdf2 	bl	800459c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80049b8:	2401      	movs	r4, #1
        traceRETURN_xTaskCreate( xReturn );
 80049ba:	4621      	mov	r1, r4
 80049bc:	20c2      	movs	r0, #194	@ 0xc2
 80049be:	f001 fe7f 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
    }
 80049c2:	4620      	mov	r0, r4
 80049c4:	b005      	add	sp, #20
 80049c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    vPortFreeStack( pxStack );
 80049ca:	4628      	mov	r0, r5
 80049cc:	f001 f81c 	bl	8005a08 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049d0:	f04f 34ff 	mov.w	r4, #4294967295
 80049d4:	e7f1      	b.n	80049ba <xTaskCreate+0x4a>
	...

080049d8 <vTaskStartScheduler>:
{
 80049d8:	b530      	push	{r4, r5, lr}
 80049da:	b08d      	sub	sp, #52	@ 0x34
 80049dc:	ab08      	add	r3, sp, #32
 80049de:	461d      	mov	r5, r3
 80049e0:	4a29      	ldr	r2, [pc, #164]	@ (8004a88 <vTaskStartScheduler+0xb0>)
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80049e2:	f812 4b01 	ldrb.w	r4, [r2], #1
 80049e6:	f803 4b01 	strb.w	r4, [r3], #1
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80049ea:	2c00      	cmp	r4, #0
 80049ec:	d1f9      	bne.n	80049e2 <vTaskStartScheduler+0xa>
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 80049ee:	aa07      	add	r2, sp, #28
 80049f0:	a906      	add	r1, sp, #24
 80049f2:	a805      	add	r0, sp, #20
            StackType_t * pxIdleTaskStackBuffer = NULL;
 80049f4:	e9cd 4405 	strd	r4, r4, [sp, #20]
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 80049f8:	f7ff f99c 	bl	8003d34 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 80049fc:	9b05      	ldr	r3, [sp, #20]
 80049fe:	4629      	mov	r1, r5
 8004a00:	9302      	str	r3, [sp, #8]
 8004a02:	9b06      	ldr	r3, [sp, #24]
 8004a04:	9a07      	ldr	r2, [sp, #28]
 8004a06:	e9cd 4300 	strd	r4, r3, [sp]
 8004a0a:	4820      	ldr	r0, [pc, #128]	@ (8004a8c <vTaskStartScheduler+0xb4>)
 8004a0c:	4623      	mov	r3, r4
 8004a0e:	f7ff ff5d 	bl	80048cc <xTaskCreateStatic>
 8004a12:	4b1f      	ldr	r3, [pc, #124]	@ (8004a90 <vTaskStartScheduler+0xb8>)
 8004a14:	6018      	str	r0, [r3, #0]
            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8004a16:	b300      	cbz	r0, 8004a5a <vTaskStartScheduler+0x82>
            xReturn = xTimerCreateTimerTask();
 8004a18:	f000 fd4c 	bl	80054b4 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 8004a1c:	2801      	cmp	r0, #1
 8004a1e:	d127      	bne.n	8004a70 <vTaskStartScheduler+0x98>
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 8004a30:	f04f 32ff 	mov.w	r2, #4294967295
 8004a34:	4b17      	ldr	r3, [pc, #92]	@ (8004a94 <vTaskStartScheduler+0xbc>)
        traceTASK_SWITCHED_IN();
 8004a36:	4914      	ldr	r1, [pc, #80]	@ (8004a88 <vTaskStartScheduler+0xb0>)
        xNextTaskUnblockTime = portMAX_DELAY;
 8004a38:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004a3a:	4b17      	ldr	r3, [pc, #92]	@ (8004a98 <vTaskStartScheduler+0xc0>)
        traceTASK_SWITCHED_IN();
 8004a3c:	2205      	movs	r2, #5
        xSchedulerRunning = pdTRUE;
 8004a3e:	6018      	str	r0, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a40:	4b16      	ldr	r3, [pc, #88]	@ (8004a9c <vTaskStartScheduler+0xc4>)
 8004a42:	601c      	str	r4, [r3, #0]
        traceTASK_SWITCHED_IN();
 8004a44:	4c16      	ldr	r4, [pc, #88]	@ (8004aa0 <vTaskStartScheduler+0xc8>)
 8004a46:	6820      	ldr	r0, [r4, #0]
 8004a48:	3034      	adds	r0, #52	@ 0x34
 8004a4a:	f002 fd02 	bl	8007452 <memcmp>
 8004a4e:	b160      	cbz	r0, 8004a6a <vTaskStartScheduler+0x92>
 8004a50:	6820      	ldr	r0, [r4, #0]
 8004a52:	f001 fe97 	bl	8006784 <SEGGER_SYSVIEW_OnTaskStartExec>
        ( void ) xPortStartScheduler();
 8004a56:	f000 fe4b 	bl	80056f0 <xPortStartScheduler>
    traceRETURN_vTaskStartScheduler();
 8004a5a:	20cd      	movs	r0, #205	@ 0xcd
    ( void ) uxTopUsedPriority;
 8004a5c:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <vTaskStartScheduler+0xcc>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
}
 8004a60:	b00d      	add	sp, #52	@ 0x34
 8004a62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    traceRETURN_vTaskStartScheduler();
 8004a66:	f001 be0d 	b.w	8006684 <SEGGER_SYSVIEW_RecordEndCall>
        traceTASK_SWITCHED_IN();
 8004a6a:	f001 fe55 	bl	8006718 <SEGGER_SYSVIEW_OnIdle>
 8004a6e:	e7f2      	b.n	8004a56 <vTaskStartScheduler+0x7e>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a70:	3001      	adds	r0, #1
 8004a72:	d1f2      	bne.n	8004a5a <vTaskStartScheduler+0x82>
 8004a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	e7fe      	b.n	8004a84 <vTaskStartScheduler+0xac>
 8004a86:	bf00      	nop
 8004a88:	08009672 	.word	0x08009672
 8004a8c:	0800480d 	.word	0x0800480d
 8004a90:	20001020 	.word	0x20001020
 8004a94:	20001024 	.word	0x20001024
 8004a98:	20001038 	.word	0x20001038
 8004a9c:	20001040 	.word	0x20001040
 8004aa0:	20001518 	.word	0x20001518
 8004aa4:	08009920 	.word	0x08009920

08004aa8 <vTaskSuspendAll>:
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8004aa8:	4a03      	ldr	r2, [pc, #12]	@ (8004ab8 <vTaskSuspendAll+0x10>)
 8004aaa:	6813      	ldr	r3, [r2, #0]
 8004aac:	3301      	adds	r3, #1
 8004aae:	6013      	str	r3, [r2, #0]
    traceRETURN_vTaskSuspendAll();
 8004ab0:	20cf      	movs	r0, #207	@ 0xcf
 8004ab2:	f001 bde7 	b.w	8006684 <SEGGER_SYSVIEW_RecordEndCall>
 8004ab6:	bf00      	nop
 8004ab8:	2000101c 	.word	0x2000101c

08004abc <xTaskGetTickCount>:
{
 8004abc:	b510      	push	{r4, lr}
        xTicks = xTickCount;
 8004abe:	4b04      	ldr	r3, [pc, #16]	@ (8004ad0 <xTaskGetTickCount+0x14>)
    traceRETURN_xTaskGetTickCount( xTicks );
 8004ac0:	20d1      	movs	r0, #209	@ 0xd1
        xTicks = xTickCount;
 8004ac2:	681c      	ldr	r4, [r3, #0]
    traceRETURN_xTaskGetTickCount( xTicks );
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	f001 fdfb 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
}
 8004aca:	4620      	mov	r0, r4
 8004acc:	bd10      	pop	{r4, pc}
 8004ace:	bf00      	nop
 8004ad0:	20001040 	.word	0x20001040

08004ad4 <xTaskGetTickCountFromISR>:
{
 8004ad4:	b510      	push	{r4, lr}
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ad6:	f000 fe9f 	bl	8005818 <vPortValidateInterruptPriority>
        xReturn = xTickCount;
 8004ada:	4b04      	ldr	r3, [pc, #16]	@ (8004aec <xTaskGetTickCountFromISR+0x18>)
    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8004adc:	20d2      	movs	r0, #210	@ 0xd2
        xReturn = xTickCount;
 8004ade:	681c      	ldr	r4, [r3, #0]
    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	f001 fded 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
}
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	bd10      	pop	{r4, pc}
 8004aea:	bf00      	nop
 8004aec:	20001040 	.word	0x20001040

08004af0 <uxTaskGetNumberOfTasks>:
{
 8004af0:	b510      	push	{r4, lr}
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8004af2:	4c03      	ldr	r4, [pc, #12]	@ (8004b00 <uxTaskGetNumberOfTasks+0x10>)
 8004af4:	20d3      	movs	r0, #211	@ 0xd3
 8004af6:	6821      	ldr	r1, [r4, #0]
 8004af8:	f001 fde2 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
    return uxCurrentNumberOfTasks;
 8004afc:	6820      	ldr	r0, [r4, #0]
}
 8004afe:	bd10      	pop	{r4, pc}
 8004b00:	20001044 	.word	0x20001044

08004b04 <xTaskIncrementTick>:
{
 8004b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004b08:	4b53      	ldr	r3, [pc, #332]	@ (8004c58 <xTaskIncrementTick+0x154>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f040 809d 	bne.w	8004c4c <xTaskIncrementTick+0x148>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b12:	4b52      	ldr	r3, [pc, #328]	@ (8004c5c <xTaskIncrementTick+0x158>)
 8004b14:	681d      	ldr	r5, [r3, #0]
 8004b16:	3501      	adds	r5, #1
        xTickCount = xConstTickCount;
 8004b18:	601d      	str	r5, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U )
 8004b1a:	b9bd      	cbnz	r5, 8004b4c <xTaskIncrementTick+0x48>
            taskSWITCH_DELAYED_LISTS();
 8004b1c:	4b50      	ldr	r3, [pc, #320]	@ (8004c60 <xTaskIncrementTick+0x15c>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	b142      	cbz	r2, 8004b36 <xTaskIncrementTick+0x32>
 8004b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	e7fe      	b.n	8004b34 <xTaskIncrementTick+0x30>
 8004b36:	4a4b      	ldr	r2, [pc, #300]	@ (8004c64 <xTaskIncrementTick+0x160>)
 8004b38:	6819      	ldr	r1, [r3, #0]
 8004b3a:	6810      	ldr	r0, [r2, #0]
 8004b3c:	6018      	str	r0, [r3, #0]
 8004b3e:	6011      	str	r1, [r2, #0]
 8004b40:	4a49      	ldr	r2, [pc, #292]	@ (8004c68 <xTaskIncrementTick+0x164>)
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	f7ff fe12 	bl	8004770 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004b4c:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8004c6c <xTaskIncrementTick+0x168>
    BaseType_t xSwitchRequired = pdFALSE;
 8004b50:	2400      	movs	r4, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004b52:	f8d8 3000 	ldr.w	r3, [r8]
 8004b56:	4e46      	ldr	r6, [pc, #280]	@ (8004c70 <xTaskIncrementTick+0x16c>)
 8004b58:	42ab      	cmp	r3, r5
 8004b5a:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 8004c74 <xTaskIncrementTick+0x170>
 8004b5e:	d914      	bls.n	8004b8a <xTaskIncrementTick+0x86>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8004b60:	2214      	movs	r2, #20
 8004b62:	f8d9 3000 	ldr.w	r3, [r9]
 8004b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b68:	4353      	muls	r3, r2
 8004b6a:	58f3      	ldr	r3, [r6, r3]
                    xSwitchRequired = pdTRUE;
 8004b6c:	2b02      	cmp	r3, #2
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004b6e:	4b42      	ldr	r3, [pc, #264]	@ (8004c78 <xTaskIncrementTick+0x174>)
                    xSwitchRequired = pdTRUE;
 8004b70:	bf28      	it	cs
 8004b72:	2401      	movcs	r4, #1
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004b74:	681b      	ldr	r3, [r3, #0]
                    xSwitchRequired = pdTRUE;
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bf18      	it	ne
 8004b7a:	2401      	movne	r4, #1
    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	20db      	movs	r0, #219	@ 0xdb
 8004b80:	f001 fd9e 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
}
 8004b84:	4620      	mov	r0, r4
 8004b86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b8a:	4a35      	ldr	r2, [pc, #212]	@ (8004c60 <xTaskIncrementTick+0x15c>)
                    prvAddTaskToReadyList( pxTCB );
 8004b8c:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 8004c7c <xTaskIncrementTick+0x178>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b90:	6813      	ldr	r3, [r2, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	b923      	cbnz	r3, 8004ba0 <xTaskIncrementTick+0x9c>
                    xNextTaskUnblockTime = portMAX_DELAY;
 8004b96:	f04f 33ff 	mov.w	r3, #4294967295
                        xNextTaskUnblockTime = xItemValue;
 8004b9a:	f8c8 3000 	str.w	r3, [r8]
                        break;
 8004b9e:	e7df      	b.n	8004b60 <xTaskIncrementTick+0x5c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ba0:	6813      	ldr	r3, [r2, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ba8:	f8db 3004 	ldr.w	r3, [fp, #4]
                    if( xConstTickCount < xItemValue )
 8004bac:	429d      	cmp	r5, r3
 8004bae:	d3f4      	bcc.n	8004b9a <xTaskIncrementTick+0x96>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004bb0:	e9db 3002 	ldrd	r3, r0, [fp, #8]
 8004bb4:	f8db 1014 	ldr.w	r1, [fp, #20]
 8004bb8:	6098      	str	r0, [r3, #8]
 8004bba:	6043      	str	r3, [r0, #4]
 8004bbc:	684b      	ldr	r3, [r1, #4]
 8004bbe:	f10b 0704 	add.w	r7, fp, #4
 8004bc2:	42bb      	cmp	r3, r7
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	bf08      	it	eq
 8004bca:	6048      	streq	r0, [r1, #4]
 8004bcc:	f8cb 3014 	str.w	r3, [fp, #20]
 8004bd0:	680b      	ldr	r3, [r1, #0]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	600b      	str	r3, [r1, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bd6:	f8db 1028 	ldr.w	r1, [fp, #40]	@ 0x28
 8004bda:	b181      	cbz	r1, 8004bfe <xTaskIncrementTick+0xfa>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004bdc:	e9db 3007 	ldrd	r3, r0, [fp, #28]
 8004be0:	6098      	str	r0, [r3, #8]
 8004be2:	6043      	str	r3, [r0, #4]
 8004be4:	684b      	ldr	r3, [r1, #4]
 8004be6:	f10b 0c18 	add.w	ip, fp, #24
 8004bea:	4563      	cmp	r3, ip
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	bf08      	it	eq
 8004bf2:	6048      	streq	r0, [r1, #4]
 8004bf4:	f8cb 3028 	str.w	r3, [fp, #40]	@ 0x28
 8004bf8:	680b      	ldr	r3, [r1, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	600b      	str	r3, [r1, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004bfe:	4658      	mov	r0, fp
 8004c00:	f001 fde4 	bl	80067cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8004c04:	2114      	movs	r1, #20
 8004c06:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8004c0a:	f8da 3000 	ldr.w	r3, [sl]
 8004c0e:	4341      	muls	r1, r0
 8004c10:	eb06 0c01 	add.w	ip, r6, r1
 8004c14:	4298      	cmp	r0, r3
 8004c16:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004c1a:	bf88      	it	hi
 8004c1c:	f8ca 0000 	strhi.w	r0, [sl]
 8004c20:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8004c24:	f8cb 3008 	str.w	r3, [fp, #8]
 8004c28:	f8cb e00c 	str.w	lr, [fp, #12]
 8004c2c:	f8ce 7004 	str.w	r7, [lr, #4]
 8004c30:	609f      	str	r7, [r3, #8]
 8004c32:	5873      	ldr	r3, [r6, r1]
 8004c34:	f8cb c014 	str.w	ip, [fp, #20]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	5073      	str	r3, [r6, r1]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c3c:	f8d9 3000 	ldr.w	r3, [r9]
                    prvAddTaskToReadyList( pxTCB );
 8004c40:	4a07      	ldr	r2, [pc, #28]	@ (8004c60 <xTaskIncrementTick+0x15c>)
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                                xSwitchRequired = pdTRUE;
 8004c44:	4298      	cmp	r0, r3
 8004c46:	bf88      	it	hi
 8004c48:	2401      	movhi	r4, #1
 8004c4a:	e7a1      	b.n	8004b90 <xTaskIncrementTick+0x8c>
        xPendedTicks += 1U;
 8004c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004c80 <xTaskIncrementTick+0x17c>)
    BaseType_t xSwitchRequired = pdFALSE;
 8004c4e:	2400      	movs	r4, #0
        xPendedTicks += 1U;
 8004c50:	6813      	ldr	r3, [r2, #0]
 8004c52:	3301      	adds	r3, #1
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	e791      	b.n	8004b7c <xTaskIncrementTick+0x78>
 8004c58:	2000101c 	.word	0x2000101c
 8004c5c:	20001040 	.word	0x20001040
 8004c60:	2000108c 	.word	0x2000108c
 8004c64:	20001088 	.word	0x20001088
 8004c68:	2000102c 	.word	0x2000102c
 8004c6c:	20001024 	.word	0x20001024
 8004c70:	200010b8 	.word	0x200010b8
 8004c74:	20001518 	.word	0x20001518
 8004c78:	20001030 	.word	0x20001030
 8004c7c:	2000103c 	.word	0x2000103c
 8004c80:	20001034 	.word	0x20001034

08004c84 <xTaskResumeAll>:
{
 8004c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        taskENTER_CRITICAL();
 8004c88:	f000 fcce 	bl	8005628 <vPortEnterCritical>
            configASSERT( uxSchedulerSuspended != 0U );
 8004c8c:	4b46      	ldr	r3, [pc, #280]	@ (8004da8 <xTaskResumeAll+0x124>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	b942      	cbnz	r2, 8004ca4 <xTaskResumeAll+0x20>
 8004c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	e7fe      	b.n	8004ca2 <xTaskResumeAll+0x1e>
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	3a01      	subs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004caa:	681c      	ldr	r4, [r3, #0]
 8004cac:	b14c      	cbz	r4, 8004cc2 <xTaskResumeAll+0x3e>
    BaseType_t xAlreadyYielded = pdFALSE;
 8004cae:	2400      	movs	r4, #0
        taskEXIT_CRITICAL();
 8004cb0:	f000 fcda 	bl	8005668 <vPortExitCritical>
    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	20d0      	movs	r0, #208	@ 0xd0
 8004cb8:	f001 fd02 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
}
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cc2:	4b3a      	ldr	r3, [pc, #232]	@ (8004dac <xTaskResumeAll+0x128>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f1      	beq.n	8004cae <xTaskResumeAll+0x2a>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004cca:	4626      	mov	r6, r4
 8004ccc:	4627      	mov	r7, r4
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cce:	4d38      	ldr	r5, [pc, #224]	@ (8004db0 <xTaskResumeAll+0x12c>)
 8004cd0:	e045      	b.n	8004d5e <xTaskResumeAll+0xda>
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004cd2:	68eb      	ldr	r3, [r5, #12]
 8004cd4:	68dc      	ldr	r4, [r3, #12]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004cd6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004cd8:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8004cdc:	6858      	ldr	r0, [r3, #4]
 8004cde:	608a      	str	r2, [r1, #8]
 8004ce0:	6051      	str	r1, [r2, #4]
 8004ce2:	f104 0118 	add.w	r1, r4, #24
 8004ce6:	4288      	cmp	r0, r1
 8004ce8:	bf08      	it	eq
 8004cea:	605a      	streq	r2, [r3, #4]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	62a6      	str	r6, [r4, #40]	@ 0x28
 8004cf0:	3a01      	subs	r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004cf4:	6963      	ldr	r3, [r4, #20]
 8004cf6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004cfa:	608a      	str	r2, [r1, #8]
 8004cfc:	6051      	str	r1, [r2, #4]
 8004cfe:	6859      	ldr	r1, [r3, #4]
 8004d00:	f104 0804 	add.w	r8, r4, #4
 8004d04:	4541      	cmp	r1, r8
 8004d06:	bf08      	it	eq
 8004d08:	605a      	streq	r2, [r3, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004d0c:	4620      	mov	r0, r4
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004d0e:	3a01      	subs	r2, #1
 8004d10:	6167      	str	r7, [r4, #20]
 8004d12:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004d14:	f001 fd5a 	bl	80067cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8004d18:	4b26      	ldr	r3, [pc, #152]	@ (8004db4 <xTaskResumeAll+0x130>)
 8004d1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004d1c:	6819      	ldr	r1, [r3, #0]
 8004d1e:	428a      	cmp	r2, r1
 8004d20:	bf88      	it	hi
 8004d22:	601a      	strhi	r2, [r3, #0]
 8004d24:	2314      	movs	r3, #20
 8004d26:	4353      	muls	r3, r2
 8004d28:	4923      	ldr	r1, [pc, #140]	@ (8004db8 <xTaskResumeAll+0x134>)
 8004d2a:	eb01 0c03 	add.w	ip, r1, r3
 8004d2e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8004d32:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8004d36:	60a0      	str	r0, [r4, #8]
 8004d38:	f8c4 e00c 	str.w	lr, [r4, #12]
 8004d3c:	f8ce 8004 	str.w	r8, [lr, #4]
 8004d40:	f8c0 8008 	str.w	r8, [r0, #8]
 8004d44:	58c8      	ldr	r0, [r1, r3]
 8004d46:	f8c4 c014 	str.w	ip, [r4, #20]
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	50c8      	str	r0, [r1, r3]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dbc <xTaskResumeAll+0x138>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d902      	bls.n	8004d5e <xTaskResumeAll+0xda>
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8004d58:	2201      	movs	r2, #1
 8004d5a:	4b19      	ldr	r3, [pc, #100]	@ (8004dc0 <xTaskResumeAll+0x13c>)
 8004d5c:	601a      	str	r2, [r3, #0]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d5e:	682b      	ldr	r3, [r5, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1b6      	bne.n	8004cd2 <xTaskResumeAll+0x4e>
                    if( pxTCB != NULL )
 8004d64:	b10c      	cbz	r4, 8004d6a <xTaskResumeAll+0xe6>
                        prvResetNextTaskUnblockTime();
 8004d66:	f7ff fd03 	bl	8004770 <prvResetNextTaskUnblockTime>
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d6a:	4d16      	ldr	r5, [pc, #88]	@ (8004dc4 <xTaskResumeAll+0x140>)
 8004d6c:	682c      	ldr	r4, [r5, #0]
                        if( xPendedCounts > ( TickType_t ) 0U )
 8004d6e:	b144      	cbz	r4, 8004d82 <xTaskResumeAll+0xfe>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004d70:	2701      	movs	r7, #1
 8004d72:	4e13      	ldr	r6, [pc, #76]	@ (8004dc0 <xTaskResumeAll+0x13c>)
                                if( xTaskIncrementTick() != pdFALSE )
 8004d74:	f7ff fec6 	bl	8004b04 <xTaskIncrementTick>
 8004d78:	b100      	cbz	r0, 8004d7c <xTaskResumeAll+0xf8>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004d7a:	6037      	str	r7, [r6, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8004d7c:	3c01      	subs	r4, #1
 8004d7e:	d1f9      	bne.n	8004d74 <xTaskResumeAll+0xf0>
                            xPendedTicks = 0;
 8004d80:	602c      	str	r4, [r5, #0]
                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8004d82:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc0 <xTaskResumeAll+0x13c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d091      	beq.n	8004cae <xTaskResumeAll+0x2a>
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004dbc <xTaskResumeAll+0x138>)
 8004d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004d96:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 8004da2:	2401      	movs	r4, #1
 8004da4:	e784      	b.n	8004cb0 <xTaskResumeAll+0x2c>
 8004da6:	bf00      	nop
 8004da8:	2000101c 	.word	0x2000101c
 8004dac:	20001044 	.word	0x20001044
 8004db0:	20001074 	.word	0x20001074
 8004db4:	2000103c 	.word	0x2000103c
 8004db8:	200010b8 	.word	0x200010b8
 8004dbc:	20001518 	.word	0x20001518
 8004dc0:	20001030 	.word	0x20001030
 8004dc4:	20001034 	.word	0x20001034

08004dc8 <vTaskDelay>:
    {
 8004dc8:	b510      	push	{r4, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004dca:	4604      	mov	r4, r0
 8004dcc:	b970      	cbnz	r0, 8004dec <vTaskDelay+0x24>
            taskYIELD_WITHIN_API();
 8004dce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dd6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	f3bf 8f6f 	isb	sy
        traceRETURN_vTaskDelay();
 8004de2:	20c5      	movs	r0, #197	@ 0xc5
    }
 8004de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        traceRETURN_vTaskDelay();
 8004de8:	f001 bc4c 	b.w	8006684 <SEGGER_SYSVIEW_RecordEndCall>
            vTaskSuspendAll();
 8004dec:	f7ff fe5c 	bl	8004aa8 <vTaskSuspendAll>
                configASSERT( uxSchedulerSuspended == 1U );
 8004df0:	4b0a      	ldr	r3, [pc, #40]	@ (8004e1c <vTaskDelay+0x54>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d008      	beq.n	8004e0a <vTaskDelay+0x42>
 8004df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	e7fe      	b.n	8004e08 <vTaskDelay+0x40>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f7ff fc5d 	bl	80046cc <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8004e12:	f7ff ff37 	bl	8004c84 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d0d9      	beq.n	8004dce <vTaskDelay+0x6>
 8004e1a:	e7e2      	b.n	8004de2 <vTaskDelay+0x1a>
 8004e1c:	2000101c 	.word	0x2000101c

08004e20 <vTaskSwitchContext>:
        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004e20:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea0 <vTaskSwitchContext+0x80>)
    {
 8004e22:	b570      	push	{r4, r5, r6, lr}
        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea4 <vTaskSwitchContext+0x84>)
 8004e28:	b112      	cbz	r2, 8004e30 <vTaskSwitchContext+0x10>
            xYieldPendings[ 0 ] = pdTRUE;
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
    }
 8004e2e:	bd70      	pop	{r4, r5, r6, pc}
            xYieldPendings[ 0 ] = pdFALSE;
 8004e30:	2614      	movs	r6, #20
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e32:	4d1d      	ldr	r5, [pc, #116]	@ (8004ea8 <vTaskSwitchContext+0x88>)
            xYieldPendings[ 0 ] = pdFALSE;
 8004e34:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e36:	682a      	ldr	r2, [r5, #0]
 8004e38:	491c      	ldr	r1, [pc, #112]	@ (8004eac <vTaskSwitchContext+0x8c>)
 8004e3a:	fb06 f302 	mul.w	r3, r6, r2
 8004e3e:	58cc      	ldr	r4, [r1, r3]
 8004e40:	1858      	adds	r0, r3, r1
 8004e42:	b1ec      	cbz	r4, 8004e80 <vTaskSwitchContext+0x60>
 8004e44:	6844      	ldr	r4, [r0, #4]
 8004e46:	3308      	adds	r3, #8
 8004e48:	6864      	ldr	r4, [r4, #4]
 8004e4a:	440b      	add	r3, r1
 8004e4c:	429c      	cmp	r4, r3
 8004e4e:	bf08      	it	eq
 8004e50:	68c3      	ldreq	r3, [r0, #12]
 8004e52:	6044      	str	r4, [r0, #4]
 8004e54:	bf08      	it	eq
 8004e56:	6043      	streq	r3, [r0, #4]
 8004e58:	2314      	movs	r3, #20
 8004e5a:	fb03 1102 	mla	r1, r3, r2, r1
 8004e5e:	684b      	ldr	r3, [r1, #4]
 8004e60:	4c13      	ldr	r4, [pc, #76]	@ (8004eb0 <vTaskSwitchContext+0x90>)
 8004e62:	68db      	ldr	r3, [r3, #12]
            traceTASK_SWITCHED_IN();
 8004e64:	4913      	ldr	r1, [pc, #76]	@ (8004eb4 <vTaskSwitchContext+0x94>)
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e66:	6023      	str	r3, [r4, #0]
 8004e68:	602a      	str	r2, [r5, #0]
            traceTASK_SWITCHED_IN();
 8004e6a:	6820      	ldr	r0, [r4, #0]
 8004e6c:	2205      	movs	r2, #5
 8004e6e:	3034      	adds	r0, #52	@ 0x34
 8004e70:	f002 faef 	bl	8007452 <memcmp>
 8004e74:	b180      	cbz	r0, 8004e98 <vTaskSwitchContext+0x78>
 8004e76:	6820      	ldr	r0, [r4, #0]
 8004e78:	f001 fc84 	bl	8006784 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004e7c:	6823      	ldr	r3, [r4, #0]
    }
 8004e7e:	e7d6      	b.n	8004e2e <vTaskSwitchContext+0xe>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e80:	b942      	cbnz	r2, 8004e94 <vTaskSwitchContext+0x74>
 8004e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	e7fe      	b.n	8004e92 <vTaskSwitchContext+0x72>
 8004e94:	3a01      	subs	r2, #1
 8004e96:	e7d0      	b.n	8004e3a <vTaskSwitchContext+0x1a>
            traceTASK_SWITCHED_IN();
 8004e98:	f001 fc3e 	bl	8006718 <SEGGER_SYSVIEW_OnIdle>
 8004e9c:	e7ee      	b.n	8004e7c <vTaskSwitchContext+0x5c>
 8004e9e:	bf00      	nop
 8004ea0:	2000101c 	.word	0x2000101c
 8004ea4:	20001030 	.word	0x20001030
 8004ea8:	2000103c 	.word	0x2000103c
 8004eac:	200010b8 	.word	0x200010b8
 8004eb0:	20001518 	.word	0x20001518
 8004eb4:	08009672 	.word	0x08009672

08004eb8 <vTaskPlaceOnEventList>:
{
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	460c      	mov	r4, r1
    configASSERT( pxEventList );
 8004ebc:	b940      	cbnz	r0, 8004ed0 <vTaskPlaceOnEventList+0x18>
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	e7fe      	b.n	8004ece <vTaskPlaceOnEventList+0x16>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ed0:	4b06      	ldr	r3, [pc, #24]	@ (8004eec <vTaskPlaceOnEventList+0x34>)
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	3118      	adds	r1, #24
 8004ed6:	f7fe ff59 	bl	8003d8c <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004eda:	4620      	mov	r0, r4
 8004edc:	2101      	movs	r1, #1
 8004ede:	f7ff fbf5 	bl	80046cc <prvAddCurrentTaskToDelayedList>
}
 8004ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    traceRETURN_vTaskPlaceOnEventList();
 8004ee6:	20e1      	movs	r0, #225	@ 0xe1
 8004ee8:	f001 bbcc 	b.w	8006684 <SEGGER_SYSVIEW_RecordEndCall>
 8004eec:	20001518 	.word	0x20001518

08004ef0 <vTaskPlaceOnEventListRestricted>:
    {
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	4611      	mov	r1, r2
        configASSERT( pxEventList );
 8004ef6:	b940      	cbnz	r0, 8004f0a <vTaskPlaceOnEventListRestricted+0x1a>
 8004ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	e7fe      	b.n	8004f08 <vTaskPlaceOnEventListRestricted+0x18>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f0a:	4b10      	ldr	r3, [pc, #64]	@ (8004f4c <vTaskPlaceOnEventListRestricted+0x5c>)
 8004f0c:	6842      	ldr	r2, [r0, #4]
 8004f0e:	681d      	ldr	r5, [r3, #0]
 8004f10:	6896      	ldr	r6, [r2, #8]
 8004f12:	61ea      	str	r2, [r5, #28]
 8004f14:	681d      	ldr	r5, [r3, #0]
            xTicksToWait = portMAX_DELAY;
 8004f16:	2900      	cmp	r1, #0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f18:	622e      	str	r6, [r5, #32]
 8004f1a:	681d      	ldr	r5, [r3, #0]
 8004f1c:	f105 0518 	add.w	r5, r5, #24
 8004f20:	6075      	str	r5, [r6, #4]
 8004f22:	681d      	ldr	r5, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f105 0518 	add.w	r5, r5, #24
 8004f2a:	6095      	str	r5, [r2, #8]
 8004f2c:	6298      	str	r0, [r3, #40]	@ 0x28
 8004f2e:	6803      	ldr	r3, [r0, #0]
 8004f30:	f103 0301 	add.w	r3, r3, #1
 8004f34:	6003      	str	r3, [r0, #0]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f36:	bf0c      	ite	eq
 8004f38:	4620      	moveq	r0, r4
 8004f3a:	f04f 30ff 	movne.w	r0, #4294967295
 8004f3e:	f7ff fbc5 	bl	80046cc <prvAddCurrentTaskToDelayedList>
    }
 8004f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        traceRETURN_vTaskPlaceOnEventListRestricted();
 8004f46:	20e3      	movs	r0, #227	@ 0xe3
 8004f48:	f001 bb9c 	b.w	8006684 <SEGGER_SYSVIEW_RecordEndCall>
 8004f4c:	20001518 	.word	0x20001518

08004f50 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004f50:	68c3      	ldr	r3, [r0, #12]
{
 8004f52:	b570      	push	{r4, r5, r6, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004f54:	68dc      	ldr	r4, [r3, #12]
    configASSERT( pxUnblockedTCB );
 8004f56:	b944      	cbnz	r4, 8004f6a <xTaskRemoveFromEventList+0x1a>
 8004f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	e7fe      	b.n	8004f68 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004f6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004f6c:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8004f70:	6858      	ldr	r0, [r3, #4]
 8004f72:	608a      	str	r2, [r1, #8]
 8004f74:	6051      	str	r1, [r2, #4]
 8004f76:	f104 0118 	add.w	r1, r4, #24
 8004f7a:	4288      	cmp	r0, r1
 8004f7c:	bf08      	it	eq
 8004f7e:	605a      	streq	r2, [r3, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	62a2      	str	r2, [r4, #40]	@ 0x28
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	3a01      	subs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004f8a:	4b24      	ldr	r3, [pc, #144]	@ (800501c <xTaskRemoveFromEventList+0xcc>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d137      	bne.n	8005002 <xTaskRemoveFromEventList+0xb2>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004f92:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004f96:	6963      	ldr	r3, [r4, #20]
 8004f98:	608a      	str	r2, [r1, #8]
 8004f9a:	6051      	str	r1, [r2, #4]
 8004f9c:	6859      	ldr	r1, [r3, #4]
 8004f9e:	1d25      	adds	r5, r4, #4
 8004fa0:	42a9      	cmp	r1, r5
 8004fa2:	bf08      	it	eq
 8004fa4:	605a      	streq	r2, [r3, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	6162      	str	r2, [r4, #20]
 8004faa:	681a      	ldr	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004fac:	4620      	mov	r0, r4
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004fae:	3a01      	subs	r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004fb2:	f001 fc0b 	bl	80067cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8004fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8005020 <xTaskRemoveFromEventList+0xd0>)
 8004fb8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004fba:	6811      	ldr	r1, [r2, #0]
 8004fbc:	428b      	cmp	r3, r1
 8004fbe:	f04f 0114 	mov.w	r1, #20
 8004fc2:	bf88      	it	hi
 8004fc4:	6013      	strhi	r3, [r2, #0]
 8004fc6:	434b      	muls	r3, r1
 8004fc8:	4a16      	ldr	r2, [pc, #88]	@ (8005024 <xTaskRemoveFromEventList+0xd4>)
 8004fca:	18d0      	adds	r0, r2, r3
 8004fcc:	6841      	ldr	r1, [r0, #4]
 8004fce:	688e      	ldr	r6, [r1, #8]
 8004fd0:	60a1      	str	r1, [r4, #8]
 8004fd2:	60e6      	str	r6, [r4, #12]
 8004fd4:	6075      	str	r5, [r6, #4]
 8004fd6:	608d      	str	r5, [r1, #8]
 8004fd8:	58d1      	ldr	r1, [r2, r3]
 8004fda:	6160      	str	r0, [r4, #20]
 8004fdc:	3101      	adds	r1, #1
 8004fde:	50d1      	str	r1, [r2, r3]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fe0:	4b11      	ldr	r3, [pc, #68]	@ (8005028 <xTaskRemoveFromEventList+0xd8>)
 8004fe2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004fe4:	681b      	ldr	r3, [r3, #0]
    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8004fe6:	20e4      	movs	r0, #228	@ 0xe4
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	429a      	cmp	r2, r3
            xYieldPendings[ 0 ] = pdTRUE;
 8004fec:	bf8a      	itet	hi
 8004fee:	2401      	movhi	r4, #1
            xReturn = pdFALSE;
 8004ff0:	2400      	movls	r4, #0
            xYieldPendings[ 0 ] = pdTRUE;
 8004ff2:	4b0e      	ldrhi	r3, [pc, #56]	@ (800502c <xTaskRemoveFromEventList+0xdc>)
    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8004ff4:	4621      	mov	r1, r4
            xYieldPendings[ 0 ] = pdTRUE;
 8004ff6:	bf88      	it	hi
 8004ff8:	601c      	strhi	r4, [r3, #0]
    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8004ffa:	f001 fb61 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
}
 8004ffe:	4620      	mov	r0, r4
 8005000:	bd70      	pop	{r4, r5, r6, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005002:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <xTaskRemoveFromEventList+0xe0>)
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	6890      	ldr	r0, [r2, #8]
 8005008:	61e2      	str	r2, [r4, #28]
 800500a:	6220      	str	r0, [r4, #32]
 800500c:	6041      	str	r1, [r0, #4]
 800500e:	6091      	str	r1, [r2, #8]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005014:	3201      	adds	r2, #1
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e7e2      	b.n	8004fe0 <xTaskRemoveFromEventList+0x90>
 800501a:	bf00      	nop
 800501c:	2000101c 	.word	0x2000101c
 8005020:	2000103c 	.word	0x2000103c
 8005024:	200010b8 	.word	0x200010b8
 8005028:	20001518 	.word	0x20001518
 800502c:	20001030 	.word	0x20001030
 8005030:	20001074 	.word	0x20001074

08005034 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005034:	4b04      	ldr	r3, [pc, #16]	@ (8005048 <vTaskInternalSetTimeOutState+0x14>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800503a:	4b04      	ldr	r3, [pc, #16]	@ (800504c <vTaskInternalSetTimeOutState+0x18>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6043      	str	r3, [r0, #4]
    traceRETURN_vTaskInternalSetTimeOutState();
 8005040:	20e7      	movs	r0, #231	@ 0xe7
 8005042:	f001 bb1f 	b.w	8006684 <SEGGER_SYSVIEW_RecordEndCall>
 8005046:	bf00      	nop
 8005048:	2000102c 	.word	0x2000102c
 800504c:	20001040 	.word	0x20001040

08005050 <xTaskCheckForTimeOut>:
{
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	460d      	mov	r5, r1
    configASSERT( pxTimeOut );
 8005054:	4604      	mov	r4, r0
 8005056:	b940      	cbnz	r0, 800506a <xTaskCheckForTimeOut+0x1a>
 8005058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	e7fe      	b.n	8005068 <xTaskCheckForTimeOut+0x18>
    configASSERT( pxTicksToWait );
 800506a:	b941      	cbnz	r1, 800507e <xTaskCheckForTimeOut+0x2e>
 800506c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	e7fe      	b.n	800507c <xTaskCheckForTimeOut+0x2c>
    taskENTER_CRITICAL();
 800507e:	f000 fad3 	bl	8005628 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8005082:	4b11      	ldr	r3, [pc, #68]	@ (80050c8 <xTaskCheckForTimeOut+0x78>)
 8005084:	6819      	ldr	r1, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 8005086:	682b      	ldr	r3, [r5, #0]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	d01b      	beq.n	80050c4 <xTaskCheckForTimeOut+0x74>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800508c:	480f      	ldr	r0, [pc, #60]	@ (80050cc <xTaskCheckForTimeOut+0x7c>)
 800508e:	6826      	ldr	r6, [r4, #0]
 8005090:	6800      	ldr	r0, [r0, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005092:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8005094:	4286      	cmp	r6, r0
 8005096:	d00c      	beq.n	80050b2 <xTaskCheckForTimeOut+0x62>
 8005098:	428a      	cmp	r2, r1
 800509a:	d80a      	bhi.n	80050b2 <xTaskCheckForTimeOut+0x62>
            *pxTicksToWait = ( TickType_t ) 0;
 800509c:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 800509e:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 80050a0:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 80050a2:	f000 fae1 	bl	8005668 <vPortExitCritical>
    traceRETURN_xTaskCheckForTimeOut( xReturn );
 80050a6:	4621      	mov	r1, r4
 80050a8:	20e8      	movs	r0, #232	@ 0xe8
 80050aa:	f001 fb09 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
}
 80050ae:	4620      	mov	r0, r4
 80050b0:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050b2:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait )
 80050b4:	4283      	cmp	r3, r0
 80050b6:	d9f1      	bls.n	800509c <xTaskCheckForTimeOut+0x4c>
            *pxTicksToWait -= xElapsedTime;
 80050b8:	1a5b      	subs	r3, r3, r1
 80050ba:	4413      	add	r3, r2
            vTaskInternalSetTimeOutState( pxTimeOut );
 80050bc:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
 80050be:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80050c0:	f7ff ffb8 	bl	8005034 <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
 80050c4:	2400      	movs	r4, #0
 80050c6:	e7ec      	b.n	80050a2 <xTaskCheckForTimeOut+0x52>
 80050c8:	20001040 	.word	0x20001040
 80050cc:	2000102c 	.word	0x2000102c

080050d0 <vTaskMissedYield>:
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80050d0:	2201      	movs	r2, #1
 80050d2:	4b02      	ldr	r3, [pc, #8]	@ (80050dc <vTaskMissedYield+0xc>)
    traceRETURN_vTaskMissedYield();
 80050d4:	20e9      	movs	r0, #233	@ 0xe9
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80050d6:	601a      	str	r2, [r3, #0]
    traceRETURN_vTaskMissedYield();
 80050d8:	f001 bad4 	b.w	8006684 <SEGGER_SYSVIEW_RecordEndCall>
 80050dc:	20001030 	.word	0x20001030

080050e0 <uxTaskGetStackHighWaterMark>:
    {
 80050e0:	b510      	push	{r4, lr}
        pxTCB = prvGetTCBFromHandle( xTask );
 80050e2:	b908      	cbnz	r0, 80050e8 <uxTaskGetStackHighWaterMark+0x8>
 80050e4:	4b07      	ldr	r3, [pc, #28]	@ (8005104 <uxTaskGetStackHighWaterMark+0x24>)
 80050e6:	6818      	ldr	r0, [r3, #0]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 80050e8:	2100      	movs	r1, #0
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80050ea:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80050ec:	5c53      	ldrb	r3, [r2, r1]
 80050ee:	2ba5      	cmp	r3, #165	@ 0xa5
 80050f0:	d006      	beq.n	8005100 <uxTaskGetStackHighWaterMark+0x20>
        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 80050f2:	088c      	lsrs	r4, r1, #2
        traceRETURN_uxTaskGetStackHighWaterMark( uxReturn );
 80050f4:	4621      	mov	r1, r4
 80050f6:	20f2      	movs	r0, #242	@ 0xf2
 80050f8:	f001 fae2 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
    }
 80050fc:	4620      	mov	r0, r4
 80050fe:	bd10      	pop	{r4, pc}
            uxCount++;
 8005100:	3101      	adds	r1, #1
 8005102:	e7f3      	b.n	80050ec <uxTaskGetStackHighWaterMark+0xc>
 8005104:	20001518 	.word	0x20001518

08005108 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 8005108:	4b08      	ldr	r3, [pc, #32]	@ (800512c <xTaskGetSchedulerState+0x24>)
    {
 800510a:	b510      	push	{r4, lr}
        if( xSchedulerRunning == pdFALSE )
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	b15b      	cbz	r3, 8005128 <xTaskGetSchedulerState+0x20>
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005110:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <xTaskGetSchedulerState+0x28>)
 8005112:	681c      	ldr	r4, [r3, #0]
 8005114:	fab4 f484 	clz	r4, r4
 8005118:	0964      	lsrs	r4, r4, #5
 800511a:	0064      	lsls	r4, r4, #1
        traceRETURN_xTaskGetSchedulerState( xReturn );
 800511c:	4621      	mov	r1, r4
 800511e:	20f5      	movs	r0, #245	@ 0xf5
 8005120:	f001 face 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
    }
 8005124:	4620      	mov	r0, r4
 8005126:	bd10      	pop	{r4, pc}
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005128:	2401      	movs	r4, #1
 800512a:	e7f7      	b.n	800511c <xTaskGetSchedulerState+0x14>
 800512c:	20001038 	.word	0x20001038
 8005130:	2000101c 	.word	0x2000101c

08005134 <xTaskPriorityDisinherit>:
    {
 8005134:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
 8005136:	4604      	mov	r4, r0
 8005138:	b930      	cbnz	r0, 8005148 <xTaskPriorityDisinherit+0x14>
        BaseType_t xReturn = pdFALSE;
 800513a:	2400      	movs	r4, #0
        traceRETURN_xTaskPriorityDisinherit( xReturn );
 800513c:	4621      	mov	r1, r4
 800513e:	20f7      	movs	r0, #247	@ 0xf7
 8005140:	f001 fabe 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
    }
 8005144:	4620      	mov	r0, r4
 8005146:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxTCB == pxCurrentTCB );
 8005148:	4b21      	ldr	r3, [pc, #132]	@ (80051d0 <xTaskPriorityDisinherit+0x9c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4283      	cmp	r3, r0
 800514e:	d008      	beq.n	8005162 <xTaskPriorityDisinherit+0x2e>
 8005150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	e7fe      	b.n	8005160 <xTaskPriorityDisinherit+0x2c>
            configASSERT( pxTCB->uxMutexesHeld );
 8005162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005164:	b943      	cbnz	r3, 8005178 <xTaskPriorityDisinherit+0x44>
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	e7fe      	b.n	8005176 <xTaskPriorityDisinherit+0x42>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005178:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800517a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
            ( pxTCB->uxMutexesHeld )--;
 800517c:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800517e:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 8005180:	6503      	str	r3, [r0, #80]	@ 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005182:	d0da      	beq.n	800513a <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1d8      	bne.n	800513a <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005188:	1d05      	adds	r5, r0, #4
 800518a:	4628      	mov	r0, r5
 800518c:	f7fe fe19 	bl	8003dc2 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005190:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
                    prvAddTaskToReadyList( pxTCB );
 8005192:	4620      	mov	r0, r4
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005194:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8005196:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800519a:	61a3      	str	r3, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 800519c:	f001 fb16 	bl	80067cc <SEGGER_SYSVIEW_OnTaskStartReady>
 80051a0:	4a0c      	ldr	r2, [pc, #48]	@ (80051d4 <xTaskPriorityDisinherit+0xa0>)
 80051a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80051a4:	6811      	ldr	r1, [r2, #0]
 80051a6:	428b      	cmp	r3, r1
 80051a8:	f04f 0114 	mov.w	r1, #20
 80051ac:	bf88      	it	hi
 80051ae:	6013      	strhi	r3, [r2, #0]
 80051b0:	434b      	muls	r3, r1
 80051b2:	4a09      	ldr	r2, [pc, #36]	@ (80051d8 <xTaskPriorityDisinherit+0xa4>)
 80051b4:	18d0      	adds	r0, r2, r3
 80051b6:	6841      	ldr	r1, [r0, #4]
 80051b8:	688e      	ldr	r6, [r1, #8]
 80051ba:	60a1      	str	r1, [r4, #8]
 80051bc:	60e6      	str	r6, [r4, #12]
 80051be:	6075      	str	r5, [r6, #4]
 80051c0:	608d      	str	r5, [r1, #8]
 80051c2:	58d1      	ldr	r1, [r2, r3]
 80051c4:	6160      	str	r0, [r4, #20]
 80051c6:	3101      	adds	r1, #1
                    xReturn = pdTRUE;
 80051c8:	2401      	movs	r4, #1
                    prvAddTaskToReadyList( pxTCB );
 80051ca:	50d1      	str	r1, [r2, r3]
                    xReturn = pdTRUE;
 80051cc:	e7b6      	b.n	800513c <xTaskPriorityDisinherit+0x8>
 80051ce:	bf00      	nop
 80051d0:	20001518 	.word	0x20001518
 80051d4:	2000103c 	.word	0x2000103c
 80051d8:	200010b8 	.word	0x200010b8

080051dc <prvInsertTimerInActiveList>:
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

        if( xNextExpiryTime <= xTimeNow )
 80051dc:	4291      	cmp	r1, r2
    {
 80051de:	b508      	push	{r3, lr}
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051e0:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051e2:	6100      	str	r0, [r0, #16]
        if( xNextExpiryTime <= xTimeNow )
 80051e4:	d80a      	bhi.n	80051fc <prvInsertTimerInActiveList+0x20>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80051e6:	1ad2      	subs	r2, r2, r3
 80051e8:	6983      	ldr	r3, [r0, #24]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d20d      	bcs.n	800520a <prvInsertTimerInActiveList+0x2e>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051ee:	4b08      	ldr	r3, [pc, #32]	@ (8005210 <prvInsertTimerInActiveList+0x34>)
 80051f0:	1d01      	adds	r1, r0, #4
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	f7fe fdca 	bl	8003d8c <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 80051f8:	2000      	movs	r0, #0
            }
        }

        return xProcessTimerNow;
    }
 80051fa:	bd08      	pop	{r3, pc}
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d201      	bcs.n	8005204 <prvInsertTimerInActiveList+0x28>
 8005200:	4299      	cmp	r1, r3
 8005202:	d202      	bcs.n	800520a <prvInsertTimerInActiveList+0x2e>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005204:	4b03      	ldr	r3, [pc, #12]	@ (8005214 <prvInsertTimerInActiveList+0x38>)
 8005206:	1d01      	adds	r1, r0, #4
 8005208:	e7f3      	b.n	80051f2 <prvInsertTimerInActiveList+0x16>
                xProcessTimerNow = pdTRUE;
 800520a:	2001      	movs	r0, #1
        return xProcessTimerNow;
 800520c:	e7f5      	b.n	80051fa <prvInsertTimerInActiveList+0x1e>
 800520e:	bf00      	nop
 8005210:	20001618 	.word	0x20001618
 8005214:	2000161c 	.word	0x2000161c

08005218 <prvReloadTimer>:
    {
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4604      	mov	r4, r0
 800521c:	460d      	mov	r5, r1
 800521e:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005220:	69a1      	ldr	r1, [r4, #24]
 8005222:	462b      	mov	r3, r5
 8005224:	4632      	mov	r2, r6
 8005226:	4620      	mov	r0, r4
 8005228:	4429      	add	r1, r5
 800522a:	f7ff ffd7 	bl	80051dc <prvInsertTimerInActiveList>
 800522e:	b900      	cbnz	r0, 8005232 <prvReloadTimer+0x1a>
    }
 8005230:	bd70      	pop	{r4, r5, r6, pc}
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005232:	69a3      	ldr	r3, [r4, #24]
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005234:	4620      	mov	r0, r4
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005236:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005238:	6a23      	ldr	r3, [r4, #32]
 800523a:	4798      	blx	r3
 800523c:	e7f0      	b.n	8005220 <prvReloadTimer+0x8>
	...

08005240 <prvProcessExpiredTimer>:
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005240:	4b0e      	ldr	r3, [pc, #56]	@ (800527c <prvProcessExpiredTimer+0x3c>)
    {
 8005242:	b570      	push	{r4, r5, r6, lr}
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005244:	681b      	ldr	r3, [r3, #0]
    {
 8005246:	4605      	mov	r5, r0
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005248:	68db      	ldr	r3, [r3, #12]
    {
 800524a:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800524c:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800524e:	1d20      	adds	r0, r4, #4
 8005250:	f7fe fdb7 	bl	8003dc2 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8005254:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005258:	075a      	lsls	r2, r3, #29
 800525a:	d509      	bpl.n	8005270 <prvProcessExpiredTimer+0x30>
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800525c:	4632      	mov	r2, r6
 800525e:	4629      	mov	r1, r5
 8005260:	4620      	mov	r0, r4
 8005262:	f7ff ffd9 	bl	8005218 <prvReloadTimer>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005266:	4620      	mov	r0, r4
 8005268:	6a23      	ldr	r3, [r4, #32]
    }
 800526a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800526e:	4718      	bx	r3
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8005278:	e7f5      	b.n	8005266 <prvProcessExpiredTimer+0x26>
 800527a:	bf00      	nop
 800527c:	2000161c 	.word	0x2000161c

08005280 <prvSampleTimeNow>:
    {
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
 8005284:	f7ff fc1a 	bl	8004abc <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 8005288:	4e0d      	ldr	r6, [pc, #52]	@ (80052c0 <prvSampleTimeNow+0x40>)
        xTimeNow = xTaskGetTickCount();
 800528a:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
 800528c:	6833      	ldr	r3, [r6, #0]
 800528e:	4283      	cmp	r3, r0
 8005290:	d909      	bls.n	80052a6 <prvSampleTimeNow+0x26>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005292:	4f0c      	ldr	r7, [pc, #48]	@ (80052c4 <prvSampleTimeNow+0x44>)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	b952      	cbnz	r2, 80052b0 <prvSampleTimeNow+0x30>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
 800529a:	4a0b      	ldr	r2, [pc, #44]	@ (80052c8 <prvSampleTimeNow+0x48>)
 800529c:	6811      	ldr	r1, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800529e:	6013      	str	r3, [r2, #0]
        pxCurrentTimerList = pxOverflowTimerList;
 80052a0:	6039      	str	r1, [r7, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <prvSampleTimeNow+0x28>
 80052a6:	2300      	movs	r3, #0
    }
 80052a8:	4620      	mov	r0, r4
            *pxTimerListsWereSwitched = pdTRUE;
 80052aa:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
 80052ac:	6034      	str	r4, [r6, #0]
    }
 80052ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052b0:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80052b2:	f04f 31ff 	mov.w	r1, #4294967295
 80052b6:	6818      	ldr	r0, [r3, #0]
 80052b8:	f7ff ffc2 	bl	8005240 <prvProcessExpiredTimer>
 80052bc:	e7ea      	b.n	8005294 <prvSampleTimeNow+0x14>
 80052be:	bf00      	nop
 80052c0:	2000160c 	.word	0x2000160c
 80052c4:	2000161c 	.word	0x2000161c
 80052c8:	20001618 	.word	0x20001618

080052cc <prvTimerTask>:
    {
 80052cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052d0:	4f5b      	ldr	r7, [pc, #364]	@ (8005440 <prvTimerTask+0x174>)
 80052d2:	4e5c      	ldr	r6, [pc, #368]	@ (8005444 <prvTimerTask+0x178>)
    {
 80052d4:	b086      	sub	sp, #24
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f8d3 8000 	ldr.w	r8, [r3]
 80052dc:	f1b8 0f00 	cmp.w	r8, #0
 80052e0:	d038      	beq.n	8005354 <prvTimerTask+0x88>
 80052e2:	2400      	movs	r4, #0
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f8d3 8000 	ldr.w	r8, [r3]
        vTaskSuspendAll();
 80052ea:	f7ff fbdd 	bl	8004aa8 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052ee:	a802      	add	r0, sp, #8
 80052f0:	f7ff ffc6 	bl	8005280 <prvSampleTimeNow>
            if( xTimerListsWereSwitched == pdFALSE )
 80052f4:	9b02      	ldr	r3, [sp, #8]
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052f6:	4605      	mov	r5, r0
            if( xTimerListsWereSwitched == pdFALSE )
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d148      	bne.n	800538e <prvTimerTask+0xc2>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052fc:	bb64      	cbnz	r4, 8005358 <prvTimerTask+0x8c>
 80052fe:	4540      	cmp	r0, r8
 8005300:	d330      	bcc.n	8005364 <prvTimerTask+0x98>
                    ( void ) xTaskResumeAll();
 8005302:	f7ff fcbf 	bl	8004c84 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005306:	4629      	mov	r1, r5
 8005308:	4640      	mov	r0, r8
 800530a:	f7ff ff99 	bl	8005240 <prvProcessExpiredTimer>
        DaemonTaskMessage_t xMessage = { 0 };
 800530e:	2210      	movs	r2, #16
 8005310:	2100      	movs	r1, #0
 8005312:	a802      	add	r0, sp, #8
 8005314:	f002 f8ad 	bl	8007472 <memset>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8005318:	2200      	movs	r2, #0
 800531a:	6830      	ldr	r0, [r6, #0]
 800531c:	a902      	add	r1, sp, #8
 800531e:	f7fe ffe8 	bl	80042f2 <xQueueReceive>
 8005322:	2800      	cmp	r0, #0
 8005324:	d0d7      	beq.n	80052d6 <prvTimerTask+0xa>
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005326:	9b02      	ldr	r3, [sp, #8]
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005328:	9804      	ldr	r0, [sp, #16]
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800532a:	2b00      	cmp	r3, #0
 800532c:	db32      	blt.n	8005394 <prvTimerTask+0xc8>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800532e:	9c04      	ldr	r4, [sp, #16]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8005330:	6963      	ldr	r3, [r4, #20]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d135      	bne.n	80053a2 <prvTimerTask+0xd6>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005336:	a801      	add	r0, sp, #4
 8005338:	f7ff ffa2 	bl	8005280 <prvSampleTimeNow>
                switch( xMessage.xMessageID )
 800533c:	9b02      	ldr	r3, [sp, #8]
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800533e:	4605      	mov	r5, r0
                switch( xMessage.xMessageID )
 8005340:	3b01      	subs	r3, #1
 8005342:	2b08      	cmp	r3, #8
 8005344:	d8e8      	bhi.n	8005318 <prvTimerTask+0x4c>
 8005346:	e8df f003 	tbb	[pc, r3]
 800534a:	3030      	.short	0x3030
 800534c:	30735a53 	.word	0x30735a53
 8005350:	5330      	.short	0x5330
 8005352:	5a          	.byte	0x5a
 8005353:	00          	.byte	0x00
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005354:	2401      	movs	r4, #1
 8005356:	e7c8      	b.n	80052ea <prvTimerTask+0x1e>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005358:	4b3b      	ldr	r3, [pc, #236]	@ (8005448 <prvTimerTask+0x17c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681c      	ldr	r4, [r3, #0]
 800535e:	fab4 f484 	clz	r4, r4
 8005362:	0964      	lsrs	r4, r4, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005364:	4622      	mov	r2, r4
 8005366:	6830      	ldr	r0, [r6, #0]
 8005368:	eba8 0105 	sub.w	r1, r8, r5
 800536c:	f7ff f8f0 	bl	8004550 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005370:	f7ff fc88 	bl	8004c84 <xTaskResumeAll>
 8005374:	2800      	cmp	r0, #0
 8005376:	d1ca      	bne.n	800530e <prvTimerTask+0x42>
                        taskYIELD_WITHIN_API();
 8005378:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800537c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005380:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	e7bf      	b.n	800530e <prvTimerTask+0x42>
                ( void ) xTaskResumeAll();
 800538e:	f7ff fc79 	bl	8004c84 <xTaskResumeAll>
 8005392:	e7bc      	b.n	800530e <prvTimerTask+0x42>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005394:	9b03      	ldr	r3, [sp, #12]
 8005396:	9905      	ldr	r1, [sp, #20]
 8005398:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800539a:	9b02      	ldr	r3, [sp, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	dbbb      	blt.n	8005318 <prvTimerTask+0x4c>
 80053a0:	e7c5      	b.n	800532e <prvTimerTask+0x62>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053a2:	1d20      	adds	r0, r4, #4
 80053a4:	f7fe fd0d 	bl	8003dc2 <uxListRemove>
 80053a8:	e7c5      	b.n	8005336 <prvTimerTask+0x6a>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80053aa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053ae:	69a1      	ldr	r1, [r4, #24]
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	4602      	mov	r2, r0
 80053bc:	4419      	add	r1, r3
 80053be:	4620      	mov	r0, r4
 80053c0:	f7ff ff0c 	bl	80051dc <prvInsertTimerInActiveList>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d0a7      	beq.n	8005318 <prvTimerTask+0x4c>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80053c8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80053cc:	0759      	lsls	r1, r3, #29
 80053ce:	d50a      	bpl.n	80053e6 <prvTimerTask+0x11a>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80053d0:	69a3      	ldr	r3, [r4, #24]
 80053d2:	9903      	ldr	r1, [sp, #12]
 80053d4:	462a      	mov	r2, r5
 80053d6:	4620      	mov	r0, r4
 80053d8:	4419      	add	r1, r3
 80053da:	f7ff ff1d 	bl	8005218 <prvReloadTimer>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053de:	4620      	mov	r0, r4
 80053e0:	6a23      	ldr	r3, [r4, #32]
 80053e2:	4798      	blx	r3
 80053e4:	e798      	b.n	8005318 <prvTimerTask+0x4c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80053e6:	f023 0301 	bic.w	r3, r3, #1
 80053ea:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80053ee:	e7f6      	b.n	80053de <prvTimerTask+0x112>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80053f0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80053f4:	f023 0301 	bic.w	r3, r3, #1
 80053f8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80053fc:	e78c      	b.n	8005318 <prvTimerTask+0x4c>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80053fe:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800540a:	9903      	ldr	r1, [sp, #12]
 800540c:	61a1      	str	r1, [r4, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800540e:	b941      	cbnz	r1, 8005422 <prvTimerTask+0x156>
 8005410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	e7fe      	b.n	8005420 <prvTimerTask+0x154>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005422:	4603      	mov	r3, r0
 8005424:	4602      	mov	r2, r0
 8005426:	4401      	add	r1, r0
 8005428:	4620      	mov	r0, r4
 800542a:	f7ff fed7 	bl	80051dc <prvInsertTimerInActiveList>
                        break;
 800542e:	e773      	b.n	8005318 <prvTimerTask+0x4c>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005430:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005434:	079a      	lsls	r2, r3, #30
 8005436:	d4dd      	bmi.n	80053f4 <prvTimerTask+0x128>
                                vPortFree( pxTimer );
 8005438:	4620      	mov	r0, r4
 800543a:	f000 fae5 	bl	8005a08 <vPortFree>
 800543e:	e76b      	b.n	8005318 <prvTimerTask+0x4c>
 8005440:	2000161c 	.word	0x2000161c
 8005444:	20001614 	.word	0x20001614
 8005448:	20001618 	.word	0x20001618

0800544c <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800544c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
 800544e:	4c11      	ldr	r4, [pc, #68]	@ (8005494 <prvCheckForValidListAndQueue+0x48>)
        taskENTER_CRITICAL();
 8005450:	f000 f8ea 	bl	8005628 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 8005454:	6825      	ldr	r5, [r4, #0]
 8005456:	b9bd      	cbnz	r5, 8005488 <prvCheckForValidListAndQueue+0x3c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005458:	4f0f      	ldr	r7, [pc, #60]	@ (8005498 <prvCheckForValidListAndQueue+0x4c>)
                vListInitialise( &xActiveTimerList2 );
 800545a:	4e10      	ldr	r6, [pc, #64]	@ (800549c <prvCheckForValidListAndQueue+0x50>)
                vListInitialise( &xActiveTimerList1 );
 800545c:	4638      	mov	r0, r7
 800545e:	f7fe fc81 	bl	8003d64 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005462:	4630      	mov	r0, r6
 8005464:	f7fe fc7e 	bl	8003d64 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005468:	4b0d      	ldr	r3, [pc, #52]	@ (80054a0 <prvCheckForValidListAndQueue+0x54>)
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800546a:	2110      	movs	r1, #16
                pxCurrentTimerList = &xActiveTimerList1;
 800546c:	601f      	str	r7, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800546e:	4b0d      	ldr	r3, [pc, #52]	@ (80054a4 <prvCheckForValidListAndQueue+0x58>)
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005470:	200a      	movs	r0, #10
                pxOverflowTimerList = &xActiveTimerList2;
 8005472:	601e      	str	r6, [r3, #0]
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005474:	4a0c      	ldr	r2, [pc, #48]	@ (80054a8 <prvCheckForValidListAndQueue+0x5c>)
 8005476:	4b0d      	ldr	r3, [pc, #52]	@ (80054ac <prvCheckForValidListAndQueue+0x60>)
 8005478:	9500      	str	r5, [sp, #0]
 800547a:	f7fe fd90 	bl	8003f9e <xQueueGenericCreateStatic>
 800547e:	6020      	str	r0, [r4, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005480:	b110      	cbz	r0, 8005488 <prvCheckForValidListAndQueue+0x3c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005482:	490b      	ldr	r1, [pc, #44]	@ (80054b0 <prvCheckForValidListAndQueue+0x64>)
 8005484:	f7ff f83a 	bl	80044fc <vQueueAddToRegistry>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    }
 8005488:	b003      	add	sp, #12
 800548a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
 800548e:	f000 b8eb 	b.w	8005668 <vPortExitCritical>
 8005492:	bf00      	nop
 8005494:	20001614 	.word	0x20001614
 8005498:	20001634 	.word	0x20001634
 800549c:	20001620 	.word	0x20001620
 80054a0:	2000161c 	.word	0x2000161c
 80054a4:	20001618 	.word	0x20001618
 80054a8:	2000156c 	.word	0x2000156c
 80054ac:	2000151c 	.word	0x2000151c
 80054b0:	08009677 	.word	0x08009677

080054b4 <xTimerCreateTimerTask>:
    {
 80054b4:	b510      	push	{r4, lr}
 80054b6:	b088      	sub	sp, #32
        prvCheckForValidListAndQueue();
 80054b8:	f7ff ffc8 	bl	800544c <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 80054bc:	4b15      	ldr	r3, [pc, #84]	@ (8005514 <xTimerCreateTimerTask+0x60>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	b1b3      	cbz	r3, 80054f0 <xTimerCreateTimerTask+0x3c>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80054c2:	2400      	movs	r4, #0
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 80054c4:	aa07      	add	r2, sp, #28
 80054c6:	a906      	add	r1, sp, #24
 80054c8:	a805      	add	r0, sp, #20
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 80054ca:	e9cd 4405 	strd	r4, r4, [sp, #20]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 80054ce:	f7fe fc3d 	bl	8003d4c <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80054d2:	9b05      	ldr	r3, [sp, #20]
 80054d4:	9a07      	ldr	r2, [sp, #28]
 80054d6:	9302      	str	r3, [sp, #8]
 80054d8:	9b06      	ldr	r3, [sp, #24]
 80054da:	490f      	ldr	r1, [pc, #60]	@ (8005518 <xTimerCreateTimerTask+0x64>)
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	2302      	movs	r3, #2
 80054e0:	480e      	ldr	r0, [pc, #56]	@ (800551c <xTimerCreateTimerTask+0x68>)
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	4623      	mov	r3, r4
 80054e6:	f7ff f9f1 	bl	80048cc <xTaskCreateStatic>
 80054ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005520 <xTimerCreateTimerTask+0x6c>)
 80054ec:	6018      	str	r0, [r3, #0]
                    if( xTimerTaskHandle != NULL )
 80054ee:	b940      	cbnz	r0, 8005502 <xTimerCreateTimerTask+0x4e>
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
        configASSERT( xReturn );
 8005500:	e7fe      	b.n	8005500 <xTimerCreateTimerTask+0x4c>
        traceRETURN_xTimerCreateTimerTask( xReturn );
 8005502:	2101      	movs	r1, #1
 8005504:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8005508:	f001 f8da 	bl	80066c0 <SEGGER_SYSVIEW_RecordEndCallU32>
    }
 800550c:	2001      	movs	r0, #1
 800550e:	b008      	add	sp, #32
 8005510:	bd10      	pop	{r4, pc}
 8005512:	bf00      	nop
 8005514:	20001614 	.word	0x20001614
 8005518:	0800967c 	.word	0x0800967c
 800551c:	080052cd 	.word	0x080052cd
 8005520:	20001610 	.word	0x20001610
	...

08005530 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005530:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <pxCurrentTCBConst2>)
 8005532:	6819      	ldr	r1, [r3, #0]
 8005534:	6808      	ldr	r0, [r1, #0]
 8005536:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800553a:	f380 8809 	msr	PSP, r0
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f04f 0000 	mov.w	r0, #0
 8005546:	f380 8811 	msr	BASEPRI, r0
 800554a:	f04e 0e0d 	orr.w	lr, lr, #13
 800554e:	4770      	bx	lr

08005550 <pxCurrentTCBConst2>:
 8005550:	20001518 	.word	0x20001518

08005554 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8005554:	4806      	ldr	r0, [pc, #24]	@ (8005570 <prvPortStartFirstTask+0x1c>)
 8005556:	6800      	ldr	r0, [r0, #0]
 8005558:	6800      	ldr	r0, [r0, #0]
 800555a:	f380 8808 	msr	MSP, r0
 800555e:	b662      	cpsie	i
 8005560:	b661      	cpsie	f
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	df00      	svc	0
 800556c:	bf00      	nop
 800556e:	0000      	.short	0x0000
 8005570:	e000ed08 	.word	0xe000ed08
	...

08005580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005580:	f3ef 8009 	mrs	r0, PSP
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	4b0d      	ldr	r3, [pc, #52]	@ (80055c0 <pxCurrentTCBConst>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005590:	6010      	str	r0, [r2, #0]
 8005592:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005596:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800559a:	f380 8811 	msr	BASEPRI, r0
 800559e:	f7ff fc3f 	bl	8004e20 <vTaskSwitchContext>
 80055a2:	f04f 0000 	mov.w	r0, #0
 80055a6:	f380 8811 	msr	BASEPRI, r0
 80055aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80055ae:	6819      	ldr	r1, [r3, #0]
 80055b0:	6808      	ldr	r0, [r1, #0]
 80055b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055b6:	f380 8809 	msr	PSP, r0
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	4770      	bx	lr

080055c0 <pxCurrentTCBConst>:
 80055c0:	20001518 	.word	0x20001518

080055c4 <prvTaskExitError>:
    volatile uint32_t ulDummy = 0UL;
 80055c4:	2300      	movs	r3, #0
{
 80055c6:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0UL;
 80055c8:	9301      	str	r3, [sp, #4]
    configASSERT( uxCriticalNesting == ~0UL );
 80055ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005600 <prvTaskExitError+0x3c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3301      	adds	r3, #1
 80055d0:	d008      	beq.n	80055e4 <prvTaskExitError+0x20>
 80055d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	e7fe      	b.n	80055e2 <prvTaskExitError+0x1e>
 80055e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
    while( ulDummy == 0 )
 80055f4:	9b01      	ldr	r3, [sp, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0fc      	beq.n	80055f4 <prvTaskExitError+0x30>
}
 80055fa:	b002      	add	sp, #8
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	2000000c 	.word	0x2000000c

08005604 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005604:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005608:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800560c:	4b05      	ldr	r3, [pc, #20]	@ (8005624 <pxPortInitialiseStack+0x20>)
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800560e:	f021 0101 	bic.w	r1, r1, #1
 8005612:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005616:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800561a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800561e:	3840      	subs	r0, #64	@ 0x40
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	080055c5 	.word	0x080055c5

08005628 <vPortEnterCritical>:
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
    uxCriticalNesting++;
 8005638:	4a0a      	ldr	r2, [pc, #40]	@ (8005664 <vPortEnterCritical+0x3c>)
 800563a:	6813      	ldr	r3, [r2, #0]
 800563c:	3301      	adds	r3, #1
    if( uxCriticalNesting == 1 )
 800563e:	2b01      	cmp	r3, #1
    uxCriticalNesting++;
 8005640:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 1 )
 8005642:	d10e      	bne.n	8005662 <vPortEnterCritical+0x3a>
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005644:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005648:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800564c:	b2db      	uxtb	r3, r3
 800564e:	b143      	cbz	r3, 8005662 <vPortEnterCritical+0x3a>
 8005650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	e7fe      	b.n	8005660 <vPortEnterCritical+0x38>
}
 8005662:	4770      	bx	lr
 8005664:	2000000c 	.word	0x2000000c

08005668 <vPortExitCritical>:
    configASSERT( uxCriticalNesting );
 8005668:	4a08      	ldr	r2, [pc, #32]	@ (800568c <vPortExitCritical+0x24>)
 800566a:	6813      	ldr	r3, [r2, #0]
 800566c:	b943      	cbnz	r3, 8005680 <vPortExitCritical+0x18>
 800566e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	e7fe      	b.n	800567e <vPortExitCritical+0x16>
    uxCriticalNesting--;
 8005680:	3b01      	subs	r3, #1
 8005682:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8005684:	b90b      	cbnz	r3, 800568a <vPortExitCritical+0x22>
    __asm volatile
 8005686:	f383 8811 	msr	BASEPRI, r3
}
 800568a:	4770      	bx	lr
 800568c:	2000000c 	.word	0x2000000c

08005690 <xPortSysTickHandler>:
    );
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005690:	b508      	push	{r3, lr}
    __asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80056a2:	f000 ffa5 	bl	80065f0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80056a6:	f7ff fa2d 	bl	8004b04 <xTaskIncrementTick>
 80056aa:	b158      	cbz	r0, 80056c4 <xPortSysTickHandler+0x34>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80056ac:	f000 ffd8 	bl	8006660 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80056b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    __asm volatile
 80056bc:	2300      	movs	r3, #0
 80056be:	f383 8811 	msr	BASEPRI, r3
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80056c2:	bd08      	pop	{r3, pc}
            traceISR_EXIT();
 80056c4:	f000 ffba 	bl	800663c <SEGGER_SYSVIEW_RecordExitISR>
 80056c8:	e7f8      	b.n	80056bc <xPortSysTickHandler+0x2c>
	...

080056cc <vPortSetupTimerInterrupt>:
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056cc:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80056d0:	2300      	movs	r3, #0
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056d2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056d6:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056d8:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056da:	4b04      	ldr	r3, [pc, #16]	@ (80056ec <vPortSetupTimerInterrupt+0x20>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	fbb3 f3f1 	udiv	r3, r3, r1
 80056e2:	3b01      	subs	r3, #1
 80056e4:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056e6:	2307      	movs	r3, #7
 80056e8:	6113      	str	r3, [r2, #16]
}
 80056ea:	4770      	bx	lr
 80056ec:	20000000 	.word	0x20000000

080056f0 <xPortStartScheduler>:
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80056f0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80056f4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	@ 0xd08
{
 80056f8:	b513      	push	{r0, r1, r4, lr}
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80056fa:	4a41      	ldr	r2, [pc, #260]	@ (8005800 <xPortStartScheduler+0x110>)
 80056fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80056fe:	4291      	cmp	r1, r2
 8005700:	d008      	beq.n	8005714 <xPortStartScheduler+0x24>
    __asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	e7fe      	b.n	8005712 <xPortStartScheduler+0x22>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8005714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005716:	4b3b      	ldr	r3, [pc, #236]	@ (8005804 <xPortStartScheduler+0x114>)
 8005718:	429a      	cmp	r2, r3
 800571a:	d008      	beq.n	800572e <xPortStartScheduler+0x3e>
 800571c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	e7fe      	b.n	800572c <xPortStartScheduler+0x3c>
        volatile uint32_t ulImplementedPrioBits = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	9301      	str	r3, [sp, #4]
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8005732:	4b35      	ldr	r3, [pc, #212]	@ (8005808 <xPortStartScheduler+0x118>)
 8005734:	781a      	ldrb	r2, [r3, #0]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	f88d 2002 	strb.w	r2, [sp, #2]
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800573c:	22ff      	movs	r2, #255	@ 0xff
 800573e:	701a      	strb	r2, [r3, #0]
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005740:	781b      	ldrb	r3, [r3, #0]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005742:	4a32      	ldr	r2, [pc, #200]	@ (800580c <xPortStartScheduler+0x11c>)
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005744:	b2db      	uxtb	r3, r3
 8005746:	f88d 3003 	strb.w	r3, [sp, #3]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800574a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800574e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005752:	7013      	strb	r3, [r2, #0]
        configASSERT( ucMaxSysCallPriority );
 8005754:	b943      	cbnz	r3, 8005768 <xPortStartScheduler+0x78>
 8005756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	e7fe      	b.n	8005766 <xPortStartScheduler+0x76>
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8005768:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800576c:	43db      	mvns	r3, r3
 800576e:	f013 0f50 	tst.w	r3, #80	@ 0x50
 8005772:	d010      	beq.n	8005796 <xPortStartScheduler+0xa6>
 8005774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	e7fe      	b.n	8005784 <xPortStartScheduler+0x94>
            ulImplementedPrioBits++;
 8005786:	3301      	adds	r3, #1
 8005788:	9301      	str	r3, [sp, #4]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800578a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	b2db      	uxtb	r3, r3
 8005792:	f88d 3003 	strb.w	r3, [sp, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005796:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800579a:	f013 0f80 	tst.w	r3, #128	@ 0x80
            ulImplementedPrioBits++;
 800579e:	9b01      	ldr	r3, [sp, #4]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057a0:	d1f1      	bne.n	8005786 <xPortStartScheduler+0x96>
        if( ulImplementedPrioBits == 8 )
 80057a2:	2b08      	cmp	r3, #8
            ulMaxPRIGROUPValue = 0;
 80057a4:	bf0c      	ite	eq
 80057a6:	2300      	moveq	r3, #0
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80057a8:	9b01      	ldrne	r3, [sp, #4]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057aa:	4a19      	ldr	r2, [pc, #100]	@ (8005810 <xPortStartScheduler+0x120>)
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80057ac:	bf18      	it	ne
 80057ae:	f1c3 0307 	rsbne	r3, r3, #7
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057b2:	021b      	lsls	r3, r3, #8
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057b8:	6013      	str	r3, [r2, #0]
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80057ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80057be:	4a12      	ldr	r2, [pc, #72]	@ (8005808 <xPortStartScheduler+0x118>)
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	7013      	strb	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80057c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    portNVIC_SHPR2_REG = 0;
 80057c8:	2400      	movs	r4, #0
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80057ca:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 80057ce:	f442 027f 	orr.w	r2, r2, #16711680	@ 0xff0000
 80057d2:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80057d6:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 80057da:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 80057de:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
    portNVIC_SHPR2_REG = 0;
 80057e2:	f8c3 4d1c 	str.w	r4, [r3, #3356]	@ 0xd1c
    vPortSetupTimerInterrupt();
 80057e6:	f7ff ff71 	bl	80056cc <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 80057ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005814 <xPortStartScheduler+0x124>)
 80057ec:	601c      	str	r4, [r3, #0]
    prvPortStartFirstTask();
 80057ee:	f7ff feb1 	bl	8005554 <prvPortStartFirstTask>
    vTaskSwitchContext();
 80057f2:	f7ff fb15 	bl	8004e20 <vTaskSwitchContext>
}
 80057f6:	4620      	mov	r0, r4
    prvTaskExitError();
 80057f8:	f7ff fee4 	bl	80055c4 <prvTaskExitError>
}
 80057fc:	b002      	add	sp, #8
 80057fe:	bd10      	pop	{r4, pc}
 8005800:	08005531 	.word	0x08005531
 8005804:	08005581 	.word	0x08005581
 8005808:	e000e400 	.word	0xe000e400
 800580c:	2000164c 	.word	0x2000164c
 8005810:	20001648 	.word	0x20001648
 8005814:	2000000c 	.word	0x2000000c

08005818 <vPortValidateInterruptPriority>:
    {
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005818:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800581c:	2b0f      	cmp	r3, #15
 800581e:	d90e      	bls.n	800583e <vPortValidateInterruptPriority+0x26>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005820:	4a11      	ldr	r2, [pc, #68]	@ (8005868 <vPortValidateInterruptPriority+0x50>)
 8005822:	5c9b      	ldrb	r3, [r3, r2]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005824:	4a11      	ldr	r2, [pc, #68]	@ (800586c <vPortValidateInterruptPriority+0x54>)
 8005826:	7812      	ldrb	r2, [r2, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d908      	bls.n	800583e <vPortValidateInterruptPriority+0x26>
 800582c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	e7fe      	b.n	800583c <vPortValidateInterruptPriority+0x24>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800583e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005842:	4a0b      	ldr	r2, [pc, #44]	@ (8005870 <vPortValidateInterruptPriority+0x58>)
 8005844:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800584e:	4293      	cmp	r3, r2
 8005850:	d908      	bls.n	8005864 <vPortValidateInterruptPriority+0x4c>
 8005852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	e7fe      	b.n	8005862 <vPortValidateInterruptPriority+0x4a>
    }
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	e000e3f0 	.word	0xe000e3f0
 800586c:	2000164c 	.word	0x2000164c
 8005870:	20001648 	.word	0x20001648

08005874 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8005876:	1e43      	subs	r3, r0, #1
 8005878:	330a      	adds	r3, #10
 800587a:	d847      	bhi.n	800590c <pvPortMalloc+0x98>
        {
            xWantedSize += xHeapStructSize;

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800587c:	f010 0307 	ands.w	r3, r0, #7
            xWantedSize += xHeapStructSize;
 8005880:	f100 0408 	add.w	r4, r0, #8
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005884:	d005      	beq.n	8005892 <pvPortMalloc+0x1e>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005886:	f1a3 0209 	sub.w	r2, r3, #9
 800588a:	42a2      	cmp	r2, r4
 800588c:	d33e      	bcc.n	800590c <pvPortMalloc+0x98>
                {
                    xWantedSize += xAdditionalRequiredSize;
 800588e:	3010      	adds	r0, #16
 8005890:	1ac4      	subs	r4, r0, r3

    vTaskSuspendAll();
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005892:	4d55      	ldr	r5, [pc, #340]	@ (80059e8 <pvPortMalloc+0x174>)
    vTaskSuspendAll();
 8005894:	f7ff f908 	bl	8004aa8 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	b9e3      	cbnz	r3, 80058d6 <pvPortMalloc+0x62>
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800589c:	4a53      	ldr	r2, [pc, #332]	@ (80059ec <pvPortMalloc+0x178>)
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
    xStart.xBlockSize = ( size_t ) 0;
 800589e:	2100      	movs	r1, #0
    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058a0:	0753      	lsls	r3, r2, #29
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058a2:	bf0f      	iteee	eq
 80058a4:	f242 7310 	movweq	r3, #10000	@ 0x2710
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80058a8:	3207      	addne	r2, #7
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80058aa:	4b51      	ldrne	r3, [pc, #324]	@ (80059f0 <pvPortMalloc+0x17c>)
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80058ac:	f022 0207 	bicne.w	r2, r2, #7
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80058b0:	bf18      	it	ne
 80058b2:	1a9b      	subne	r3, r3, r2

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80058b4:	4413      	add	r3, r2
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80058b6:	484f      	ldr	r0, [pc, #316]	@ (80059f4 <pvPortMalloc+0x180>)
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80058b8:	3b08      	subs	r3, #8
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80058ba:	f023 0307 	bic.w	r3, r3, #7
    xStart.xBlockSize = ( size_t ) 0;
 80058be:	6041      	str	r1, [r0, #4]
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80058c0:	6002      	str	r2, [r0, #0]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
    pxEnd->xBlockSize = 0;
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80058c2:	e9c3 1100 	strd	r1, r1, [r3]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80058c6:	1a99      	subs	r1, r3, r2
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80058c8:	e9c2 3100 	strd	r3, r1, [r2]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80058cc:	602b      	str	r3, [r5, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058ce:	4b4a      	ldr	r3, [pc, #296]	@ (80059f8 <pvPortMalloc+0x184>)
 80058d0:	6019      	str	r1, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058d2:	4b4a      	ldr	r3, [pc, #296]	@ (80059fc <pvPortMalloc+0x188>)
 80058d4:	6019      	str	r1, [r3, #0]
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80058d6:	2c00      	cmp	r4, #0
 80058d8:	f340 8081 	ble.w	80059de <pvPortMalloc+0x16a>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058dc:	f8df c11c 	ldr.w	ip, [pc, #284]	@ 80059fc <pvPortMalloc+0x188>
 80058e0:	f8dc 1000 	ldr.w	r1, [ip]
 80058e4:	42a1      	cmp	r1, r4
 80058e6:	d37a      	bcc.n	80059de <pvPortMalloc+0x16a>
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80058e8:	4a42      	ldr	r2, [pc, #264]	@ (80059f4 <pvPortMalloc+0x180>)
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80058ea:	f8df e100 	ldr.w	lr, [pc, #256]	@ 80059ec <pvPortMalloc+0x178>
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80058ee:	6813      	ldr	r3, [r2, #0]
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80058f0:	4573      	cmp	r3, lr
 80058f2:	d302      	bcc.n	80058fa <pvPortMalloc+0x86>
 80058f4:	4f42      	ldr	r7, [pc, #264]	@ (8005a00 <pvPortMalloc+0x18c>)
 80058f6:	42bb      	cmp	r3, r7
 80058f8:	d919      	bls.n	800592e <pvPortMalloc+0xba>
 80058fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	e7fe      	b.n	800590a <pvPortMalloc+0x96>
 800590c:	2400      	movs	r4, #0
 800590e:	e7c0      	b.n	8005892 <pvPortMalloc+0x1e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8005910:	4576      	cmp	r6, lr
 8005912:	d302      	bcc.n	800591a <pvPortMalloc+0xa6>
 8005914:	42be      	cmp	r6, r7
                    pxPreviousBlock = pxBlock;
 8005916:	461a      	mov	r2, r3
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8005918:	d908      	bls.n	800592c <pvPortMalloc+0xb8>
 800591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	e7fe      	b.n	800592a <pvPortMalloc+0xb6>
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 800592c:	4633      	mov	r3, r6
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800592e:	6858      	ldr	r0, [r3, #4]
 8005930:	42a0      	cmp	r0, r4
 8005932:	d202      	bcs.n	800593a <pvPortMalloc+0xc6>
 8005934:	681e      	ldr	r6, [r3, #0]
 8005936:	2e00      	cmp	r6, #0
 8005938:	d1ea      	bne.n	8005910 <pvPortMalloc+0x9c>
                if( pxBlock != pxEnd )
 800593a:	682d      	ldr	r5, [r5, #0]
 800593c:	429d      	cmp	r5, r3
 800593e:	d04e      	beq.n	80059de <pvPortMalloc+0x16a>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005940:	6815      	ldr	r5, [r2, #0]
 8005942:	3508      	adds	r5, #8
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8005944:	4575      	cmp	r5, lr
 8005946:	d301      	bcc.n	800594c <pvPortMalloc+0xd8>
 8005948:	42bd      	cmp	r5, r7
 800594a:	d908      	bls.n	800595e <pvPortMalloc+0xea>
 800594c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	e7fe      	b.n	800595c <pvPortMalloc+0xe8>
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800595e:	681f      	ldr	r7, [r3, #0]
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8005960:	42a0      	cmp	r0, r4
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005962:	6017      	str	r7, [r2, #0]
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8005964:	d30f      	bcc.n	8005986 <pvPortMalloc+0x112>
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005966:	1b00      	subs	r0, r0, r4
 8005968:	2810      	cmp	r0, #16
 800596a:	d919      	bls.n	80059a0 <pvPortMalloc+0x12c>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800596c:	191e      	adds	r6, r3, r4
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800596e:	f016 0f07 	tst.w	r6, #7
 8005972:	d011      	beq.n	8005998 <pvPortMalloc+0x124>
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	e7fe      	b.n	8005984 <pvPortMalloc+0x110>
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8005996:	e7fe      	b.n	8005996 <pvPortMalloc+0x122>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005998:	6070      	str	r0, [r6, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800599a:	605c      	str	r4, [r3, #4]
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800599c:	511f      	str	r7, [r3, r4]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 800599e:	6016      	str	r6, [r2, #0]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059a0:	6858      	ldr	r0, [r3, #4]
 80059a2:	1a0a      	subs	r2, r1, r0
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059a4:	4914      	ldr	r1, [pc, #80]	@ (80059f8 <pvPortMalloc+0x184>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059a6:	f8cc 2000 	str.w	r2, [ip]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059aa:	680c      	ldr	r4, [r1, #0]
                    heapALLOCATE_BLOCK( pxBlock );
 80059ac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059b0:	42a2      	cmp	r2, r4
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059b2:	bf38      	it	cc
 80059b4:	600a      	strcc	r2, [r1, #0]
                    pxBlock->pxNextFreeBlock = NULL;
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80059ba:	4a12      	ldr	r2, [pc, #72]	@ (8005a04 <pvPortMalloc+0x190>)
                    heapALLOCATE_BLOCK( pxBlock );
 80059bc:	6058      	str	r0, [r3, #4]
                    xNumberOfSuccessfulAllocations++;
 80059be:	6813      	ldr	r3, [r2, #0]
 80059c0:	3301      	adds	r3, #1
 80059c2:	6013      	str	r3, [r2, #0]
    ( void ) xTaskResumeAll();
 80059c4:	f7ff f95e 	bl	8004c84 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c8:	076b      	lsls	r3, r5, #29
 80059ca:	d00a      	beq.n	80059e2 <pvPortMalloc+0x16e>
 80059cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	e7fe      	b.n	80059dc <pvPortMalloc+0x168>
    void * pvReturn = NULL;
 80059de:	2500      	movs	r5, #0
 80059e0:	e7f0      	b.n	80059c4 <pvPortMalloc+0x150>
}
 80059e2:	4628      	mov	r0, r5
 80059e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20001660 	.word	0x20001660
 80059ec:	2000166c 	.word	0x2000166c
 80059f0:	20003d7c 	.word	0x20003d7c
 80059f4:	20001664 	.word	0x20001664
 80059f8:	20001658 	.word	0x20001658
 80059fc:	2000165c 	.word	0x2000165c
 8005a00:	20003d7b 	.word	0x20003d7b
 8005a04:	20001654 	.word	0x20001654

08005a08 <vPortFree>:
{
 8005a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( pv != NULL )
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d06b      	beq.n	8005ae8 <vPortFree+0xe0>
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005a10:	4f36      	ldr	r7, [pc, #216]	@ (8005aec <vPortFree+0xe4>)
        puc -= xHeapStructSize;
 8005a12:	f1a0 0408 	sub.w	r4, r0, #8
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005a16:	42bc      	cmp	r4, r7
 8005a18:	d312      	bcc.n	8005a40 <vPortFree+0x38>
 8005a1a:	4e35      	ldr	r6, [pc, #212]	@ (8005af0 <vPortFree+0xe8>)
 8005a1c:	42b4      	cmp	r4, r6
 8005a1e:	d80f      	bhi.n	8005a40 <vPortFree+0x38>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005a20:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	da14      	bge.n	8005a52 <vPortFree+0x4a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a28:	f850 2c08 	ldr.w	r2, [r0, #-8]
 8005a2c:	b1d2      	cbz	r2, 8005a64 <vPortFree+0x5c>
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	e7fe      	b.n	8005a3e <vPortFree+0x36>
 8005a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005a50:	e7fe      	b.n	8005a50 <vPortFree+0x48>
 8005a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005a62:	e7fe      	b.n	8005a62 <vPortFree+0x5a>
                heapFREE_BLOCK( pxLink );
 8005a64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a68:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 8005a6c:	f7ff f81c 	bl	8004aa8 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005a70:	4a20      	ldr	r2, [pc, #128]	@ (8005af4 <vPortFree+0xec>)
 8005a72:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8005a76:	6813      	ldr	r3, [r2, #0]
 8005a78:	440b      	add	r3, r1
 8005a7a:	6013      	str	r3, [r2, #0]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005af8 <vPortFree+0xf0>)
 8005a7e:	4618      	mov	r0, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	429c      	cmp	r4, r3
 8005a86:	d8fb      	bhi.n	8005a80 <vPortFree+0x78>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8005a88:	4282      	cmp	r2, r0
 8005a8a:	d00c      	beq.n	8005aa6 <vPortFree+0x9e>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8005a8c:	42ba      	cmp	r2, r7
 8005a8e:	d301      	bcc.n	8005a94 <vPortFree+0x8c>
 8005a90:	42b2      	cmp	r2, r6
 8005a92:	d908      	bls.n	8005aa6 <vPortFree+0x9e>
 8005a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	e7fe      	b.n	8005aa4 <vPortFree+0x9c>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005aa6:	6850      	ldr	r0, [r2, #4]
 8005aa8:	1815      	adds	r5, r2, r0
 8005aaa:	42ac      	cmp	r4, r5
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
        pxBlockToInsert = pxIterator;
 8005aac:	bf02      	ittt	eq
 8005aae:	4614      	moveq	r4, r2
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ab0:	1809      	addeq	r1, r1, r0
 8005ab2:	6051      	streq	r1, [r2, #4]

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005ab4:	6860      	ldr	r0, [r4, #4]
 8005ab6:	1821      	adds	r1, r4, r0
 8005ab8:	428b      	cmp	r3, r1
 8005aba:	d113      	bne.n	8005ae4 <vPortFree+0xdc>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005abc:	490f      	ldr	r1, [pc, #60]	@ (8005afc <vPortFree+0xf4>)
 8005abe:	6809      	ldr	r1, [r1, #0]
 8005ac0:	428b      	cmp	r3, r1
 8005ac2:	d003      	beq.n	8005acc <vPortFree+0xc4>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	4401      	add	r1, r0
 8005ac8:	6061      	str	r1, [r4, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005aca:	6819      	ldr	r1, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005acc:	42a2      	cmp	r2, r4
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005ace:	6021      	str	r1, [r4, #0]
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005ad0:	bf18      	it	ne
 8005ad2:	6014      	strne	r4, [r2, #0]
                    xNumberOfSuccessfulFrees++;
 8005ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8005b00 <vPortFree+0xf8>)
 8005ad6:	6813      	ldr	r3, [r2, #0]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	6013      	str	r3, [r2, #0]
}
 8005adc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                ( void ) xTaskResumeAll();
 8005ae0:	f7ff b8d0 	b.w	8004c84 <xTaskResumeAll>
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	e7f1      	b.n	8005acc <vPortFree+0xc4>
}
 8005ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aea:	bf00      	nop
 8005aec:	2000166c 	.word	0x2000166c
 8005af0:	20003d7b 	.word	0x20003d7b
 8005af4:	2000165c 	.word	0x2000165c
 8005af8:	20001664 	.word	0x20001664
 8005afc:	20001660 	.word	0x20001660
 8005b00:	20001650 	.word	0x20001650

08005b04 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005b04:	b508      	push	{r3, lr}
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005b06:	4804      	ldr	r0, [pc, #16]	@ (8005b18 <_cbSendSystemDesc+0x14>)
 8005b08:	f000 fd5a 	bl	80065c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
}
 8005b0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005b10:	4802      	ldr	r0, [pc, #8]	@ (8005b1c <_cbSendSystemDesc+0x18>)
 8005b12:	f000 bd55 	b.w	80065c0 <SEGGER_SYSVIEW_SendSysDesc>
 8005b16:	bf00      	nop
 8005b18:	08009684 	.word	0x08009684
 8005b1c:	080096b7 	.word	0x080096b7

08005b20 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005b20:	b508      	push	{r3, lr}
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005b22:	4b06      	ldr	r3, [pc, #24]	@ (8005b3c <SEGGER_SYSVIEW_Conf+0x1c>)
 8005b24:	4a06      	ldr	r2, [pc, #24]	@ (8005b40 <SEGGER_SYSVIEW_Conf+0x20>)
 8005b26:	6819      	ldr	r1, [r3, #0]
 8005b28:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <SEGGER_SYSVIEW_Conf+0x24>)
 8005b2a:	4608      	mov	r0, r1
 8005b2c:	f000 fa06 	bl	8005f3c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
}
 8005b30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005b34:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8005b38:	f000 ba36 	b.w	8005fa8 <SEGGER_SYSVIEW_SetRAMBase>
 8005b3c:	20000000 	.word	0x20000000
 8005b40:	08009924 	.word	0x08009924
 8005b44:	08005b05 	.word	0x08005b05

08005b48 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005b48:	b508      	push	{r3, lr}
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005b4a:	f7fe ffc3 	bl	8004ad4 <xTaskGetTickCountFromISR>
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005b4e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
  return Time;
}
 8005b52:	fba0 0101 	umull	r0, r1, r0, r1
 8005b56:	bd08      	pop	{r3, pc}

08005b58 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005b58:	b510      	push	{r4, lr}
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005b5a:	2400      	movs	r4, #0
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005b5c:	b086      	sub	sp, #24
  TaskInfo.TaskID     = TaskID;
  TaskInfo.sName      = sName;
  TaskInfo.Prio       = Prio;
  TaskInfo.StackBase  = StackBase;
 8005b5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  TaskInfo.StackSize  = StackSize;
 8005b62:	9b08      	ldr	r3, [sp, #32]
  TaskInfo.sName      = sName;
 8005b64:	e9cd 0100 	strd	r0, r1, [sp]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005b68:	4668      	mov	r0, sp
  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005b6a:	9405      	str	r4, [sp, #20]
  TaskInfo.StackSize  = StackSize;
 8005b6c:	9304      	str	r3, [sp, #16]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005b6e:	f000 fcaf 	bl	80064d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005b72:	b006      	add	sp, #24
 8005b74:	bd10      	pop	{r4, pc}
	...

08005b78 <SYSVIEW_AddTask>:
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	4605      	mov	r5, r0
 8005b80:	4616      	mov	r6, r2
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005b82:	4620      	mov	r0, r4
 8005b84:	2205      	movs	r2, #5
 8005b86:	4915      	ldr	r1, [pc, #84]	@ (8005bdc <SYSVIEW_AddTask+0x64>)
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005b88:	461f      	mov	r7, r3
 8005b8a:	f8dd 8018 	ldr.w	r8, [sp, #24]
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005b8e:	f001 fc60 	bl	8007452 <memcmp>
 8005b92:	b300      	cbz	r0, 8005bd6 <SYSVIEW_AddTask+0x5e>
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005b94:	4812      	ldr	r0, [pc, #72]	@ (8005be0 <SYSVIEW_AddTask+0x68>)
 8005b96:	6801      	ldr	r1, [r0, #0]
 8005b98:	2907      	cmp	r1, #7
 8005b9a:	d904      	bls.n	8005ba6 <SYSVIEW_AddTask+0x2e>
}
 8005b9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005ba0:	4810      	ldr	r0, [pc, #64]	@ (8005be4 <SYSVIEW_AddTask+0x6c>)
 8005ba2:	f000 beaf 	b.w	8006904 <SEGGER_SYSVIEW_Warn>
  _aTasks[_NumTasks].xHandle = xHandle;
 8005ba6:	2214      	movs	r2, #20
 8005ba8:	434a      	muls	r2, r1
 8005baa:	f8df c03c 	ldr.w	ip, [pc, #60]	@ 8005be8 <SYSVIEW_AddTask+0x70>
  _NumTasks++;
 8005bae:	3101      	adds	r1, #1
  _aTasks[_NumTasks].xHandle = xHandle;
 8005bb0:	eb0c 0302 	add.w	r3, ip, r2
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005bb4:	e9c3 4601 	strd	r4, r6, [r3, #4]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005bb8:	e9c3 7803 	strd	r7, r8, [r3, #12]
  _aTasks[_NumTasks].xHandle = xHandle;
 8005bbc:	f84c 5002 	str.w	r5, [ip, r2]
  _NumTasks++;
 8005bc0:	6001      	str	r1, [r0, #0]
  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	4632      	mov	r2, r6
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f8cd 8018 	str.w	r8, [sp, #24]
}
 8005bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005bd2:	f7ff bfc1 	b.w	8005b58 <SYSVIEW_SendTaskInfo>
}
 8005bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bda:	bf00      	nop
 8005bdc:	08009672 	.word	0x08009672
 8005be0:	20003d7c 	.word	0x20003d7c
 8005be4:	080096c4 	.word	0x080096c4
 8005be8:	20003d80 	.word	0x20003d80

08005bec <_cbSendTaskList>:
static void _cbSendTaskList(void) {
 8005bec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  for (n = 0; n < _NumTasks; n++) {
 8005bee:	2500      	movs	r5, #0
 8005bf0:	4c0b      	ldr	r4, [pc, #44]	@ (8005c20 <_cbSendTaskList+0x34>)
 8005bf2:	4e0c      	ldr	r6, [pc, #48]	@ (8005c24 <_cbSendTaskList+0x38>)
 8005bf4:	6833      	ldr	r3, [r6, #0]
 8005bf6:	3414      	adds	r4, #20
 8005bf8:	42ab      	cmp	r3, r5
 8005bfa:	d801      	bhi.n	8005c00 <_cbSendTaskList+0x14>
}
 8005bfc:	b002      	add	sp, #8
 8005bfe:	bd70      	pop	{r4, r5, r6, pc}
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8005c00:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8005c04:	f7ff fa6c 	bl	80050e0 <uxTaskGetStackHighWaterMark>
 8005c08:	f844 0c04 	str.w	r0, [r4, #-4]
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005c0c:	9000      	str	r0, [sp, #0]
 8005c0e:	e954 2303 	ldrd	r2, r3, [r4, #-12]
 8005c12:	e954 0105 	ldrd	r0, r1, [r4, #-20]
 8005c16:	f7ff ff9f 	bl	8005b58 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005c1a:	3501      	adds	r5, #1
 8005c1c:	e7ea      	b.n	8005bf4 <_cbSendTaskList+0x8>
 8005c1e:	bf00      	nop
 8005c20:	20003d80 	.word	0x20003d80
 8005c24:	20003d7c 	.word	0x20003d7c

08005c28 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005c28:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 8005c2a:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 8005c2c:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005c2e:	bf9c      	itt	ls
 8005c30:	6881      	ldrls	r1, [r0, #8]
 8005c32:	185b      	addls	r3, r3, r1
  } else {
    r = RdOff - WrOff - 1u;
 8005c34:	3b01      	subs	r3, #1
 8005c36:	1a98      	subs	r0, r3, r2
  }
  return r;
}
 8005c38:	4770      	bx	lr

08005c3a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
 8005c3e:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005c42:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
 8005c44:	eba8 0604 	sub.w	r6, r8, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c48:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
 8005c4a:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c4c:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005c4e:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
 8005c50:	4414      	add	r4, r2
  if (Rem > NumBytes) {
 8005c52:	d904      	bls.n	8005c5e <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005c54:	f001 fc89 	bl	800756a <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8005c58:	60ec      	str	r4, [r5, #12]
}
 8005c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005c5e:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
 8005c60:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005c64:	f001 fc81 	bl	800756a <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005c68:	4622      	mov	r2, r4
 8005c6a:	6868      	ldr	r0, [r5, #4]
 8005c6c:	19b9      	adds	r1, r7, r6
 8005c6e:	e7f1      	b.n	8005c54 <_WriteNoCheck+0x1a>

08005c70 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c74:	4606      	mov	r6, r0
 8005c76:	4689      	mov	r9, r1
 8005c78:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
 8005c7a:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
 8005c7e:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005c80:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005c82:	68b4      	ldr	r4, [r6, #8]
    if (RdOff > WrOff) {
 8005c84:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005c86:	bf28      	it	cs
 8005c88:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005c8a:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005c8c:	42bc      	cmp	r4, r7
 8005c8e:	bf28      	it	cs
 8005c90:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005c92:	3b01      	subs	r3, #1
 8005c94:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005c96:	429c      	cmp	r4, r3
 8005c98:	bf28      	it	cs
 8005c9a:	461c      	movcs	r4, r3
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c9c:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	4428      	add	r0, r5
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	f001 fc61 	bl	800756a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
 8005ca8:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
 8005caa:	4425      	add	r5, r4
      WrOff = 0u;
 8005cac:	42ab      	cmp	r3, r5
 8005cae:	bf08      	it	eq
 8005cb0:	2500      	moveq	r5, #0
  } while (NumBytes);
 8005cb2:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
 8005cb4:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
 8005cb6:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
 8005cb8:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 8005cba:	d1e1      	bne.n	8005c80 <_WriteBlocking+0x10>
}
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08005cc4 <_DoInit>:
static void _DoInit(void) {
 8005cc4:	b508      	push	{r3, lr}
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005cc6:	4b12      	ldr	r3, [pc, #72]	@ (8005d10 <_DoInit+0x4c>)
 8005cc8:	22a8      	movs	r2, #168	@ 0xa8
 8005cca:	2100      	movs	r1, #0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 fbd0 	bl	8007472 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005cd2:	2203      	movs	r2, #3
  p->aUp[0].sName         = "Terminal";
 8005cd4:	490f      	ldr	r1, [pc, #60]	@ (8005d14 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005cd6:	6102      	str	r2, [r0, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005cd8:	6142      	str	r2, [r0, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005cda:	4a0f      	ldr	r2, [pc, #60]	@ (8005d18 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
 8005cdc:	6181      	str	r1, [r0, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005cde:	61c2      	str	r2, [r0, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005ce0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ce4:	6202      	str	r2, [r0, #32]
  p->aUp[0].RdOff         = 0u;
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	6282      	str	r2, [r0, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005cea:	6242      	str	r2, [r0, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005cec:	62c2      	str	r2, [r0, #44]	@ 0x2c
  p->aDown[0].sName         = "Terminal";
 8005cee:	6601      	str	r1, [r0, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005cf0:	490a      	ldr	r1, [pc, #40]	@ (8005d1c <_DoInit+0x58>)
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005cf2:	4603      	mov	r3, r0
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005cf4:	6641      	str	r1, [r0, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005cf6:	2110      	movs	r1, #16
 8005cf8:	6681      	str	r1, [r0, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005cfa:	4909      	ldr	r1, [pc, #36]	@ (8005d20 <_DoInit+0x5c>)
 8005cfc:	6702      	str	r2, [r0, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005cfe:	66c2      	str	r2, [r0, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005d00:	6742      	str	r2, [r0, #116]	@ 0x74
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005d02:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8005d06:	5498      	strb	r0, [r3, r2]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005d08:	3201      	adds	r2, #1
 8005d0a:	2a10      	cmp	r2, #16
 8005d0c:	d1f9      	bne.n	8005d02 <_DoInit+0x3e>
}
 8005d0e:	bd08      	pop	{r3, pc}
 8005d10:	20004230 	.word	0x20004230
 8005d14:	08009714 	.word	0x08009714
 8005d18:	20003e30 	.word	0x20003e30
 8005d1c:	20003e20 	.word	0x20003e20
 8005d20:	0800993c 	.word	0x0800993c

08005d24 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005d24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005d28:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 8005dac <SEGGER_RTT_ReadNoLock+0x88>
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005d2c:	4682      	mov	sl, r0
  INIT();
 8005d2e:	f898 3000 	ldrb.w	r3, [r8]
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005d32:	4689      	mov	r9, r1
  INIT();
 8005d34:	2b53      	cmp	r3, #83	@ 0x53
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005d36:	4616      	mov	r6, r2
  INIT();
 8005d38:	d001      	beq.n	8005d3e <SEGGER_RTT_ReadNoLock+0x1a>
 8005d3a:	f7ff ffc3 	bl	8005cc4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  pBuffer = (unsigned char*)pData;
  RdOff = pRing->RdOff;
 8005d3e:	2718      	movs	r7, #24
 8005d40:	fb07 870a 	mla	r7, r7, sl, r8
 8005d44:	6f3d      	ldr	r5, [r7, #112]	@ 0x70
  WrOff = pRing->WrOff;
 8005d46:	f8d7 b06c 	ldr.w	fp, [r7, #108]	@ 0x6c
  NumBytesRead = 0u;
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005d4a:	455d      	cmp	r5, fp
 8005d4c:	d92b      	bls.n	8005da6 <SEGGER_RTT_ReadNoLock+0x82>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005d4e:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
    NumBytesRem = MIN(NumBytesRem, BufferSize);
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d50:	6e79      	ldr	r1, [r7, #100]	@ 0x64
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005d52:	1b64      	subs	r4, r4, r5
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005d54:	42b4      	cmp	r4, r6
 8005d56:	bf28      	it	cs
 8005d58:	4634      	movcs	r4, r6
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005d5a:	4648      	mov	r0, r9
 8005d5c:	4429      	add	r1, r5
 8005d5e:	4622      	mov	r2, r4
 8005d60:	f001 fc03 	bl	800756a <memcpy>
    RdOff        += NumBytesRem;
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005d64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    RdOff        += NumBytesRem;
 8005d66:	4425      	add	r5, r4
      RdOff = 0u;
 8005d68:	42ab      	cmp	r3, r5
 8005d6a:	bf08      	it	eq
 8005d6c:	2500      	moveq	r5, #0
    pBuffer      += NumBytesRem;
 8005d6e:	44a1      	add	r9, r4
    BufferSize   -= NumBytesRem;
 8005d70:	1b36      	subs	r6, r6, r4
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005d72:	ebab 0b05 	sub.w	fp, fp, r5
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005d76:	455e      	cmp	r6, fp
 8005d78:	bf28      	it	cs
 8005d7a:	465e      	movcs	r6, fp
  if (NumBytesRem > 0u) {
 8005d7c:	b156      	cbz	r6, 8005d94 <SEGGER_RTT_ReadNoLock+0x70>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d7e:	2318      	movs	r3, #24
 8005d80:	fb03 830a 	mla	r3, r3, sl, r8
 8005d84:	6e59      	ldr	r1, [r3, #100]	@ 0x64
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005d86:	4632      	mov	r2, r6
 8005d88:	4429      	add	r1, r5
 8005d8a:	4648      	mov	r0, r9
 8005d8c:	f001 fbed 	bl	800756a <memcpy>
    NumBytesRead += NumBytesRem;
 8005d90:	4434      	add	r4, r6
    pBuffer      += NumBytesRem;
    BufferSize   -= NumBytesRem;
    RdOff        += NumBytesRem;
 8005d92:	4435      	add	r5, r6
#endif
  }
  if (NumBytesRead) {
 8005d94:	b124      	cbz	r4, 8005da0 <SEGGER_RTT_ReadNoLock+0x7c>
    pRing->RdOff = RdOff;
 8005d96:	2318      	movs	r3, #24
 8005d98:	fb03 880a 	mla	r8, r3, sl, r8
 8005d9c:	f8c8 5070 	str.w	r5, [r8, #112]	@ 0x70
  }
  //
  return NumBytesRead;
}
 8005da0:	4620      	mov	r0, r4
 8005da2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  NumBytesRead = 0u;
 8005da6:	2400      	movs	r4, #0
 8005da8:	e7e3      	b.n	8005d72 <SEGGER_RTT_ReadNoLock+0x4e>
 8005daa:	bf00      	nop
 8005dac:	20004230 	.word	0x20004230

08005db0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005db2:	2718      	movs	r7, #24
 8005db4:	fb00 7507 	mla	r5, r0, r7, r7
 8005db8:	4b12      	ldr	r3, [pc, #72]	@ (8005e04 <SEGGER_RTT_WriteNoLock+0x54>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005dba:	460e      	mov	r6, r1
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005dbc:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005dbe:	fb07 3300 	mla	r3, r7, r0, r3
 8005dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005dc4:	4614      	mov	r4, r2
  switch (pRing->Flags) {
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d00a      	beq.n	8005de0 <SEGGER_RTT_WriteNoLock+0x30>
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d014      	beq.n	8005df8 <SEGGER_RTT_WriteNoLock+0x48>
 8005dce:	b923      	cbnz	r3, 8005dda <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f7ff ff29 	bl	8005c28 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 8005dd6:	4284      	cmp	r4, r0
 8005dd8:	d908      	bls.n	8005dec <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
 8005dda:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
 8005ddc:	4620      	mov	r0, r4
 8005dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
 8005de0:	4628      	mov	r0, r5
 8005de2:	f7ff ff21 	bl	8005c28 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005de6:	4284      	cmp	r4, r0
 8005de8:	bf28      	it	cs
 8005dea:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 8005dec:	4622      	mov	r2, r4
 8005dee:	4631      	mov	r1, r6
 8005df0:	4628      	mov	r0, r5
 8005df2:	f7ff ff22 	bl	8005c3a <_WriteNoCheck>
    break;
 8005df6:	e7f1      	b.n	8005ddc <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005df8:	4628      	mov	r0, r5
}
 8005dfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005dfe:	f7ff bf37 	b.w	8005c70 <_WriteBlocking>
 8005e02:	bf00      	nop
 8005e04:	20004230 	.word	0x20004230

08005e08 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned Status;

  INIT();
 8005e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e38 <SEGGER_RTT_Write+0x30>)
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005e0c:	4604      	mov	r4, r0
  INIT();
 8005e0e:	781b      	ldrb	r3, [r3, #0]
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005e10:	460d      	mov	r5, r1
  INIT();
 8005e12:	2b53      	cmp	r3, #83	@ 0x53
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005e14:	4616      	mov	r6, r2
  INIT();
 8005e16:	d001      	beq.n	8005e1c <SEGGER_RTT_Write+0x14>
 8005e18:	f7ff ff54 	bl	8005cc4 <_DoInit>
  SEGGER_RTT_LOCK();
 8005e1c:	f3ef 8711 	mrs	r7, BASEPRI
 8005e20:	f04f 0120 	mov.w	r1, #32
 8005e24:	f381 8811 	msr	BASEPRI, r1
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005e28:	4632      	mov	r2, r6
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f7ff ffbf 	bl	8005db0 <SEGGER_RTT_WriteNoLock>
  SEGGER_RTT_UNLOCK();
 8005e32:	f387 8811 	msr	BASEPRI, r7
  return Status;
}
 8005e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e38:	20004230 	.word	0x20004230

08005e3c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005e40:	4c19      	ldr	r4, [pc, #100]	@ (8005ea8 <SEGGER_RTT_AllocUpBuffer+0x6c>)
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005e42:	461d      	mov	r5, r3
  INIT();
 8005e44:	7823      	ldrb	r3, [r4, #0]
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005e46:	4680      	mov	r8, r0
  INIT();
 8005e48:	2b53      	cmp	r3, #83	@ 0x53
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005e4a:	460f      	mov	r7, r1
 8005e4c:	4616      	mov	r6, r2
  INIT();
 8005e4e:	d001      	beq.n	8005e54 <SEGGER_RTT_AllocUpBuffer+0x18>
 8005e50:	f7ff ff38 	bl	8005cc4 <_DoInit>
  SEGGER_RTT_LOCK();
 8005e54:	f3ef 8c11 	mrs	ip, BASEPRI
 8005e58:	f04f 0120 	mov.w	r1, #32
 8005e5c:	f381 8811 	msr	BASEPRI, r1
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  BufferIndex = 0;
 8005e60:	2000      	movs	r0, #0
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005e62:	2218      	movs	r2, #24
 8005e64:	fb00 2302 	mla	r3, r0, r2, r2
 8005e68:	4423      	add	r3, r4
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	1c41      	adds	r1, r0, #1
 8005e6e:	b11b      	cbz	r3, 8005e78 <SEGGER_RTT_AllocUpBuffer+0x3c>
      break;
    }
    BufferIndex++;
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005e70:	6923      	ldr	r3, [r4, #16]
    BufferIndex++;
 8005e72:	4608      	mov	r0, r1
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005e74:	428b      	cmp	r3, r1
 8005e76:	dcf5      	bgt.n	8005e64 <SEGGER_RTT_AllocUpBuffer+0x28>
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005e78:	6923      	ldr	r3, [r4, #16]
 8005e7a:	4283      	cmp	r3, r0
 8005e7c:	dd11      	ble.n	8005ea2 <SEGGER_RTT_AllocUpBuffer+0x66>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005e7e:	2318      	movs	r3, #24
 8005e80:	fb00 3203 	mla	r2, r0, r3, r3
 8005e84:	f844 8002 	str.w	r8, [r4, r2]
 8005e88:	18a1      	adds	r1, r4, r2
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005e8a:	fb03 4400 	mla	r4, r3, r0, r4
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005e8e:	2300      	movs	r3, #0
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005e90:	604f      	str	r7, [r1, #4]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005e92:	6226      	str	r6, [r4, #32]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005e94:	62a3      	str	r3, [r4, #40]	@ 0x28
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005e96:	6263      	str	r3, [r4, #36]	@ 0x24
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005e98:	62e5      	str	r5, [r4, #44]	@ 0x2c
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
  }
  SEGGER_RTT_UNLOCK();
 8005e9a:	f38c 8811 	msr	BASEPRI, ip
  return BufferIndex;
}
 8005e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BufferIndex = -1;
 8005ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea6:	e7f8      	b.n	8005e9a <SEGGER_RTT_AllocUpBuffer+0x5e>
 8005ea8:	20004230 	.word	0x20004230

08005eac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005eb0:	4e15      	ldr	r6, [pc, #84]	@ (8005f08 <SEGGER_RTT_ConfigDownBuffer+0x5c>)
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005eb2:	461f      	mov	r7, r3
  INIT();
 8005eb4:	7833      	ldrb	r3, [r6, #0]
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005eb6:	4605      	mov	r5, r0
  INIT();
 8005eb8:	2b53      	cmp	r3, #83	@ 0x53
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005eba:	4689      	mov	r9, r1
 8005ebc:	4690      	mov	r8, r2
  INIT();
 8005ebe:	d001      	beq.n	8005ec4 <SEGGER_RTT_ConfigDownBuffer+0x18>
 8005ec0:	f7ff ff00 	bl	8005cc4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005ec4:	2d02      	cmp	r5, #2
 8005ec6:	d81b      	bhi.n	8005f00 <SEGGER_RTT_ConfigDownBuffer+0x54>
    SEGGER_RTT_LOCK();
 8005ec8:	f3ef 8211 	mrs	r2, BASEPRI
 8005ecc:	f04f 0120 	mov.w	r1, #32
 8005ed0:	f381 8811 	msr	BASEPRI, r1
    pDown = &pRTTCB->aDown[BufferIndex];
    if (BufferIndex) {
 8005ed4:	b155      	cbz	r5, 8005eec <SEGGER_RTT_ConfigDownBuffer+0x40>
      pDown->sName        = sName;
 8005ed6:	2418      	movs	r4, #24
      pDown->pBuffer      = (char*)pBuffer;
      pDown->SizeOfBuffer = BufferSize;
      pDown->RdOff        = 0u;
 8005ed8:	2300      	movs	r3, #0
      pDown->sName        = sName;
 8005eda:	fb04 6405 	mla	r4, r4, r5, r6
 8005ede:	f8c4 9060 	str.w	r9, [r4, #96]	@ 0x60
      pDown->pBuffer      = (char*)pBuffer;
 8005ee2:	f8c4 8064 	str.w	r8, [r4, #100]	@ 0x64
      pDown->SizeOfBuffer = BufferSize;
 8005ee6:	66a7      	str	r7, [r4, #104]	@ 0x68
      pDown->RdOff        = 0u;
 8005ee8:	6723      	str	r3, [r4, #112]	@ 0x70
      pDown->WrOff        = 0u;
 8005eea:	66e3      	str	r3, [r4, #108]	@ 0x6c
    }
    pDown->Flags          = Flags;
 8005eec:	2318      	movs	r3, #24
 8005eee:	fb03 6605 	mla	r6, r3, r5, r6
 8005ef2:	9b08      	ldr	r3, [sp, #32]
 8005ef4:	6773      	str	r3, [r6, #116]	@ 0x74
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 8005ef6:	f382 8811 	msr	BASEPRI, r2
    r =  0;
 8005efa:	2000      	movs	r0, #0
  } else {
    r = -1;
  }
  return r;
}
 8005efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    r = -1;
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295
  return r;
 8005f04:	e7fa      	b.n	8005efc <SEGGER_RTT_ConfigDownBuffer+0x50>
 8005f06:	bf00      	nop
 8005f08:	20004230 	.word	0x20004230

08005f0c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	b570      	push	{r4, r5, r6, lr}
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
    *pPayload++ = (U8)0;
 8005f10:	3001      	adds	r0, #1
  if (pText == NULL) {
 8005f12:	b169      	cbz	r1, 8005f30 <_EncodeStr+0x24>
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005f14:	460c      	mov	r4, r1
 8005f16:	2a80      	cmp	r2, #128	@ 0x80
 8005f18:	bf94      	ite	ls
 8005f1a:	188e      	addls	r6, r1, r2
 8005f1c:	f101 0680 	addhi.w	r6, r1, #128	@ 0x80
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005f20:	42b4      	cmp	r4, r6
 8005f22:	4622      	mov	r2, r4
 8005f24:	d002      	beq.n	8005f2c <_EncodeStr+0x20>
 8005f26:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005f2a:	b91d      	cbnz	r5, 8005f34 <_EncodeStr+0x28>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005f2c:	1a52      	subs	r2, r2, r1
 8005f2e:	b2d1      	uxtb	r1, r2
    *pPayload++ = (U8)0;
 8005f30:	7019      	strb	r1, [r3, #0]
#endif
  }
  //
  return pPayload;
}
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
      *pPayload++ = *pText++;
 8005f34:	f800 5b01 	strb.w	r5, [r0], #1
 8005f38:	e7f2      	b.n	8005f20 <_EncodeStr+0x14>
	...

08005f3c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005f3c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f40:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8005f94 <SEGGER_SYSVIEW_Init+0x58>
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005f44:	4607      	mov	r7, r0
 8005f46:	460e      	mov	r6, r1
 8005f48:	4690      	mov	r8, r2
 8005f4a:	461d      	mov	r5, r3
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f4c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005f50:	2300      	movs	r3, #0
 8005f52:	4648      	mov	r0, r9
 8005f54:	4910      	ldr	r1, [pc, #64]	@ (8005f98 <SEGGER_SYSVIEW_Init+0x5c>)
 8005f56:	f7ff ff71 	bl	8005e3c <SEGGER_RTT_AllocUpBuffer>
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f5a:	f04f 0a00 	mov.w	sl, #0
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f5e:	4c0f      	ldr	r4, [pc, #60]	@ (8005f9c <SEGGER_SYSVIEW_Init+0x60>)
 8005f60:	b2c0      	uxtb	r0, r0
 8005f62:	7060      	strb	r0, [r4, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005f64:	7620      	strb	r0, [r4, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f66:	2308      	movs	r3, #8
 8005f68:	4649      	mov	r1, r9
 8005f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005fa0 <SEGGER_SYSVIEW_Init+0x64>)
 8005f6c:	f8cd a000 	str.w	sl, [sp]
 8005f70:	f7ff ff9c 	bl	8005eac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f74:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa4 <SEGGER_SYSVIEW_Init+0x68>)
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f76:	f8c4 a010 	str.w	sl, [r4, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f7a:	685b      	ldr	r3, [r3, #4]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
  _SYSVIEW_Globals.SysFreq          = SysFreq;
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f7c:	e9c4 7601 	strd	r7, r6, [r4, #4]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f80:	60e3      	str	r3, [r4, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f82:	f8c4 8020 	str.w	r8, [r4, #32]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f86:	6265      	str	r5, [r4, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f88:	f884 a000 	strb.w	sl, [r4]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f8c:	b002      	add	sp, #8
 8005f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f92:	bf00      	nop
 8005f94:	0800971d 	.word	0x0800971d
 8005f98:	200043f0 	.word	0x200043f0
 8005f9c:	200043c0 	.word	0x200043c0
 8005fa0:	200043e8 	.word	0x200043e8
 8005fa4:	e0001000 	.word	0xe0001000

08005fa8 <SEGGER_SYSVIEW_SetRAMBase>:
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005fa8:	4b01      	ldr	r3, [pc, #4]	@ (8005fb0 <SEGGER_SYSVIEW_SetRAMBase+0x8>)
 8005faa:	6118      	str	r0, [r3, #16]
}
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	200043c0 	.word	0x200043c0

08005fb4 <SEGGER_SYSVIEW_SendTaskList>:
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005fb4:	4b03      	ldr	r3, [pc, #12]	@ (8005fc4 <SEGGER_SYSVIEW_SendTaskList+0x10>)
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	b113      	cbz	r3, 8005fc0 <SEGGER_SYSVIEW_SendTaskList+0xc>
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	b103      	cbz	r3, 8005fc0 <SEGGER_SYSVIEW_SendTaskList+0xc>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005fbe:	4718      	bx	r3
  }
}
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	200043c0 	.word	0x200043c0

08005fc8 <SEGGER_SYSVIEW_ShrinkId>:
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
  return SHRINK_ID(Id);
 8005fc8:	4b01      	ldr	r3, [pc, #4]	@ (8005fd0 <SEGGER_SYSVIEW_ShrinkId+0x8>)
 8005fca:	691b      	ldr	r3, [r3, #16]
}
 8005fcc:	1ac0      	subs	r0, r0, r3
 8005fce:	4770      	bx	lr
 8005fd0:	200043c0 	.word	0x200043c0

08005fd4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005fd4:	4b04      	ldr	r3, [pc, #16]	@ (8005fe8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>)
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005fd6:	b510      	push	{r4, lr}
  if (_pFirstModule != 0) {
 8005fd8:	681c      	ldr	r4, [r3, #0]
 8005fda:	b124      	cbz	r4, 8005fe6 <SEGGER_SYSVIEW_SendModuleDescription+0x12>
    pModule = _pFirstModule;
    do {
      if (pModule->pfSendModuleDesc) {
 8005fdc:	68e3      	ldr	r3, [r4, #12]
 8005fde:	b103      	cbz	r3, 8005fe2 <SEGGER_SYSVIEW_SendModuleDescription+0xe>
        pModule->pfSendModuleDesc();
 8005fe0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005fe2:	6924      	ldr	r4, [r4, #16]
    } while (pModule);
 8005fe4:	e7f9      	b.n	8005fda <SEGGER_SYSVIEW_SendModuleDescription+0x6>
  }
}
 8005fe6:	bd10      	pop	{r4, pc}
 8005fe8:	200043bc 	.word	0x200043bc

08005fec <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005fec:	b510      	push	{r4, lr}
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005fee:	f3ef 8411 	mrs	r4, BASEPRI
 8005ff2:	f04f 0120 	mov.w	r1, #32
 8005ff6:	f381 8811 	msr	BASEPRI, r1
  pPayload = pPayloadStart;
  ENCODE_U32(pPayload, _NumModules);
 8005ffa:	4b09      	ldr	r3, [pc, #36]	@ (8006020 <SEGGER_SYSVIEW_SendNumModules+0x34>)
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005ffc:	221b      	movs	r2, #27
  ENCODE_U32(pPayload, _NumModules);
 8005ffe:	781b      	ldrb	r3, [r3, #0]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006000:	4808      	ldr	r0, [pc, #32]	@ (8006024 <SEGGER_SYSVIEW_SendNumModules+0x38>)
  ENCODE_U32(pPayload, _NumModules);
 8006002:	2b7f      	cmp	r3, #127	@ 0x7f
 8006004:	bf89      	itett	hi
 8006006:	4908      	ldrhi	r1, [pc, #32]	@ (8006028 <SEGGER_SYSVIEW_SendNumModules+0x3c>)
 8006008:	4906      	ldrls	r1, [pc, #24]	@ (8006024 <SEGGER_SYSVIEW_SendNumModules+0x38>)
 800600a:	71cb      	strbhi	r3, [r1, #7]
 800600c:	2301      	movhi	r3, #1
 800600e:	bf88      	it	hi
 8006010:	3108      	addhi	r1, #8
 8006012:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006016:	f000 f8ad 	bl	8006174 <_SendPacket>
  RECORD_END();
 800601a:	f384 8811 	msr	BASEPRI, r4
}
 800601e:	bd10      	pop	{r4, pc}
 8006020:	200043bb 	.word	0x200043bb
 8006024:	200042df 	.word	0x200042df
 8006028:	200042d8 	.word	0x200042d8

0800602c <SEGGER_SYSVIEW_Start>:
void SEGGER_SYSVIEW_Start(void) {
 800602c:	b538      	push	{r3, r4, r5, lr}
    _SYSVIEW_Globals.EnableState = 1;
 800602e:	2301      	movs	r3, #1
 8006030:	4c29      	ldr	r4, [pc, #164]	@ (80060d8 <SEGGER_SYSVIEW_Start+0xac>)
 8006032:	7023      	strb	r3, [r4, #0]
    SEGGER_SYSVIEW_LOCK();
 8006034:	f3ef 8511 	mrs	r5, BASEPRI
 8006038:	f04f 0120 	mov.w	r1, #32
 800603c:	f381 8811 	msr	BASEPRI, r1
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006040:	220a      	movs	r2, #10
 8006042:	4926      	ldr	r1, [pc, #152]	@ (80060dc <SEGGER_SYSVIEW_Start+0xb0>)
 8006044:	7860      	ldrb	r0, [r4, #1]
 8006046:	f7fa f883 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800604a:	f385 8811 	msr	BASEPRI, r5
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800604e:	200a      	movs	r0, #10
 8006050:	f000 f96a 	bl	8006328 <SEGGER_SYSVIEW_RecordVoid>
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006054:	f3ef 8511 	mrs	r5, BASEPRI
 8006058:	f04f 0120 	mov.w	r1, #32
 800605c:	f381 8811 	msr	BASEPRI, r1
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006060:	481f      	ldr	r0, [pc, #124]	@ (80060e0 <SEGGER_SYSVIEW_Start+0xb4>)
 8006062:	6861      	ldr	r1, [r4, #4]
 8006064:	297f      	cmp	r1, #127	@ 0x7f
 8006066:	b2ca      	uxtb	r2, r1
 8006068:	f100 0301 	add.w	r3, r0, #1
 800606c:	d820      	bhi.n	80060b0 <SEGGER_SYSVIEW_Start+0x84>
 800606e:	7002      	strb	r2, [r0, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006070:	68a0      	ldr	r0, [r4, #8]
 8006072:	287f      	cmp	r0, #127	@ 0x7f
 8006074:	b2c2      	uxtb	r2, r0
 8006076:	f103 0101 	add.w	r1, r3, #1
 800607a:	d820      	bhi.n	80060be <SEGGER_SYSVIEW_Start+0x92>
 800607c:	701a      	strb	r2, [r3, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800607e:	6922      	ldr	r2, [r4, #16]
 8006080:	2a7f      	cmp	r2, #127	@ 0x7f
 8006082:	b2d3      	uxtb	r3, r2
 8006084:	d822      	bhi.n	80060cc <SEGGER_SYSVIEW_Start+0xa0>
 8006086:	700b      	strb	r3, [r1, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006088:	2300      	movs	r3, #0
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800608a:	2218      	movs	r2, #24
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800608c:	704b      	strb	r3, [r1, #1]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800608e:	4814      	ldr	r0, [pc, #80]	@ (80060e0 <SEGGER_SYSVIEW_Start+0xb4>)
 8006090:	3102      	adds	r1, #2
 8006092:	f000 f86f 	bl	8006174 <_SendPacket>
      RECORD_END();
 8006096:	f385 8811 	msr	BASEPRI, r5
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800609a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800609c:	b103      	cbz	r3, 80060a0 <SEGGER_SYSVIEW_Start+0x74>
      _SYSVIEW_Globals.pfSendSysDesc();
 800609e:	4798      	blx	r3
    SEGGER_SYSVIEW_RecordSystime();
 80060a0:	f000 f9a0 	bl	80063e4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80060a4:	f7ff ff86 	bl	8005fb4 <SEGGER_SYSVIEW_SendTaskList>
}
 80060a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SEGGER_SYSVIEW_SendNumModules();
 80060ac:	f7ff bf9e 	b.w	8005fec <SEGGER_SYSVIEW_SendNumModules>
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80060b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060b4:	4618      	mov	r0, r3
 80060b6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80060ba:	09c9      	lsrs	r1, r1, #7
 80060bc:	e7d2      	b.n	8006064 <SEGGER_SYSVIEW_Start+0x38>
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80060be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060c2:	460b      	mov	r3, r1
 80060c4:	f801 2c01 	strb.w	r2, [r1, #-1]
 80060c8:	09c0      	lsrs	r0, r0, #7
 80060ca:	e7d2      	b.n	8006072 <SEGGER_SYSVIEW_Start+0x46>
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80060cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060d0:	f801 3b01 	strb.w	r3, [r1], #1
 80060d4:	09d2      	lsrs	r2, r2, #7
 80060d6:	e7d3      	b.n	8006080 <SEGGER_SYSVIEW_Start+0x54>
 80060d8:	200043c0 	.word	0x200043c0
 80060dc:	0800993d 	.word	0x0800993d
 80060e0:	200042df 	.word	0x200042df

080060e4 <_HandleIncomingPacket>:
static void _HandleIncomingPacket(void) {
 80060e4:	b513      	push	{r0, r1, r4, lr}
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060e6:	4c22      	ldr	r4, [pc, #136]	@ (8006170 <_HandleIncomingPacket+0x8c>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	7e20      	ldrb	r0, [r4, #24]
 80060ec:	f10d 0107 	add.w	r1, sp, #7
 80060f0:	f7ff fe18 	bl	8005d24 <SEGGER_RTT_ReadNoLock>
  if (Status > 0) {
 80060f4:	b1d8      	cbz	r0, 800612e <_HandleIncomingPacket+0x4a>
    switch (Cmd) {
 80060f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80060fa:	2b07      	cmp	r3, #7
 80060fc:	d808      	bhi.n	8006110 <_HandleIncomingPacket+0x2c>
 80060fe:	b1b3      	cbz	r3, 800612e <_HandleIncomingPacket+0x4a>
 8006100:	3b02      	subs	r3, #2
 8006102:	2b05      	cmp	r3, #5
 8006104:	d811      	bhi.n	800612a <_HandleIncomingPacket+0x46>
 8006106:	e8df f003 	tbb	[pc, r3]
 800610a:	1714      	.short	0x1714
 800610c:	23201d1a 	.word	0x23201d1a
 8006110:	2b7f      	cmp	r3, #127	@ 0x7f
 8006112:	d00c      	beq.n	800612e <_HandleIncomingPacket+0x4a>
 8006114:	2b80      	cmp	r3, #128	@ 0x80
 8006116:	d01e      	beq.n	8006156 <_HandleIncomingPacket+0x72>
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006118:	061b      	lsls	r3, r3, #24
 800611a:	d508      	bpl.n	800612e <_HandleIncomingPacket+0x4a>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800611c:	2201      	movs	r2, #1
 800611e:	7e20      	ldrb	r0, [r4, #24]
 8006120:	f10d 0107 	add.w	r1, sp, #7
 8006124:	f7ff fdfe 	bl	8005d24 <SEGGER_RTT_ReadNoLock>
}
 8006128:	e001      	b.n	800612e <_HandleIncomingPacket+0x4a>
      SEGGER_SYSVIEW_Start();
 800612a:	f7ff ff7f 	bl	800602c <SEGGER_SYSVIEW_Start>
}
 800612e:	b002      	add	sp, #8
 8006130:	bd10      	pop	{r4, pc}
      SEGGER_SYSVIEW_Stop();
 8006132:	f000 f971 	bl	8006418 <SEGGER_SYSVIEW_Stop>
      break;
 8006136:	e7fa      	b.n	800612e <_HandleIncomingPacket+0x4a>
      SEGGER_SYSVIEW_RecordSystime();
 8006138:	f000 f954 	bl	80063e4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800613c:	e7f7      	b.n	800612e <_HandleIncomingPacket+0x4a>
      SEGGER_SYSVIEW_SendTaskList();
 800613e:	f7ff ff39 	bl	8005fb4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006142:	e7f4      	b.n	800612e <_HandleIncomingPacket+0x4a>
      SEGGER_SYSVIEW_GetSysDesc();
 8006144:	f000 f980 	bl	8006448 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006148:	e7f1      	b.n	800612e <_HandleIncomingPacket+0x4a>
      SEGGER_SYSVIEW_SendNumModules();
 800614a:	f7ff ff4f 	bl	8005fec <SEGGER_SYSVIEW_SendNumModules>
      break;
 800614e:	e7ee      	b.n	800612e <_HandleIncomingPacket+0x4a>
      SEGGER_SYSVIEW_SendModuleDescription();
 8006150:	f7ff ff40 	bl	8005fd4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006154:	e7eb      	b.n	800612e <_HandleIncomingPacket+0x4a>
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006156:	2201      	movs	r2, #1
 8006158:	7e20      	ldrb	r0, [r4, #24]
 800615a:	f10d 0107 	add.w	r1, sp, #7
 800615e:	f7ff fde1 	bl	8005d24 <SEGGER_RTT_ReadNoLock>
      if (Status > 0) {
 8006162:	2800      	cmp	r0, #0
 8006164:	d0e3      	beq.n	800612e <_HandleIncomingPacket+0x4a>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006166:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800616a:	f000 fb85 	bl	8006878 <SEGGER_SYSVIEW_SendModule>
 800616e:	e7de      	b.n	800612e <_HandleIncomingPacket+0x4a>
 8006170:	200043c0 	.word	0x200043c0

08006174 <_SendPacket>:
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006174:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006178:	4c68      	ldr	r4, [pc, #416]	@ (800631c <_SendPacket+0x1a8>)
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800617a:	4606      	mov	r6, r0
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800617c:	7823      	ldrb	r3, [r4, #0]
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800617e:	460f      	mov	r7, r1
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006180:	2b01      	cmp	r3, #1
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006182:	4615      	mov	r5, r2
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006184:	d119      	bne.n	80061ba <_SendPacket+0x46>
  if (EventId < 32) {
 8006186:	2d1f      	cmp	r5, #31
 8006188:	d965      	bls.n	8006256 <_SendPacket+0xe2>
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800618a:	1bbb      	subs	r3, r7, r6
    if (NumBytes > 127) {
 800618c:	2b7f      	cmp	r3, #127	@ 0x7f
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800618e:	b2da      	uxtb	r2, r3
 8006190:	bf81      	itttt	hi
 8006192:	f062 027f 	ornhi	r2, r2, #127	@ 0x7f
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006196:	09db      	lsrhi	r3, r3, #7
 8006198:	f806 3c01 	strbhi.w	r3, [r6, #-1]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800619c:	f806 2c02 	strbhi.w	r2, [r6, #-2]
      *--pStartPacket = (U8)NumBytes;
 80061a0:	bf96      	itet	ls
 80061a2:	f806 2c01 	strbls.w	r2, [r6, #-1]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80061a6:	1eb3      	subhi	r3, r6, #2
      *--pStartPacket = (U8)NumBytes;
 80061a8:	f106 33ff 	addls.w	r3, r6, #4294967295
    if (EventId < 127) {
 80061ac:	2d7e      	cmp	r5, #126	@ 0x7e
    *--pStartPacket = (U8)EventId;
 80061ae:	b2ea      	uxtb	r2, r5
    if (EventId < 127) {
 80061b0:	d86c      	bhi.n	800628c <_SendPacket+0x118>
      *--pStartPacket = (U8)EventId;
 80061b2:	1e59      	subs	r1, r3, #1
 80061b4:	f803 2c01 	strb.w	r2, [r3, #-1]
 80061b8:	e056      	b.n	8006268 <_SendPacket+0xf4>
  if (_SYSVIEW_Globals.EnableState == 0) {
 80061ba:	b33b      	cbz	r3, 800620c <_SendPacket+0x98>
  if (_SYSVIEW_Globals.EnableState == 2) {
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d1e2      	bne.n	8006186 <_SendPacket+0x12>
  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80061c0:	2301      	movs	r3, #1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80061c2:	6962      	ldr	r2, [r4, #20]
  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80061c4:	f88d 3004 	strb.w	r3, [sp, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80061c8:	f10d 0005 	add.w	r0, sp, #5
 80061cc:	2a7f      	cmp	r2, #127	@ 0x7f
 80061ce:	b2d3      	uxtb	r3, r2
 80061d0:	f100 0101 	add.w	r1, r0, #1
 80061d4:	d82d      	bhi.n	8006232 <_SendPacket+0xbe>
 80061d6:	7003      	strb	r3, [r0, #0]
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80061d8:	4b51      	ldr	r3, [pc, #324]	@ (8006320 <_SendPacket+0x1ac>)
 80061da:	f8d3 8004 	ldr.w	r8, [r3, #4]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 80061de:	68e3      	ldr	r3, [r4, #12]
 80061e0:	eba8 0303 	sub.w	r3, r8, r3
  ENCODE_U32(pPayload, Delta);
 80061e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80061e6:	b2d8      	uxtb	r0, r3
 80061e8:	f101 0201 	add.w	r2, r1, #1
 80061ec:	d828      	bhi.n	8006240 <_SendPacket+0xcc>
 80061ee:	7008      	strb	r0, [r1, #0]
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80061f0:	a901      	add	r1, sp, #4
 80061f2:	7860      	ldrb	r0, [r4, #1]
 80061f4:	1a52      	subs	r2, r2, r1
 80061f6:	f7f9 ffab 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
  if (Status) {
 80061fa:	b340      	cbz	r0, 800624e <_SendPacket+0xda>
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80061fc:	7823      	ldrb	r3, [r4, #0]
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80061fe:	f8c4 800c 	str.w	r8, [r4, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006202:	3b01      	subs	r3, #1
 8006204:	7023      	strb	r3, [r4, #0]
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006206:	7823      	ldrb	r3, [r4, #0]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d0bc      	beq.n	8006186 <_SendPacket+0x12>
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800620c:	2118      	movs	r1, #24
 800620e:	7e22      	ldrb	r2, [r4, #24]
 8006210:	4b44      	ldr	r3, [pc, #272]	@ (8006324 <_SendPacket+0x1b0>)
 8006212:	fb01 3302 	mla	r3, r1, r2, r3
 8006216:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621a:	429a      	cmp	r2, r3
 800621c:	d006      	beq.n	800622c <_SendPacket+0xb8>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800621e:	78a5      	ldrb	r5, [r4, #2]
 8006220:	b925      	cbnz	r5, 800622c <_SendPacket+0xb8>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006222:	2301      	movs	r3, #1
 8006224:	70a3      	strb	r3, [r4, #2]
      _HandleIncomingPacket();
 8006226:	f7ff ff5d 	bl	80060e4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800622a:	70a5      	strb	r5, [r4, #2]
}
 800622c:	b004      	add	sp, #16
 800622e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006232:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006236:	4608      	mov	r0, r1
 8006238:	f801 3c01 	strb.w	r3, [r1, #-1]
 800623c:	09d2      	lsrs	r2, r2, #7
 800623e:	e7c5      	b.n	80061cc <_SendPacket+0x58>
  ENCODE_U32(pPayload, Delta);
 8006240:	f060 007f 	orn	r0, r0, #127	@ 0x7f
 8006244:	4611      	mov	r1, r2
 8006246:	f802 0c01 	strb.w	r0, [r2, #-1]
 800624a:	09db      	lsrs	r3, r3, #7
 800624c:	e7ca      	b.n	80061e4 <_SendPacket+0x70>
    _SYSVIEW_Globals.DropCount++;
 800624e:	6963      	ldr	r3, [r4, #20]
 8006250:	3301      	adds	r3, #1
 8006252:	6163      	str	r3, [r4, #20]
 8006254:	e7d7      	b.n	8006206 <_SendPacket+0x92>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006256:	69e3      	ldr	r3, [r4, #28]
 8006258:	40eb      	lsrs	r3, r5
 800625a:	07db      	lsls	r3, r3, #31
 800625c:	d4d6      	bmi.n	800620c <_SendPacket+0x98>
  if (EventId < 24) {
 800625e:	2d17      	cmp	r5, #23
 8006260:	d893      	bhi.n	800618a <_SendPacket+0x16>
    *--pStartPacket = (U8)EventId;
 8006262:	1e71      	subs	r1, r6, #1
 8006264:	f806 5c01 	strb.w	r5, [r6, #-1]
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006268:	4b2d      	ldr	r3, [pc, #180]	@ (8006320 <_SendPacket+0x1ac>)
 800626a:	685d      	ldr	r5, [r3, #4]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800626c:	68e3      	ldr	r3, [r4, #12]
 800626e:	1aeb      	subs	r3, r5, r3
  ENCODE_U32(pEndPacket, Delta);
 8006270:	2b7f      	cmp	r3, #127	@ 0x7f
 8006272:	b2d8      	uxtb	r0, r3
 8006274:	f107 0201 	add.w	r2, r7, #1
 8006278:	d844      	bhi.n	8006304 <_SendPacket+0x190>
 800627a:	7038      	strb	r0, [r7, #0]
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800627c:	1a52      	subs	r2, r2, r1
 800627e:	7860      	ldrb	r0, [r4, #1]
 8006280:	f7f9 ff66 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
  if (Status) {
 8006284:	2800      	cmp	r0, #0
 8006286:	d044      	beq.n	8006312 <_SendPacket+0x19e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006288:	60e5      	str	r5, [r4, #12]
 800628a:	e7bf      	b.n	800620c <_SendPacket+0x98>
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800628c:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
        *--pStartPacket = (U8)(EventId >>  7);
 8006290:	f3c5 11c7 	ubfx	r1, r5, #7, #8
        *--pStartPacket = (U8)(EventId | 0x80);
 8006294:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006298:	d205      	bcs.n	80062a6 <_SendPacket+0x132>
        *--pStartPacket = (U8)(EventId >>  7);
 800629a:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--pStartPacket = (U8)(EventId | 0x80);
 800629e:	f803 2c02 	strb.w	r2, [r3, #-2]
 80062a2:	1e99      	subs	r1, r3, #2
 80062a4:	e7e0      	b.n	8006268 <_SendPacket+0xf4>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80062a6:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
        *--pStartPacket = (U8)(EventId >> 14);
 80062aa:	f3c5 3087 	ubfx	r0, r5, #14, #8
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80062ae:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80062b2:	d207      	bcs.n	80062c4 <_SendPacket+0x150>
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80062b4:	f803 1c02 	strb.w	r1, [r3, #-2]
        *--pStartPacket = (U8)(EventId >> 14);
 80062b8:	f803 0c01 	strb.w	r0, [r3, #-1]
        *--pStartPacket = (U8)(EventId | 0x80);
 80062bc:	1ed9      	subs	r1, r3, #3
 80062be:	f803 2c03 	strb.w	r2, [r3, #-3]
 80062c2:	e7d1      	b.n	8006268 <_SendPacket+0xf4>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80062c4:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
        *--pStartPacket = (U8)(EventId >> 21);
 80062c8:	f3c5 5647 	ubfx	r6, r5, #21, #8
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80062cc:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80062d0:	d209      	bcs.n	80062e6 <_SendPacket+0x172>
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80062d2:	f803 1c03 	strb.w	r1, [r3, #-3]
        *--pStartPacket = (U8)(EventId >> 21);
 80062d6:	f803 6c01 	strb.w	r6, [r3, #-1]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80062da:	f803 0c02 	strb.w	r0, [r3, #-2]
        *--pStartPacket = (U8)(EventId | 0x80);
 80062de:	1f19      	subs	r1, r3, #4
 80062e0:	f803 2c04 	strb.w	r2, [r3, #-4]
 80062e4:	e7c0      	b.n	8006268 <_SendPacket+0xf4>
        *--pStartPacket = (U8)(EventId >> 28);
 80062e6:	0f2d      	lsrs	r5, r5, #28
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80062e8:	f066 067f 	orn	r6, r6, #127	@ 0x7f
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80062ec:	f803 1c04 	strb.w	r1, [r3, #-4]
        *--pStartPacket = (U8)(EventId >> 28);
 80062f0:	f803 5c01 	strb.w	r5, [r3, #-1]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80062f4:	f803 6c02 	strb.w	r6, [r3, #-2]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80062f8:	f803 0c03 	strb.w	r0, [r3, #-3]
        *--pStartPacket = (U8)(EventId | 0x80);
 80062fc:	1f59      	subs	r1, r3, #5
 80062fe:	f803 2c05 	strb.w	r2, [r3, #-5]
 8006302:	e7b1      	b.n	8006268 <_SendPacket+0xf4>
  ENCODE_U32(pEndPacket, Delta);
 8006304:	f060 007f 	orn	r0, r0, #127	@ 0x7f
 8006308:	4617      	mov	r7, r2
 800630a:	f802 0c01 	strb.w	r0, [r2, #-1]
 800630e:	09db      	lsrs	r3, r3, #7
 8006310:	e7ae      	b.n	8006270 <_SendPacket+0xfc>
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006312:	7823      	ldrb	r3, [r4, #0]
 8006314:	3301      	adds	r3, #1
 8006316:	7023      	strb	r3, [r4, #0]
 8006318:	e778      	b.n	800620c <_SendPacket+0x98>
 800631a:	bf00      	nop
 800631c:	200043c0 	.word	0x200043c0
 8006320:	e0001000 	.word	0xe0001000
 8006324:	20004230 	.word	0x20004230

08006328 <SEGGER_SYSVIEW_RecordVoid>:
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006328:	4602      	mov	r2, r0
 800632a:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800632c:	f3ef 8411 	mrs	r4, BASEPRI
 8006330:	f04f 0120 	mov.w	r1, #32
 8006334:	f381 8811 	msr	BASEPRI, r1
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006338:	4903      	ldr	r1, [pc, #12]	@ (8006348 <SEGGER_SYSVIEW_RecordVoid+0x20>)
 800633a:	4608      	mov	r0, r1
 800633c:	f7ff ff1a 	bl	8006174 <_SendPacket>
  RECORD_END();
 8006340:	f384 8811 	msr	BASEPRI, r4
}
 8006344:	bd10      	pop	{r4, pc}
 8006346:	bf00      	nop
 8006348:	200042df 	.word	0x200042df

0800634c <SEGGER_SYSVIEW_RecordU32>:
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006352:	f3ef 8511 	mrs	r5, BASEPRI
 8006356:	f04f 0120 	mov.w	r1, #32
 800635a:	f381 8811 	msr	BASEPRI, r1
  ENCODE_U32(pPayload, Value);
 800635e:	480a      	ldr	r0, [pc, #40]	@ (8006388 <SEGGER_SYSVIEW_RecordU32+0x3c>)
 8006360:	2b7f      	cmp	r3, #127	@ 0x7f
 8006362:	b2dc      	uxtb	r4, r3
 8006364:	f100 0101 	add.w	r1, r0, #1
 8006368:	d806      	bhi.n	8006378 <SEGGER_SYSVIEW_RecordU32+0x2c>
 800636a:	7004      	strb	r4, [r0, #0]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800636c:	4806      	ldr	r0, [pc, #24]	@ (8006388 <SEGGER_SYSVIEW_RecordU32+0x3c>)
 800636e:	f7ff ff01 	bl	8006174 <_SendPacket>
  RECORD_END();
 8006372:	f385 8811 	msr	BASEPRI, r5
}
 8006376:	bd38      	pop	{r3, r4, r5, pc}
  ENCODE_U32(pPayload, Value);
 8006378:	f064 047f 	orn	r4, r4, #127	@ 0x7f
 800637c:	4608      	mov	r0, r1
 800637e:	f801 4c01 	strb.w	r4, [r1, #-1]
 8006382:	09db      	lsrs	r3, r3, #7
 8006384:	e7ec      	b.n	8006360 <SEGGER_SYSVIEW_RecordU32+0x14>
 8006386:	bf00      	nop
 8006388:	200042df 	.word	0x200042df

0800638c <SEGGER_SYSVIEW_RecordU32x2>:
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	460b      	mov	r3, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006390:	f3ef 8511 	mrs	r5, BASEPRI
 8006394:	f04f 0120 	mov.w	r1, #32
 8006398:	f381 8811 	msr	BASEPRI, r1
  ENCODE_U32(pPayload, Para0);
 800639c:	4e10      	ldr	r6, [pc, #64]	@ (80063e0 <SEGGER_SYSVIEW_RecordU32x2+0x54>)
 800639e:	2b7f      	cmp	r3, #127	@ 0x7f
 80063a0:	b2d9      	uxtb	r1, r3
 80063a2:	f106 0401 	add.w	r4, r6, #1
 80063a6:	d80d      	bhi.n	80063c4 <SEGGER_SYSVIEW_RecordU32x2+0x38>
 80063a8:	7031      	strb	r1, [r6, #0]
  ENCODE_U32(pPayload, Para1);
 80063aa:	2a7f      	cmp	r2, #127	@ 0x7f
 80063ac:	b2d3      	uxtb	r3, r2
 80063ae:	f104 0101 	add.w	r1, r4, #1
 80063b2:	d80e      	bhi.n	80063d2 <SEGGER_SYSVIEW_RecordU32x2+0x46>
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063b4:	4602      	mov	r2, r0
  ENCODE_U32(pPayload, Para1);
 80063b6:	7023      	strb	r3, [r4, #0]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063b8:	4809      	ldr	r0, [pc, #36]	@ (80063e0 <SEGGER_SYSVIEW_RecordU32x2+0x54>)
 80063ba:	f7ff fedb 	bl	8006174 <_SendPacket>
  RECORD_END();
 80063be:	f385 8811 	msr	BASEPRI, r5
}
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
  ENCODE_U32(pPayload, Para0);
 80063c4:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 80063c8:	4626      	mov	r6, r4
 80063ca:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063ce:	09db      	lsrs	r3, r3, #7
 80063d0:	e7e5      	b.n	800639e <SEGGER_SYSVIEW_RecordU32x2+0x12>
  ENCODE_U32(pPayload, Para1);
 80063d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063d6:	460c      	mov	r4, r1
 80063d8:	f801 3c01 	strb.w	r3, [r1, #-1]
 80063dc:	09d2      	lsrs	r2, r2, #7
 80063de:	e7e4      	b.n	80063aa <SEGGER_SYSVIEW_RecordU32x2+0x1e>
 80063e0:	200042df 	.word	0x200042df

080063e4 <SEGGER_SYSVIEW_RecordSystime>:
void SEGGER_SYSVIEW_RecordSystime(void) {
 80063e4:	b508      	push	{r3, lr}
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80063e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006410 <SEGGER_SYSVIEW_RecordSystime+0x2c>)
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	b14b      	cbz	r3, 8006400 <SEGGER_SYSVIEW_RecordSystime+0x1c>
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	b13b      	cbz	r3, 8006400 <SEGGER_SYSVIEW_RecordSystime+0x1c>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80063f0:	4798      	blx	r3
}
 80063f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80063f6:	460a      	mov	r2, r1
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80063f8:	4601      	mov	r1, r0
 80063fa:	200d      	movs	r0, #13
 80063fc:	f7ff bfc6 	b.w	800638c <SEGGER_SYSVIEW_RecordU32x2>
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006400:	4b04      	ldr	r3, [pc, #16]	@ (8006414 <SEGGER_SYSVIEW_RecordSystime+0x30>)
 8006402:	200c      	movs	r0, #12
 8006404:	6859      	ldr	r1, [r3, #4]
}
 8006406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800640a:	f7ff bf9f 	b.w	800634c <SEGGER_SYSVIEW_RecordU32>
 800640e:	bf00      	nop
 8006410:	200043c0 	.word	0x200043c0
 8006414:	e0001000 	.word	0xe0001000

08006418 <SEGGER_SYSVIEW_Stop>:
void SEGGER_SYSVIEW_Stop(void) {
 8006418:	b538      	push	{r3, r4, r5, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800641a:	f3ef 8511 	mrs	r5, BASEPRI
 800641e:	f04f 0120 	mov.w	r1, #32
 8006422:	f381 8811 	msr	BASEPRI, r1
  if (_SYSVIEW_Globals.EnableState) {
 8006426:	4c06      	ldr	r4, [pc, #24]	@ (8006440 <SEGGER_SYSVIEW_Stop+0x28>)
 8006428:	7823      	ldrb	r3, [r4, #0]
 800642a:	b133      	cbz	r3, 800643a <SEGGER_SYSVIEW_Stop+0x22>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800642c:	4905      	ldr	r1, [pc, #20]	@ (8006444 <SEGGER_SYSVIEW_Stop+0x2c>)
 800642e:	220b      	movs	r2, #11
 8006430:	4608      	mov	r0, r1
 8006432:	f7ff fe9f 	bl	8006174 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	7023      	strb	r3, [r4, #0]
  RECORD_END();
 800643a:	f385 8811 	msr	BASEPRI, r5
}
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	200043c0 	.word	0x200043c0
 8006444:	200042df 	.word	0x200042df

08006448 <SEGGER_SYSVIEW_GetSysDesc>:
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006448:	b570      	push	{r4, r5, r6, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800644a:	f3ef 8511 	mrs	r5, BASEPRI
 800644e:	f04f 0120 	mov.w	r1, #32
 8006452:	f381 8811 	msr	BASEPRI, r1
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006456:	4c1c      	ldr	r4, [pc, #112]	@ (80064c8 <SEGGER_SYSVIEW_GetSysDesc+0x80>)
 8006458:	481c      	ldr	r0, [pc, #112]	@ (80064cc <SEGGER_SYSVIEW_GetSysDesc+0x84>)
 800645a:	6861      	ldr	r1, [r4, #4]
 800645c:	297f      	cmp	r1, #127	@ 0x7f
 800645e:	b2ca      	uxtb	r2, r1
 8006460:	f100 0301 	add.w	r3, r0, #1
 8006464:	d81a      	bhi.n	800649c <SEGGER_SYSVIEW_GetSysDesc+0x54>
 8006466:	7002      	strb	r2, [r0, #0]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006468:	68a0      	ldr	r0, [r4, #8]
 800646a:	287f      	cmp	r0, #127	@ 0x7f
 800646c:	b2c2      	uxtb	r2, r0
 800646e:	f103 0101 	add.w	r1, r3, #1
 8006472:	d81a      	bhi.n	80064aa <SEGGER_SYSVIEW_GetSysDesc+0x62>
 8006474:	701a      	strb	r2, [r3, #0]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006476:	6922      	ldr	r2, [r4, #16]
 8006478:	2a7f      	cmp	r2, #127	@ 0x7f
 800647a:	b2d3      	uxtb	r3, r2
 800647c:	d81c      	bhi.n	80064b8 <SEGGER_SYSVIEW_GetSysDesc+0x70>
 800647e:	700b      	strb	r3, [r1, #0]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006480:	2300      	movs	r3, #0
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006482:	2218      	movs	r2, #24
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006484:	704b      	strb	r3, [r1, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006486:	4811      	ldr	r0, [pc, #68]	@ (80064cc <SEGGER_SYSVIEW_GetSysDesc+0x84>)
 8006488:	3102      	adds	r1, #2
 800648a:	f7ff fe73 	bl	8006174 <_SendPacket>
  RECORD_END();
 800648e:	f385 8811 	msr	BASEPRI, r5
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006492:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006494:	b1b3      	cbz	r3, 80064c4 <SEGGER_SYSVIEW_GetSysDesc+0x7c>
}
 8006496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _SYSVIEW_Globals.pfSendSysDesc();
 800649a:	4718      	bx	r3
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800649c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064a0:	4618      	mov	r0, r3
 80064a2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80064a6:	09c9      	lsrs	r1, r1, #7
 80064a8:	e7d8      	b.n	800645c <SEGGER_SYSVIEW_GetSysDesc+0x14>
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80064aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064ae:	460b      	mov	r3, r1
 80064b0:	f801 2c01 	strb.w	r2, [r1, #-1]
 80064b4:	09c0      	lsrs	r0, r0, #7
 80064b6:	e7d8      	b.n	800646a <SEGGER_SYSVIEW_GetSysDesc+0x22>
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80064b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064bc:	f801 3b01 	strb.w	r3, [r1], #1
 80064c0:	09d2      	lsrs	r2, r2, #7
 80064c2:	e7d9      	b.n	8006478 <SEGGER_SYSVIEW_GetSysDesc+0x30>
}
 80064c4:	bd70      	pop	{r4, r5, r6, pc}
 80064c6:	bf00      	nop
 80064c8:	200043c0 	.word	0x200043c0
 80064cc:	200042df 	.word	0x200042df

080064d0 <SEGGER_SYSVIEW_SendTaskInfo>:
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	4604      	mov	r4, r0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80064d4:	f3ef 8511 	mrs	r5, BASEPRI
 80064d8:	f04f 0120 	mov.w	r1, #32
 80064dc:	f381 8811 	msr	BASEPRI, r1
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80064e0:	4e35      	ldr	r6, [pc, #212]	@ (80065b8 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>)
 80064e2:	6803      	ldr	r3, [r0, #0]
 80064e4:	6932      	ldr	r2, [r6, #16]
 80064e6:	4835      	ldr	r0, [pc, #212]	@ (80065bc <SEGGER_SYSVIEW_SendTaskInfo+0xec>)
 80064e8:	1a9b      	subs	r3, r3, r2
 80064ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80064ec:	b2d9      	uxtb	r1, r3
 80064ee:	f100 0201 	add.w	r2, r0, #1
 80064f2:	d836      	bhi.n	8006562 <SEGGER_SYSVIEW_SendTaskInfo+0x92>
 80064f4:	7001      	strb	r1, [r0, #0]
  ENCODE_U32(pPayload, pInfo->Prio);
 80064f6:	68a1      	ldr	r1, [r4, #8]
 80064f8:	297f      	cmp	r1, #127	@ 0x7f
 80064fa:	b2cb      	uxtb	r3, r1
 80064fc:	f102 0001 	add.w	r0, r2, #1
 8006500:	d836      	bhi.n	8006570 <SEGGER_SYSVIEW_SendTaskInfo+0xa0>
 8006502:	7013      	strb	r3, [r2, #0]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006504:	6861      	ldr	r1, [r4, #4]
 8006506:	2220      	movs	r2, #32
 8006508:	f7ff fd00 	bl	8005f0c <_EncodeStr>
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800650c:	2209      	movs	r2, #9
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800650e:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006510:	482a      	ldr	r0, [pc, #168]	@ (80065bc <SEGGER_SYSVIEW_SendTaskInfo+0xec>)
 8006512:	f7ff fe2f 	bl	8006174 <_SendPacket>
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	6932      	ldr	r2, [r6, #16]
 800651a:	4828      	ldr	r0, [pc, #160]	@ (80065bc <SEGGER_SYSVIEW_SendTaskInfo+0xec>)
 800651c:	1a9b      	subs	r3, r3, r2
 800651e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006520:	b2da      	uxtb	r2, r3
 8006522:	f100 0101 	add.w	r1, r0, #1
 8006526:	d82a      	bhi.n	800657e <SEGGER_SYSVIEW_SendTaskInfo+0xae>
 8006528:	7002      	strb	r2, [r0, #0]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800652a:	68e0      	ldr	r0, [r4, #12]
 800652c:	287f      	cmp	r0, #127	@ 0x7f
 800652e:	b2c3      	uxtb	r3, r0
 8006530:	f101 0201 	add.w	r2, r1, #1
 8006534:	d82a      	bhi.n	800658c <SEGGER_SYSVIEW_SendTaskInfo+0xbc>
 8006536:	700b      	strb	r3, [r1, #0]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006538:	6920      	ldr	r0, [r4, #16]
 800653a:	287f      	cmp	r0, #127	@ 0x7f
 800653c:	b2c1      	uxtb	r1, r0
 800653e:	f102 0301 	add.w	r3, r2, #1
 8006542:	d82a      	bhi.n	800659a <SEGGER_SYSVIEW_SendTaskInfo+0xca>
 8006544:	7011      	strb	r1, [r2, #0]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006546:	6960      	ldr	r0, [r4, #20]
 8006548:	287f      	cmp	r0, #127	@ 0x7f
 800654a:	b2c2      	uxtb	r2, r0
 800654c:	f103 0101 	add.w	r1, r3, #1
 8006550:	d82a      	bhi.n	80065a8 <SEGGER_SYSVIEW_SendTaskInfo+0xd8>
 8006552:	701a      	strb	r2, [r3, #0]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006554:	4819      	ldr	r0, [pc, #100]	@ (80065bc <SEGGER_SYSVIEW_SendTaskInfo+0xec>)
 8006556:	2215      	movs	r2, #21
 8006558:	f7ff fe0c 	bl	8006174 <_SendPacket>
  RECORD_END();
 800655c:	f385 8811 	msr	BASEPRI, r5
}
 8006560:	bd70      	pop	{r4, r5, r6, pc}
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006562:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8006566:	4610      	mov	r0, r2
 8006568:	f802 1c01 	strb.w	r1, [r2, #-1]
 800656c:	09db      	lsrs	r3, r3, #7
 800656e:	e7bc      	b.n	80064ea <SEGGER_SYSVIEW_SendTaskInfo+0x1a>
  ENCODE_U32(pPayload, pInfo->Prio);
 8006570:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006574:	4602      	mov	r2, r0
 8006576:	f800 3c01 	strb.w	r3, [r0, #-1]
 800657a:	09c9      	lsrs	r1, r1, #7
 800657c:	e7bc      	b.n	80064f8 <SEGGER_SYSVIEW_SendTaskInfo+0x28>
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800657e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006582:	4608      	mov	r0, r1
 8006584:	f801 2c01 	strb.w	r2, [r1, #-1]
 8006588:	09db      	lsrs	r3, r3, #7
 800658a:	e7c8      	b.n	800651e <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
  ENCODE_U32(pPayload, pInfo->StackBase);
 800658c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006590:	4611      	mov	r1, r2
 8006592:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006596:	09c0      	lsrs	r0, r0, #7
 8006598:	e7c8      	b.n	800652c <SEGGER_SYSVIEW_SendTaskInfo+0x5c>
  ENCODE_U32(pPayload, pInfo->StackSize);
 800659a:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 800659e:	461a      	mov	r2, r3
 80065a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065a4:	09c0      	lsrs	r0, r0, #7
 80065a6:	e7c8      	b.n	800653a <SEGGER_SYSVIEW_SendTaskInfo+0x6a>
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80065a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065ac:	460b      	mov	r3, r1
 80065ae:	f801 2c01 	strb.w	r2, [r1, #-1]
 80065b2:	09c0      	lsrs	r0, r0, #7
 80065b4:	e7c8      	b.n	8006548 <SEGGER_SYSVIEW_SendTaskInfo+0x78>
 80065b6:	bf00      	nop
 80065b8:	200043c0 	.word	0x200043c0
 80065bc:	200042df 	.word	0x200042df

080065c0 <SEGGER_SYSVIEW_SendSysDesc>:
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80065c0:	b538      	push	{r3, r4, r5, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065c2:	f3ef 8511 	mrs	r5, BASEPRI
 80065c6:	f04f 0120 	mov.w	r1, #32
 80065ca:	f381 8811 	msr	BASEPRI, r1
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065ce:	4c07      	ldr	r4, [pc, #28]	@ (80065ec <SEGGER_SYSVIEW_SendSysDesc+0x2c>)
 80065d0:	4601      	mov	r1, r0
 80065d2:	2280      	movs	r2, #128	@ 0x80
 80065d4:	4620      	mov	r0, r4
 80065d6:	f7ff fc99 	bl	8005f0c <_EncodeStr>
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80065da:	220e      	movs	r2, #14
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065dc:	4601      	mov	r1, r0
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80065de:	4620      	mov	r0, r4
 80065e0:	f7ff fdc8 	bl	8006174 <_SendPacket>
  RECORD_END();
 80065e4:	f385 8811 	msr	BASEPRI, r5
}
 80065e8:	bd38      	pop	{r3, r4, r5, pc}
 80065ea:	bf00      	nop
 80065ec:	200042df 	.word	0x200042df

080065f0 <SEGGER_SYSVIEW_RecordEnterISR>:
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80065f0:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065f2:	f3ef 8411 	mrs	r4, BASEPRI
 80065f6:	f04f 0120 	mov.w	r1, #32
 80065fa:	f381 8811 	msr	BASEPRI, r1
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80065fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006602:	f8d3 1d04 	ldr.w	r1, [r3, #3332]	@ 0xd04
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006606:	480b      	ldr	r0, [pc, #44]	@ (8006634 <SEGGER_SYSVIEW_RecordEnterISR+0x44>)
  ENCODE_U32(pPayload, v);
 8006608:	f411 7fc0 	tst.w	r1, #384	@ 0x180
 800660c:	b2ca      	uxtb	r2, r1
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800660e:	f3c1 0308 	ubfx	r3, r1, #0, #9
  ENCODE_U32(pPayload, v);
 8006612:	bf1b      	ittet	ne
 8006614:	4908      	ldrne	r1, [pc, #32]	@ (8006638 <SEGGER_SYSVIEW_RecordEnterISR+0x48>)
 8006616:	f062 027f 	ornne	r2, r2, #127	@ 0x7f
 800661a:	4906      	ldreq	r1, [pc, #24]	@ (8006634 <SEGGER_SYSVIEW_RecordEnterISR+0x44>)
 800661c:	71ca      	strbne	r2, [r1, #7]
 800661e:	bf1c      	itt	ne
 8006620:	09db      	lsrne	r3, r3, #7
 8006622:	3108      	addne	r1, #8
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006624:	2202      	movs	r2, #2
  ENCODE_U32(pPayload, v);
 8006626:	f801 3b01 	strb.w	r3, [r1], #1
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800662a:	f7ff fda3 	bl	8006174 <_SendPacket>
  RECORD_END();
 800662e:	f384 8811 	msr	BASEPRI, r4
}
 8006632:	bd10      	pop	{r4, pc}
 8006634:	200042df 	.word	0x200042df
 8006638:	200042d8 	.word	0x200042d8

0800663c <SEGGER_SYSVIEW_RecordExitISR>:
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800663c:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800663e:	f3ef 8411 	mrs	r4, BASEPRI
 8006642:	f04f 0120 	mov.w	r1, #32
 8006646:	f381 8811 	msr	BASEPRI, r1
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800664a:	4904      	ldr	r1, [pc, #16]	@ (800665c <SEGGER_SYSVIEW_RecordExitISR+0x20>)
 800664c:	2203      	movs	r2, #3
 800664e:	4608      	mov	r0, r1
 8006650:	f7ff fd90 	bl	8006174 <_SendPacket>
  RECORD_END();
 8006654:	f384 8811 	msr	BASEPRI, r4
}
 8006658:	bd10      	pop	{r4, pc}
 800665a:	bf00      	nop
 800665c:	200042df 	.word	0x200042df

08006660 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006660:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006662:	f3ef 8411 	mrs	r4, BASEPRI
 8006666:	f04f 0120 	mov.w	r1, #32
 800666a:	f381 8811 	msr	BASEPRI, r1
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800666e:	4904      	ldr	r1, [pc, #16]	@ (8006680 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x20>)
 8006670:	2212      	movs	r2, #18
 8006672:	4608      	mov	r0, r1
 8006674:	f7ff fd7e 	bl	8006174 <_SendPacket>
  RECORD_END();
 8006678:	f384 8811 	msr	BASEPRI, r4
}
 800667c:	bd10      	pop	{r4, pc}
 800667e:	bf00      	nop
 8006680:	200042df 	.word	0x200042df

08006684 <SEGGER_SYSVIEW_RecordEndCall>:
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006684:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006686:	f3ef 8411 	mrs	r4, BASEPRI
 800668a:	f04f 0120 	mov.w	r1, #32
 800668e:	f381 8811 	msr	BASEPRI, r1
  ENCODE_U32(pPayload, EventID);
 8006692:	4a0a      	ldr	r2, [pc, #40]	@ (80066bc <SEGGER_SYSVIEW_RecordEndCall+0x38>)
 8006694:	287f      	cmp	r0, #127	@ 0x7f
 8006696:	b2c3      	uxtb	r3, r0
 8006698:	f102 0101 	add.w	r1, r2, #1
 800669c:	d807      	bhi.n	80066ae <SEGGER_SYSVIEW_RecordEndCall+0x2a>
 800669e:	7013      	strb	r3, [r2, #0]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80066a0:	4806      	ldr	r0, [pc, #24]	@ (80066bc <SEGGER_SYSVIEW_RecordEndCall+0x38>)
 80066a2:	221c      	movs	r2, #28
 80066a4:	f7ff fd66 	bl	8006174 <_SendPacket>
  RECORD_END();
 80066a8:	f384 8811 	msr	BASEPRI, r4
}
 80066ac:	bd10      	pop	{r4, pc}
  ENCODE_U32(pPayload, EventID);
 80066ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066b2:	460a      	mov	r2, r1
 80066b4:	f801 3c01 	strb.w	r3, [r1, #-1]
 80066b8:	09c0      	lsrs	r0, r0, #7
 80066ba:	e7eb      	b.n	8006694 <SEGGER_SYSVIEW_RecordEndCall+0x10>
 80066bc:	200042df 	.word	0x200042df

080066c0 <SEGGER_SYSVIEW_RecordEndCallU32>:
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	460b      	mov	r3, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80066c4:	f3ef 8411 	mrs	r4, BASEPRI
 80066c8:	f04f 0120 	mov.w	r1, #32
 80066cc:	f381 8811 	msr	BASEPRI, r1
  ENCODE_U32(pPayload, EventID);
 80066d0:	4d10      	ldr	r5, [pc, #64]	@ (8006714 <SEGGER_SYSVIEW_RecordEndCallU32+0x54>)
 80066d2:	287f      	cmp	r0, #127	@ 0x7f
 80066d4:	b2c1      	uxtb	r1, r0
 80066d6:	f105 0201 	add.w	r2, r5, #1
 80066da:	d80d      	bhi.n	80066f8 <SEGGER_SYSVIEW_RecordEndCallU32+0x38>
 80066dc:	7029      	strb	r1, [r5, #0]
  ENCODE_U32(pPayload, Para0);
 80066de:	2b7f      	cmp	r3, #127	@ 0x7f
 80066e0:	b2d8      	uxtb	r0, r3
 80066e2:	f102 0101 	add.w	r1, r2, #1
 80066e6:	d80e      	bhi.n	8006706 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80066e8:	7010      	strb	r0, [r2, #0]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80066ea:	221c      	movs	r2, #28
 80066ec:	4809      	ldr	r0, [pc, #36]	@ (8006714 <SEGGER_SYSVIEW_RecordEndCallU32+0x54>)
 80066ee:	f7ff fd41 	bl	8006174 <_SendPacket>
  RECORD_END();
 80066f2:	f384 8811 	msr	BASEPRI, r4
}
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
  ENCODE_U32(pPayload, EventID);
 80066f8:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 80066fc:	4615      	mov	r5, r2
 80066fe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006702:	09c0      	lsrs	r0, r0, #7
 8006704:	e7e5      	b.n	80066d2 <SEGGER_SYSVIEW_RecordEndCallU32+0x12>
  ENCODE_U32(pPayload, Para0);
 8006706:	f060 007f 	orn	r0, r0, #127	@ 0x7f
 800670a:	460a      	mov	r2, r1
 800670c:	f801 0c01 	strb.w	r0, [r1, #-1]
 8006710:	09db      	lsrs	r3, r3, #7
 8006712:	e7e4      	b.n	80066de <SEGGER_SYSVIEW_RecordEndCallU32+0x1e>
 8006714:	200042df 	.word	0x200042df

08006718 <SEGGER_SYSVIEW_OnIdle>:
void SEGGER_SYSVIEW_OnIdle(void) {
 8006718:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800671a:	f3ef 8411 	mrs	r4, BASEPRI
 800671e:	f04f 0120 	mov.w	r1, #32
 8006722:	f381 8811 	msr	BASEPRI, r1
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006726:	4904      	ldr	r1, [pc, #16]	@ (8006738 <SEGGER_SYSVIEW_OnIdle+0x20>)
 8006728:	2211      	movs	r2, #17
 800672a:	4608      	mov	r0, r1
 800672c:	f7ff fd22 	bl	8006174 <_SendPacket>
  RECORD_END();
 8006730:	f384 8811 	msr	BASEPRI, r4
}
 8006734:	bd10      	pop	{r4, pc}
 8006736:	bf00      	nop
 8006738:	200042df 	.word	0x200042df

0800673c <SEGGER_SYSVIEW_OnTaskCreate>:
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800673c:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800673e:	f3ef 8411 	mrs	r4, BASEPRI
 8006742:	f04f 0120 	mov.w	r1, #32
 8006746:	f381 8811 	msr	BASEPRI, r1
  TaskId = SHRINK_ID(TaskId);
 800674a:	4b0c      	ldr	r3, [pc, #48]	@ (800677c <SEGGER_SYSVIEW_OnTaskCreate+0x40>)
  ENCODE_U32(pPayload, TaskId);
 800674c:	4a0c      	ldr	r2, [pc, #48]	@ (8006780 <SEGGER_SYSVIEW_OnTaskCreate+0x44>)
  TaskId = SHRINK_ID(TaskId);
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	1ac0      	subs	r0, r0, r3
  ENCODE_U32(pPayload, TaskId);
 8006752:	287f      	cmp	r0, #127	@ 0x7f
 8006754:	b2c3      	uxtb	r3, r0
 8006756:	f102 0101 	add.w	r1, r2, #1
 800675a:	d807      	bhi.n	800676c <SEGGER_SYSVIEW_OnTaskCreate+0x30>
 800675c:	7013      	strb	r3, [r2, #0]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800675e:	4808      	ldr	r0, [pc, #32]	@ (8006780 <SEGGER_SYSVIEW_OnTaskCreate+0x44>)
 8006760:	2208      	movs	r2, #8
 8006762:	f7ff fd07 	bl	8006174 <_SendPacket>
  RECORD_END();
 8006766:	f384 8811 	msr	BASEPRI, r4
}
 800676a:	bd10      	pop	{r4, pc}
  ENCODE_U32(pPayload, TaskId);
 800676c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006770:	460a      	mov	r2, r1
 8006772:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006776:	09c0      	lsrs	r0, r0, #7
 8006778:	e7eb      	b.n	8006752 <SEGGER_SYSVIEW_OnTaskCreate+0x16>
 800677a:	bf00      	nop
 800677c:	200043c0 	.word	0x200043c0
 8006780:	200042df 	.word	0x200042df

08006784 <SEGGER_SYSVIEW_OnTaskStartExec>:
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006784:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006786:	f3ef 8411 	mrs	r4, BASEPRI
 800678a:	f04f 0120 	mov.w	r1, #32
 800678e:	f381 8811 	msr	BASEPRI, r1
  TaskId = SHRINK_ID(TaskId);
 8006792:	4b0c      	ldr	r3, [pc, #48]	@ (80067c4 <SEGGER_SYSVIEW_OnTaskStartExec+0x40>)
  ENCODE_U32(pPayload, TaskId);
 8006794:	4a0c      	ldr	r2, [pc, #48]	@ (80067c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x44>)
  TaskId = SHRINK_ID(TaskId);
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	1ac0      	subs	r0, r0, r3
  ENCODE_U32(pPayload, TaskId);
 800679a:	287f      	cmp	r0, #127	@ 0x7f
 800679c:	b2c3      	uxtb	r3, r0
 800679e:	f102 0101 	add.w	r1, r2, #1
 80067a2:	d807      	bhi.n	80067b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x30>
 80067a4:	7013      	strb	r3, [r2, #0]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80067a6:	4808      	ldr	r0, [pc, #32]	@ (80067c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x44>)
 80067a8:	2204      	movs	r2, #4
 80067aa:	f7ff fce3 	bl	8006174 <_SendPacket>
  RECORD_END();
 80067ae:	f384 8811 	msr	BASEPRI, r4
}
 80067b2:	bd10      	pop	{r4, pc}
  ENCODE_U32(pPayload, TaskId);
 80067b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067b8:	460a      	mov	r2, r1
 80067ba:	f801 3c01 	strb.w	r3, [r1, #-1]
 80067be:	09c0      	lsrs	r0, r0, #7
 80067c0:	e7eb      	b.n	800679a <SEGGER_SYSVIEW_OnTaskStartExec+0x16>
 80067c2:	bf00      	nop
 80067c4:	200043c0 	.word	0x200043c0
 80067c8:	200042df 	.word	0x200042df

080067cc <SEGGER_SYSVIEW_OnTaskStartReady>:
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80067cc:	b510      	push	{r4, lr}
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067ce:	f3ef 8411 	mrs	r4, BASEPRI
 80067d2:	f04f 0120 	mov.w	r1, #32
 80067d6:	f381 8811 	msr	BASEPRI, r1
  TaskId = SHRINK_ID(TaskId);
 80067da:	4b0c      	ldr	r3, [pc, #48]	@ (800680c <SEGGER_SYSVIEW_OnTaskStartReady+0x40>)
  ENCODE_U32(pPayload, TaskId);
 80067dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006810 <SEGGER_SYSVIEW_OnTaskStartReady+0x44>)
  TaskId = SHRINK_ID(TaskId);
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	1ac0      	subs	r0, r0, r3
  ENCODE_U32(pPayload, TaskId);
 80067e2:	287f      	cmp	r0, #127	@ 0x7f
 80067e4:	b2c3      	uxtb	r3, r0
 80067e6:	f102 0101 	add.w	r1, r2, #1
 80067ea:	d807      	bhi.n	80067fc <SEGGER_SYSVIEW_OnTaskStartReady+0x30>
 80067ec:	7013      	strb	r3, [r2, #0]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80067ee:	4808      	ldr	r0, [pc, #32]	@ (8006810 <SEGGER_SYSVIEW_OnTaskStartReady+0x44>)
 80067f0:	2206      	movs	r2, #6
 80067f2:	f7ff fcbf 	bl	8006174 <_SendPacket>
  RECORD_END();
 80067f6:	f384 8811 	msr	BASEPRI, r4
}
 80067fa:	bd10      	pop	{r4, pc}
  ENCODE_U32(pPayload, TaskId);
 80067fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006800:	460a      	mov	r2, r1
 8006802:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006806:	09c0      	lsrs	r0, r0, #7
 8006808:	e7eb      	b.n	80067e2 <SEGGER_SYSVIEW_OnTaskStartReady+0x16>
 800680a:	bf00      	nop
 800680c:	200043c0 	.word	0x200043c0
 8006810:	200042df 	.word	0x200042df

08006814 <SEGGER_SYSVIEW_OnTaskStopReady>:
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	460b      	mov	r3, r1
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006818:	f3ef 8411 	mrs	r4, BASEPRI
 800681c:	f04f 0120 	mov.w	r1, #32
 8006820:	f381 8811 	msr	BASEPRI, r1
  TaskId = SHRINK_ID(TaskId);
 8006824:	4a12      	ldr	r2, [pc, #72]	@ (8006870 <SEGGER_SYSVIEW_OnTaskStopReady+0x5c>)
  ENCODE_U32(pPayload, TaskId);
 8006826:	4d13      	ldr	r5, [pc, #76]	@ (8006874 <SEGGER_SYSVIEW_OnTaskStopReady+0x60>)
  TaskId = SHRINK_ID(TaskId);
 8006828:	6912      	ldr	r2, [r2, #16]
 800682a:	1a80      	subs	r0, r0, r2
  ENCODE_U32(pPayload, TaskId);
 800682c:	287f      	cmp	r0, #127	@ 0x7f
 800682e:	b2c1      	uxtb	r1, r0
 8006830:	f105 0201 	add.w	r2, r5, #1
 8006834:	d80d      	bhi.n	8006852 <SEGGER_SYSVIEW_OnTaskStopReady+0x3e>
 8006836:	7029      	strb	r1, [r5, #0]
  ENCODE_U32(pPayload, Cause);
 8006838:	2b7f      	cmp	r3, #127	@ 0x7f
 800683a:	b2d8      	uxtb	r0, r3
 800683c:	f102 0101 	add.w	r1, r2, #1
 8006840:	d80e      	bhi.n	8006860 <SEGGER_SYSVIEW_OnTaskStopReady+0x4c>
 8006842:	7010      	strb	r0, [r2, #0]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006844:	2207      	movs	r2, #7
 8006846:	480b      	ldr	r0, [pc, #44]	@ (8006874 <SEGGER_SYSVIEW_OnTaskStopReady+0x60>)
 8006848:	f7ff fc94 	bl	8006174 <_SendPacket>
  RECORD_END();
 800684c:	f384 8811 	msr	BASEPRI, r4
}
 8006850:	bd38      	pop	{r3, r4, r5, pc}
  ENCODE_U32(pPayload, TaskId);
 8006852:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8006856:	4615      	mov	r5, r2
 8006858:	f802 1c01 	strb.w	r1, [r2, #-1]
 800685c:	09c0      	lsrs	r0, r0, #7
 800685e:	e7e5      	b.n	800682c <SEGGER_SYSVIEW_OnTaskStopReady+0x18>
  ENCODE_U32(pPayload, Cause);
 8006860:	f060 007f 	orn	r0, r0, #127	@ 0x7f
 8006864:	460a      	mov	r2, r1
 8006866:	f801 0c01 	strb.w	r0, [r1, #-1]
 800686a:	09db      	lsrs	r3, r3, #7
 800686c:	e7e4      	b.n	8006838 <SEGGER_SYSVIEW_OnTaskStopReady+0x24>
 800686e:	bf00      	nop
 8006870:	200043c0 	.word	0x200043c0
 8006874:	200042df 	.word	0x200042df

08006878 <SEGGER_SYSVIEW_SendModule>:
  if (_pFirstModule != 0) {
 8006878:	4b1f      	ldr	r3, [pc, #124]	@ (80068f8 <SEGGER_SYSVIEW_SendModule+0x80>)
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800687a:	b570      	push	{r4, r5, r6, lr}
  if (_pFirstModule != 0) {
 800687c:	681c      	ldr	r4, [r3, #0]
 800687e:	b984      	cbnz	r4, 80068a2 <SEGGER_SYSVIEW_SendModule+0x2a>
}
 8006880:	bd70      	pop	{r4, r5, r6, pc}
      pModule = pModule->pNext;
 8006882:	6924      	ldr	r4, [r4, #16]
      if (pModule == 0) {
 8006884:	2c00      	cmp	r4, #0
 8006886:	d0fb      	beq.n	8006880 <SEGGER_SYSVIEW_SendModule+0x8>
    for (n = 0; n < ModuleId; n++) {
 8006888:	3301      	adds	r3, #1
 800688a:	4298      	cmp	r0, r3
 800688c:	d8f9      	bhi.n	8006882 <SEGGER_SYSVIEW_SendModule+0xa>
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800688e:	f3ef 8511 	mrs	r5, BASEPRI
 8006892:	f04f 0120 	mov.w	r1, #32
 8006896:	f381 8811 	msr	BASEPRI, r1
      ENCODE_U32(pPayload, ModuleId);
 800689a:	287f      	cmp	r0, #127	@ 0x7f
 800689c:	d804      	bhi.n	80068a8 <SEGGER_SYSVIEW_SendModule+0x30>
 800689e:	4b17      	ldr	r3, [pc, #92]	@ (80068fc <SEGGER_SYSVIEW_SendModule+0x84>)
 80068a0:	e008      	b.n	80068b4 <SEGGER_SYSVIEW_SendModule+0x3c>
    for (n = 0; n < ModuleId; n++) {
 80068a2:	2300      	movs	r3, #0
 80068a4:	4602      	mov	r2, r0
 80068a6:	e7f0      	b.n	800688a <SEGGER_SYSVIEW_SendModule+0x12>
      ENCODE_U32(pPayload, ModuleId);
 80068a8:	2201      	movs	r2, #1
 80068aa:	4b15      	ldr	r3, [pc, #84]	@ (8006900 <SEGGER_SYSVIEW_SendModule+0x88>)
 80068ac:	f060 007f 	orn	r0, r0, #127	@ 0x7f
 80068b0:	71d8      	strb	r0, [r3, #7]
 80068b2:	3308      	adds	r3, #8
 80068b4:	f803 2b01 	strb.w	r2, [r3], #1
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80068b8:	68a1      	ldr	r1, [r4, #8]
 80068ba:	297f      	cmp	r1, #127	@ 0x7f
 80068bc:	b2ca      	uxtb	r2, r1
 80068be:	f103 0001 	add.w	r0, r3, #1
 80068c2:	d811      	bhi.n	80068e8 <SEGGER_SYSVIEW_SendModule+0x70>
 80068c4:	701a      	strb	r2, [r3, #0]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068c6:	6821      	ldr	r1, [r4, #0]
 80068c8:	2280      	movs	r2, #128	@ 0x80
 80068ca:	f7ff fb1f 	bl	8005f0c <_EncodeStr>
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80068ce:	2216      	movs	r2, #22
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068d0:	4601      	mov	r1, r0
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80068d2:	480a      	ldr	r0, [pc, #40]	@ (80068fc <SEGGER_SYSVIEW_SendModule+0x84>)
 80068d4:	f7ff fc4e 	bl	8006174 <_SendPacket>
      RECORD_END();
 80068d8:	f385 8811 	msr	BASEPRI, r5
    if (pModule && pModule->pfSendModuleDesc) {
 80068dc:	68e3      	ldr	r3, [r4, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0ce      	beq.n	8006880 <SEGGER_SYSVIEW_SendModule+0x8>
}
 80068e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      pModule->pfSendModuleDesc();
 80068e6:	4718      	bx	r3
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80068e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068ec:	4603      	mov	r3, r0
 80068ee:	f800 2c01 	strb.w	r2, [r0, #-1]
 80068f2:	09c9      	lsrs	r1, r1, #7
 80068f4:	e7e1      	b.n	80068ba <SEGGER_SYSVIEW_SendModule+0x42>
 80068f6:	bf00      	nop
 80068f8:	200043bc 	.word	0x200043bc
 80068fc:	200042df 	.word	0x200042df
 8006900:	200042d8 	.word	0x200042d8

08006904 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006904:	b538      	push	{r3, r4, r5, lr}
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006906:	f3ef 8511 	mrs	r5, BASEPRI
 800690a:	f04f 0120 	mov.w	r1, #32
 800690e:	f381 8811 	msr	BASEPRI, r1
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006912:	4c09      	ldr	r4, [pc, #36]	@ (8006938 <SEGGER_SYSVIEW_Warn+0x34>)
 8006914:	4601      	mov	r1, r0
 8006916:	2280      	movs	r2, #128	@ 0x80
 8006918:	4620      	mov	r0, r4
 800691a:	f7ff faf7 	bl	8005f0c <_EncodeStr>
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800691e:	2301      	movs	r3, #1
 8006920:	7003      	strb	r3, [r0, #0]
  ENCODE_U32(pPayload, 0);
 8006922:	2300      	movs	r3, #0
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006924:	1c81      	adds	r1, r0, #2
  ENCODE_U32(pPayload, 0);
 8006926:	7043      	strb	r3, [r0, #1]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006928:	221a      	movs	r2, #26
 800692a:	4620      	mov	r0, r4
 800692c:	f7ff fc22 	bl	8006174 <_SendPacket>
  RECORD_END();
 8006930:	f385 8811 	msr	BASEPRI, r5
}
 8006934:	bd38      	pop	{r3, r4, r5, pc}
 8006936:	bf00      	nop
 8006938:	200042df 	.word	0x200042df

0800693c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800693c:	b510      	push	{r4, lr}
 800693e:	461c      	mov	r4, r3
 8006940:	4611      	mov	r1, r2
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006942:	2000      	movs	r0, #0
 8006944:	461a      	mov	r2, r3
 8006946:	f7ff fa5f 	bl	8005e08 <SEGGER_RTT_Write>
  return len;
}
 800694a:	4620      	mov	r0, r4
 800694c:	bd10      	pop	{r4, pc}

0800694e <__cvt>:
 800694e:	2b00      	cmp	r3, #0
 8006950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006954:	461d      	mov	r5, r3
 8006956:	bfbb      	ittet	lt
 8006958:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800695c:	461d      	movlt	r5, r3
 800695e:	2300      	movge	r3, #0
 8006960:	232d      	movlt	r3, #45	@ 0x2d
 8006962:	b088      	sub	sp, #32
 8006964:	4614      	mov	r4, r2
 8006966:	bfb8      	it	lt
 8006968:	4614      	movlt	r4, r2
 800696a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800696c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800696e:	7013      	strb	r3, [r2, #0]
 8006970:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006972:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006976:	f023 0820 	bic.w	r8, r3, #32
 800697a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800697e:	d005      	beq.n	800698c <__cvt+0x3e>
 8006980:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006984:	d100      	bne.n	8006988 <__cvt+0x3a>
 8006986:	3601      	adds	r6, #1
 8006988:	2302      	movs	r3, #2
 800698a:	e000      	b.n	800698e <__cvt+0x40>
 800698c:	2303      	movs	r3, #3
 800698e:	aa07      	add	r2, sp, #28
 8006990:	9204      	str	r2, [sp, #16]
 8006992:	aa06      	add	r2, sp, #24
 8006994:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006998:	e9cd 3600 	strd	r3, r6, [sp]
 800699c:	4622      	mov	r2, r4
 800699e:	462b      	mov	r3, r5
 80069a0:	f000 fe7a 	bl	8007698 <_dtoa_r>
 80069a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80069a8:	4607      	mov	r7, r0
 80069aa:	d119      	bne.n	80069e0 <__cvt+0x92>
 80069ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80069ae:	07db      	lsls	r3, r3, #31
 80069b0:	d50e      	bpl.n	80069d0 <__cvt+0x82>
 80069b2:	eb00 0906 	add.w	r9, r0, r6
 80069b6:	2200      	movs	r2, #0
 80069b8:	2300      	movs	r3, #0
 80069ba:	4620      	mov	r0, r4
 80069bc:	4629      	mov	r1, r5
 80069be:	f7fa f839 	bl	8000a34 <__aeabi_dcmpeq>
 80069c2:	b108      	cbz	r0, 80069c8 <__cvt+0x7a>
 80069c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80069c8:	2230      	movs	r2, #48	@ 0x30
 80069ca:	9b07      	ldr	r3, [sp, #28]
 80069cc:	454b      	cmp	r3, r9
 80069ce:	d31e      	bcc.n	8006a0e <__cvt+0xc0>
 80069d0:	4638      	mov	r0, r7
 80069d2:	9b07      	ldr	r3, [sp, #28]
 80069d4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80069d6:	1bdb      	subs	r3, r3, r7
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	b008      	add	sp, #32
 80069dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069e4:	eb00 0906 	add.w	r9, r0, r6
 80069e8:	d1e5      	bne.n	80069b6 <__cvt+0x68>
 80069ea:	7803      	ldrb	r3, [r0, #0]
 80069ec:	2b30      	cmp	r3, #48	@ 0x30
 80069ee:	d10a      	bne.n	8006a06 <__cvt+0xb8>
 80069f0:	2200      	movs	r2, #0
 80069f2:	2300      	movs	r3, #0
 80069f4:	4620      	mov	r0, r4
 80069f6:	4629      	mov	r1, r5
 80069f8:	f7fa f81c 	bl	8000a34 <__aeabi_dcmpeq>
 80069fc:	b918      	cbnz	r0, 8006a06 <__cvt+0xb8>
 80069fe:	f1c6 0601 	rsb	r6, r6, #1
 8006a02:	f8ca 6000 	str.w	r6, [sl]
 8006a06:	f8da 3000 	ldr.w	r3, [sl]
 8006a0a:	4499      	add	r9, r3
 8006a0c:	e7d3      	b.n	80069b6 <__cvt+0x68>
 8006a0e:	1c59      	adds	r1, r3, #1
 8006a10:	9107      	str	r1, [sp, #28]
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	e7d9      	b.n	80069ca <__cvt+0x7c>

08006a16 <__exponent>:
 8006a16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a18:	2900      	cmp	r1, #0
 8006a1a:	bfb6      	itet	lt
 8006a1c:	232d      	movlt	r3, #45	@ 0x2d
 8006a1e:	232b      	movge	r3, #43	@ 0x2b
 8006a20:	4249      	neglt	r1, r1
 8006a22:	2909      	cmp	r1, #9
 8006a24:	7002      	strb	r2, [r0, #0]
 8006a26:	7043      	strb	r3, [r0, #1]
 8006a28:	dd29      	ble.n	8006a7e <__exponent+0x68>
 8006a2a:	f10d 0307 	add.w	r3, sp, #7
 8006a2e:	461d      	mov	r5, r3
 8006a30:	270a      	movs	r7, #10
 8006a32:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a36:	461a      	mov	r2, r3
 8006a38:	fb07 1416 	mls	r4, r7, r6, r1
 8006a3c:	3430      	adds	r4, #48	@ 0x30
 8006a3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a42:	460c      	mov	r4, r1
 8006a44:	2c63      	cmp	r4, #99	@ 0x63
 8006a46:	4631      	mov	r1, r6
 8006a48:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a4c:	dcf1      	bgt.n	8006a32 <__exponent+0x1c>
 8006a4e:	3130      	adds	r1, #48	@ 0x30
 8006a50:	1e94      	subs	r4, r2, #2
 8006a52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a56:	4623      	mov	r3, r4
 8006a58:	1c41      	adds	r1, r0, #1
 8006a5a:	42ab      	cmp	r3, r5
 8006a5c:	d30a      	bcc.n	8006a74 <__exponent+0x5e>
 8006a5e:	f10d 0309 	add.w	r3, sp, #9
 8006a62:	1a9b      	subs	r3, r3, r2
 8006a64:	42ac      	cmp	r4, r5
 8006a66:	bf88      	it	hi
 8006a68:	2300      	movhi	r3, #0
 8006a6a:	3302      	adds	r3, #2
 8006a6c:	4403      	add	r3, r0
 8006a6e:	1a18      	subs	r0, r3, r0
 8006a70:	b003      	add	sp, #12
 8006a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a78:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a7c:	e7ed      	b.n	8006a5a <__exponent+0x44>
 8006a7e:	2330      	movs	r3, #48	@ 0x30
 8006a80:	3130      	adds	r1, #48	@ 0x30
 8006a82:	7083      	strb	r3, [r0, #2]
 8006a84:	70c1      	strb	r1, [r0, #3]
 8006a86:	1d03      	adds	r3, r0, #4
 8006a88:	e7f1      	b.n	8006a6e <__exponent+0x58>
	...

08006a8c <_printf_float>:
 8006a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a90:	b091      	sub	sp, #68	@ 0x44
 8006a92:	460c      	mov	r4, r1
 8006a94:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006a98:	4616      	mov	r6, r2
 8006a9a:	461f      	mov	r7, r3
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	f000 fcf1 	bl	8007484 <_localeconv_r>
 8006aa2:	6803      	ldr	r3, [r0, #0]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	9308      	str	r3, [sp, #32]
 8006aa8:	f7f9 fb98 	bl	80001dc <strlen>
 8006aac:	2300      	movs	r3, #0
 8006aae:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ab4:	9009      	str	r0, [sp, #36]	@ 0x24
 8006ab6:	3307      	adds	r3, #7
 8006ab8:	f023 0307 	bic.w	r3, r3, #7
 8006abc:	f103 0208 	add.w	r2, r3, #8
 8006ac0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ac4:	f8d4 b000 	ldr.w	fp, [r4]
 8006ac8:	f8c8 2000 	str.w	r2, [r8]
 8006acc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ad0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ad4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ad6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006ada:	f04f 32ff 	mov.w	r2, #4294967295
 8006ade:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006ae2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006ae6:	4b9c      	ldr	r3, [pc, #624]	@ (8006d58 <_printf_float+0x2cc>)
 8006ae8:	f7f9 ffd6 	bl	8000a98 <__aeabi_dcmpun>
 8006aec:	bb70      	cbnz	r0, 8006b4c <_printf_float+0xc0>
 8006aee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006af2:	f04f 32ff 	mov.w	r2, #4294967295
 8006af6:	4b98      	ldr	r3, [pc, #608]	@ (8006d58 <_printf_float+0x2cc>)
 8006af8:	f7f9 ffb0 	bl	8000a5c <__aeabi_dcmple>
 8006afc:	bb30      	cbnz	r0, 8006b4c <_printf_float+0xc0>
 8006afe:	2200      	movs	r2, #0
 8006b00:	2300      	movs	r3, #0
 8006b02:	4640      	mov	r0, r8
 8006b04:	4649      	mov	r1, r9
 8006b06:	f7f9 ff9f 	bl	8000a48 <__aeabi_dcmplt>
 8006b0a:	b110      	cbz	r0, 8006b12 <_printf_float+0x86>
 8006b0c:	232d      	movs	r3, #45	@ 0x2d
 8006b0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b12:	4a92      	ldr	r2, [pc, #584]	@ (8006d5c <_printf_float+0x2d0>)
 8006b14:	4b92      	ldr	r3, [pc, #584]	@ (8006d60 <_printf_float+0x2d4>)
 8006b16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b1a:	bf8c      	ite	hi
 8006b1c:	4690      	movhi	r8, r2
 8006b1e:	4698      	movls	r8, r3
 8006b20:	2303      	movs	r3, #3
 8006b22:	f04f 0900 	mov.w	r9, #0
 8006b26:	6123      	str	r3, [r4, #16]
 8006b28:	f02b 0304 	bic.w	r3, fp, #4
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	4633      	mov	r3, r6
 8006b30:	4621      	mov	r1, r4
 8006b32:	4628      	mov	r0, r5
 8006b34:	9700      	str	r7, [sp, #0]
 8006b36:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006b38:	f000 f9d4 	bl	8006ee4 <_printf_common>
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	f040 8090 	bne.w	8006c62 <_printf_float+0x1d6>
 8006b42:	f04f 30ff 	mov.w	r0, #4294967295
 8006b46:	b011      	add	sp, #68	@ 0x44
 8006b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	464b      	mov	r3, r9
 8006b50:	4640      	mov	r0, r8
 8006b52:	4649      	mov	r1, r9
 8006b54:	f7f9 ffa0 	bl	8000a98 <__aeabi_dcmpun>
 8006b58:	b148      	cbz	r0, 8006b6e <_printf_float+0xe2>
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	bfb8      	it	lt
 8006b60:	232d      	movlt	r3, #45	@ 0x2d
 8006b62:	4a80      	ldr	r2, [pc, #512]	@ (8006d64 <_printf_float+0x2d8>)
 8006b64:	bfb8      	it	lt
 8006b66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8006d68 <_printf_float+0x2dc>)
 8006b6c:	e7d3      	b.n	8006b16 <_printf_float+0x8a>
 8006b6e:	6863      	ldr	r3, [r4, #4]
 8006b70:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	d13f      	bne.n	8006bf8 <_printf_float+0x16c>
 8006b78:	2306      	movs	r3, #6
 8006b7a:	6063      	str	r3, [r4, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	9206      	str	r2, [sp, #24]
 8006b86:	aa0e      	add	r2, sp, #56	@ 0x38
 8006b88:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006b8c:	aa0d      	add	r2, sp, #52	@ 0x34
 8006b8e:	9203      	str	r2, [sp, #12]
 8006b90:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006b94:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006b98:	6863      	ldr	r3, [r4, #4]
 8006b9a:	4642      	mov	r2, r8
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	910a      	str	r1, [sp, #40]	@ 0x28
 8006ba4:	f7ff fed3 	bl	800694e <__cvt>
 8006ba8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006baa:	4680      	mov	r8, r0
 8006bac:	2947      	cmp	r1, #71	@ 0x47
 8006bae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006bb0:	d128      	bne.n	8006c04 <_printf_float+0x178>
 8006bb2:	1cc8      	adds	r0, r1, #3
 8006bb4:	db02      	blt.n	8006bbc <_printf_float+0x130>
 8006bb6:	6863      	ldr	r3, [r4, #4]
 8006bb8:	4299      	cmp	r1, r3
 8006bba:	dd40      	ble.n	8006c3e <_printf_float+0x1b2>
 8006bbc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006bc0:	fa5f fa8a 	uxtb.w	sl, sl
 8006bc4:	4652      	mov	r2, sl
 8006bc6:	3901      	subs	r1, #1
 8006bc8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006bcc:	910d      	str	r1, [sp, #52]	@ 0x34
 8006bce:	f7ff ff22 	bl	8006a16 <__exponent>
 8006bd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bd4:	4681      	mov	r9, r0
 8006bd6:	1813      	adds	r3, r2, r0
 8006bd8:	2a01      	cmp	r2, #1
 8006bda:	6123      	str	r3, [r4, #16]
 8006bdc:	dc02      	bgt.n	8006be4 <_printf_float+0x158>
 8006bde:	6822      	ldr	r2, [r4, #0]
 8006be0:	07d2      	lsls	r2, r2, #31
 8006be2:	d501      	bpl.n	8006be8 <_printf_float+0x15c>
 8006be4:	3301      	adds	r3, #1
 8006be6:	6123      	str	r3, [r4, #16]
 8006be8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d09e      	beq.n	8006b2e <_printf_float+0xa2>
 8006bf0:	232d      	movs	r3, #45	@ 0x2d
 8006bf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bf6:	e79a      	b.n	8006b2e <_printf_float+0xa2>
 8006bf8:	2947      	cmp	r1, #71	@ 0x47
 8006bfa:	d1bf      	bne.n	8006b7c <_printf_float+0xf0>
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1bd      	bne.n	8006b7c <_printf_float+0xf0>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e7ba      	b.n	8006b7a <_printf_float+0xee>
 8006c04:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c08:	d9dc      	bls.n	8006bc4 <_printf_float+0x138>
 8006c0a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c0e:	d118      	bne.n	8006c42 <_printf_float+0x1b6>
 8006c10:	2900      	cmp	r1, #0
 8006c12:	6863      	ldr	r3, [r4, #4]
 8006c14:	dd0b      	ble.n	8006c2e <_printf_float+0x1a2>
 8006c16:	6121      	str	r1, [r4, #16]
 8006c18:	b913      	cbnz	r3, 8006c20 <_printf_float+0x194>
 8006c1a:	6822      	ldr	r2, [r4, #0]
 8006c1c:	07d0      	lsls	r0, r2, #31
 8006c1e:	d502      	bpl.n	8006c26 <_printf_float+0x19a>
 8006c20:	3301      	adds	r3, #1
 8006c22:	440b      	add	r3, r1
 8006c24:	6123      	str	r3, [r4, #16]
 8006c26:	f04f 0900 	mov.w	r9, #0
 8006c2a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c2c:	e7dc      	b.n	8006be8 <_printf_float+0x15c>
 8006c2e:	b913      	cbnz	r3, 8006c36 <_printf_float+0x1aa>
 8006c30:	6822      	ldr	r2, [r4, #0]
 8006c32:	07d2      	lsls	r2, r2, #31
 8006c34:	d501      	bpl.n	8006c3a <_printf_float+0x1ae>
 8006c36:	3302      	adds	r3, #2
 8006c38:	e7f4      	b.n	8006c24 <_printf_float+0x198>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e7f2      	b.n	8006c24 <_printf_float+0x198>
 8006c3e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c44:	4299      	cmp	r1, r3
 8006c46:	db05      	blt.n	8006c54 <_printf_float+0x1c8>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	6121      	str	r1, [r4, #16]
 8006c4c:	07d8      	lsls	r0, r3, #31
 8006c4e:	d5ea      	bpl.n	8006c26 <_printf_float+0x19a>
 8006c50:	1c4b      	adds	r3, r1, #1
 8006c52:	e7e7      	b.n	8006c24 <_printf_float+0x198>
 8006c54:	2900      	cmp	r1, #0
 8006c56:	bfcc      	ite	gt
 8006c58:	2201      	movgt	r2, #1
 8006c5a:	f1c1 0202 	rsble	r2, r1, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	e7e0      	b.n	8006c24 <_printf_float+0x198>
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	055a      	lsls	r2, r3, #21
 8006c66:	d407      	bmi.n	8006c78 <_printf_float+0x1ec>
 8006c68:	6923      	ldr	r3, [r4, #16]
 8006c6a:	4642      	mov	r2, r8
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	4628      	mov	r0, r5
 8006c70:	47b8      	blx	r7
 8006c72:	3001      	adds	r0, #1
 8006c74:	d12b      	bne.n	8006cce <_printf_float+0x242>
 8006c76:	e764      	b.n	8006b42 <_printf_float+0xb6>
 8006c78:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c7c:	f240 80dc 	bls.w	8006e38 <_printf_float+0x3ac>
 8006c80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c84:	2200      	movs	r2, #0
 8006c86:	2300      	movs	r3, #0
 8006c88:	f7f9 fed4 	bl	8000a34 <__aeabi_dcmpeq>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d033      	beq.n	8006cf8 <_printf_float+0x26c>
 8006c90:	2301      	movs	r3, #1
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	4a35      	ldr	r2, [pc, #212]	@ (8006d6c <_printf_float+0x2e0>)
 8006c98:	47b8      	blx	r7
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	f43f af51 	beq.w	8006b42 <_printf_float+0xb6>
 8006ca0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006ca4:	4543      	cmp	r3, r8
 8006ca6:	db02      	blt.n	8006cae <_printf_float+0x222>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	07d8      	lsls	r0, r3, #31
 8006cac:	d50f      	bpl.n	8006cce <_printf_float+0x242>
 8006cae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	47b8      	blx	r7
 8006cb8:	3001      	adds	r0, #1
 8006cba:	f43f af42 	beq.w	8006b42 <_printf_float+0xb6>
 8006cbe:	f04f 0900 	mov.w	r9, #0
 8006cc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cc6:	f104 0a1a 	add.w	sl, r4, #26
 8006cca:	45c8      	cmp	r8, r9
 8006ccc:	dc09      	bgt.n	8006ce2 <_printf_float+0x256>
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	079b      	lsls	r3, r3, #30
 8006cd2:	f100 8102 	bmi.w	8006eda <_printf_float+0x44e>
 8006cd6:	68e0      	ldr	r0, [r4, #12]
 8006cd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cda:	4298      	cmp	r0, r3
 8006cdc:	bfb8      	it	lt
 8006cde:	4618      	movlt	r0, r3
 8006ce0:	e731      	b.n	8006b46 <_printf_float+0xba>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	4652      	mov	r2, sl
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b8      	blx	r7
 8006cec:	3001      	adds	r0, #1
 8006cee:	f43f af28 	beq.w	8006b42 <_printf_float+0xb6>
 8006cf2:	f109 0901 	add.w	r9, r9, #1
 8006cf6:	e7e8      	b.n	8006cca <_printf_float+0x23e>
 8006cf8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	dc38      	bgt.n	8006d70 <_printf_float+0x2e4>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	4a19      	ldr	r2, [pc, #100]	@ (8006d6c <_printf_float+0x2e0>)
 8006d06:	47b8      	blx	r7
 8006d08:	3001      	adds	r0, #1
 8006d0a:	f43f af1a 	beq.w	8006b42 <_printf_float+0xb6>
 8006d0e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006d12:	ea59 0303 	orrs.w	r3, r9, r3
 8006d16:	d102      	bne.n	8006d1e <_printf_float+0x292>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	07d9      	lsls	r1, r3, #31
 8006d1c:	d5d7      	bpl.n	8006cce <_printf_float+0x242>
 8006d1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	f43f af0a 	beq.w	8006b42 <_printf_float+0xb6>
 8006d2e:	f04f 0a00 	mov.w	sl, #0
 8006d32:	f104 0b1a 	add.w	fp, r4, #26
 8006d36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d38:	425b      	negs	r3, r3
 8006d3a:	4553      	cmp	r3, sl
 8006d3c:	dc01      	bgt.n	8006d42 <_printf_float+0x2b6>
 8006d3e:	464b      	mov	r3, r9
 8006d40:	e793      	b.n	8006c6a <_printf_float+0x1de>
 8006d42:	2301      	movs	r3, #1
 8006d44:	465a      	mov	r2, fp
 8006d46:	4631      	mov	r1, r6
 8006d48:	4628      	mov	r0, r5
 8006d4a:	47b8      	blx	r7
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	f43f aef8 	beq.w	8006b42 <_printf_float+0xb6>
 8006d52:	f10a 0a01 	add.w	sl, sl, #1
 8006d56:	e7ee      	b.n	8006d36 <_printf_float+0x2aa>
 8006d58:	7fefffff 	.word	0x7fefffff
 8006d5c:	08009729 	.word	0x08009729
 8006d60:	08009725 	.word	0x08009725
 8006d64:	08009731 	.word	0x08009731
 8006d68:	0800972d 	.word	0x0800972d
 8006d6c:	08009735 	.word	0x08009735
 8006d70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d72:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006d76:	4553      	cmp	r3, sl
 8006d78:	bfa8      	it	ge
 8006d7a:	4653      	movge	r3, sl
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	4699      	mov	r9, r3
 8006d80:	dc36      	bgt.n	8006df0 <_printf_float+0x364>
 8006d82:	f04f 0b00 	mov.w	fp, #0
 8006d86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d8a:	f104 021a 	add.w	r2, r4, #26
 8006d8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d90:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d92:	eba3 0309 	sub.w	r3, r3, r9
 8006d96:	455b      	cmp	r3, fp
 8006d98:	dc31      	bgt.n	8006dfe <_printf_float+0x372>
 8006d9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d9c:	459a      	cmp	sl, r3
 8006d9e:	dc3a      	bgt.n	8006e16 <_printf_float+0x38a>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	07da      	lsls	r2, r3, #31
 8006da4:	d437      	bmi.n	8006e16 <_printf_float+0x38a>
 8006da6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006da8:	ebaa 0903 	sub.w	r9, sl, r3
 8006dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dae:	ebaa 0303 	sub.w	r3, sl, r3
 8006db2:	4599      	cmp	r9, r3
 8006db4:	bfa8      	it	ge
 8006db6:	4699      	movge	r9, r3
 8006db8:	f1b9 0f00 	cmp.w	r9, #0
 8006dbc:	dc33      	bgt.n	8006e26 <_printf_float+0x39a>
 8006dbe:	f04f 0800 	mov.w	r8, #0
 8006dc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dc6:	f104 0b1a 	add.w	fp, r4, #26
 8006dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dcc:	ebaa 0303 	sub.w	r3, sl, r3
 8006dd0:	eba3 0309 	sub.w	r3, r3, r9
 8006dd4:	4543      	cmp	r3, r8
 8006dd6:	f77f af7a 	ble.w	8006cce <_printf_float+0x242>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	465a      	mov	r2, fp
 8006dde:	4631      	mov	r1, r6
 8006de0:	4628      	mov	r0, r5
 8006de2:	47b8      	blx	r7
 8006de4:	3001      	adds	r0, #1
 8006de6:	f43f aeac 	beq.w	8006b42 <_printf_float+0xb6>
 8006dea:	f108 0801 	add.w	r8, r8, #1
 8006dee:	e7ec      	b.n	8006dca <_printf_float+0x33e>
 8006df0:	4642      	mov	r2, r8
 8006df2:	4631      	mov	r1, r6
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b8      	blx	r7
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d1c2      	bne.n	8006d82 <_printf_float+0x2f6>
 8006dfc:	e6a1      	b.n	8006b42 <_printf_float+0xb6>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4631      	mov	r1, r6
 8006e02:	4628      	mov	r0, r5
 8006e04:	920a      	str	r2, [sp, #40]	@ 0x28
 8006e06:	47b8      	blx	r7
 8006e08:	3001      	adds	r0, #1
 8006e0a:	f43f ae9a 	beq.w	8006b42 <_printf_float+0xb6>
 8006e0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e10:	f10b 0b01 	add.w	fp, fp, #1
 8006e14:	e7bb      	b.n	8006d8e <_printf_float+0x302>
 8006e16:	4631      	mov	r1, r6
 8006e18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	47b8      	blx	r7
 8006e20:	3001      	adds	r0, #1
 8006e22:	d1c0      	bne.n	8006da6 <_printf_float+0x31a>
 8006e24:	e68d      	b.n	8006b42 <_printf_float+0xb6>
 8006e26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e28:	464b      	mov	r3, r9
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	4442      	add	r2, r8
 8006e30:	47b8      	blx	r7
 8006e32:	3001      	adds	r0, #1
 8006e34:	d1c3      	bne.n	8006dbe <_printf_float+0x332>
 8006e36:	e684      	b.n	8006b42 <_printf_float+0xb6>
 8006e38:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006e3c:	f1ba 0f01 	cmp.w	sl, #1
 8006e40:	dc01      	bgt.n	8006e46 <_printf_float+0x3ba>
 8006e42:	07db      	lsls	r3, r3, #31
 8006e44:	d536      	bpl.n	8006eb4 <_printf_float+0x428>
 8006e46:	2301      	movs	r3, #1
 8006e48:	4642      	mov	r2, r8
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	47b8      	blx	r7
 8006e50:	3001      	adds	r0, #1
 8006e52:	f43f ae76 	beq.w	8006b42 <_printf_float+0xb6>
 8006e56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b8      	blx	r7
 8006e60:	3001      	adds	r0, #1
 8006e62:	f43f ae6e 	beq.w	8006b42 <_printf_float+0xb6>
 8006e66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e72:	f7f9 fddf 	bl	8000a34 <__aeabi_dcmpeq>
 8006e76:	b9c0      	cbnz	r0, 8006eaa <_printf_float+0x41e>
 8006e78:	4653      	mov	r3, sl
 8006e7a:	f108 0201 	add.w	r2, r8, #1
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	d10c      	bne.n	8006ea2 <_printf_float+0x416>
 8006e88:	e65b      	b.n	8006b42 <_printf_float+0xb6>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	465a      	mov	r2, fp
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4628      	mov	r0, r5
 8006e92:	47b8      	blx	r7
 8006e94:	3001      	adds	r0, #1
 8006e96:	f43f ae54 	beq.w	8006b42 <_printf_float+0xb6>
 8006e9a:	f108 0801 	add.w	r8, r8, #1
 8006e9e:	45d0      	cmp	r8, sl
 8006ea0:	dbf3      	blt.n	8006e8a <_printf_float+0x3fe>
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ea8:	e6e0      	b.n	8006c6c <_printf_float+0x1e0>
 8006eaa:	f04f 0800 	mov.w	r8, #0
 8006eae:	f104 0b1a 	add.w	fp, r4, #26
 8006eb2:	e7f4      	b.n	8006e9e <_printf_float+0x412>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	4642      	mov	r2, r8
 8006eb8:	e7e1      	b.n	8006e7e <_printf_float+0x3f2>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	464a      	mov	r2, r9
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	47b8      	blx	r7
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	f43f ae3c 	beq.w	8006b42 <_printf_float+0xb6>
 8006eca:	f108 0801 	add.w	r8, r8, #1
 8006ece:	68e3      	ldr	r3, [r4, #12]
 8006ed0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006ed2:	1a5b      	subs	r3, r3, r1
 8006ed4:	4543      	cmp	r3, r8
 8006ed6:	dcf0      	bgt.n	8006eba <_printf_float+0x42e>
 8006ed8:	e6fd      	b.n	8006cd6 <_printf_float+0x24a>
 8006eda:	f04f 0800 	mov.w	r8, #0
 8006ede:	f104 0919 	add.w	r9, r4, #25
 8006ee2:	e7f4      	b.n	8006ece <_printf_float+0x442>

08006ee4 <_printf_common>:
 8006ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee8:	4616      	mov	r6, r2
 8006eea:	4698      	mov	r8, r3
 8006eec:	688a      	ldr	r2, [r1, #8]
 8006eee:	690b      	ldr	r3, [r1, #16]
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	bfb8      	it	lt
 8006ef6:	4613      	movlt	r3, r2
 8006ef8:	6033      	str	r3, [r6, #0]
 8006efa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006efe:	460c      	mov	r4, r1
 8006f00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f04:	b10a      	cbz	r2, 8006f0a <_printf_common+0x26>
 8006f06:	3301      	adds	r3, #1
 8006f08:	6033      	str	r3, [r6, #0]
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	0699      	lsls	r1, r3, #26
 8006f0e:	bf42      	ittt	mi
 8006f10:	6833      	ldrmi	r3, [r6, #0]
 8006f12:	3302      	addmi	r3, #2
 8006f14:	6033      	strmi	r3, [r6, #0]
 8006f16:	6825      	ldr	r5, [r4, #0]
 8006f18:	f015 0506 	ands.w	r5, r5, #6
 8006f1c:	d106      	bne.n	8006f2c <_printf_common+0x48>
 8006f1e:	f104 0a19 	add.w	sl, r4, #25
 8006f22:	68e3      	ldr	r3, [r4, #12]
 8006f24:	6832      	ldr	r2, [r6, #0]
 8006f26:	1a9b      	subs	r3, r3, r2
 8006f28:	42ab      	cmp	r3, r5
 8006f2a:	dc2b      	bgt.n	8006f84 <_printf_common+0xa0>
 8006f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f30:	6822      	ldr	r2, [r4, #0]
 8006f32:	3b00      	subs	r3, #0
 8006f34:	bf18      	it	ne
 8006f36:	2301      	movne	r3, #1
 8006f38:	0692      	lsls	r2, r2, #26
 8006f3a:	d430      	bmi.n	8006f9e <_printf_common+0xba>
 8006f3c:	4641      	mov	r1, r8
 8006f3e:	4638      	mov	r0, r7
 8006f40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f44:	47c8      	blx	r9
 8006f46:	3001      	adds	r0, #1
 8006f48:	d023      	beq.n	8006f92 <_printf_common+0xae>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	6922      	ldr	r2, [r4, #16]
 8006f4e:	f003 0306 	and.w	r3, r3, #6
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	bf14      	ite	ne
 8006f56:	2500      	movne	r5, #0
 8006f58:	6833      	ldreq	r3, [r6, #0]
 8006f5a:	f04f 0600 	mov.w	r6, #0
 8006f5e:	bf08      	it	eq
 8006f60:	68e5      	ldreq	r5, [r4, #12]
 8006f62:	f104 041a 	add.w	r4, r4, #26
 8006f66:	bf08      	it	eq
 8006f68:	1aed      	subeq	r5, r5, r3
 8006f6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006f6e:	bf08      	it	eq
 8006f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f74:	4293      	cmp	r3, r2
 8006f76:	bfc4      	itt	gt
 8006f78:	1a9b      	subgt	r3, r3, r2
 8006f7a:	18ed      	addgt	r5, r5, r3
 8006f7c:	42b5      	cmp	r5, r6
 8006f7e:	d11a      	bne.n	8006fb6 <_printf_common+0xd2>
 8006f80:	2000      	movs	r0, #0
 8006f82:	e008      	b.n	8006f96 <_printf_common+0xb2>
 8006f84:	2301      	movs	r3, #1
 8006f86:	4652      	mov	r2, sl
 8006f88:	4641      	mov	r1, r8
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	47c8      	blx	r9
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d103      	bne.n	8006f9a <_printf_common+0xb6>
 8006f92:	f04f 30ff 	mov.w	r0, #4294967295
 8006f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9a:	3501      	adds	r5, #1
 8006f9c:	e7c1      	b.n	8006f22 <_printf_common+0x3e>
 8006f9e:	2030      	movs	r0, #48	@ 0x30
 8006fa0:	18e1      	adds	r1, r4, r3
 8006fa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fac:	4422      	add	r2, r4
 8006fae:	3302      	adds	r3, #2
 8006fb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fb4:	e7c2      	b.n	8006f3c <_printf_common+0x58>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	4622      	mov	r2, r4
 8006fba:	4641      	mov	r1, r8
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	47c8      	blx	r9
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d0e6      	beq.n	8006f92 <_printf_common+0xae>
 8006fc4:	3601      	adds	r6, #1
 8006fc6:	e7d9      	b.n	8006f7c <_printf_common+0x98>

08006fc8 <_printf_i>:
 8006fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fcc:	7e0f      	ldrb	r7, [r1, #24]
 8006fce:	4691      	mov	r9, r2
 8006fd0:	2f78      	cmp	r7, #120	@ 0x78
 8006fd2:	4680      	mov	r8, r0
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	469a      	mov	sl, r3
 8006fd8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fde:	d807      	bhi.n	8006ff0 <_printf_i+0x28>
 8006fe0:	2f62      	cmp	r7, #98	@ 0x62
 8006fe2:	d80a      	bhi.n	8006ffa <_printf_i+0x32>
 8006fe4:	2f00      	cmp	r7, #0
 8006fe6:	f000 80d1 	beq.w	800718c <_printf_i+0x1c4>
 8006fea:	2f58      	cmp	r7, #88	@ 0x58
 8006fec:	f000 80b8 	beq.w	8007160 <_printf_i+0x198>
 8006ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ff4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ff8:	e03a      	b.n	8007070 <_printf_i+0xa8>
 8006ffa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ffe:	2b15      	cmp	r3, #21
 8007000:	d8f6      	bhi.n	8006ff0 <_printf_i+0x28>
 8007002:	a101      	add	r1, pc, #4	@ (adr r1, 8007008 <_printf_i+0x40>)
 8007004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007008:	08007061 	.word	0x08007061
 800700c:	08007075 	.word	0x08007075
 8007010:	08006ff1 	.word	0x08006ff1
 8007014:	08006ff1 	.word	0x08006ff1
 8007018:	08006ff1 	.word	0x08006ff1
 800701c:	08006ff1 	.word	0x08006ff1
 8007020:	08007075 	.word	0x08007075
 8007024:	08006ff1 	.word	0x08006ff1
 8007028:	08006ff1 	.word	0x08006ff1
 800702c:	08006ff1 	.word	0x08006ff1
 8007030:	08006ff1 	.word	0x08006ff1
 8007034:	08007173 	.word	0x08007173
 8007038:	0800709f 	.word	0x0800709f
 800703c:	0800712d 	.word	0x0800712d
 8007040:	08006ff1 	.word	0x08006ff1
 8007044:	08006ff1 	.word	0x08006ff1
 8007048:	08007195 	.word	0x08007195
 800704c:	08006ff1 	.word	0x08006ff1
 8007050:	0800709f 	.word	0x0800709f
 8007054:	08006ff1 	.word	0x08006ff1
 8007058:	08006ff1 	.word	0x08006ff1
 800705c:	08007135 	.word	0x08007135
 8007060:	6833      	ldr	r3, [r6, #0]
 8007062:	1d1a      	adds	r2, r3, #4
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6032      	str	r2, [r6, #0]
 8007068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800706c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007070:	2301      	movs	r3, #1
 8007072:	e09c      	b.n	80071ae <_printf_i+0x1e6>
 8007074:	6833      	ldr	r3, [r6, #0]
 8007076:	6820      	ldr	r0, [r4, #0]
 8007078:	1d19      	adds	r1, r3, #4
 800707a:	6031      	str	r1, [r6, #0]
 800707c:	0606      	lsls	r6, r0, #24
 800707e:	d501      	bpl.n	8007084 <_printf_i+0xbc>
 8007080:	681d      	ldr	r5, [r3, #0]
 8007082:	e003      	b.n	800708c <_printf_i+0xc4>
 8007084:	0645      	lsls	r5, r0, #25
 8007086:	d5fb      	bpl.n	8007080 <_printf_i+0xb8>
 8007088:	f9b3 5000 	ldrsh.w	r5, [r3]
 800708c:	2d00      	cmp	r5, #0
 800708e:	da03      	bge.n	8007098 <_printf_i+0xd0>
 8007090:	232d      	movs	r3, #45	@ 0x2d
 8007092:	426d      	negs	r5, r5
 8007094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007098:	230a      	movs	r3, #10
 800709a:	4858      	ldr	r0, [pc, #352]	@ (80071fc <_printf_i+0x234>)
 800709c:	e011      	b.n	80070c2 <_printf_i+0xfa>
 800709e:	6821      	ldr	r1, [r4, #0]
 80070a0:	6833      	ldr	r3, [r6, #0]
 80070a2:	0608      	lsls	r0, r1, #24
 80070a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80070a8:	d402      	bmi.n	80070b0 <_printf_i+0xe8>
 80070aa:	0649      	lsls	r1, r1, #25
 80070ac:	bf48      	it	mi
 80070ae:	b2ad      	uxthmi	r5, r5
 80070b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80070b2:	6033      	str	r3, [r6, #0]
 80070b4:	bf14      	ite	ne
 80070b6:	230a      	movne	r3, #10
 80070b8:	2308      	moveq	r3, #8
 80070ba:	4850      	ldr	r0, [pc, #320]	@ (80071fc <_printf_i+0x234>)
 80070bc:	2100      	movs	r1, #0
 80070be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070c2:	6866      	ldr	r6, [r4, #4]
 80070c4:	2e00      	cmp	r6, #0
 80070c6:	60a6      	str	r6, [r4, #8]
 80070c8:	db05      	blt.n	80070d6 <_printf_i+0x10e>
 80070ca:	6821      	ldr	r1, [r4, #0]
 80070cc:	432e      	orrs	r6, r5
 80070ce:	f021 0104 	bic.w	r1, r1, #4
 80070d2:	6021      	str	r1, [r4, #0]
 80070d4:	d04b      	beq.n	800716e <_printf_i+0x1a6>
 80070d6:	4616      	mov	r6, r2
 80070d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80070dc:	fb03 5711 	mls	r7, r3, r1, r5
 80070e0:	5dc7      	ldrb	r7, [r0, r7]
 80070e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070e6:	462f      	mov	r7, r5
 80070e8:	42bb      	cmp	r3, r7
 80070ea:	460d      	mov	r5, r1
 80070ec:	d9f4      	bls.n	80070d8 <_printf_i+0x110>
 80070ee:	2b08      	cmp	r3, #8
 80070f0:	d10b      	bne.n	800710a <_printf_i+0x142>
 80070f2:	6823      	ldr	r3, [r4, #0]
 80070f4:	07df      	lsls	r7, r3, #31
 80070f6:	d508      	bpl.n	800710a <_printf_i+0x142>
 80070f8:	6923      	ldr	r3, [r4, #16]
 80070fa:	6861      	ldr	r1, [r4, #4]
 80070fc:	4299      	cmp	r1, r3
 80070fe:	bfde      	ittt	le
 8007100:	2330      	movle	r3, #48	@ 0x30
 8007102:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007106:	f106 36ff 	addle.w	r6, r6, #4294967295
 800710a:	1b92      	subs	r2, r2, r6
 800710c:	6122      	str	r2, [r4, #16]
 800710e:	464b      	mov	r3, r9
 8007110:	4621      	mov	r1, r4
 8007112:	4640      	mov	r0, r8
 8007114:	f8cd a000 	str.w	sl, [sp]
 8007118:	aa03      	add	r2, sp, #12
 800711a:	f7ff fee3 	bl	8006ee4 <_printf_common>
 800711e:	3001      	adds	r0, #1
 8007120:	d14a      	bne.n	80071b8 <_printf_i+0x1f0>
 8007122:	f04f 30ff 	mov.w	r0, #4294967295
 8007126:	b004      	add	sp, #16
 8007128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	f043 0320 	orr.w	r3, r3, #32
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	2778      	movs	r7, #120	@ 0x78
 8007136:	4832      	ldr	r0, [pc, #200]	@ (8007200 <_printf_i+0x238>)
 8007138:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	6831      	ldr	r1, [r6, #0]
 8007140:	061f      	lsls	r7, r3, #24
 8007142:	f851 5b04 	ldr.w	r5, [r1], #4
 8007146:	d402      	bmi.n	800714e <_printf_i+0x186>
 8007148:	065f      	lsls	r7, r3, #25
 800714a:	bf48      	it	mi
 800714c:	b2ad      	uxthmi	r5, r5
 800714e:	6031      	str	r1, [r6, #0]
 8007150:	07d9      	lsls	r1, r3, #31
 8007152:	bf44      	itt	mi
 8007154:	f043 0320 	orrmi.w	r3, r3, #32
 8007158:	6023      	strmi	r3, [r4, #0]
 800715a:	b11d      	cbz	r5, 8007164 <_printf_i+0x19c>
 800715c:	2310      	movs	r3, #16
 800715e:	e7ad      	b.n	80070bc <_printf_i+0xf4>
 8007160:	4826      	ldr	r0, [pc, #152]	@ (80071fc <_printf_i+0x234>)
 8007162:	e7e9      	b.n	8007138 <_printf_i+0x170>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	f023 0320 	bic.w	r3, r3, #32
 800716a:	6023      	str	r3, [r4, #0]
 800716c:	e7f6      	b.n	800715c <_printf_i+0x194>
 800716e:	4616      	mov	r6, r2
 8007170:	e7bd      	b.n	80070ee <_printf_i+0x126>
 8007172:	6833      	ldr	r3, [r6, #0]
 8007174:	6825      	ldr	r5, [r4, #0]
 8007176:	1d18      	adds	r0, r3, #4
 8007178:	6961      	ldr	r1, [r4, #20]
 800717a:	6030      	str	r0, [r6, #0]
 800717c:	062e      	lsls	r6, r5, #24
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	d501      	bpl.n	8007186 <_printf_i+0x1be>
 8007182:	6019      	str	r1, [r3, #0]
 8007184:	e002      	b.n	800718c <_printf_i+0x1c4>
 8007186:	0668      	lsls	r0, r5, #25
 8007188:	d5fb      	bpl.n	8007182 <_printf_i+0x1ba>
 800718a:	8019      	strh	r1, [r3, #0]
 800718c:	2300      	movs	r3, #0
 800718e:	4616      	mov	r6, r2
 8007190:	6123      	str	r3, [r4, #16]
 8007192:	e7bc      	b.n	800710e <_printf_i+0x146>
 8007194:	6833      	ldr	r3, [r6, #0]
 8007196:	2100      	movs	r1, #0
 8007198:	1d1a      	adds	r2, r3, #4
 800719a:	6032      	str	r2, [r6, #0]
 800719c:	681e      	ldr	r6, [r3, #0]
 800719e:	6862      	ldr	r2, [r4, #4]
 80071a0:	4630      	mov	r0, r6
 80071a2:	f000 f9d4 	bl	800754e <memchr>
 80071a6:	b108      	cbz	r0, 80071ac <_printf_i+0x1e4>
 80071a8:	1b80      	subs	r0, r0, r6
 80071aa:	6060      	str	r0, [r4, #4]
 80071ac:	6863      	ldr	r3, [r4, #4]
 80071ae:	6123      	str	r3, [r4, #16]
 80071b0:	2300      	movs	r3, #0
 80071b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071b6:	e7aa      	b.n	800710e <_printf_i+0x146>
 80071b8:	4632      	mov	r2, r6
 80071ba:	4649      	mov	r1, r9
 80071bc:	4640      	mov	r0, r8
 80071be:	6923      	ldr	r3, [r4, #16]
 80071c0:	47d0      	blx	sl
 80071c2:	3001      	adds	r0, #1
 80071c4:	d0ad      	beq.n	8007122 <_printf_i+0x15a>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	079b      	lsls	r3, r3, #30
 80071ca:	d413      	bmi.n	80071f4 <_printf_i+0x22c>
 80071cc:	68e0      	ldr	r0, [r4, #12]
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	4298      	cmp	r0, r3
 80071d2:	bfb8      	it	lt
 80071d4:	4618      	movlt	r0, r3
 80071d6:	e7a6      	b.n	8007126 <_printf_i+0x15e>
 80071d8:	2301      	movs	r3, #1
 80071da:	4632      	mov	r2, r6
 80071dc:	4649      	mov	r1, r9
 80071de:	4640      	mov	r0, r8
 80071e0:	47d0      	blx	sl
 80071e2:	3001      	adds	r0, #1
 80071e4:	d09d      	beq.n	8007122 <_printf_i+0x15a>
 80071e6:	3501      	adds	r5, #1
 80071e8:	68e3      	ldr	r3, [r4, #12]
 80071ea:	9903      	ldr	r1, [sp, #12]
 80071ec:	1a5b      	subs	r3, r3, r1
 80071ee:	42ab      	cmp	r3, r5
 80071f0:	dcf2      	bgt.n	80071d8 <_printf_i+0x210>
 80071f2:	e7eb      	b.n	80071cc <_printf_i+0x204>
 80071f4:	2500      	movs	r5, #0
 80071f6:	f104 0619 	add.w	r6, r4, #25
 80071fa:	e7f5      	b.n	80071e8 <_printf_i+0x220>
 80071fc:	08009737 	.word	0x08009737
 8007200:	08009748 	.word	0x08009748

08007204 <std>:
 8007204:	2300      	movs	r3, #0
 8007206:	b510      	push	{r4, lr}
 8007208:	4604      	mov	r4, r0
 800720a:	e9c0 3300 	strd	r3, r3, [r0]
 800720e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007212:	6083      	str	r3, [r0, #8]
 8007214:	8181      	strh	r1, [r0, #12]
 8007216:	6643      	str	r3, [r0, #100]	@ 0x64
 8007218:	81c2      	strh	r2, [r0, #14]
 800721a:	6183      	str	r3, [r0, #24]
 800721c:	4619      	mov	r1, r3
 800721e:	2208      	movs	r2, #8
 8007220:	305c      	adds	r0, #92	@ 0x5c
 8007222:	f000 f926 	bl	8007472 <memset>
 8007226:	4b0d      	ldr	r3, [pc, #52]	@ (800725c <std+0x58>)
 8007228:	6224      	str	r4, [r4, #32]
 800722a:	6263      	str	r3, [r4, #36]	@ 0x24
 800722c:	4b0c      	ldr	r3, [pc, #48]	@ (8007260 <std+0x5c>)
 800722e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007230:	4b0c      	ldr	r3, [pc, #48]	@ (8007264 <std+0x60>)
 8007232:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007234:	4b0c      	ldr	r3, [pc, #48]	@ (8007268 <std+0x64>)
 8007236:	6323      	str	r3, [r4, #48]	@ 0x30
 8007238:	4b0c      	ldr	r3, [pc, #48]	@ (800726c <std+0x68>)
 800723a:	429c      	cmp	r4, r3
 800723c:	d006      	beq.n	800724c <std+0x48>
 800723e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007242:	4294      	cmp	r4, r2
 8007244:	d002      	beq.n	800724c <std+0x48>
 8007246:	33d0      	adds	r3, #208	@ 0xd0
 8007248:	429c      	cmp	r4, r3
 800724a:	d105      	bne.n	8007258 <std+0x54>
 800724c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007254:	f000 b978 	b.w	8007548 <__retarget_lock_init_recursive>
 8007258:	bd10      	pop	{r4, pc}
 800725a:	bf00      	nop
 800725c:	080073cd 	.word	0x080073cd
 8007260:	080073ef 	.word	0x080073ef
 8007264:	08007427 	.word	0x08007427
 8007268:	0800744b 	.word	0x0800744b
 800726c:	200049cc 	.word	0x200049cc

08007270 <stdio_exit_handler>:
 8007270:	4a02      	ldr	r2, [pc, #8]	@ (800727c <stdio_exit_handler+0xc>)
 8007272:	4903      	ldr	r1, [pc, #12]	@ (8007280 <stdio_exit_handler+0x10>)
 8007274:	4803      	ldr	r0, [pc, #12]	@ (8007284 <stdio_exit_handler+0x14>)
 8007276:	f000 b869 	b.w	800734c <_fwalk_sglue>
 800727a:	bf00      	nop
 800727c:	20000010 	.word	0x20000010
 8007280:	08008ee1 	.word	0x08008ee1
 8007284:	20000020 	.word	0x20000020

08007288 <cleanup_stdio>:
 8007288:	6841      	ldr	r1, [r0, #4]
 800728a:	4b0c      	ldr	r3, [pc, #48]	@ (80072bc <cleanup_stdio+0x34>)
 800728c:	b510      	push	{r4, lr}
 800728e:	4299      	cmp	r1, r3
 8007290:	4604      	mov	r4, r0
 8007292:	d001      	beq.n	8007298 <cleanup_stdio+0x10>
 8007294:	f001 fe24 	bl	8008ee0 <_fflush_r>
 8007298:	68a1      	ldr	r1, [r4, #8]
 800729a:	4b09      	ldr	r3, [pc, #36]	@ (80072c0 <cleanup_stdio+0x38>)
 800729c:	4299      	cmp	r1, r3
 800729e:	d002      	beq.n	80072a6 <cleanup_stdio+0x1e>
 80072a0:	4620      	mov	r0, r4
 80072a2:	f001 fe1d 	bl	8008ee0 <_fflush_r>
 80072a6:	68e1      	ldr	r1, [r4, #12]
 80072a8:	4b06      	ldr	r3, [pc, #24]	@ (80072c4 <cleanup_stdio+0x3c>)
 80072aa:	4299      	cmp	r1, r3
 80072ac:	d004      	beq.n	80072b8 <cleanup_stdio+0x30>
 80072ae:	4620      	mov	r0, r4
 80072b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072b4:	f001 be14 	b.w	8008ee0 <_fflush_r>
 80072b8:	bd10      	pop	{r4, pc}
 80072ba:	bf00      	nop
 80072bc:	200049cc 	.word	0x200049cc
 80072c0:	20004a34 	.word	0x20004a34
 80072c4:	20004a9c 	.word	0x20004a9c

080072c8 <global_stdio_init.part.0>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	4b0b      	ldr	r3, [pc, #44]	@ (80072f8 <global_stdio_init.part.0+0x30>)
 80072cc:	4c0b      	ldr	r4, [pc, #44]	@ (80072fc <global_stdio_init.part.0+0x34>)
 80072ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007300 <global_stdio_init.part.0+0x38>)
 80072d0:	4620      	mov	r0, r4
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	2104      	movs	r1, #4
 80072d6:	2200      	movs	r2, #0
 80072d8:	f7ff ff94 	bl	8007204 <std>
 80072dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80072e0:	2201      	movs	r2, #1
 80072e2:	2109      	movs	r1, #9
 80072e4:	f7ff ff8e 	bl	8007204 <std>
 80072e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072ec:	2202      	movs	r2, #2
 80072ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f2:	2112      	movs	r1, #18
 80072f4:	f7ff bf86 	b.w	8007204 <std>
 80072f8:	20004b04 	.word	0x20004b04
 80072fc:	200049cc 	.word	0x200049cc
 8007300:	08007271 	.word	0x08007271

08007304 <__sfp_lock_acquire>:
 8007304:	4801      	ldr	r0, [pc, #4]	@ (800730c <__sfp_lock_acquire+0x8>)
 8007306:	f000 b920 	b.w	800754a <__retarget_lock_acquire_recursive>
 800730a:	bf00      	nop
 800730c:	20004b0d 	.word	0x20004b0d

08007310 <__sfp_lock_release>:
 8007310:	4801      	ldr	r0, [pc, #4]	@ (8007318 <__sfp_lock_release+0x8>)
 8007312:	f000 b91b 	b.w	800754c <__retarget_lock_release_recursive>
 8007316:	bf00      	nop
 8007318:	20004b0d 	.word	0x20004b0d

0800731c <__sinit>:
 800731c:	b510      	push	{r4, lr}
 800731e:	4604      	mov	r4, r0
 8007320:	f7ff fff0 	bl	8007304 <__sfp_lock_acquire>
 8007324:	6a23      	ldr	r3, [r4, #32]
 8007326:	b11b      	cbz	r3, 8007330 <__sinit+0x14>
 8007328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800732c:	f7ff bff0 	b.w	8007310 <__sfp_lock_release>
 8007330:	4b04      	ldr	r3, [pc, #16]	@ (8007344 <__sinit+0x28>)
 8007332:	6223      	str	r3, [r4, #32]
 8007334:	4b04      	ldr	r3, [pc, #16]	@ (8007348 <__sinit+0x2c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1f5      	bne.n	8007328 <__sinit+0xc>
 800733c:	f7ff ffc4 	bl	80072c8 <global_stdio_init.part.0>
 8007340:	e7f2      	b.n	8007328 <__sinit+0xc>
 8007342:	bf00      	nop
 8007344:	08007289 	.word	0x08007289
 8007348:	20004b04 	.word	0x20004b04

0800734c <_fwalk_sglue>:
 800734c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007350:	4607      	mov	r7, r0
 8007352:	4688      	mov	r8, r1
 8007354:	4614      	mov	r4, r2
 8007356:	2600      	movs	r6, #0
 8007358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800735c:	f1b9 0901 	subs.w	r9, r9, #1
 8007360:	d505      	bpl.n	800736e <_fwalk_sglue+0x22>
 8007362:	6824      	ldr	r4, [r4, #0]
 8007364:	2c00      	cmp	r4, #0
 8007366:	d1f7      	bne.n	8007358 <_fwalk_sglue+0xc>
 8007368:	4630      	mov	r0, r6
 800736a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736e:	89ab      	ldrh	r3, [r5, #12]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d907      	bls.n	8007384 <_fwalk_sglue+0x38>
 8007374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007378:	3301      	adds	r3, #1
 800737a:	d003      	beq.n	8007384 <_fwalk_sglue+0x38>
 800737c:	4629      	mov	r1, r5
 800737e:	4638      	mov	r0, r7
 8007380:	47c0      	blx	r8
 8007382:	4306      	orrs	r6, r0
 8007384:	3568      	adds	r5, #104	@ 0x68
 8007386:	e7e9      	b.n	800735c <_fwalk_sglue+0x10>

08007388 <siprintf>:
 8007388:	b40e      	push	{r1, r2, r3}
 800738a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800738e:	b510      	push	{r4, lr}
 8007390:	2400      	movs	r4, #0
 8007392:	b09d      	sub	sp, #116	@ 0x74
 8007394:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007396:	9002      	str	r0, [sp, #8]
 8007398:	9006      	str	r0, [sp, #24]
 800739a:	9107      	str	r1, [sp, #28]
 800739c:	9104      	str	r1, [sp, #16]
 800739e:	4809      	ldr	r0, [pc, #36]	@ (80073c4 <siprintf+0x3c>)
 80073a0:	4909      	ldr	r1, [pc, #36]	@ (80073c8 <siprintf+0x40>)
 80073a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a6:	9105      	str	r1, [sp, #20]
 80073a8:	6800      	ldr	r0, [r0, #0]
 80073aa:	a902      	add	r1, sp, #8
 80073ac:	9301      	str	r3, [sp, #4]
 80073ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80073b0:	f001 fc1a 	bl	8008be8 <_svfiprintf_r>
 80073b4:	9b02      	ldr	r3, [sp, #8]
 80073b6:	701c      	strb	r4, [r3, #0]
 80073b8:	b01d      	add	sp, #116	@ 0x74
 80073ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073be:	b003      	add	sp, #12
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	2000001c 	.word	0x2000001c
 80073c8:	ffff0208 	.word	0xffff0208

080073cc <__sread>:
 80073cc:	b510      	push	{r4, lr}
 80073ce:	460c      	mov	r4, r1
 80073d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d4:	f000 f87c 	bl	80074d0 <_read_r>
 80073d8:	2800      	cmp	r0, #0
 80073da:	bfab      	itete	ge
 80073dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073de:	89a3      	ldrhlt	r3, [r4, #12]
 80073e0:	181b      	addge	r3, r3, r0
 80073e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073e6:	bfac      	ite	ge
 80073e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073ea:	81a3      	strhlt	r3, [r4, #12]
 80073ec:	bd10      	pop	{r4, pc}

080073ee <__swrite>:
 80073ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f2:	461f      	mov	r7, r3
 80073f4:	898b      	ldrh	r3, [r1, #12]
 80073f6:	4605      	mov	r5, r0
 80073f8:	05db      	lsls	r3, r3, #23
 80073fa:	460c      	mov	r4, r1
 80073fc:	4616      	mov	r6, r2
 80073fe:	d505      	bpl.n	800740c <__swrite+0x1e>
 8007400:	2302      	movs	r3, #2
 8007402:	2200      	movs	r2, #0
 8007404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007408:	f000 f850 	bl	80074ac <_lseek_r>
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	4632      	mov	r2, r6
 8007410:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007414:	81a3      	strh	r3, [r4, #12]
 8007416:	4628      	mov	r0, r5
 8007418:	463b      	mov	r3, r7
 800741a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800741e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007422:	f7ff ba8b 	b.w	800693c <_write_r>

08007426 <__sseek>:
 8007426:	b510      	push	{r4, lr}
 8007428:	460c      	mov	r4, r1
 800742a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742e:	f000 f83d 	bl	80074ac <_lseek_r>
 8007432:	1c43      	adds	r3, r0, #1
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	bf15      	itete	ne
 8007438:	6560      	strne	r0, [r4, #84]	@ 0x54
 800743a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800743e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007442:	81a3      	strheq	r3, [r4, #12]
 8007444:	bf18      	it	ne
 8007446:	81a3      	strhne	r3, [r4, #12]
 8007448:	bd10      	pop	{r4, pc}

0800744a <__sclose>:
 800744a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800744e:	f000 b81d 	b.w	800748c <_close_r>

08007452 <memcmp>:
 8007452:	b510      	push	{r4, lr}
 8007454:	3901      	subs	r1, #1
 8007456:	4402      	add	r2, r0
 8007458:	4290      	cmp	r0, r2
 800745a:	d101      	bne.n	8007460 <memcmp+0xe>
 800745c:	2000      	movs	r0, #0
 800745e:	e005      	b.n	800746c <memcmp+0x1a>
 8007460:	7803      	ldrb	r3, [r0, #0]
 8007462:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007466:	42a3      	cmp	r3, r4
 8007468:	d001      	beq.n	800746e <memcmp+0x1c>
 800746a:	1b18      	subs	r0, r3, r4
 800746c:	bd10      	pop	{r4, pc}
 800746e:	3001      	adds	r0, #1
 8007470:	e7f2      	b.n	8007458 <memcmp+0x6>

08007472 <memset>:
 8007472:	4603      	mov	r3, r0
 8007474:	4402      	add	r2, r0
 8007476:	4293      	cmp	r3, r2
 8007478:	d100      	bne.n	800747c <memset+0xa>
 800747a:	4770      	bx	lr
 800747c:	f803 1b01 	strb.w	r1, [r3], #1
 8007480:	e7f9      	b.n	8007476 <memset+0x4>
	...

08007484 <_localeconv_r>:
 8007484:	4800      	ldr	r0, [pc, #0]	@ (8007488 <_localeconv_r+0x4>)
 8007486:	4770      	bx	lr
 8007488:	2000015c 	.word	0x2000015c

0800748c <_close_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	2300      	movs	r3, #0
 8007490:	4d05      	ldr	r5, [pc, #20]	@ (80074a8 <_close_r+0x1c>)
 8007492:	4604      	mov	r4, r0
 8007494:	4608      	mov	r0, r1
 8007496:	602b      	str	r3, [r5, #0]
 8007498:	f7fa f85c 	bl	8001554 <_close>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d102      	bne.n	80074a6 <_close_r+0x1a>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b103      	cbz	r3, 80074a6 <_close_r+0x1a>
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	20004b08 	.word	0x20004b08

080074ac <_lseek_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	4604      	mov	r4, r0
 80074b0:	4608      	mov	r0, r1
 80074b2:	4611      	mov	r1, r2
 80074b4:	2200      	movs	r2, #0
 80074b6:	4d05      	ldr	r5, [pc, #20]	@ (80074cc <_lseek_r+0x20>)
 80074b8:	602a      	str	r2, [r5, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	f7fa f854 	bl	8001568 <_lseek>
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	d102      	bne.n	80074ca <_lseek_r+0x1e>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	b103      	cbz	r3, 80074ca <_lseek_r+0x1e>
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	20004b08 	.word	0x20004b08

080074d0 <_read_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4604      	mov	r4, r0
 80074d4:	4608      	mov	r0, r1
 80074d6:	4611      	mov	r1, r2
 80074d8:	2200      	movs	r2, #0
 80074da:	4d05      	ldr	r5, [pc, #20]	@ (80074f0 <_read_r+0x20>)
 80074dc:	602a      	str	r2, [r5, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	f7fa f82a 	bl	8001538 <_read>
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	d102      	bne.n	80074ee <_read_r+0x1e>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	b103      	cbz	r3, 80074ee <_read_r+0x1e>
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	20004b08 	.word	0x20004b08

080074f4 <__errno>:
 80074f4:	4b01      	ldr	r3, [pc, #4]	@ (80074fc <__errno+0x8>)
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	2000001c 	.word	0x2000001c

08007500 <__libc_init_array>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	2600      	movs	r6, #0
 8007504:	4d0c      	ldr	r5, [pc, #48]	@ (8007538 <__libc_init_array+0x38>)
 8007506:	4c0d      	ldr	r4, [pc, #52]	@ (800753c <__libc_init_array+0x3c>)
 8007508:	1b64      	subs	r4, r4, r5
 800750a:	10a4      	asrs	r4, r4, #2
 800750c:	42a6      	cmp	r6, r4
 800750e:	d109      	bne.n	8007524 <__libc_init_array+0x24>
 8007510:	f002 f874 	bl	80095fc <_init>
 8007514:	2600      	movs	r6, #0
 8007516:	4d0a      	ldr	r5, [pc, #40]	@ (8007540 <__libc_init_array+0x40>)
 8007518:	4c0a      	ldr	r4, [pc, #40]	@ (8007544 <__libc_init_array+0x44>)
 800751a:	1b64      	subs	r4, r4, r5
 800751c:	10a4      	asrs	r4, r4, #2
 800751e:	42a6      	cmp	r6, r4
 8007520:	d105      	bne.n	800752e <__libc_init_array+0x2e>
 8007522:	bd70      	pop	{r4, r5, r6, pc}
 8007524:	f855 3b04 	ldr.w	r3, [r5], #4
 8007528:	4798      	blx	r3
 800752a:	3601      	adds	r6, #1
 800752c:	e7ee      	b.n	800750c <__libc_init_array+0xc>
 800752e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007532:	4798      	blx	r3
 8007534:	3601      	adds	r6, #1
 8007536:	e7f2      	b.n	800751e <__libc_init_array+0x1e>
 8007538:	08009b54 	.word	0x08009b54
 800753c:	08009b54 	.word	0x08009b54
 8007540:	08009b54 	.word	0x08009b54
 8007544:	08009b58 	.word	0x08009b58

08007548 <__retarget_lock_init_recursive>:
 8007548:	4770      	bx	lr

0800754a <__retarget_lock_acquire_recursive>:
 800754a:	4770      	bx	lr

0800754c <__retarget_lock_release_recursive>:
 800754c:	4770      	bx	lr

0800754e <memchr>:
 800754e:	4603      	mov	r3, r0
 8007550:	b510      	push	{r4, lr}
 8007552:	b2c9      	uxtb	r1, r1
 8007554:	4402      	add	r2, r0
 8007556:	4293      	cmp	r3, r2
 8007558:	4618      	mov	r0, r3
 800755a:	d101      	bne.n	8007560 <memchr+0x12>
 800755c:	2000      	movs	r0, #0
 800755e:	e003      	b.n	8007568 <memchr+0x1a>
 8007560:	7804      	ldrb	r4, [r0, #0]
 8007562:	3301      	adds	r3, #1
 8007564:	428c      	cmp	r4, r1
 8007566:	d1f6      	bne.n	8007556 <memchr+0x8>
 8007568:	bd10      	pop	{r4, pc}

0800756a <memcpy>:
 800756a:	440a      	add	r2, r1
 800756c:	4291      	cmp	r1, r2
 800756e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007572:	d100      	bne.n	8007576 <memcpy+0xc>
 8007574:	4770      	bx	lr
 8007576:	b510      	push	{r4, lr}
 8007578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800757c:	4291      	cmp	r1, r2
 800757e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007582:	d1f9      	bne.n	8007578 <memcpy+0xe>
 8007584:	bd10      	pop	{r4, pc}

08007586 <quorem>:
 8007586:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758a:	6903      	ldr	r3, [r0, #16]
 800758c:	690c      	ldr	r4, [r1, #16]
 800758e:	4607      	mov	r7, r0
 8007590:	42a3      	cmp	r3, r4
 8007592:	db7e      	blt.n	8007692 <quorem+0x10c>
 8007594:	3c01      	subs	r4, #1
 8007596:	00a3      	lsls	r3, r4, #2
 8007598:	f100 0514 	add.w	r5, r0, #20
 800759c:	f101 0814 	add.w	r8, r1, #20
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075b0:	3301      	adds	r3, #1
 80075b2:	429a      	cmp	r2, r3
 80075b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80075b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075bc:	d32e      	bcc.n	800761c <quorem+0x96>
 80075be:	f04f 0a00 	mov.w	sl, #0
 80075c2:	46c4      	mov	ip, r8
 80075c4:	46ae      	mov	lr, r5
 80075c6:	46d3      	mov	fp, sl
 80075c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075cc:	b298      	uxth	r0, r3
 80075ce:	fb06 a000 	mla	r0, r6, r0, sl
 80075d2:	0c1b      	lsrs	r3, r3, #16
 80075d4:	0c02      	lsrs	r2, r0, #16
 80075d6:	fb06 2303 	mla	r3, r6, r3, r2
 80075da:	f8de 2000 	ldr.w	r2, [lr]
 80075de:	b280      	uxth	r0, r0
 80075e0:	b292      	uxth	r2, r2
 80075e2:	1a12      	subs	r2, r2, r0
 80075e4:	445a      	add	r2, fp
 80075e6:	f8de 0000 	ldr.w	r0, [lr]
 80075ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80075f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80075f8:	b292      	uxth	r2, r2
 80075fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80075fe:	45e1      	cmp	r9, ip
 8007600:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007604:	f84e 2b04 	str.w	r2, [lr], #4
 8007608:	d2de      	bcs.n	80075c8 <quorem+0x42>
 800760a:	9b00      	ldr	r3, [sp, #0]
 800760c:	58eb      	ldr	r3, [r5, r3]
 800760e:	b92b      	cbnz	r3, 800761c <quorem+0x96>
 8007610:	9b01      	ldr	r3, [sp, #4]
 8007612:	3b04      	subs	r3, #4
 8007614:	429d      	cmp	r5, r3
 8007616:	461a      	mov	r2, r3
 8007618:	d32f      	bcc.n	800767a <quorem+0xf4>
 800761a:	613c      	str	r4, [r7, #16]
 800761c:	4638      	mov	r0, r7
 800761e:	f001 f97f 	bl	8008920 <__mcmp>
 8007622:	2800      	cmp	r0, #0
 8007624:	db25      	blt.n	8007672 <quorem+0xec>
 8007626:	4629      	mov	r1, r5
 8007628:	2000      	movs	r0, #0
 800762a:	f858 2b04 	ldr.w	r2, [r8], #4
 800762e:	f8d1 c000 	ldr.w	ip, [r1]
 8007632:	fa1f fe82 	uxth.w	lr, r2
 8007636:	fa1f f38c 	uxth.w	r3, ip
 800763a:	eba3 030e 	sub.w	r3, r3, lr
 800763e:	4403      	add	r3, r0
 8007640:	0c12      	lsrs	r2, r2, #16
 8007642:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007646:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800764a:	b29b      	uxth	r3, r3
 800764c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007650:	45c1      	cmp	r9, r8
 8007652:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007656:	f841 3b04 	str.w	r3, [r1], #4
 800765a:	d2e6      	bcs.n	800762a <quorem+0xa4>
 800765c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007660:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007664:	b922      	cbnz	r2, 8007670 <quorem+0xea>
 8007666:	3b04      	subs	r3, #4
 8007668:	429d      	cmp	r5, r3
 800766a:	461a      	mov	r2, r3
 800766c:	d30b      	bcc.n	8007686 <quorem+0x100>
 800766e:	613c      	str	r4, [r7, #16]
 8007670:	3601      	adds	r6, #1
 8007672:	4630      	mov	r0, r6
 8007674:	b003      	add	sp, #12
 8007676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	3b04      	subs	r3, #4
 800767e:	2a00      	cmp	r2, #0
 8007680:	d1cb      	bne.n	800761a <quorem+0x94>
 8007682:	3c01      	subs	r4, #1
 8007684:	e7c6      	b.n	8007614 <quorem+0x8e>
 8007686:	6812      	ldr	r2, [r2, #0]
 8007688:	3b04      	subs	r3, #4
 800768a:	2a00      	cmp	r2, #0
 800768c:	d1ef      	bne.n	800766e <quorem+0xe8>
 800768e:	3c01      	subs	r4, #1
 8007690:	e7ea      	b.n	8007668 <quorem+0xe2>
 8007692:	2000      	movs	r0, #0
 8007694:	e7ee      	b.n	8007674 <quorem+0xee>
	...

08007698 <_dtoa_r>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	4614      	mov	r4, r2
 800769e:	461d      	mov	r5, r3
 80076a0:	69c7      	ldr	r7, [r0, #28]
 80076a2:	b097      	sub	sp, #92	@ 0x5c
 80076a4:	4681      	mov	r9, r0
 80076a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80076aa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80076ac:	b97f      	cbnz	r7, 80076ce <_dtoa_r+0x36>
 80076ae:	2010      	movs	r0, #16
 80076b0:	f000 fe0e 	bl	80082d0 <malloc>
 80076b4:	4602      	mov	r2, r0
 80076b6:	f8c9 001c 	str.w	r0, [r9, #28]
 80076ba:	b920      	cbnz	r0, 80076c6 <_dtoa_r+0x2e>
 80076bc:	21ef      	movs	r1, #239	@ 0xef
 80076be:	4bac      	ldr	r3, [pc, #688]	@ (8007970 <_dtoa_r+0x2d8>)
 80076c0:	48ac      	ldr	r0, [pc, #688]	@ (8007974 <_dtoa_r+0x2dc>)
 80076c2:	f001 fc5f 	bl	8008f84 <__assert_func>
 80076c6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80076ca:	6007      	str	r7, [r0, #0]
 80076cc:	60c7      	str	r7, [r0, #12]
 80076ce:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80076d2:	6819      	ldr	r1, [r3, #0]
 80076d4:	b159      	cbz	r1, 80076ee <_dtoa_r+0x56>
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	2301      	movs	r3, #1
 80076da:	4093      	lsls	r3, r2
 80076dc:	604a      	str	r2, [r1, #4]
 80076de:	608b      	str	r3, [r1, #8]
 80076e0:	4648      	mov	r0, r9
 80076e2:	f000 feeb 	bl	80084bc <_Bfree>
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	1e2b      	subs	r3, r5, #0
 80076f0:	bfaf      	iteee	ge
 80076f2:	2300      	movge	r3, #0
 80076f4:	2201      	movlt	r2, #1
 80076f6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80076fa:	9307      	strlt	r3, [sp, #28]
 80076fc:	bfa8      	it	ge
 80076fe:	6033      	strge	r3, [r6, #0]
 8007700:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007704:	4b9c      	ldr	r3, [pc, #624]	@ (8007978 <_dtoa_r+0x2e0>)
 8007706:	bfb8      	it	lt
 8007708:	6032      	strlt	r2, [r6, #0]
 800770a:	ea33 0308 	bics.w	r3, r3, r8
 800770e:	d112      	bne.n	8007736 <_dtoa_r+0x9e>
 8007710:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007714:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800771c:	4323      	orrs	r3, r4
 800771e:	f000 855e 	beq.w	80081de <_dtoa_r+0xb46>
 8007722:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007724:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800797c <_dtoa_r+0x2e4>
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 8560 	beq.w	80081ee <_dtoa_r+0xb56>
 800772e:	f10a 0303 	add.w	r3, sl, #3
 8007732:	f000 bd5a 	b.w	80081ea <_dtoa_r+0xb52>
 8007736:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800773a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800773e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007742:	2200      	movs	r2, #0
 8007744:	2300      	movs	r3, #0
 8007746:	f7f9 f975 	bl	8000a34 <__aeabi_dcmpeq>
 800774a:	4607      	mov	r7, r0
 800774c:	b158      	cbz	r0, 8007766 <_dtoa_r+0xce>
 800774e:	2301      	movs	r3, #1
 8007750:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007752:	6013      	str	r3, [r2, #0]
 8007754:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007756:	b113      	cbz	r3, 800775e <_dtoa_r+0xc6>
 8007758:	4b89      	ldr	r3, [pc, #548]	@ (8007980 <_dtoa_r+0x2e8>)
 800775a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007984 <_dtoa_r+0x2ec>
 8007762:	f000 bd44 	b.w	80081ee <_dtoa_r+0xb56>
 8007766:	ab14      	add	r3, sp, #80	@ 0x50
 8007768:	9301      	str	r3, [sp, #4]
 800776a:	ab15      	add	r3, sp, #84	@ 0x54
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	4648      	mov	r0, r9
 8007770:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007774:	f001 f984 	bl	8008a80 <__d2b>
 8007778:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800777c:	9003      	str	r0, [sp, #12]
 800777e:	2e00      	cmp	r6, #0
 8007780:	d078      	beq.n	8007874 <_dtoa_r+0x1dc>
 8007782:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007788:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800778c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007790:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007794:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007798:	9712      	str	r7, [sp, #72]	@ 0x48
 800779a:	4619      	mov	r1, r3
 800779c:	2200      	movs	r2, #0
 800779e:	4b7a      	ldr	r3, [pc, #488]	@ (8007988 <_dtoa_r+0x2f0>)
 80077a0:	f7f8 fd28 	bl	80001f4 <__aeabi_dsub>
 80077a4:	a36c      	add	r3, pc, #432	@ (adr r3, 8007958 <_dtoa_r+0x2c0>)
 80077a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077aa:	f7f8 fedb 	bl	8000564 <__aeabi_dmul>
 80077ae:	a36c      	add	r3, pc, #432	@ (adr r3, 8007960 <_dtoa_r+0x2c8>)
 80077b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b4:	f7f8 fd20 	bl	80001f8 <__adddf3>
 80077b8:	4604      	mov	r4, r0
 80077ba:	4630      	mov	r0, r6
 80077bc:	460d      	mov	r5, r1
 80077be:	f7f8 fe67 	bl	8000490 <__aeabi_i2d>
 80077c2:	a369      	add	r3, pc, #420	@ (adr r3, 8007968 <_dtoa_r+0x2d0>)
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	f7f8 fecc 	bl	8000564 <__aeabi_dmul>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4620      	mov	r0, r4
 80077d2:	4629      	mov	r1, r5
 80077d4:	f7f8 fd10 	bl	80001f8 <__adddf3>
 80077d8:	4604      	mov	r4, r0
 80077da:	460d      	mov	r5, r1
 80077dc:	f7f9 f972 	bl	8000ac4 <__aeabi_d2iz>
 80077e0:	2200      	movs	r2, #0
 80077e2:	4607      	mov	r7, r0
 80077e4:	2300      	movs	r3, #0
 80077e6:	4620      	mov	r0, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f9 f92d 	bl	8000a48 <__aeabi_dcmplt>
 80077ee:	b140      	cbz	r0, 8007802 <_dtoa_r+0x16a>
 80077f0:	4638      	mov	r0, r7
 80077f2:	f7f8 fe4d 	bl	8000490 <__aeabi_i2d>
 80077f6:	4622      	mov	r2, r4
 80077f8:	462b      	mov	r3, r5
 80077fa:	f7f9 f91b 	bl	8000a34 <__aeabi_dcmpeq>
 80077fe:	b900      	cbnz	r0, 8007802 <_dtoa_r+0x16a>
 8007800:	3f01      	subs	r7, #1
 8007802:	2f16      	cmp	r7, #22
 8007804:	d854      	bhi.n	80078b0 <_dtoa_r+0x218>
 8007806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800780a:	4b60      	ldr	r3, [pc, #384]	@ (800798c <_dtoa_r+0x2f4>)
 800780c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	f7f9 f918 	bl	8000a48 <__aeabi_dcmplt>
 8007818:	2800      	cmp	r0, #0
 800781a:	d04b      	beq.n	80078b4 <_dtoa_r+0x21c>
 800781c:	2300      	movs	r3, #0
 800781e:	3f01      	subs	r7, #1
 8007820:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007822:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007824:	1b9b      	subs	r3, r3, r6
 8007826:	1e5a      	subs	r2, r3, #1
 8007828:	bf49      	itett	mi
 800782a:	f1c3 0301 	rsbmi	r3, r3, #1
 800782e:	2300      	movpl	r3, #0
 8007830:	9304      	strmi	r3, [sp, #16]
 8007832:	2300      	movmi	r3, #0
 8007834:	9209      	str	r2, [sp, #36]	@ 0x24
 8007836:	bf54      	ite	pl
 8007838:	9304      	strpl	r3, [sp, #16]
 800783a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800783c:	2f00      	cmp	r7, #0
 800783e:	db3b      	blt.n	80078b8 <_dtoa_r+0x220>
 8007840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007842:	970e      	str	r7, [sp, #56]	@ 0x38
 8007844:	443b      	add	r3, r7
 8007846:	9309      	str	r3, [sp, #36]	@ 0x24
 8007848:	2300      	movs	r3, #0
 800784a:	930a      	str	r3, [sp, #40]	@ 0x28
 800784c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800784e:	2b09      	cmp	r3, #9
 8007850:	d865      	bhi.n	800791e <_dtoa_r+0x286>
 8007852:	2b05      	cmp	r3, #5
 8007854:	bfc4      	itt	gt
 8007856:	3b04      	subgt	r3, #4
 8007858:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800785a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800785c:	bfc8      	it	gt
 800785e:	2400      	movgt	r4, #0
 8007860:	f1a3 0302 	sub.w	r3, r3, #2
 8007864:	bfd8      	it	le
 8007866:	2401      	movle	r4, #1
 8007868:	2b03      	cmp	r3, #3
 800786a:	d864      	bhi.n	8007936 <_dtoa_r+0x29e>
 800786c:	e8df f003 	tbb	[pc, r3]
 8007870:	2c385553 	.word	0x2c385553
 8007874:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007878:	441e      	add	r6, r3
 800787a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800787e:	2b20      	cmp	r3, #32
 8007880:	bfc1      	itttt	gt
 8007882:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007886:	fa08 f803 	lslgt.w	r8, r8, r3
 800788a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800788e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007892:	bfd6      	itet	le
 8007894:	f1c3 0320 	rsble	r3, r3, #32
 8007898:	ea48 0003 	orrgt.w	r0, r8, r3
 800789c:	fa04 f003 	lslle.w	r0, r4, r3
 80078a0:	f7f8 fde6 	bl	8000470 <__aeabi_ui2d>
 80078a4:	2201      	movs	r2, #1
 80078a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80078aa:	3e01      	subs	r6, #1
 80078ac:	9212      	str	r2, [sp, #72]	@ 0x48
 80078ae:	e774      	b.n	800779a <_dtoa_r+0x102>
 80078b0:	2301      	movs	r3, #1
 80078b2:	e7b5      	b.n	8007820 <_dtoa_r+0x188>
 80078b4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80078b6:	e7b4      	b.n	8007822 <_dtoa_r+0x18a>
 80078b8:	9b04      	ldr	r3, [sp, #16]
 80078ba:	1bdb      	subs	r3, r3, r7
 80078bc:	9304      	str	r3, [sp, #16]
 80078be:	427b      	negs	r3, r7
 80078c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078c2:	2300      	movs	r3, #0
 80078c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80078c6:	e7c1      	b.n	800784c <_dtoa_r+0x1b4>
 80078c8:	2301      	movs	r3, #1
 80078ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078ce:	eb07 0b03 	add.w	fp, r7, r3
 80078d2:	f10b 0301 	add.w	r3, fp, #1
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	9308      	str	r3, [sp, #32]
 80078da:	bfb8      	it	lt
 80078dc:	2301      	movlt	r3, #1
 80078de:	e006      	b.n	80078ee <_dtoa_r+0x256>
 80078e0:	2301      	movs	r3, #1
 80078e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	dd28      	ble.n	800793c <_dtoa_r+0x2a4>
 80078ea:	469b      	mov	fp, r3
 80078ec:	9308      	str	r3, [sp, #32]
 80078ee:	2100      	movs	r1, #0
 80078f0:	2204      	movs	r2, #4
 80078f2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80078f6:	f102 0514 	add.w	r5, r2, #20
 80078fa:	429d      	cmp	r5, r3
 80078fc:	d926      	bls.n	800794c <_dtoa_r+0x2b4>
 80078fe:	6041      	str	r1, [r0, #4]
 8007900:	4648      	mov	r0, r9
 8007902:	f000 fd9b 	bl	800843c <_Balloc>
 8007906:	4682      	mov	sl, r0
 8007908:	2800      	cmp	r0, #0
 800790a:	d143      	bne.n	8007994 <_dtoa_r+0x2fc>
 800790c:	4602      	mov	r2, r0
 800790e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007912:	4b1f      	ldr	r3, [pc, #124]	@ (8007990 <_dtoa_r+0x2f8>)
 8007914:	e6d4      	b.n	80076c0 <_dtoa_r+0x28>
 8007916:	2300      	movs	r3, #0
 8007918:	e7e3      	b.n	80078e2 <_dtoa_r+0x24a>
 800791a:	2300      	movs	r3, #0
 800791c:	e7d5      	b.n	80078ca <_dtoa_r+0x232>
 800791e:	2401      	movs	r4, #1
 8007920:	2300      	movs	r3, #0
 8007922:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007924:	9320      	str	r3, [sp, #128]	@ 0x80
 8007926:	f04f 3bff 	mov.w	fp, #4294967295
 800792a:	2200      	movs	r2, #0
 800792c:	2312      	movs	r3, #18
 800792e:	f8cd b020 	str.w	fp, [sp, #32]
 8007932:	9221      	str	r2, [sp, #132]	@ 0x84
 8007934:	e7db      	b.n	80078ee <_dtoa_r+0x256>
 8007936:	2301      	movs	r3, #1
 8007938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800793a:	e7f4      	b.n	8007926 <_dtoa_r+0x28e>
 800793c:	f04f 0b01 	mov.w	fp, #1
 8007940:	465b      	mov	r3, fp
 8007942:	f8cd b020 	str.w	fp, [sp, #32]
 8007946:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800794a:	e7d0      	b.n	80078ee <_dtoa_r+0x256>
 800794c:	3101      	adds	r1, #1
 800794e:	0052      	lsls	r2, r2, #1
 8007950:	e7d1      	b.n	80078f6 <_dtoa_r+0x25e>
 8007952:	bf00      	nop
 8007954:	f3af 8000 	nop.w
 8007958:	636f4361 	.word	0x636f4361
 800795c:	3fd287a7 	.word	0x3fd287a7
 8007960:	8b60c8b3 	.word	0x8b60c8b3
 8007964:	3fc68a28 	.word	0x3fc68a28
 8007968:	509f79fb 	.word	0x509f79fb
 800796c:	3fd34413 	.word	0x3fd34413
 8007970:	08009766 	.word	0x08009766
 8007974:	0800977d 	.word	0x0800977d
 8007978:	7ff00000 	.word	0x7ff00000
 800797c:	08009762 	.word	0x08009762
 8007980:	08009736 	.word	0x08009736
 8007984:	08009735 	.word	0x08009735
 8007988:	3ff80000 	.word	0x3ff80000
 800798c:	08009980 	.word	0x08009980
 8007990:	080097d5 	.word	0x080097d5
 8007994:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007998:	6018      	str	r0, [r3, #0]
 800799a:	9b08      	ldr	r3, [sp, #32]
 800799c:	2b0e      	cmp	r3, #14
 800799e:	f200 80a1 	bhi.w	8007ae4 <_dtoa_r+0x44c>
 80079a2:	2c00      	cmp	r4, #0
 80079a4:	f000 809e 	beq.w	8007ae4 <_dtoa_r+0x44c>
 80079a8:	2f00      	cmp	r7, #0
 80079aa:	dd33      	ble.n	8007a14 <_dtoa_r+0x37c>
 80079ac:	4b9c      	ldr	r3, [pc, #624]	@ (8007c20 <_dtoa_r+0x588>)
 80079ae:	f007 020f 	and.w	r2, r7, #15
 80079b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079b6:	05f8      	lsls	r0, r7, #23
 80079b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80079c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80079c4:	d516      	bpl.n	80079f4 <_dtoa_r+0x35c>
 80079c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079ca:	4b96      	ldr	r3, [pc, #600]	@ (8007c24 <_dtoa_r+0x58c>)
 80079cc:	2603      	movs	r6, #3
 80079ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079d2:	f7f8 fef1 	bl	80007b8 <__aeabi_ddiv>
 80079d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80079da:	f004 040f 	and.w	r4, r4, #15
 80079de:	4d91      	ldr	r5, [pc, #580]	@ (8007c24 <_dtoa_r+0x58c>)
 80079e0:	b954      	cbnz	r4, 80079f8 <_dtoa_r+0x360>
 80079e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079ea:	f7f8 fee5 	bl	80007b8 <__aeabi_ddiv>
 80079ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80079f2:	e028      	b.n	8007a46 <_dtoa_r+0x3ae>
 80079f4:	2602      	movs	r6, #2
 80079f6:	e7f2      	b.n	80079de <_dtoa_r+0x346>
 80079f8:	07e1      	lsls	r1, r4, #31
 80079fa:	d508      	bpl.n	8007a0e <_dtoa_r+0x376>
 80079fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007a00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a04:	f7f8 fdae 	bl	8000564 <__aeabi_dmul>
 8007a08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a0c:	3601      	adds	r6, #1
 8007a0e:	1064      	asrs	r4, r4, #1
 8007a10:	3508      	adds	r5, #8
 8007a12:	e7e5      	b.n	80079e0 <_dtoa_r+0x348>
 8007a14:	f000 80af 	beq.w	8007b76 <_dtoa_r+0x4de>
 8007a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a1c:	427c      	negs	r4, r7
 8007a1e:	4b80      	ldr	r3, [pc, #512]	@ (8007c20 <_dtoa_r+0x588>)
 8007a20:	f004 020f 	and.w	r2, r4, #15
 8007a24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	f7f8 fd9a 	bl	8000564 <__aeabi_dmul>
 8007a30:	2602      	movs	r6, #2
 8007a32:	2300      	movs	r3, #0
 8007a34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a38:	4d7a      	ldr	r5, [pc, #488]	@ (8007c24 <_dtoa_r+0x58c>)
 8007a3a:	1124      	asrs	r4, r4, #4
 8007a3c:	2c00      	cmp	r4, #0
 8007a3e:	f040 808f 	bne.w	8007b60 <_dtoa_r+0x4c8>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1d3      	bne.n	80079ee <_dtoa_r+0x356>
 8007a46:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007a4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 8094 	beq.w	8007b7a <_dtoa_r+0x4e2>
 8007a52:	2200      	movs	r2, #0
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	4b73      	ldr	r3, [pc, #460]	@ (8007c28 <_dtoa_r+0x590>)
 8007a5a:	f7f8 fff5 	bl	8000a48 <__aeabi_dcmplt>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	f000 808b 	beq.w	8007b7a <_dtoa_r+0x4e2>
 8007a64:	9b08      	ldr	r3, [sp, #32]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8087 	beq.w	8007b7a <_dtoa_r+0x4e2>
 8007a6c:	f1bb 0f00 	cmp.w	fp, #0
 8007a70:	dd34      	ble.n	8007adc <_dtoa_r+0x444>
 8007a72:	4620      	mov	r0, r4
 8007a74:	2200      	movs	r2, #0
 8007a76:	4629      	mov	r1, r5
 8007a78:	4b6c      	ldr	r3, [pc, #432]	@ (8007c2c <_dtoa_r+0x594>)
 8007a7a:	f7f8 fd73 	bl	8000564 <__aeabi_dmul>
 8007a7e:	465c      	mov	r4, fp
 8007a80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a84:	f107 38ff 	add.w	r8, r7, #4294967295
 8007a88:	3601      	adds	r6, #1
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f7f8 fd00 	bl	8000490 <__aeabi_i2d>
 8007a90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a94:	f7f8 fd66 	bl	8000564 <__aeabi_dmul>
 8007a98:	2200      	movs	r2, #0
 8007a9a:	4b65      	ldr	r3, [pc, #404]	@ (8007c30 <_dtoa_r+0x598>)
 8007a9c:	f7f8 fbac 	bl	80001f8 <__adddf3>
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007aa6:	2c00      	cmp	r4, #0
 8007aa8:	d16a      	bne.n	8007b80 <_dtoa_r+0x4e8>
 8007aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	4b60      	ldr	r3, [pc, #384]	@ (8007c34 <_dtoa_r+0x59c>)
 8007ab2:	f7f8 fb9f 	bl	80001f4 <__aeabi_dsub>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007abe:	462a      	mov	r2, r5
 8007ac0:	4633      	mov	r3, r6
 8007ac2:	f7f8 ffdf 	bl	8000a84 <__aeabi_dcmpgt>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	f040 8298 	bne.w	8007ffc <_dtoa_r+0x964>
 8007acc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ad0:	462a      	mov	r2, r5
 8007ad2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ad6:	f7f8 ffb7 	bl	8000a48 <__aeabi_dcmplt>
 8007ada:	bb38      	cbnz	r0, 8007b2c <_dtoa_r+0x494>
 8007adc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ae0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007ae4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f2c0 8157 	blt.w	8007d9a <_dtoa_r+0x702>
 8007aec:	2f0e      	cmp	r7, #14
 8007aee:	f300 8154 	bgt.w	8007d9a <_dtoa_r+0x702>
 8007af2:	4b4b      	ldr	r3, [pc, #300]	@ (8007c20 <_dtoa_r+0x588>)
 8007af4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007af8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007afc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f280 80e5 	bge.w	8007cd2 <_dtoa_r+0x63a>
 8007b08:	9b08      	ldr	r3, [sp, #32]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f300 80e1 	bgt.w	8007cd2 <_dtoa_r+0x63a>
 8007b10:	d10c      	bne.n	8007b2c <_dtoa_r+0x494>
 8007b12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b16:	2200      	movs	r2, #0
 8007b18:	4b46      	ldr	r3, [pc, #280]	@ (8007c34 <_dtoa_r+0x59c>)
 8007b1a:	f7f8 fd23 	bl	8000564 <__aeabi_dmul>
 8007b1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b22:	f7f8 ffa5 	bl	8000a70 <__aeabi_dcmpge>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	f000 8266 	beq.w	8007ff8 <_dtoa_r+0x960>
 8007b2c:	2400      	movs	r4, #0
 8007b2e:	4625      	mov	r5, r4
 8007b30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b32:	4656      	mov	r6, sl
 8007b34:	ea6f 0803 	mvn.w	r8, r3
 8007b38:	2700      	movs	r7, #0
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4648      	mov	r0, r9
 8007b3e:	f000 fcbd 	bl	80084bc <_Bfree>
 8007b42:	2d00      	cmp	r5, #0
 8007b44:	f000 80bd 	beq.w	8007cc2 <_dtoa_r+0x62a>
 8007b48:	b12f      	cbz	r7, 8007b56 <_dtoa_r+0x4be>
 8007b4a:	42af      	cmp	r7, r5
 8007b4c:	d003      	beq.n	8007b56 <_dtoa_r+0x4be>
 8007b4e:	4639      	mov	r1, r7
 8007b50:	4648      	mov	r0, r9
 8007b52:	f000 fcb3 	bl	80084bc <_Bfree>
 8007b56:	4629      	mov	r1, r5
 8007b58:	4648      	mov	r0, r9
 8007b5a:	f000 fcaf 	bl	80084bc <_Bfree>
 8007b5e:	e0b0      	b.n	8007cc2 <_dtoa_r+0x62a>
 8007b60:	07e2      	lsls	r2, r4, #31
 8007b62:	d505      	bpl.n	8007b70 <_dtoa_r+0x4d8>
 8007b64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b68:	f7f8 fcfc 	bl	8000564 <__aeabi_dmul>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	3601      	adds	r6, #1
 8007b70:	1064      	asrs	r4, r4, #1
 8007b72:	3508      	adds	r5, #8
 8007b74:	e762      	b.n	8007a3c <_dtoa_r+0x3a4>
 8007b76:	2602      	movs	r6, #2
 8007b78:	e765      	b.n	8007a46 <_dtoa_r+0x3ae>
 8007b7a:	46b8      	mov	r8, r7
 8007b7c:	9c08      	ldr	r4, [sp, #32]
 8007b7e:	e784      	b.n	8007a8a <_dtoa_r+0x3f2>
 8007b80:	4b27      	ldr	r3, [pc, #156]	@ (8007c20 <_dtoa_r+0x588>)
 8007b82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b8c:	4454      	add	r4, sl
 8007b8e:	2900      	cmp	r1, #0
 8007b90:	d054      	beq.n	8007c3c <_dtoa_r+0x5a4>
 8007b92:	2000      	movs	r0, #0
 8007b94:	4928      	ldr	r1, [pc, #160]	@ (8007c38 <_dtoa_r+0x5a0>)
 8007b96:	f7f8 fe0f 	bl	80007b8 <__aeabi_ddiv>
 8007b9a:	4633      	mov	r3, r6
 8007b9c:	462a      	mov	r2, r5
 8007b9e:	f7f8 fb29 	bl	80001f4 <__aeabi_dsub>
 8007ba2:	4656      	mov	r6, sl
 8007ba4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ba8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bac:	f7f8 ff8a 	bl	8000ac4 <__aeabi_d2iz>
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	f7f8 fc6d 	bl	8000490 <__aeabi_i2d>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bbe:	f7f8 fb19 	bl	80001f4 <__aeabi_dsub>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	3530      	adds	r5, #48	@ 0x30
 8007bc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007bd0:	f806 5b01 	strb.w	r5, [r6], #1
 8007bd4:	f7f8 ff38 	bl	8000a48 <__aeabi_dcmplt>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d172      	bne.n	8007cc2 <_dtoa_r+0x62a>
 8007bdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007be0:	2000      	movs	r0, #0
 8007be2:	4911      	ldr	r1, [pc, #68]	@ (8007c28 <_dtoa_r+0x590>)
 8007be4:	f7f8 fb06 	bl	80001f4 <__aeabi_dsub>
 8007be8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007bec:	f7f8 ff2c 	bl	8000a48 <__aeabi_dcmplt>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	f040 80b4 	bne.w	8007d5e <_dtoa_r+0x6c6>
 8007bf6:	42a6      	cmp	r6, r4
 8007bf8:	f43f af70 	beq.w	8007adc <_dtoa_r+0x444>
 8007bfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c00:	2200      	movs	r2, #0
 8007c02:	4b0a      	ldr	r3, [pc, #40]	@ (8007c2c <_dtoa_r+0x594>)
 8007c04:	f7f8 fcae 	bl	8000564 <__aeabi_dmul>
 8007c08:	2200      	movs	r2, #0
 8007c0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c12:	4b06      	ldr	r3, [pc, #24]	@ (8007c2c <_dtoa_r+0x594>)
 8007c14:	f7f8 fca6 	bl	8000564 <__aeabi_dmul>
 8007c18:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c1c:	e7c4      	b.n	8007ba8 <_dtoa_r+0x510>
 8007c1e:	bf00      	nop
 8007c20:	08009980 	.word	0x08009980
 8007c24:	08009958 	.word	0x08009958
 8007c28:	3ff00000 	.word	0x3ff00000
 8007c2c:	40240000 	.word	0x40240000
 8007c30:	401c0000 	.word	0x401c0000
 8007c34:	40140000 	.word	0x40140000
 8007c38:	3fe00000 	.word	0x3fe00000
 8007c3c:	4631      	mov	r1, r6
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f7f8 fc90 	bl	8000564 <__aeabi_dmul>
 8007c44:	4656      	mov	r6, sl
 8007c46:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c4a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007c4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c50:	f7f8 ff38 	bl	8000ac4 <__aeabi_d2iz>
 8007c54:	4605      	mov	r5, r0
 8007c56:	f7f8 fc1b 	bl	8000490 <__aeabi_i2d>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c62:	f7f8 fac7 	bl	80001f4 <__aeabi_dsub>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	3530      	adds	r5, #48	@ 0x30
 8007c6c:	f806 5b01 	strb.w	r5, [r6], #1
 8007c70:	42a6      	cmp	r6, r4
 8007c72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c76:	f04f 0200 	mov.w	r2, #0
 8007c7a:	d124      	bne.n	8007cc6 <_dtoa_r+0x62e>
 8007c7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c80:	4bae      	ldr	r3, [pc, #696]	@ (8007f3c <_dtoa_r+0x8a4>)
 8007c82:	f7f8 fab9 	bl	80001f8 <__adddf3>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c8e:	f7f8 fef9 	bl	8000a84 <__aeabi_dcmpgt>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d163      	bne.n	8007d5e <_dtoa_r+0x6c6>
 8007c96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	49a7      	ldr	r1, [pc, #668]	@ (8007f3c <_dtoa_r+0x8a4>)
 8007c9e:	f7f8 faa9 	bl	80001f4 <__aeabi_dsub>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007caa:	f7f8 fecd 	bl	8000a48 <__aeabi_dcmplt>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	f43f af14 	beq.w	8007adc <_dtoa_r+0x444>
 8007cb4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007cb6:	1e73      	subs	r3, r6, #1
 8007cb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007cbe:	2b30      	cmp	r3, #48	@ 0x30
 8007cc0:	d0f8      	beq.n	8007cb4 <_dtoa_r+0x61c>
 8007cc2:	4647      	mov	r7, r8
 8007cc4:	e03b      	b.n	8007d3e <_dtoa_r+0x6a6>
 8007cc6:	4b9e      	ldr	r3, [pc, #632]	@ (8007f40 <_dtoa_r+0x8a8>)
 8007cc8:	f7f8 fc4c 	bl	8000564 <__aeabi_dmul>
 8007ccc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007cd0:	e7bc      	b.n	8007c4c <_dtoa_r+0x5b4>
 8007cd2:	4656      	mov	r6, sl
 8007cd4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cdc:	4620      	mov	r0, r4
 8007cde:	4629      	mov	r1, r5
 8007ce0:	f7f8 fd6a 	bl	80007b8 <__aeabi_ddiv>
 8007ce4:	f7f8 feee 	bl	8000ac4 <__aeabi_d2iz>
 8007ce8:	4680      	mov	r8, r0
 8007cea:	f7f8 fbd1 	bl	8000490 <__aeabi_i2d>
 8007cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cf2:	f7f8 fc37 	bl	8000564 <__aeabi_dmul>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	f7f8 fa79 	bl	80001f4 <__aeabi_dsub>
 8007d02:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d06:	9d08      	ldr	r5, [sp, #32]
 8007d08:	f806 4b01 	strb.w	r4, [r6], #1
 8007d0c:	eba6 040a 	sub.w	r4, r6, sl
 8007d10:	42a5      	cmp	r5, r4
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	d133      	bne.n	8007d80 <_dtoa_r+0x6e8>
 8007d18:	f7f8 fa6e 	bl	80001f8 <__adddf3>
 8007d1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d20:	4604      	mov	r4, r0
 8007d22:	460d      	mov	r5, r1
 8007d24:	f7f8 feae 	bl	8000a84 <__aeabi_dcmpgt>
 8007d28:	b9c0      	cbnz	r0, 8007d5c <_dtoa_r+0x6c4>
 8007d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d2e:	4620      	mov	r0, r4
 8007d30:	4629      	mov	r1, r5
 8007d32:	f7f8 fe7f 	bl	8000a34 <__aeabi_dcmpeq>
 8007d36:	b110      	cbz	r0, 8007d3e <_dtoa_r+0x6a6>
 8007d38:	f018 0f01 	tst.w	r8, #1
 8007d3c:	d10e      	bne.n	8007d5c <_dtoa_r+0x6c4>
 8007d3e:	4648      	mov	r0, r9
 8007d40:	9903      	ldr	r1, [sp, #12]
 8007d42:	f000 fbbb 	bl	80084bc <_Bfree>
 8007d46:	2300      	movs	r3, #0
 8007d48:	7033      	strb	r3, [r6, #0]
 8007d4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007d4c:	3701      	adds	r7, #1
 8007d4e:	601f      	str	r7, [r3, #0]
 8007d50:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 824b 	beq.w	80081ee <_dtoa_r+0xb56>
 8007d58:	601e      	str	r6, [r3, #0]
 8007d5a:	e248      	b.n	80081ee <_dtoa_r+0xb56>
 8007d5c:	46b8      	mov	r8, r7
 8007d5e:	4633      	mov	r3, r6
 8007d60:	461e      	mov	r6, r3
 8007d62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d66:	2a39      	cmp	r2, #57	@ 0x39
 8007d68:	d106      	bne.n	8007d78 <_dtoa_r+0x6e0>
 8007d6a:	459a      	cmp	sl, r3
 8007d6c:	d1f8      	bne.n	8007d60 <_dtoa_r+0x6c8>
 8007d6e:	2230      	movs	r2, #48	@ 0x30
 8007d70:	f108 0801 	add.w	r8, r8, #1
 8007d74:	f88a 2000 	strb.w	r2, [sl]
 8007d78:	781a      	ldrb	r2, [r3, #0]
 8007d7a:	3201      	adds	r2, #1
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e7a0      	b.n	8007cc2 <_dtoa_r+0x62a>
 8007d80:	2200      	movs	r2, #0
 8007d82:	4b6f      	ldr	r3, [pc, #444]	@ (8007f40 <_dtoa_r+0x8a8>)
 8007d84:	f7f8 fbee 	bl	8000564 <__aeabi_dmul>
 8007d88:	2200      	movs	r2, #0
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	460d      	mov	r5, r1
 8007d90:	f7f8 fe50 	bl	8000a34 <__aeabi_dcmpeq>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d09f      	beq.n	8007cd8 <_dtoa_r+0x640>
 8007d98:	e7d1      	b.n	8007d3e <_dtoa_r+0x6a6>
 8007d9a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	f000 80ea 	beq.w	8007f76 <_dtoa_r+0x8de>
 8007da2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007da4:	2a01      	cmp	r2, #1
 8007da6:	f300 80cd 	bgt.w	8007f44 <_dtoa_r+0x8ac>
 8007daa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007dac:	2a00      	cmp	r2, #0
 8007dae:	f000 80c1 	beq.w	8007f34 <_dtoa_r+0x89c>
 8007db2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007db6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007db8:	9e04      	ldr	r6, [sp, #16]
 8007dba:	9a04      	ldr	r2, [sp, #16]
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	441a      	add	r2, r3
 8007dc0:	9204      	str	r2, [sp, #16]
 8007dc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dc4:	4648      	mov	r0, r9
 8007dc6:	441a      	add	r2, r3
 8007dc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dca:	f000 fc2b 	bl	8008624 <__i2b>
 8007dce:	4605      	mov	r5, r0
 8007dd0:	b166      	cbz	r6, 8007dec <_dtoa_r+0x754>
 8007dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	dd09      	ble.n	8007dec <_dtoa_r+0x754>
 8007dd8:	42b3      	cmp	r3, r6
 8007dda:	bfa8      	it	ge
 8007ddc:	4633      	movge	r3, r6
 8007dde:	9a04      	ldr	r2, [sp, #16]
 8007de0:	1af6      	subs	r6, r6, r3
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	9204      	str	r2, [sp, #16]
 8007de6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dee:	b30b      	cbz	r3, 8007e34 <_dtoa_r+0x79c>
 8007df0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 80c6 	beq.w	8007f84 <_dtoa_r+0x8ec>
 8007df8:	2c00      	cmp	r4, #0
 8007dfa:	f000 80c0 	beq.w	8007f7e <_dtoa_r+0x8e6>
 8007dfe:	4629      	mov	r1, r5
 8007e00:	4622      	mov	r2, r4
 8007e02:	4648      	mov	r0, r9
 8007e04:	f000 fcc6 	bl	8008794 <__pow5mult>
 8007e08:	9a03      	ldr	r2, [sp, #12]
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	4648      	mov	r0, r9
 8007e10:	f000 fc1e 	bl	8008650 <__multiply>
 8007e14:	9903      	ldr	r1, [sp, #12]
 8007e16:	4680      	mov	r8, r0
 8007e18:	4648      	mov	r0, r9
 8007e1a:	f000 fb4f 	bl	80084bc <_Bfree>
 8007e1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e20:	1b1b      	subs	r3, r3, r4
 8007e22:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e24:	f000 80b1 	beq.w	8007f8a <_dtoa_r+0x8f2>
 8007e28:	4641      	mov	r1, r8
 8007e2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e2c:	4648      	mov	r0, r9
 8007e2e:	f000 fcb1 	bl	8008794 <__pow5mult>
 8007e32:	9003      	str	r0, [sp, #12]
 8007e34:	2101      	movs	r1, #1
 8007e36:	4648      	mov	r0, r9
 8007e38:	f000 fbf4 	bl	8008624 <__i2b>
 8007e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e3e:	4604      	mov	r4, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 81d8 	beq.w	80081f6 <_dtoa_r+0xb5e>
 8007e46:	461a      	mov	r2, r3
 8007e48:	4601      	mov	r1, r0
 8007e4a:	4648      	mov	r0, r9
 8007e4c:	f000 fca2 	bl	8008794 <__pow5mult>
 8007e50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e52:	4604      	mov	r4, r0
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	f300 809f 	bgt.w	8007f98 <_dtoa_r+0x900>
 8007e5a:	9b06      	ldr	r3, [sp, #24]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f040 8097 	bne.w	8007f90 <_dtoa_r+0x8f8>
 8007e62:	9b07      	ldr	r3, [sp, #28]
 8007e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f040 8093 	bne.w	8007f94 <_dtoa_r+0x8fc>
 8007e6e:	9b07      	ldr	r3, [sp, #28]
 8007e70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e74:	0d1b      	lsrs	r3, r3, #20
 8007e76:	051b      	lsls	r3, r3, #20
 8007e78:	b133      	cbz	r3, 8007e88 <_dtoa_r+0x7f0>
 8007e7a:	9b04      	ldr	r3, [sp, #16]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	9304      	str	r3, [sp, #16]
 8007e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e82:	3301      	adds	r3, #1
 8007e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e86:	2301      	movs	r3, #1
 8007e88:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 81b8 	beq.w	8008202 <_dtoa_r+0xb6a>
 8007e92:	6923      	ldr	r3, [r4, #16]
 8007e94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e98:	6918      	ldr	r0, [r3, #16]
 8007e9a:	f000 fb77 	bl	800858c <__hi0bits>
 8007e9e:	f1c0 0020 	rsb	r0, r0, #32
 8007ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ea4:	4418      	add	r0, r3
 8007ea6:	f010 001f 	ands.w	r0, r0, #31
 8007eaa:	f000 8082 	beq.w	8007fb2 <_dtoa_r+0x91a>
 8007eae:	f1c0 0320 	rsb	r3, r0, #32
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	dd73      	ble.n	8007f9e <_dtoa_r+0x906>
 8007eb6:	9b04      	ldr	r3, [sp, #16]
 8007eb8:	f1c0 001c 	rsb	r0, r0, #28
 8007ebc:	4403      	add	r3, r0
 8007ebe:	9304      	str	r3, [sp, #16]
 8007ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ec2:	4406      	add	r6, r0
 8007ec4:	4403      	add	r3, r0
 8007ec6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ec8:	9b04      	ldr	r3, [sp, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	dd05      	ble.n	8007eda <_dtoa_r+0x842>
 8007ece:	461a      	mov	r2, r3
 8007ed0:	4648      	mov	r0, r9
 8007ed2:	9903      	ldr	r1, [sp, #12]
 8007ed4:	f000 fcb8 	bl	8008848 <__lshift>
 8007ed8:	9003      	str	r0, [sp, #12]
 8007eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dd05      	ble.n	8007eec <_dtoa_r+0x854>
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	4648      	mov	r0, r9
 8007ee6:	f000 fcaf 	bl	8008848 <__lshift>
 8007eea:	4604      	mov	r4, r0
 8007eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d061      	beq.n	8007fb6 <_dtoa_r+0x91e>
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	9803      	ldr	r0, [sp, #12]
 8007ef6:	f000 fd13 	bl	8008920 <__mcmp>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	da5b      	bge.n	8007fb6 <_dtoa_r+0x91e>
 8007efe:	2300      	movs	r3, #0
 8007f00:	220a      	movs	r2, #10
 8007f02:	4648      	mov	r0, r9
 8007f04:	9903      	ldr	r1, [sp, #12]
 8007f06:	f000 fafb 	bl	8008500 <__multadd>
 8007f0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f0c:	f107 38ff 	add.w	r8, r7, #4294967295
 8007f10:	9003      	str	r0, [sp, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 8177 	beq.w	8008206 <_dtoa_r+0xb6e>
 8007f18:	4629      	mov	r1, r5
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	220a      	movs	r2, #10
 8007f1e:	4648      	mov	r0, r9
 8007f20:	f000 faee 	bl	8008500 <__multadd>
 8007f24:	f1bb 0f00 	cmp.w	fp, #0
 8007f28:	4605      	mov	r5, r0
 8007f2a:	dc6f      	bgt.n	800800c <_dtoa_r+0x974>
 8007f2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	dc49      	bgt.n	8007fc6 <_dtoa_r+0x92e>
 8007f32:	e06b      	b.n	800800c <_dtoa_r+0x974>
 8007f34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f3a:	e73c      	b.n	8007db6 <_dtoa_r+0x71e>
 8007f3c:	3fe00000 	.word	0x3fe00000
 8007f40:	40240000 	.word	0x40240000
 8007f44:	9b08      	ldr	r3, [sp, #32]
 8007f46:	1e5c      	subs	r4, r3, #1
 8007f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	db09      	blt.n	8007f62 <_dtoa_r+0x8ca>
 8007f4e:	1b1c      	subs	r4, r3, r4
 8007f50:	9b08      	ldr	r3, [sp, #32]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f6bf af30 	bge.w	8007db8 <_dtoa_r+0x720>
 8007f58:	9b04      	ldr	r3, [sp, #16]
 8007f5a:	9a08      	ldr	r2, [sp, #32]
 8007f5c:	1a9e      	subs	r6, r3, r2
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e72b      	b.n	8007dba <_dtoa_r+0x722>
 8007f62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f66:	1ae3      	subs	r3, r4, r3
 8007f68:	441a      	add	r2, r3
 8007f6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007f6c:	9e04      	ldr	r6, [sp, #16]
 8007f6e:	2400      	movs	r4, #0
 8007f70:	9b08      	ldr	r3, [sp, #32]
 8007f72:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f74:	e721      	b.n	8007dba <_dtoa_r+0x722>
 8007f76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f78:	9e04      	ldr	r6, [sp, #16]
 8007f7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007f7c:	e728      	b.n	8007dd0 <_dtoa_r+0x738>
 8007f7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007f82:	e751      	b.n	8007e28 <_dtoa_r+0x790>
 8007f84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f86:	9903      	ldr	r1, [sp, #12]
 8007f88:	e750      	b.n	8007e2c <_dtoa_r+0x794>
 8007f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f8e:	e751      	b.n	8007e34 <_dtoa_r+0x79c>
 8007f90:	2300      	movs	r3, #0
 8007f92:	e779      	b.n	8007e88 <_dtoa_r+0x7f0>
 8007f94:	9b06      	ldr	r3, [sp, #24]
 8007f96:	e777      	b.n	8007e88 <_dtoa_r+0x7f0>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f9c:	e779      	b.n	8007e92 <_dtoa_r+0x7fa>
 8007f9e:	d093      	beq.n	8007ec8 <_dtoa_r+0x830>
 8007fa0:	9a04      	ldr	r2, [sp, #16]
 8007fa2:	331c      	adds	r3, #28
 8007fa4:	441a      	add	r2, r3
 8007fa6:	9204      	str	r2, [sp, #16]
 8007fa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007faa:	441e      	add	r6, r3
 8007fac:	441a      	add	r2, r3
 8007fae:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fb0:	e78a      	b.n	8007ec8 <_dtoa_r+0x830>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	e7f4      	b.n	8007fa0 <_dtoa_r+0x908>
 8007fb6:	9b08      	ldr	r3, [sp, #32]
 8007fb8:	46b8      	mov	r8, r7
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	dc20      	bgt.n	8008000 <_dtoa_r+0x968>
 8007fbe:	469b      	mov	fp, r3
 8007fc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	dd1e      	ble.n	8008004 <_dtoa_r+0x96c>
 8007fc6:	f1bb 0f00 	cmp.w	fp, #0
 8007fca:	f47f adb1 	bne.w	8007b30 <_dtoa_r+0x498>
 8007fce:	4621      	mov	r1, r4
 8007fd0:	465b      	mov	r3, fp
 8007fd2:	2205      	movs	r2, #5
 8007fd4:	4648      	mov	r0, r9
 8007fd6:	f000 fa93 	bl	8008500 <__multadd>
 8007fda:	4601      	mov	r1, r0
 8007fdc:	4604      	mov	r4, r0
 8007fde:	9803      	ldr	r0, [sp, #12]
 8007fe0:	f000 fc9e 	bl	8008920 <__mcmp>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	f77f ada3 	ble.w	8007b30 <_dtoa_r+0x498>
 8007fea:	4656      	mov	r6, sl
 8007fec:	2331      	movs	r3, #49	@ 0x31
 8007fee:	f108 0801 	add.w	r8, r8, #1
 8007ff2:	f806 3b01 	strb.w	r3, [r6], #1
 8007ff6:	e59f      	b.n	8007b38 <_dtoa_r+0x4a0>
 8007ff8:	46b8      	mov	r8, r7
 8007ffa:	9c08      	ldr	r4, [sp, #32]
 8007ffc:	4625      	mov	r5, r4
 8007ffe:	e7f4      	b.n	8007fea <_dtoa_r+0x952>
 8008000:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008004:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 8101 	beq.w	800820e <_dtoa_r+0xb76>
 800800c:	2e00      	cmp	r6, #0
 800800e:	dd05      	ble.n	800801c <_dtoa_r+0x984>
 8008010:	4629      	mov	r1, r5
 8008012:	4632      	mov	r2, r6
 8008014:	4648      	mov	r0, r9
 8008016:	f000 fc17 	bl	8008848 <__lshift>
 800801a:	4605      	mov	r5, r0
 800801c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800801e:	2b00      	cmp	r3, #0
 8008020:	d05c      	beq.n	80080dc <_dtoa_r+0xa44>
 8008022:	4648      	mov	r0, r9
 8008024:	6869      	ldr	r1, [r5, #4]
 8008026:	f000 fa09 	bl	800843c <_Balloc>
 800802a:	4606      	mov	r6, r0
 800802c:	b928      	cbnz	r0, 800803a <_dtoa_r+0x9a2>
 800802e:	4602      	mov	r2, r0
 8008030:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008034:	4b80      	ldr	r3, [pc, #512]	@ (8008238 <_dtoa_r+0xba0>)
 8008036:	f7ff bb43 	b.w	80076c0 <_dtoa_r+0x28>
 800803a:	692a      	ldr	r2, [r5, #16]
 800803c:	f105 010c 	add.w	r1, r5, #12
 8008040:	3202      	adds	r2, #2
 8008042:	0092      	lsls	r2, r2, #2
 8008044:	300c      	adds	r0, #12
 8008046:	f7ff fa90 	bl	800756a <memcpy>
 800804a:	2201      	movs	r2, #1
 800804c:	4631      	mov	r1, r6
 800804e:	4648      	mov	r0, r9
 8008050:	f000 fbfa 	bl	8008848 <__lshift>
 8008054:	462f      	mov	r7, r5
 8008056:	4605      	mov	r5, r0
 8008058:	f10a 0301 	add.w	r3, sl, #1
 800805c:	9304      	str	r3, [sp, #16]
 800805e:	eb0a 030b 	add.w	r3, sl, fp
 8008062:	930a      	str	r3, [sp, #40]	@ 0x28
 8008064:	9b06      	ldr	r3, [sp, #24]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	9309      	str	r3, [sp, #36]	@ 0x24
 800806c:	9b04      	ldr	r3, [sp, #16]
 800806e:	4621      	mov	r1, r4
 8008070:	9803      	ldr	r0, [sp, #12]
 8008072:	f103 3bff 	add.w	fp, r3, #4294967295
 8008076:	f7ff fa86 	bl	8007586 <quorem>
 800807a:	4603      	mov	r3, r0
 800807c:	4639      	mov	r1, r7
 800807e:	3330      	adds	r3, #48	@ 0x30
 8008080:	9006      	str	r0, [sp, #24]
 8008082:	9803      	ldr	r0, [sp, #12]
 8008084:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008086:	f000 fc4b 	bl	8008920 <__mcmp>
 800808a:	462a      	mov	r2, r5
 800808c:	9008      	str	r0, [sp, #32]
 800808e:	4621      	mov	r1, r4
 8008090:	4648      	mov	r0, r9
 8008092:	f000 fc61 	bl	8008958 <__mdiff>
 8008096:	68c2      	ldr	r2, [r0, #12]
 8008098:	4606      	mov	r6, r0
 800809a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800809c:	bb02      	cbnz	r2, 80080e0 <_dtoa_r+0xa48>
 800809e:	4601      	mov	r1, r0
 80080a0:	9803      	ldr	r0, [sp, #12]
 80080a2:	f000 fc3d 	bl	8008920 <__mcmp>
 80080a6:	4602      	mov	r2, r0
 80080a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080aa:	4631      	mov	r1, r6
 80080ac:	4648      	mov	r0, r9
 80080ae:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80080b2:	f000 fa03 	bl	80084bc <_Bfree>
 80080b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80080b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80080ba:	9e04      	ldr	r6, [sp, #16]
 80080bc:	ea42 0103 	orr.w	r1, r2, r3
 80080c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c2:	4319      	orrs	r1, r3
 80080c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080c6:	d10d      	bne.n	80080e4 <_dtoa_r+0xa4c>
 80080c8:	2b39      	cmp	r3, #57	@ 0x39
 80080ca:	d027      	beq.n	800811c <_dtoa_r+0xa84>
 80080cc:	9a08      	ldr	r2, [sp, #32]
 80080ce:	2a00      	cmp	r2, #0
 80080d0:	dd01      	ble.n	80080d6 <_dtoa_r+0xa3e>
 80080d2:	9b06      	ldr	r3, [sp, #24]
 80080d4:	3331      	adds	r3, #49	@ 0x31
 80080d6:	f88b 3000 	strb.w	r3, [fp]
 80080da:	e52e      	b.n	8007b3a <_dtoa_r+0x4a2>
 80080dc:	4628      	mov	r0, r5
 80080de:	e7b9      	b.n	8008054 <_dtoa_r+0x9bc>
 80080e0:	2201      	movs	r2, #1
 80080e2:	e7e2      	b.n	80080aa <_dtoa_r+0xa12>
 80080e4:	9908      	ldr	r1, [sp, #32]
 80080e6:	2900      	cmp	r1, #0
 80080e8:	db04      	blt.n	80080f4 <_dtoa_r+0xa5c>
 80080ea:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80080ec:	4301      	orrs	r1, r0
 80080ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080f0:	4301      	orrs	r1, r0
 80080f2:	d120      	bne.n	8008136 <_dtoa_r+0xa9e>
 80080f4:	2a00      	cmp	r2, #0
 80080f6:	ddee      	ble.n	80080d6 <_dtoa_r+0xa3e>
 80080f8:	2201      	movs	r2, #1
 80080fa:	9903      	ldr	r1, [sp, #12]
 80080fc:	4648      	mov	r0, r9
 80080fe:	9304      	str	r3, [sp, #16]
 8008100:	f000 fba2 	bl	8008848 <__lshift>
 8008104:	4621      	mov	r1, r4
 8008106:	9003      	str	r0, [sp, #12]
 8008108:	f000 fc0a 	bl	8008920 <__mcmp>
 800810c:	2800      	cmp	r0, #0
 800810e:	9b04      	ldr	r3, [sp, #16]
 8008110:	dc02      	bgt.n	8008118 <_dtoa_r+0xa80>
 8008112:	d1e0      	bne.n	80080d6 <_dtoa_r+0xa3e>
 8008114:	07da      	lsls	r2, r3, #31
 8008116:	d5de      	bpl.n	80080d6 <_dtoa_r+0xa3e>
 8008118:	2b39      	cmp	r3, #57	@ 0x39
 800811a:	d1da      	bne.n	80080d2 <_dtoa_r+0xa3a>
 800811c:	2339      	movs	r3, #57	@ 0x39
 800811e:	f88b 3000 	strb.w	r3, [fp]
 8008122:	4633      	mov	r3, r6
 8008124:	461e      	mov	r6, r3
 8008126:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800812a:	3b01      	subs	r3, #1
 800812c:	2a39      	cmp	r2, #57	@ 0x39
 800812e:	d04e      	beq.n	80081ce <_dtoa_r+0xb36>
 8008130:	3201      	adds	r2, #1
 8008132:	701a      	strb	r2, [r3, #0]
 8008134:	e501      	b.n	8007b3a <_dtoa_r+0x4a2>
 8008136:	2a00      	cmp	r2, #0
 8008138:	dd03      	ble.n	8008142 <_dtoa_r+0xaaa>
 800813a:	2b39      	cmp	r3, #57	@ 0x39
 800813c:	d0ee      	beq.n	800811c <_dtoa_r+0xa84>
 800813e:	3301      	adds	r3, #1
 8008140:	e7c9      	b.n	80080d6 <_dtoa_r+0xa3e>
 8008142:	9a04      	ldr	r2, [sp, #16]
 8008144:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008146:	f802 3c01 	strb.w	r3, [r2, #-1]
 800814a:	428a      	cmp	r2, r1
 800814c:	d028      	beq.n	80081a0 <_dtoa_r+0xb08>
 800814e:	2300      	movs	r3, #0
 8008150:	220a      	movs	r2, #10
 8008152:	9903      	ldr	r1, [sp, #12]
 8008154:	4648      	mov	r0, r9
 8008156:	f000 f9d3 	bl	8008500 <__multadd>
 800815a:	42af      	cmp	r7, r5
 800815c:	9003      	str	r0, [sp, #12]
 800815e:	f04f 0300 	mov.w	r3, #0
 8008162:	f04f 020a 	mov.w	r2, #10
 8008166:	4639      	mov	r1, r7
 8008168:	4648      	mov	r0, r9
 800816a:	d107      	bne.n	800817c <_dtoa_r+0xae4>
 800816c:	f000 f9c8 	bl	8008500 <__multadd>
 8008170:	4607      	mov	r7, r0
 8008172:	4605      	mov	r5, r0
 8008174:	9b04      	ldr	r3, [sp, #16]
 8008176:	3301      	adds	r3, #1
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	e777      	b.n	800806c <_dtoa_r+0x9d4>
 800817c:	f000 f9c0 	bl	8008500 <__multadd>
 8008180:	4629      	mov	r1, r5
 8008182:	4607      	mov	r7, r0
 8008184:	2300      	movs	r3, #0
 8008186:	220a      	movs	r2, #10
 8008188:	4648      	mov	r0, r9
 800818a:	f000 f9b9 	bl	8008500 <__multadd>
 800818e:	4605      	mov	r5, r0
 8008190:	e7f0      	b.n	8008174 <_dtoa_r+0xadc>
 8008192:	f1bb 0f00 	cmp.w	fp, #0
 8008196:	bfcc      	ite	gt
 8008198:	465e      	movgt	r6, fp
 800819a:	2601      	movle	r6, #1
 800819c:	2700      	movs	r7, #0
 800819e:	4456      	add	r6, sl
 80081a0:	2201      	movs	r2, #1
 80081a2:	9903      	ldr	r1, [sp, #12]
 80081a4:	4648      	mov	r0, r9
 80081a6:	9304      	str	r3, [sp, #16]
 80081a8:	f000 fb4e 	bl	8008848 <__lshift>
 80081ac:	4621      	mov	r1, r4
 80081ae:	9003      	str	r0, [sp, #12]
 80081b0:	f000 fbb6 	bl	8008920 <__mcmp>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	dcb4      	bgt.n	8008122 <_dtoa_r+0xa8a>
 80081b8:	d102      	bne.n	80081c0 <_dtoa_r+0xb28>
 80081ba:	9b04      	ldr	r3, [sp, #16]
 80081bc:	07db      	lsls	r3, r3, #31
 80081be:	d4b0      	bmi.n	8008122 <_dtoa_r+0xa8a>
 80081c0:	4633      	mov	r3, r6
 80081c2:	461e      	mov	r6, r3
 80081c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081c8:	2a30      	cmp	r2, #48	@ 0x30
 80081ca:	d0fa      	beq.n	80081c2 <_dtoa_r+0xb2a>
 80081cc:	e4b5      	b.n	8007b3a <_dtoa_r+0x4a2>
 80081ce:	459a      	cmp	sl, r3
 80081d0:	d1a8      	bne.n	8008124 <_dtoa_r+0xa8c>
 80081d2:	2331      	movs	r3, #49	@ 0x31
 80081d4:	f108 0801 	add.w	r8, r8, #1
 80081d8:	f88a 3000 	strb.w	r3, [sl]
 80081dc:	e4ad      	b.n	8007b3a <_dtoa_r+0x4a2>
 80081de:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800823c <_dtoa_r+0xba4>
 80081e4:	b11b      	cbz	r3, 80081ee <_dtoa_r+0xb56>
 80081e6:	f10a 0308 	add.w	r3, sl, #8
 80081ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	4650      	mov	r0, sl
 80081f0:	b017      	add	sp, #92	@ 0x5c
 80081f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	f77f ae2e 	ble.w	8007e5a <_dtoa_r+0x7c2>
 80081fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008200:	930a      	str	r3, [sp, #40]	@ 0x28
 8008202:	2001      	movs	r0, #1
 8008204:	e64d      	b.n	8007ea2 <_dtoa_r+0x80a>
 8008206:	f1bb 0f00 	cmp.w	fp, #0
 800820a:	f77f aed9 	ble.w	8007fc0 <_dtoa_r+0x928>
 800820e:	4656      	mov	r6, sl
 8008210:	4621      	mov	r1, r4
 8008212:	9803      	ldr	r0, [sp, #12]
 8008214:	f7ff f9b7 	bl	8007586 <quorem>
 8008218:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800821c:	f806 3b01 	strb.w	r3, [r6], #1
 8008220:	eba6 020a 	sub.w	r2, r6, sl
 8008224:	4593      	cmp	fp, r2
 8008226:	ddb4      	ble.n	8008192 <_dtoa_r+0xafa>
 8008228:	2300      	movs	r3, #0
 800822a:	220a      	movs	r2, #10
 800822c:	4648      	mov	r0, r9
 800822e:	9903      	ldr	r1, [sp, #12]
 8008230:	f000 f966 	bl	8008500 <__multadd>
 8008234:	9003      	str	r0, [sp, #12]
 8008236:	e7eb      	b.n	8008210 <_dtoa_r+0xb78>
 8008238:	080097d5 	.word	0x080097d5
 800823c:	08009759 	.word	0x08009759

08008240 <_free_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4605      	mov	r5, r0
 8008244:	2900      	cmp	r1, #0
 8008246:	d040      	beq.n	80082ca <_free_r+0x8a>
 8008248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800824c:	1f0c      	subs	r4, r1, #4
 800824e:	2b00      	cmp	r3, #0
 8008250:	bfb8      	it	lt
 8008252:	18e4      	addlt	r4, r4, r3
 8008254:	f000 f8e6 	bl	8008424 <__malloc_lock>
 8008258:	4a1c      	ldr	r2, [pc, #112]	@ (80082cc <_free_r+0x8c>)
 800825a:	6813      	ldr	r3, [r2, #0]
 800825c:	b933      	cbnz	r3, 800826c <_free_r+0x2c>
 800825e:	6063      	str	r3, [r4, #4]
 8008260:	6014      	str	r4, [r2, #0]
 8008262:	4628      	mov	r0, r5
 8008264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008268:	f000 b8e2 	b.w	8008430 <__malloc_unlock>
 800826c:	42a3      	cmp	r3, r4
 800826e:	d908      	bls.n	8008282 <_free_r+0x42>
 8008270:	6820      	ldr	r0, [r4, #0]
 8008272:	1821      	adds	r1, r4, r0
 8008274:	428b      	cmp	r3, r1
 8008276:	bf01      	itttt	eq
 8008278:	6819      	ldreq	r1, [r3, #0]
 800827a:	685b      	ldreq	r3, [r3, #4]
 800827c:	1809      	addeq	r1, r1, r0
 800827e:	6021      	streq	r1, [r4, #0]
 8008280:	e7ed      	b.n	800825e <_free_r+0x1e>
 8008282:	461a      	mov	r2, r3
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	b10b      	cbz	r3, 800828c <_free_r+0x4c>
 8008288:	42a3      	cmp	r3, r4
 800828a:	d9fa      	bls.n	8008282 <_free_r+0x42>
 800828c:	6811      	ldr	r1, [r2, #0]
 800828e:	1850      	adds	r0, r2, r1
 8008290:	42a0      	cmp	r0, r4
 8008292:	d10b      	bne.n	80082ac <_free_r+0x6c>
 8008294:	6820      	ldr	r0, [r4, #0]
 8008296:	4401      	add	r1, r0
 8008298:	1850      	adds	r0, r2, r1
 800829a:	4283      	cmp	r3, r0
 800829c:	6011      	str	r1, [r2, #0]
 800829e:	d1e0      	bne.n	8008262 <_free_r+0x22>
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	4408      	add	r0, r1
 80082a6:	6010      	str	r0, [r2, #0]
 80082a8:	6053      	str	r3, [r2, #4]
 80082aa:	e7da      	b.n	8008262 <_free_r+0x22>
 80082ac:	d902      	bls.n	80082b4 <_free_r+0x74>
 80082ae:	230c      	movs	r3, #12
 80082b0:	602b      	str	r3, [r5, #0]
 80082b2:	e7d6      	b.n	8008262 <_free_r+0x22>
 80082b4:	6820      	ldr	r0, [r4, #0]
 80082b6:	1821      	adds	r1, r4, r0
 80082b8:	428b      	cmp	r3, r1
 80082ba:	bf01      	itttt	eq
 80082bc:	6819      	ldreq	r1, [r3, #0]
 80082be:	685b      	ldreq	r3, [r3, #4]
 80082c0:	1809      	addeq	r1, r1, r0
 80082c2:	6021      	streq	r1, [r4, #0]
 80082c4:	6063      	str	r3, [r4, #4]
 80082c6:	6054      	str	r4, [r2, #4]
 80082c8:	e7cb      	b.n	8008262 <_free_r+0x22>
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	20004b14 	.word	0x20004b14

080082d0 <malloc>:
 80082d0:	4b02      	ldr	r3, [pc, #8]	@ (80082dc <malloc+0xc>)
 80082d2:	4601      	mov	r1, r0
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	f000 b825 	b.w	8008324 <_malloc_r>
 80082da:	bf00      	nop
 80082dc:	2000001c 	.word	0x2000001c

080082e0 <sbrk_aligned>:
 80082e0:	b570      	push	{r4, r5, r6, lr}
 80082e2:	4e0f      	ldr	r6, [pc, #60]	@ (8008320 <sbrk_aligned+0x40>)
 80082e4:	460c      	mov	r4, r1
 80082e6:	6831      	ldr	r1, [r6, #0]
 80082e8:	4605      	mov	r5, r0
 80082ea:	b911      	cbnz	r1, 80082f2 <sbrk_aligned+0x12>
 80082ec:	f000 fe3a 	bl	8008f64 <_sbrk_r>
 80082f0:	6030      	str	r0, [r6, #0]
 80082f2:	4621      	mov	r1, r4
 80082f4:	4628      	mov	r0, r5
 80082f6:	f000 fe35 	bl	8008f64 <_sbrk_r>
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	d103      	bne.n	8008306 <sbrk_aligned+0x26>
 80082fe:	f04f 34ff 	mov.w	r4, #4294967295
 8008302:	4620      	mov	r0, r4
 8008304:	bd70      	pop	{r4, r5, r6, pc}
 8008306:	1cc4      	adds	r4, r0, #3
 8008308:	f024 0403 	bic.w	r4, r4, #3
 800830c:	42a0      	cmp	r0, r4
 800830e:	d0f8      	beq.n	8008302 <sbrk_aligned+0x22>
 8008310:	1a21      	subs	r1, r4, r0
 8008312:	4628      	mov	r0, r5
 8008314:	f000 fe26 	bl	8008f64 <_sbrk_r>
 8008318:	3001      	adds	r0, #1
 800831a:	d1f2      	bne.n	8008302 <sbrk_aligned+0x22>
 800831c:	e7ef      	b.n	80082fe <sbrk_aligned+0x1e>
 800831e:	bf00      	nop
 8008320:	20004b10 	.word	0x20004b10

08008324 <_malloc_r>:
 8008324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008328:	1ccd      	adds	r5, r1, #3
 800832a:	f025 0503 	bic.w	r5, r5, #3
 800832e:	3508      	adds	r5, #8
 8008330:	2d0c      	cmp	r5, #12
 8008332:	bf38      	it	cc
 8008334:	250c      	movcc	r5, #12
 8008336:	2d00      	cmp	r5, #0
 8008338:	4606      	mov	r6, r0
 800833a:	db01      	blt.n	8008340 <_malloc_r+0x1c>
 800833c:	42a9      	cmp	r1, r5
 800833e:	d904      	bls.n	800834a <_malloc_r+0x26>
 8008340:	230c      	movs	r3, #12
 8008342:	6033      	str	r3, [r6, #0]
 8008344:	2000      	movs	r0, #0
 8008346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800834a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008420 <_malloc_r+0xfc>
 800834e:	f000 f869 	bl	8008424 <__malloc_lock>
 8008352:	f8d8 3000 	ldr.w	r3, [r8]
 8008356:	461c      	mov	r4, r3
 8008358:	bb44      	cbnz	r4, 80083ac <_malloc_r+0x88>
 800835a:	4629      	mov	r1, r5
 800835c:	4630      	mov	r0, r6
 800835e:	f7ff ffbf 	bl	80082e0 <sbrk_aligned>
 8008362:	1c43      	adds	r3, r0, #1
 8008364:	4604      	mov	r4, r0
 8008366:	d158      	bne.n	800841a <_malloc_r+0xf6>
 8008368:	f8d8 4000 	ldr.w	r4, [r8]
 800836c:	4627      	mov	r7, r4
 800836e:	2f00      	cmp	r7, #0
 8008370:	d143      	bne.n	80083fa <_malloc_r+0xd6>
 8008372:	2c00      	cmp	r4, #0
 8008374:	d04b      	beq.n	800840e <_malloc_r+0xea>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	4639      	mov	r1, r7
 800837a:	4630      	mov	r0, r6
 800837c:	eb04 0903 	add.w	r9, r4, r3
 8008380:	f000 fdf0 	bl	8008f64 <_sbrk_r>
 8008384:	4581      	cmp	r9, r0
 8008386:	d142      	bne.n	800840e <_malloc_r+0xea>
 8008388:	6821      	ldr	r1, [r4, #0]
 800838a:	4630      	mov	r0, r6
 800838c:	1a6d      	subs	r5, r5, r1
 800838e:	4629      	mov	r1, r5
 8008390:	f7ff ffa6 	bl	80082e0 <sbrk_aligned>
 8008394:	3001      	adds	r0, #1
 8008396:	d03a      	beq.n	800840e <_malloc_r+0xea>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	442b      	add	r3, r5
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	f8d8 3000 	ldr.w	r3, [r8]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	bb62      	cbnz	r2, 8008400 <_malloc_r+0xdc>
 80083a6:	f8c8 7000 	str.w	r7, [r8]
 80083aa:	e00f      	b.n	80083cc <_malloc_r+0xa8>
 80083ac:	6822      	ldr	r2, [r4, #0]
 80083ae:	1b52      	subs	r2, r2, r5
 80083b0:	d420      	bmi.n	80083f4 <_malloc_r+0xd0>
 80083b2:	2a0b      	cmp	r2, #11
 80083b4:	d917      	bls.n	80083e6 <_malloc_r+0xc2>
 80083b6:	1961      	adds	r1, r4, r5
 80083b8:	42a3      	cmp	r3, r4
 80083ba:	6025      	str	r5, [r4, #0]
 80083bc:	bf18      	it	ne
 80083be:	6059      	strne	r1, [r3, #4]
 80083c0:	6863      	ldr	r3, [r4, #4]
 80083c2:	bf08      	it	eq
 80083c4:	f8c8 1000 	streq.w	r1, [r8]
 80083c8:	5162      	str	r2, [r4, r5]
 80083ca:	604b      	str	r3, [r1, #4]
 80083cc:	4630      	mov	r0, r6
 80083ce:	f000 f82f 	bl	8008430 <__malloc_unlock>
 80083d2:	f104 000b 	add.w	r0, r4, #11
 80083d6:	1d23      	adds	r3, r4, #4
 80083d8:	f020 0007 	bic.w	r0, r0, #7
 80083dc:	1ac2      	subs	r2, r0, r3
 80083de:	bf1c      	itt	ne
 80083e0:	1a1b      	subne	r3, r3, r0
 80083e2:	50a3      	strne	r3, [r4, r2]
 80083e4:	e7af      	b.n	8008346 <_malloc_r+0x22>
 80083e6:	6862      	ldr	r2, [r4, #4]
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	bf0c      	ite	eq
 80083ec:	f8c8 2000 	streq.w	r2, [r8]
 80083f0:	605a      	strne	r2, [r3, #4]
 80083f2:	e7eb      	b.n	80083cc <_malloc_r+0xa8>
 80083f4:	4623      	mov	r3, r4
 80083f6:	6864      	ldr	r4, [r4, #4]
 80083f8:	e7ae      	b.n	8008358 <_malloc_r+0x34>
 80083fa:	463c      	mov	r4, r7
 80083fc:	687f      	ldr	r7, [r7, #4]
 80083fe:	e7b6      	b.n	800836e <_malloc_r+0x4a>
 8008400:	461a      	mov	r2, r3
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	42a3      	cmp	r3, r4
 8008406:	d1fb      	bne.n	8008400 <_malloc_r+0xdc>
 8008408:	2300      	movs	r3, #0
 800840a:	6053      	str	r3, [r2, #4]
 800840c:	e7de      	b.n	80083cc <_malloc_r+0xa8>
 800840e:	230c      	movs	r3, #12
 8008410:	4630      	mov	r0, r6
 8008412:	6033      	str	r3, [r6, #0]
 8008414:	f000 f80c 	bl	8008430 <__malloc_unlock>
 8008418:	e794      	b.n	8008344 <_malloc_r+0x20>
 800841a:	6005      	str	r5, [r0, #0]
 800841c:	e7d6      	b.n	80083cc <_malloc_r+0xa8>
 800841e:	bf00      	nop
 8008420:	20004b14 	.word	0x20004b14

08008424 <__malloc_lock>:
 8008424:	4801      	ldr	r0, [pc, #4]	@ (800842c <__malloc_lock+0x8>)
 8008426:	f7ff b890 	b.w	800754a <__retarget_lock_acquire_recursive>
 800842a:	bf00      	nop
 800842c:	20004b0c 	.word	0x20004b0c

08008430 <__malloc_unlock>:
 8008430:	4801      	ldr	r0, [pc, #4]	@ (8008438 <__malloc_unlock+0x8>)
 8008432:	f7ff b88b 	b.w	800754c <__retarget_lock_release_recursive>
 8008436:	bf00      	nop
 8008438:	20004b0c 	.word	0x20004b0c

0800843c <_Balloc>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	69c6      	ldr	r6, [r0, #28]
 8008440:	4604      	mov	r4, r0
 8008442:	460d      	mov	r5, r1
 8008444:	b976      	cbnz	r6, 8008464 <_Balloc+0x28>
 8008446:	2010      	movs	r0, #16
 8008448:	f7ff ff42 	bl	80082d0 <malloc>
 800844c:	4602      	mov	r2, r0
 800844e:	61e0      	str	r0, [r4, #28]
 8008450:	b920      	cbnz	r0, 800845c <_Balloc+0x20>
 8008452:	216b      	movs	r1, #107	@ 0x6b
 8008454:	4b17      	ldr	r3, [pc, #92]	@ (80084b4 <_Balloc+0x78>)
 8008456:	4818      	ldr	r0, [pc, #96]	@ (80084b8 <_Balloc+0x7c>)
 8008458:	f000 fd94 	bl	8008f84 <__assert_func>
 800845c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008460:	6006      	str	r6, [r0, #0]
 8008462:	60c6      	str	r6, [r0, #12]
 8008464:	69e6      	ldr	r6, [r4, #28]
 8008466:	68f3      	ldr	r3, [r6, #12]
 8008468:	b183      	cbz	r3, 800848c <_Balloc+0x50>
 800846a:	69e3      	ldr	r3, [r4, #28]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008472:	b9b8      	cbnz	r0, 80084a4 <_Balloc+0x68>
 8008474:	2101      	movs	r1, #1
 8008476:	fa01 f605 	lsl.w	r6, r1, r5
 800847a:	1d72      	adds	r2, r6, #5
 800847c:	4620      	mov	r0, r4
 800847e:	0092      	lsls	r2, r2, #2
 8008480:	f000 fd9e 	bl	8008fc0 <_calloc_r>
 8008484:	b160      	cbz	r0, 80084a0 <_Balloc+0x64>
 8008486:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800848a:	e00e      	b.n	80084aa <_Balloc+0x6e>
 800848c:	2221      	movs	r2, #33	@ 0x21
 800848e:	2104      	movs	r1, #4
 8008490:	4620      	mov	r0, r4
 8008492:	f000 fd95 	bl	8008fc0 <_calloc_r>
 8008496:	69e3      	ldr	r3, [r4, #28]
 8008498:	60f0      	str	r0, [r6, #12]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1e4      	bne.n	800846a <_Balloc+0x2e>
 80084a0:	2000      	movs	r0, #0
 80084a2:	bd70      	pop	{r4, r5, r6, pc}
 80084a4:	6802      	ldr	r2, [r0, #0]
 80084a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084aa:	2300      	movs	r3, #0
 80084ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084b0:	e7f7      	b.n	80084a2 <_Balloc+0x66>
 80084b2:	bf00      	nop
 80084b4:	08009766 	.word	0x08009766
 80084b8:	080097e6 	.word	0x080097e6

080084bc <_Bfree>:
 80084bc:	b570      	push	{r4, r5, r6, lr}
 80084be:	69c6      	ldr	r6, [r0, #28]
 80084c0:	4605      	mov	r5, r0
 80084c2:	460c      	mov	r4, r1
 80084c4:	b976      	cbnz	r6, 80084e4 <_Bfree+0x28>
 80084c6:	2010      	movs	r0, #16
 80084c8:	f7ff ff02 	bl	80082d0 <malloc>
 80084cc:	4602      	mov	r2, r0
 80084ce:	61e8      	str	r0, [r5, #28]
 80084d0:	b920      	cbnz	r0, 80084dc <_Bfree+0x20>
 80084d2:	218f      	movs	r1, #143	@ 0x8f
 80084d4:	4b08      	ldr	r3, [pc, #32]	@ (80084f8 <_Bfree+0x3c>)
 80084d6:	4809      	ldr	r0, [pc, #36]	@ (80084fc <_Bfree+0x40>)
 80084d8:	f000 fd54 	bl	8008f84 <__assert_func>
 80084dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084e0:	6006      	str	r6, [r0, #0]
 80084e2:	60c6      	str	r6, [r0, #12]
 80084e4:	b13c      	cbz	r4, 80084f6 <_Bfree+0x3a>
 80084e6:	69eb      	ldr	r3, [r5, #28]
 80084e8:	6862      	ldr	r2, [r4, #4]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084f0:	6021      	str	r1, [r4, #0]
 80084f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084f6:	bd70      	pop	{r4, r5, r6, pc}
 80084f8:	08009766 	.word	0x08009766
 80084fc:	080097e6 	.word	0x080097e6

08008500 <__multadd>:
 8008500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008504:	4607      	mov	r7, r0
 8008506:	460c      	mov	r4, r1
 8008508:	461e      	mov	r6, r3
 800850a:	2000      	movs	r0, #0
 800850c:	690d      	ldr	r5, [r1, #16]
 800850e:	f101 0c14 	add.w	ip, r1, #20
 8008512:	f8dc 3000 	ldr.w	r3, [ip]
 8008516:	3001      	adds	r0, #1
 8008518:	b299      	uxth	r1, r3
 800851a:	fb02 6101 	mla	r1, r2, r1, r6
 800851e:	0c1e      	lsrs	r6, r3, #16
 8008520:	0c0b      	lsrs	r3, r1, #16
 8008522:	fb02 3306 	mla	r3, r2, r6, r3
 8008526:	b289      	uxth	r1, r1
 8008528:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800852c:	4285      	cmp	r5, r0
 800852e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008532:	f84c 1b04 	str.w	r1, [ip], #4
 8008536:	dcec      	bgt.n	8008512 <__multadd+0x12>
 8008538:	b30e      	cbz	r6, 800857e <__multadd+0x7e>
 800853a:	68a3      	ldr	r3, [r4, #8]
 800853c:	42ab      	cmp	r3, r5
 800853e:	dc19      	bgt.n	8008574 <__multadd+0x74>
 8008540:	6861      	ldr	r1, [r4, #4]
 8008542:	4638      	mov	r0, r7
 8008544:	3101      	adds	r1, #1
 8008546:	f7ff ff79 	bl	800843c <_Balloc>
 800854a:	4680      	mov	r8, r0
 800854c:	b928      	cbnz	r0, 800855a <__multadd+0x5a>
 800854e:	4602      	mov	r2, r0
 8008550:	21ba      	movs	r1, #186	@ 0xba
 8008552:	4b0c      	ldr	r3, [pc, #48]	@ (8008584 <__multadd+0x84>)
 8008554:	480c      	ldr	r0, [pc, #48]	@ (8008588 <__multadd+0x88>)
 8008556:	f000 fd15 	bl	8008f84 <__assert_func>
 800855a:	6922      	ldr	r2, [r4, #16]
 800855c:	f104 010c 	add.w	r1, r4, #12
 8008560:	3202      	adds	r2, #2
 8008562:	0092      	lsls	r2, r2, #2
 8008564:	300c      	adds	r0, #12
 8008566:	f7ff f800 	bl	800756a <memcpy>
 800856a:	4621      	mov	r1, r4
 800856c:	4638      	mov	r0, r7
 800856e:	f7ff ffa5 	bl	80084bc <_Bfree>
 8008572:	4644      	mov	r4, r8
 8008574:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008578:	3501      	adds	r5, #1
 800857a:	615e      	str	r6, [r3, #20]
 800857c:	6125      	str	r5, [r4, #16]
 800857e:	4620      	mov	r0, r4
 8008580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008584:	080097d5 	.word	0x080097d5
 8008588:	080097e6 	.word	0x080097e6

0800858c <__hi0bits>:
 800858c:	4603      	mov	r3, r0
 800858e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008592:	bf3a      	itte	cc
 8008594:	0403      	lslcc	r3, r0, #16
 8008596:	2010      	movcc	r0, #16
 8008598:	2000      	movcs	r0, #0
 800859a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800859e:	bf3c      	itt	cc
 80085a0:	021b      	lslcc	r3, r3, #8
 80085a2:	3008      	addcc	r0, #8
 80085a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085a8:	bf3c      	itt	cc
 80085aa:	011b      	lslcc	r3, r3, #4
 80085ac:	3004      	addcc	r0, #4
 80085ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085b2:	bf3c      	itt	cc
 80085b4:	009b      	lslcc	r3, r3, #2
 80085b6:	3002      	addcc	r0, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	db05      	blt.n	80085c8 <__hi0bits+0x3c>
 80085bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80085c0:	f100 0001 	add.w	r0, r0, #1
 80085c4:	bf08      	it	eq
 80085c6:	2020      	moveq	r0, #32
 80085c8:	4770      	bx	lr

080085ca <__lo0bits>:
 80085ca:	6803      	ldr	r3, [r0, #0]
 80085cc:	4602      	mov	r2, r0
 80085ce:	f013 0007 	ands.w	r0, r3, #7
 80085d2:	d00b      	beq.n	80085ec <__lo0bits+0x22>
 80085d4:	07d9      	lsls	r1, r3, #31
 80085d6:	d421      	bmi.n	800861c <__lo0bits+0x52>
 80085d8:	0798      	lsls	r0, r3, #30
 80085da:	bf49      	itett	mi
 80085dc:	085b      	lsrmi	r3, r3, #1
 80085de:	089b      	lsrpl	r3, r3, #2
 80085e0:	2001      	movmi	r0, #1
 80085e2:	6013      	strmi	r3, [r2, #0]
 80085e4:	bf5c      	itt	pl
 80085e6:	2002      	movpl	r0, #2
 80085e8:	6013      	strpl	r3, [r2, #0]
 80085ea:	4770      	bx	lr
 80085ec:	b299      	uxth	r1, r3
 80085ee:	b909      	cbnz	r1, 80085f4 <__lo0bits+0x2a>
 80085f0:	2010      	movs	r0, #16
 80085f2:	0c1b      	lsrs	r3, r3, #16
 80085f4:	b2d9      	uxtb	r1, r3
 80085f6:	b909      	cbnz	r1, 80085fc <__lo0bits+0x32>
 80085f8:	3008      	adds	r0, #8
 80085fa:	0a1b      	lsrs	r3, r3, #8
 80085fc:	0719      	lsls	r1, r3, #28
 80085fe:	bf04      	itt	eq
 8008600:	091b      	lsreq	r3, r3, #4
 8008602:	3004      	addeq	r0, #4
 8008604:	0799      	lsls	r1, r3, #30
 8008606:	bf04      	itt	eq
 8008608:	089b      	lsreq	r3, r3, #2
 800860a:	3002      	addeq	r0, #2
 800860c:	07d9      	lsls	r1, r3, #31
 800860e:	d403      	bmi.n	8008618 <__lo0bits+0x4e>
 8008610:	085b      	lsrs	r3, r3, #1
 8008612:	f100 0001 	add.w	r0, r0, #1
 8008616:	d003      	beq.n	8008620 <__lo0bits+0x56>
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	4770      	bx	lr
 800861c:	2000      	movs	r0, #0
 800861e:	4770      	bx	lr
 8008620:	2020      	movs	r0, #32
 8008622:	4770      	bx	lr

08008624 <__i2b>:
 8008624:	b510      	push	{r4, lr}
 8008626:	460c      	mov	r4, r1
 8008628:	2101      	movs	r1, #1
 800862a:	f7ff ff07 	bl	800843c <_Balloc>
 800862e:	4602      	mov	r2, r0
 8008630:	b928      	cbnz	r0, 800863e <__i2b+0x1a>
 8008632:	f240 1145 	movw	r1, #325	@ 0x145
 8008636:	4b04      	ldr	r3, [pc, #16]	@ (8008648 <__i2b+0x24>)
 8008638:	4804      	ldr	r0, [pc, #16]	@ (800864c <__i2b+0x28>)
 800863a:	f000 fca3 	bl	8008f84 <__assert_func>
 800863e:	2301      	movs	r3, #1
 8008640:	6144      	str	r4, [r0, #20]
 8008642:	6103      	str	r3, [r0, #16]
 8008644:	bd10      	pop	{r4, pc}
 8008646:	bf00      	nop
 8008648:	080097d5 	.word	0x080097d5
 800864c:	080097e6 	.word	0x080097e6

08008650 <__multiply>:
 8008650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008654:	4617      	mov	r7, r2
 8008656:	690a      	ldr	r2, [r1, #16]
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	4689      	mov	r9, r1
 800865c:	429a      	cmp	r2, r3
 800865e:	bfa2      	ittt	ge
 8008660:	463b      	movge	r3, r7
 8008662:	460f      	movge	r7, r1
 8008664:	4699      	movge	r9, r3
 8008666:	693d      	ldr	r5, [r7, #16]
 8008668:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	eb05 060a 	add.w	r6, r5, sl
 8008674:	42b3      	cmp	r3, r6
 8008676:	b085      	sub	sp, #20
 8008678:	bfb8      	it	lt
 800867a:	3101      	addlt	r1, #1
 800867c:	f7ff fede 	bl	800843c <_Balloc>
 8008680:	b930      	cbnz	r0, 8008690 <__multiply+0x40>
 8008682:	4602      	mov	r2, r0
 8008684:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008688:	4b40      	ldr	r3, [pc, #256]	@ (800878c <__multiply+0x13c>)
 800868a:	4841      	ldr	r0, [pc, #260]	@ (8008790 <__multiply+0x140>)
 800868c:	f000 fc7a 	bl	8008f84 <__assert_func>
 8008690:	f100 0414 	add.w	r4, r0, #20
 8008694:	4623      	mov	r3, r4
 8008696:	2200      	movs	r2, #0
 8008698:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800869c:	4573      	cmp	r3, lr
 800869e:	d320      	bcc.n	80086e2 <__multiply+0x92>
 80086a0:	f107 0814 	add.w	r8, r7, #20
 80086a4:	f109 0114 	add.w	r1, r9, #20
 80086a8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80086ac:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80086b0:	9302      	str	r3, [sp, #8]
 80086b2:	1beb      	subs	r3, r5, r7
 80086b4:	3b15      	subs	r3, #21
 80086b6:	f023 0303 	bic.w	r3, r3, #3
 80086ba:	3304      	adds	r3, #4
 80086bc:	3715      	adds	r7, #21
 80086be:	42bd      	cmp	r5, r7
 80086c0:	bf38      	it	cc
 80086c2:	2304      	movcc	r3, #4
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	9b02      	ldr	r3, [sp, #8]
 80086c8:	9103      	str	r1, [sp, #12]
 80086ca:	428b      	cmp	r3, r1
 80086cc:	d80c      	bhi.n	80086e8 <__multiply+0x98>
 80086ce:	2e00      	cmp	r6, #0
 80086d0:	dd03      	ble.n	80086da <__multiply+0x8a>
 80086d2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d055      	beq.n	8008786 <__multiply+0x136>
 80086da:	6106      	str	r6, [r0, #16]
 80086dc:	b005      	add	sp, #20
 80086de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e2:	f843 2b04 	str.w	r2, [r3], #4
 80086e6:	e7d9      	b.n	800869c <__multiply+0x4c>
 80086e8:	f8b1 a000 	ldrh.w	sl, [r1]
 80086ec:	f1ba 0f00 	cmp.w	sl, #0
 80086f0:	d01f      	beq.n	8008732 <__multiply+0xe2>
 80086f2:	46c4      	mov	ip, r8
 80086f4:	46a1      	mov	r9, r4
 80086f6:	2700      	movs	r7, #0
 80086f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086fc:	f8d9 3000 	ldr.w	r3, [r9]
 8008700:	fa1f fb82 	uxth.w	fp, r2
 8008704:	b29b      	uxth	r3, r3
 8008706:	fb0a 330b 	mla	r3, sl, fp, r3
 800870a:	443b      	add	r3, r7
 800870c:	f8d9 7000 	ldr.w	r7, [r9]
 8008710:	0c12      	lsrs	r2, r2, #16
 8008712:	0c3f      	lsrs	r7, r7, #16
 8008714:	fb0a 7202 	mla	r2, sl, r2, r7
 8008718:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800871c:	b29b      	uxth	r3, r3
 800871e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008722:	4565      	cmp	r5, ip
 8008724:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008728:	f849 3b04 	str.w	r3, [r9], #4
 800872c:	d8e4      	bhi.n	80086f8 <__multiply+0xa8>
 800872e:	9b01      	ldr	r3, [sp, #4]
 8008730:	50e7      	str	r7, [r4, r3]
 8008732:	9b03      	ldr	r3, [sp, #12]
 8008734:	3104      	adds	r1, #4
 8008736:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800873a:	f1b9 0f00 	cmp.w	r9, #0
 800873e:	d020      	beq.n	8008782 <__multiply+0x132>
 8008740:	4647      	mov	r7, r8
 8008742:	46a4      	mov	ip, r4
 8008744:	f04f 0a00 	mov.w	sl, #0
 8008748:	6823      	ldr	r3, [r4, #0]
 800874a:	f8b7 b000 	ldrh.w	fp, [r7]
 800874e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008752:	b29b      	uxth	r3, r3
 8008754:	fb09 220b 	mla	r2, r9, fp, r2
 8008758:	4452      	add	r2, sl
 800875a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800875e:	f84c 3b04 	str.w	r3, [ip], #4
 8008762:	f857 3b04 	ldr.w	r3, [r7], #4
 8008766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800876a:	f8bc 3000 	ldrh.w	r3, [ip]
 800876e:	42bd      	cmp	r5, r7
 8008770:	fb09 330a 	mla	r3, r9, sl, r3
 8008774:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008778:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800877c:	d8e5      	bhi.n	800874a <__multiply+0xfa>
 800877e:	9a01      	ldr	r2, [sp, #4]
 8008780:	50a3      	str	r3, [r4, r2]
 8008782:	3404      	adds	r4, #4
 8008784:	e79f      	b.n	80086c6 <__multiply+0x76>
 8008786:	3e01      	subs	r6, #1
 8008788:	e7a1      	b.n	80086ce <__multiply+0x7e>
 800878a:	bf00      	nop
 800878c:	080097d5 	.word	0x080097d5
 8008790:	080097e6 	.word	0x080097e6

08008794 <__pow5mult>:
 8008794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008798:	4615      	mov	r5, r2
 800879a:	f012 0203 	ands.w	r2, r2, #3
 800879e:	4607      	mov	r7, r0
 80087a0:	460e      	mov	r6, r1
 80087a2:	d007      	beq.n	80087b4 <__pow5mult+0x20>
 80087a4:	4c25      	ldr	r4, [pc, #148]	@ (800883c <__pow5mult+0xa8>)
 80087a6:	3a01      	subs	r2, #1
 80087a8:	2300      	movs	r3, #0
 80087aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087ae:	f7ff fea7 	bl	8008500 <__multadd>
 80087b2:	4606      	mov	r6, r0
 80087b4:	10ad      	asrs	r5, r5, #2
 80087b6:	d03d      	beq.n	8008834 <__pow5mult+0xa0>
 80087b8:	69fc      	ldr	r4, [r7, #28]
 80087ba:	b97c      	cbnz	r4, 80087dc <__pow5mult+0x48>
 80087bc:	2010      	movs	r0, #16
 80087be:	f7ff fd87 	bl	80082d0 <malloc>
 80087c2:	4602      	mov	r2, r0
 80087c4:	61f8      	str	r0, [r7, #28]
 80087c6:	b928      	cbnz	r0, 80087d4 <__pow5mult+0x40>
 80087c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80087cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008840 <__pow5mult+0xac>)
 80087ce:	481d      	ldr	r0, [pc, #116]	@ (8008844 <__pow5mult+0xb0>)
 80087d0:	f000 fbd8 	bl	8008f84 <__assert_func>
 80087d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087d8:	6004      	str	r4, [r0, #0]
 80087da:	60c4      	str	r4, [r0, #12]
 80087dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80087e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087e4:	b94c      	cbnz	r4, 80087fa <__pow5mult+0x66>
 80087e6:	f240 2171 	movw	r1, #625	@ 0x271
 80087ea:	4638      	mov	r0, r7
 80087ec:	f7ff ff1a 	bl	8008624 <__i2b>
 80087f0:	2300      	movs	r3, #0
 80087f2:	4604      	mov	r4, r0
 80087f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80087f8:	6003      	str	r3, [r0, #0]
 80087fa:	f04f 0900 	mov.w	r9, #0
 80087fe:	07eb      	lsls	r3, r5, #31
 8008800:	d50a      	bpl.n	8008818 <__pow5mult+0x84>
 8008802:	4631      	mov	r1, r6
 8008804:	4622      	mov	r2, r4
 8008806:	4638      	mov	r0, r7
 8008808:	f7ff ff22 	bl	8008650 <__multiply>
 800880c:	4680      	mov	r8, r0
 800880e:	4631      	mov	r1, r6
 8008810:	4638      	mov	r0, r7
 8008812:	f7ff fe53 	bl	80084bc <_Bfree>
 8008816:	4646      	mov	r6, r8
 8008818:	106d      	asrs	r5, r5, #1
 800881a:	d00b      	beq.n	8008834 <__pow5mult+0xa0>
 800881c:	6820      	ldr	r0, [r4, #0]
 800881e:	b938      	cbnz	r0, 8008830 <__pow5mult+0x9c>
 8008820:	4622      	mov	r2, r4
 8008822:	4621      	mov	r1, r4
 8008824:	4638      	mov	r0, r7
 8008826:	f7ff ff13 	bl	8008650 <__multiply>
 800882a:	6020      	str	r0, [r4, #0]
 800882c:	f8c0 9000 	str.w	r9, [r0]
 8008830:	4604      	mov	r4, r0
 8008832:	e7e4      	b.n	80087fe <__pow5mult+0x6a>
 8008834:	4630      	mov	r0, r6
 8008836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883a:	bf00      	nop
 800883c:	08009948 	.word	0x08009948
 8008840:	08009766 	.word	0x08009766
 8008844:	080097e6 	.word	0x080097e6

08008848 <__lshift>:
 8008848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800884c:	460c      	mov	r4, r1
 800884e:	4607      	mov	r7, r0
 8008850:	4691      	mov	r9, r2
 8008852:	6923      	ldr	r3, [r4, #16]
 8008854:	6849      	ldr	r1, [r1, #4]
 8008856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800885a:	68a3      	ldr	r3, [r4, #8]
 800885c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008860:	f108 0601 	add.w	r6, r8, #1
 8008864:	42b3      	cmp	r3, r6
 8008866:	db0b      	blt.n	8008880 <__lshift+0x38>
 8008868:	4638      	mov	r0, r7
 800886a:	f7ff fde7 	bl	800843c <_Balloc>
 800886e:	4605      	mov	r5, r0
 8008870:	b948      	cbnz	r0, 8008886 <__lshift+0x3e>
 8008872:	4602      	mov	r2, r0
 8008874:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008878:	4b27      	ldr	r3, [pc, #156]	@ (8008918 <__lshift+0xd0>)
 800887a:	4828      	ldr	r0, [pc, #160]	@ (800891c <__lshift+0xd4>)
 800887c:	f000 fb82 	bl	8008f84 <__assert_func>
 8008880:	3101      	adds	r1, #1
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	e7ee      	b.n	8008864 <__lshift+0x1c>
 8008886:	2300      	movs	r3, #0
 8008888:	f100 0114 	add.w	r1, r0, #20
 800888c:	f100 0210 	add.w	r2, r0, #16
 8008890:	4618      	mov	r0, r3
 8008892:	4553      	cmp	r3, sl
 8008894:	db33      	blt.n	80088fe <__lshift+0xb6>
 8008896:	6920      	ldr	r0, [r4, #16]
 8008898:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800889c:	f104 0314 	add.w	r3, r4, #20
 80088a0:	f019 091f 	ands.w	r9, r9, #31
 80088a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088ac:	d02b      	beq.n	8008906 <__lshift+0xbe>
 80088ae:	468a      	mov	sl, r1
 80088b0:	2200      	movs	r2, #0
 80088b2:	f1c9 0e20 	rsb	lr, r9, #32
 80088b6:	6818      	ldr	r0, [r3, #0]
 80088b8:	fa00 f009 	lsl.w	r0, r0, r9
 80088bc:	4310      	orrs	r0, r2
 80088be:	f84a 0b04 	str.w	r0, [sl], #4
 80088c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088c6:	459c      	cmp	ip, r3
 80088c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80088cc:	d8f3      	bhi.n	80088b6 <__lshift+0x6e>
 80088ce:	ebac 0304 	sub.w	r3, ip, r4
 80088d2:	3b15      	subs	r3, #21
 80088d4:	f023 0303 	bic.w	r3, r3, #3
 80088d8:	3304      	adds	r3, #4
 80088da:	f104 0015 	add.w	r0, r4, #21
 80088de:	4560      	cmp	r0, ip
 80088e0:	bf88      	it	hi
 80088e2:	2304      	movhi	r3, #4
 80088e4:	50ca      	str	r2, [r1, r3]
 80088e6:	b10a      	cbz	r2, 80088ec <__lshift+0xa4>
 80088e8:	f108 0602 	add.w	r6, r8, #2
 80088ec:	3e01      	subs	r6, #1
 80088ee:	4638      	mov	r0, r7
 80088f0:	4621      	mov	r1, r4
 80088f2:	612e      	str	r6, [r5, #16]
 80088f4:	f7ff fde2 	bl	80084bc <_Bfree>
 80088f8:	4628      	mov	r0, r5
 80088fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008902:	3301      	adds	r3, #1
 8008904:	e7c5      	b.n	8008892 <__lshift+0x4a>
 8008906:	3904      	subs	r1, #4
 8008908:	f853 2b04 	ldr.w	r2, [r3], #4
 800890c:	459c      	cmp	ip, r3
 800890e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008912:	d8f9      	bhi.n	8008908 <__lshift+0xc0>
 8008914:	e7ea      	b.n	80088ec <__lshift+0xa4>
 8008916:	bf00      	nop
 8008918:	080097d5 	.word	0x080097d5
 800891c:	080097e6 	.word	0x080097e6

08008920 <__mcmp>:
 8008920:	4603      	mov	r3, r0
 8008922:	690a      	ldr	r2, [r1, #16]
 8008924:	6900      	ldr	r0, [r0, #16]
 8008926:	b530      	push	{r4, r5, lr}
 8008928:	1a80      	subs	r0, r0, r2
 800892a:	d10e      	bne.n	800894a <__mcmp+0x2a>
 800892c:	3314      	adds	r3, #20
 800892e:	3114      	adds	r1, #20
 8008930:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008934:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008938:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800893c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008940:	4295      	cmp	r5, r2
 8008942:	d003      	beq.n	800894c <__mcmp+0x2c>
 8008944:	d205      	bcs.n	8008952 <__mcmp+0x32>
 8008946:	f04f 30ff 	mov.w	r0, #4294967295
 800894a:	bd30      	pop	{r4, r5, pc}
 800894c:	42a3      	cmp	r3, r4
 800894e:	d3f3      	bcc.n	8008938 <__mcmp+0x18>
 8008950:	e7fb      	b.n	800894a <__mcmp+0x2a>
 8008952:	2001      	movs	r0, #1
 8008954:	e7f9      	b.n	800894a <__mcmp+0x2a>
	...

08008958 <__mdiff>:
 8008958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	4689      	mov	r9, r1
 800895e:	4606      	mov	r6, r0
 8008960:	4611      	mov	r1, r2
 8008962:	4648      	mov	r0, r9
 8008964:	4614      	mov	r4, r2
 8008966:	f7ff ffdb 	bl	8008920 <__mcmp>
 800896a:	1e05      	subs	r5, r0, #0
 800896c:	d112      	bne.n	8008994 <__mdiff+0x3c>
 800896e:	4629      	mov	r1, r5
 8008970:	4630      	mov	r0, r6
 8008972:	f7ff fd63 	bl	800843c <_Balloc>
 8008976:	4602      	mov	r2, r0
 8008978:	b928      	cbnz	r0, 8008986 <__mdiff+0x2e>
 800897a:	f240 2137 	movw	r1, #567	@ 0x237
 800897e:	4b3e      	ldr	r3, [pc, #248]	@ (8008a78 <__mdiff+0x120>)
 8008980:	483e      	ldr	r0, [pc, #248]	@ (8008a7c <__mdiff+0x124>)
 8008982:	f000 faff 	bl	8008f84 <__assert_func>
 8008986:	2301      	movs	r3, #1
 8008988:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800898c:	4610      	mov	r0, r2
 800898e:	b003      	add	sp, #12
 8008990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008994:	bfbc      	itt	lt
 8008996:	464b      	movlt	r3, r9
 8008998:	46a1      	movlt	r9, r4
 800899a:	4630      	mov	r0, r6
 800899c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80089a0:	bfba      	itte	lt
 80089a2:	461c      	movlt	r4, r3
 80089a4:	2501      	movlt	r5, #1
 80089a6:	2500      	movge	r5, #0
 80089a8:	f7ff fd48 	bl	800843c <_Balloc>
 80089ac:	4602      	mov	r2, r0
 80089ae:	b918      	cbnz	r0, 80089b8 <__mdiff+0x60>
 80089b0:	f240 2145 	movw	r1, #581	@ 0x245
 80089b4:	4b30      	ldr	r3, [pc, #192]	@ (8008a78 <__mdiff+0x120>)
 80089b6:	e7e3      	b.n	8008980 <__mdiff+0x28>
 80089b8:	f100 0b14 	add.w	fp, r0, #20
 80089bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80089c0:	f109 0310 	add.w	r3, r9, #16
 80089c4:	60c5      	str	r5, [r0, #12]
 80089c6:	f04f 0c00 	mov.w	ip, #0
 80089ca:	f109 0514 	add.w	r5, r9, #20
 80089ce:	46d9      	mov	r9, fp
 80089d0:	6926      	ldr	r6, [r4, #16]
 80089d2:	f104 0e14 	add.w	lr, r4, #20
 80089d6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80089da:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	9b01      	ldr	r3, [sp, #4]
 80089e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80089e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80089ea:	b281      	uxth	r1, r0
 80089ec:	9301      	str	r3, [sp, #4]
 80089ee:	fa1f f38a 	uxth.w	r3, sl
 80089f2:	1a5b      	subs	r3, r3, r1
 80089f4:	0c00      	lsrs	r0, r0, #16
 80089f6:	4463      	add	r3, ip
 80089f8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80089fc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a06:	4576      	cmp	r6, lr
 8008a08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a0c:	f849 3b04 	str.w	r3, [r9], #4
 8008a10:	d8e6      	bhi.n	80089e0 <__mdiff+0x88>
 8008a12:	1b33      	subs	r3, r6, r4
 8008a14:	3b15      	subs	r3, #21
 8008a16:	f023 0303 	bic.w	r3, r3, #3
 8008a1a:	3415      	adds	r4, #21
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	42a6      	cmp	r6, r4
 8008a20:	bf38      	it	cc
 8008a22:	2304      	movcc	r3, #4
 8008a24:	441d      	add	r5, r3
 8008a26:	445b      	add	r3, fp
 8008a28:	461e      	mov	r6, r3
 8008a2a:	462c      	mov	r4, r5
 8008a2c:	4544      	cmp	r4, r8
 8008a2e:	d30e      	bcc.n	8008a4e <__mdiff+0xf6>
 8008a30:	f108 0103 	add.w	r1, r8, #3
 8008a34:	1b49      	subs	r1, r1, r5
 8008a36:	f021 0103 	bic.w	r1, r1, #3
 8008a3a:	3d03      	subs	r5, #3
 8008a3c:	45a8      	cmp	r8, r5
 8008a3e:	bf38      	it	cc
 8008a40:	2100      	movcc	r1, #0
 8008a42:	440b      	add	r3, r1
 8008a44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a48:	b199      	cbz	r1, 8008a72 <__mdiff+0x11a>
 8008a4a:	6117      	str	r7, [r2, #16]
 8008a4c:	e79e      	b.n	800898c <__mdiff+0x34>
 8008a4e:	46e6      	mov	lr, ip
 8008a50:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a54:	fa1f fc81 	uxth.w	ip, r1
 8008a58:	44f4      	add	ip, lr
 8008a5a:	0c08      	lsrs	r0, r1, #16
 8008a5c:	4471      	add	r1, lr
 8008a5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a62:	b289      	uxth	r1, r1
 8008a64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a6c:	f846 1b04 	str.w	r1, [r6], #4
 8008a70:	e7dc      	b.n	8008a2c <__mdiff+0xd4>
 8008a72:	3f01      	subs	r7, #1
 8008a74:	e7e6      	b.n	8008a44 <__mdiff+0xec>
 8008a76:	bf00      	nop
 8008a78:	080097d5 	.word	0x080097d5
 8008a7c:	080097e6 	.word	0x080097e6

08008a80 <__d2b>:
 8008a80:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008a84:	2101      	movs	r1, #1
 8008a86:	4690      	mov	r8, r2
 8008a88:	4699      	mov	r9, r3
 8008a8a:	9e08      	ldr	r6, [sp, #32]
 8008a8c:	f7ff fcd6 	bl	800843c <_Balloc>
 8008a90:	4604      	mov	r4, r0
 8008a92:	b930      	cbnz	r0, 8008aa2 <__d2b+0x22>
 8008a94:	4602      	mov	r2, r0
 8008a96:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a9a:	4b23      	ldr	r3, [pc, #140]	@ (8008b28 <__d2b+0xa8>)
 8008a9c:	4823      	ldr	r0, [pc, #140]	@ (8008b2c <__d2b+0xac>)
 8008a9e:	f000 fa71 	bl	8008f84 <__assert_func>
 8008aa2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008aa6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008aaa:	b10d      	cbz	r5, 8008ab0 <__d2b+0x30>
 8008aac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	f1b8 0300 	subs.w	r3, r8, #0
 8008ab6:	d024      	beq.n	8008b02 <__d2b+0x82>
 8008ab8:	4668      	mov	r0, sp
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	f7ff fd85 	bl	80085ca <__lo0bits>
 8008ac0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ac4:	b1d8      	cbz	r0, 8008afe <__d2b+0x7e>
 8008ac6:	f1c0 0320 	rsb	r3, r0, #32
 8008aca:	fa02 f303 	lsl.w	r3, r2, r3
 8008ace:	430b      	orrs	r3, r1
 8008ad0:	40c2      	lsrs	r2, r0
 8008ad2:	6163      	str	r3, [r4, #20]
 8008ad4:	9201      	str	r2, [sp, #4]
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	bf0c      	ite	eq
 8008adc:	2201      	moveq	r2, #1
 8008ade:	2202      	movne	r2, #2
 8008ae0:	61a3      	str	r3, [r4, #24]
 8008ae2:	6122      	str	r2, [r4, #16]
 8008ae4:	b1ad      	cbz	r5, 8008b12 <__d2b+0x92>
 8008ae6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008aea:	4405      	add	r5, r0
 8008aec:	6035      	str	r5, [r6, #0]
 8008aee:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af4:	6018      	str	r0, [r3, #0]
 8008af6:	4620      	mov	r0, r4
 8008af8:	b002      	add	sp, #8
 8008afa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008afe:	6161      	str	r1, [r4, #20]
 8008b00:	e7e9      	b.n	8008ad6 <__d2b+0x56>
 8008b02:	a801      	add	r0, sp, #4
 8008b04:	f7ff fd61 	bl	80085ca <__lo0bits>
 8008b08:	9b01      	ldr	r3, [sp, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	6163      	str	r3, [r4, #20]
 8008b0e:	3020      	adds	r0, #32
 8008b10:	e7e7      	b.n	8008ae2 <__d2b+0x62>
 8008b12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008b16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b1a:	6030      	str	r0, [r6, #0]
 8008b1c:	6918      	ldr	r0, [r3, #16]
 8008b1e:	f7ff fd35 	bl	800858c <__hi0bits>
 8008b22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b26:	e7e4      	b.n	8008af2 <__d2b+0x72>
 8008b28:	080097d5 	.word	0x080097d5
 8008b2c:	080097e6 	.word	0x080097e6

08008b30 <__ssputs_r>:
 8008b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b34:	461f      	mov	r7, r3
 8008b36:	688e      	ldr	r6, [r1, #8]
 8008b38:	4682      	mov	sl, r0
 8008b3a:	42be      	cmp	r6, r7
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	4690      	mov	r8, r2
 8008b40:	680b      	ldr	r3, [r1, #0]
 8008b42:	d82d      	bhi.n	8008ba0 <__ssputs_r+0x70>
 8008b44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b4c:	d026      	beq.n	8008b9c <__ssputs_r+0x6c>
 8008b4e:	6965      	ldr	r5, [r4, #20]
 8008b50:	6909      	ldr	r1, [r1, #16]
 8008b52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b56:	eba3 0901 	sub.w	r9, r3, r1
 8008b5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b5e:	1c7b      	adds	r3, r7, #1
 8008b60:	444b      	add	r3, r9
 8008b62:	106d      	asrs	r5, r5, #1
 8008b64:	429d      	cmp	r5, r3
 8008b66:	bf38      	it	cc
 8008b68:	461d      	movcc	r5, r3
 8008b6a:	0553      	lsls	r3, r2, #21
 8008b6c:	d527      	bpl.n	8008bbe <__ssputs_r+0x8e>
 8008b6e:	4629      	mov	r1, r5
 8008b70:	f7ff fbd8 	bl	8008324 <_malloc_r>
 8008b74:	4606      	mov	r6, r0
 8008b76:	b360      	cbz	r0, 8008bd2 <__ssputs_r+0xa2>
 8008b78:	464a      	mov	r2, r9
 8008b7a:	6921      	ldr	r1, [r4, #16]
 8008b7c:	f7fe fcf5 	bl	800756a <memcpy>
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b8a:	81a3      	strh	r3, [r4, #12]
 8008b8c:	6126      	str	r6, [r4, #16]
 8008b8e:	444e      	add	r6, r9
 8008b90:	6026      	str	r6, [r4, #0]
 8008b92:	463e      	mov	r6, r7
 8008b94:	6165      	str	r5, [r4, #20]
 8008b96:	eba5 0509 	sub.w	r5, r5, r9
 8008b9a:	60a5      	str	r5, [r4, #8]
 8008b9c:	42be      	cmp	r6, r7
 8008b9e:	d900      	bls.n	8008ba2 <__ssputs_r+0x72>
 8008ba0:	463e      	mov	r6, r7
 8008ba2:	4632      	mov	r2, r6
 8008ba4:	4641      	mov	r1, r8
 8008ba6:	6820      	ldr	r0, [r4, #0]
 8008ba8:	f000 f9c2 	bl	8008f30 <memmove>
 8008bac:	2000      	movs	r0, #0
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	1b9b      	subs	r3, r3, r6
 8008bb2:	60a3      	str	r3, [r4, #8]
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	4433      	add	r3, r6
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbe:	462a      	mov	r2, r5
 8008bc0:	f000 fa24 	bl	800900c <_realloc_r>
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d1e0      	bne.n	8008b8c <__ssputs_r+0x5c>
 8008bca:	4650      	mov	r0, sl
 8008bcc:	6921      	ldr	r1, [r4, #16]
 8008bce:	f7ff fb37 	bl	8008240 <_free_r>
 8008bd2:	230c      	movs	r3, #12
 8008bd4:	f8ca 3000 	str.w	r3, [sl]
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	f04f 30ff 	mov.w	r0, #4294967295
 8008bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008be2:	81a3      	strh	r3, [r4, #12]
 8008be4:	e7e9      	b.n	8008bba <__ssputs_r+0x8a>
	...

08008be8 <_svfiprintf_r>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	4698      	mov	r8, r3
 8008bee:	898b      	ldrh	r3, [r1, #12]
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	061b      	lsls	r3, r3, #24
 8008bf4:	460d      	mov	r5, r1
 8008bf6:	4614      	mov	r4, r2
 8008bf8:	b09d      	sub	sp, #116	@ 0x74
 8008bfa:	d510      	bpl.n	8008c1e <_svfiprintf_r+0x36>
 8008bfc:	690b      	ldr	r3, [r1, #16]
 8008bfe:	b973      	cbnz	r3, 8008c1e <_svfiprintf_r+0x36>
 8008c00:	2140      	movs	r1, #64	@ 0x40
 8008c02:	f7ff fb8f 	bl	8008324 <_malloc_r>
 8008c06:	6028      	str	r0, [r5, #0]
 8008c08:	6128      	str	r0, [r5, #16]
 8008c0a:	b930      	cbnz	r0, 8008c1a <_svfiprintf_r+0x32>
 8008c0c:	230c      	movs	r3, #12
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295
 8008c14:	b01d      	add	sp, #116	@ 0x74
 8008c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1a:	2340      	movs	r3, #64	@ 0x40
 8008c1c:	616b      	str	r3, [r5, #20]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c22:	2320      	movs	r3, #32
 8008c24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c28:	2330      	movs	r3, #48	@ 0x30
 8008c2a:	f04f 0901 	mov.w	r9, #1
 8008c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c32:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008dcc <_svfiprintf_r+0x1e4>
 8008c36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c3a:	4623      	mov	r3, r4
 8008c3c:	469a      	mov	sl, r3
 8008c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c42:	b10a      	cbz	r2, 8008c48 <_svfiprintf_r+0x60>
 8008c44:	2a25      	cmp	r2, #37	@ 0x25
 8008c46:	d1f9      	bne.n	8008c3c <_svfiprintf_r+0x54>
 8008c48:	ebba 0b04 	subs.w	fp, sl, r4
 8008c4c:	d00b      	beq.n	8008c66 <_svfiprintf_r+0x7e>
 8008c4e:	465b      	mov	r3, fp
 8008c50:	4622      	mov	r2, r4
 8008c52:	4629      	mov	r1, r5
 8008c54:	4638      	mov	r0, r7
 8008c56:	f7ff ff6b 	bl	8008b30 <__ssputs_r>
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	f000 80a7 	beq.w	8008dae <_svfiprintf_r+0x1c6>
 8008c60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c62:	445a      	add	r2, fp
 8008c64:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c66:	f89a 3000 	ldrb.w	r3, [sl]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 809f 	beq.w	8008dae <_svfiprintf_r+0x1c6>
 8008c70:	2300      	movs	r3, #0
 8008c72:	f04f 32ff 	mov.w	r2, #4294967295
 8008c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c7a:	f10a 0a01 	add.w	sl, sl, #1
 8008c7e:	9304      	str	r3, [sp, #16]
 8008c80:	9307      	str	r3, [sp, #28]
 8008c82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c86:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c88:	4654      	mov	r4, sl
 8008c8a:	2205      	movs	r2, #5
 8008c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c90:	484e      	ldr	r0, [pc, #312]	@ (8008dcc <_svfiprintf_r+0x1e4>)
 8008c92:	f7fe fc5c 	bl	800754e <memchr>
 8008c96:	9a04      	ldr	r2, [sp, #16]
 8008c98:	b9d8      	cbnz	r0, 8008cd2 <_svfiprintf_r+0xea>
 8008c9a:	06d0      	lsls	r0, r2, #27
 8008c9c:	bf44      	itt	mi
 8008c9e:	2320      	movmi	r3, #32
 8008ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ca4:	0711      	lsls	r1, r2, #28
 8008ca6:	bf44      	itt	mi
 8008ca8:	232b      	movmi	r3, #43	@ 0x2b
 8008caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cae:	f89a 3000 	ldrb.w	r3, [sl]
 8008cb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cb4:	d015      	beq.n	8008ce2 <_svfiprintf_r+0xfa>
 8008cb6:	4654      	mov	r4, sl
 8008cb8:	2000      	movs	r0, #0
 8008cba:	f04f 0c0a 	mov.w	ip, #10
 8008cbe:	9a07      	ldr	r2, [sp, #28]
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc6:	3b30      	subs	r3, #48	@ 0x30
 8008cc8:	2b09      	cmp	r3, #9
 8008cca:	d94b      	bls.n	8008d64 <_svfiprintf_r+0x17c>
 8008ccc:	b1b0      	cbz	r0, 8008cfc <_svfiprintf_r+0x114>
 8008cce:	9207      	str	r2, [sp, #28]
 8008cd0:	e014      	b.n	8008cfc <_svfiprintf_r+0x114>
 8008cd2:	eba0 0308 	sub.w	r3, r0, r8
 8008cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	46a2      	mov	sl, r4
 8008cde:	9304      	str	r3, [sp, #16]
 8008ce0:	e7d2      	b.n	8008c88 <_svfiprintf_r+0xa0>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	1d19      	adds	r1, r3, #4
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	9103      	str	r1, [sp, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	bfbb      	ittet	lt
 8008cee:	425b      	neglt	r3, r3
 8008cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8008cf4:	9307      	strge	r3, [sp, #28]
 8008cf6:	9307      	strlt	r3, [sp, #28]
 8008cf8:	bfb8      	it	lt
 8008cfa:	9204      	strlt	r2, [sp, #16]
 8008cfc:	7823      	ldrb	r3, [r4, #0]
 8008cfe:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d00:	d10a      	bne.n	8008d18 <_svfiprintf_r+0x130>
 8008d02:	7863      	ldrb	r3, [r4, #1]
 8008d04:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d06:	d132      	bne.n	8008d6e <_svfiprintf_r+0x186>
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	3402      	adds	r4, #2
 8008d0c:	1d1a      	adds	r2, r3, #4
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	9203      	str	r2, [sp, #12]
 8008d12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d16:	9305      	str	r3, [sp, #20]
 8008d18:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008dd0 <_svfiprintf_r+0x1e8>
 8008d1c:	2203      	movs	r2, #3
 8008d1e:	4650      	mov	r0, sl
 8008d20:	7821      	ldrb	r1, [r4, #0]
 8008d22:	f7fe fc14 	bl	800754e <memchr>
 8008d26:	b138      	cbz	r0, 8008d38 <_svfiprintf_r+0x150>
 8008d28:	2240      	movs	r2, #64	@ 0x40
 8008d2a:	9b04      	ldr	r3, [sp, #16]
 8008d2c:	eba0 000a 	sub.w	r0, r0, sl
 8008d30:	4082      	lsls	r2, r0
 8008d32:	4313      	orrs	r3, r2
 8008d34:	3401      	adds	r4, #1
 8008d36:	9304      	str	r3, [sp, #16]
 8008d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3c:	2206      	movs	r2, #6
 8008d3e:	4825      	ldr	r0, [pc, #148]	@ (8008dd4 <_svfiprintf_r+0x1ec>)
 8008d40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d44:	f7fe fc03 	bl	800754e <memchr>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d036      	beq.n	8008dba <_svfiprintf_r+0x1d2>
 8008d4c:	4b22      	ldr	r3, [pc, #136]	@ (8008dd8 <_svfiprintf_r+0x1f0>)
 8008d4e:	bb1b      	cbnz	r3, 8008d98 <_svfiprintf_r+0x1b0>
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	3307      	adds	r3, #7
 8008d54:	f023 0307 	bic.w	r3, r3, #7
 8008d58:	3308      	adds	r3, #8
 8008d5a:	9303      	str	r3, [sp, #12]
 8008d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d5e:	4433      	add	r3, r6
 8008d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d62:	e76a      	b.n	8008c3a <_svfiprintf_r+0x52>
 8008d64:	460c      	mov	r4, r1
 8008d66:	2001      	movs	r0, #1
 8008d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d6c:	e7a8      	b.n	8008cc0 <_svfiprintf_r+0xd8>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f04f 0c0a 	mov.w	ip, #10
 8008d74:	4619      	mov	r1, r3
 8008d76:	3401      	adds	r4, #1
 8008d78:	9305      	str	r3, [sp, #20]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d80:	3a30      	subs	r2, #48	@ 0x30
 8008d82:	2a09      	cmp	r2, #9
 8008d84:	d903      	bls.n	8008d8e <_svfiprintf_r+0x1a6>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0c6      	beq.n	8008d18 <_svfiprintf_r+0x130>
 8008d8a:	9105      	str	r1, [sp, #20]
 8008d8c:	e7c4      	b.n	8008d18 <_svfiprintf_r+0x130>
 8008d8e:	4604      	mov	r4, r0
 8008d90:	2301      	movs	r3, #1
 8008d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d96:	e7f0      	b.n	8008d7a <_svfiprintf_r+0x192>
 8008d98:	ab03      	add	r3, sp, #12
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	4638      	mov	r0, r7
 8008da0:	4b0e      	ldr	r3, [pc, #56]	@ (8008ddc <_svfiprintf_r+0x1f4>)
 8008da2:	a904      	add	r1, sp, #16
 8008da4:	f7fd fe72 	bl	8006a8c <_printf_float>
 8008da8:	1c42      	adds	r2, r0, #1
 8008daa:	4606      	mov	r6, r0
 8008dac:	d1d6      	bne.n	8008d5c <_svfiprintf_r+0x174>
 8008dae:	89ab      	ldrh	r3, [r5, #12]
 8008db0:	065b      	lsls	r3, r3, #25
 8008db2:	f53f af2d 	bmi.w	8008c10 <_svfiprintf_r+0x28>
 8008db6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008db8:	e72c      	b.n	8008c14 <_svfiprintf_r+0x2c>
 8008dba:	ab03      	add	r3, sp, #12
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	462a      	mov	r2, r5
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	4b06      	ldr	r3, [pc, #24]	@ (8008ddc <_svfiprintf_r+0x1f4>)
 8008dc4:	a904      	add	r1, sp, #16
 8008dc6:	f7fe f8ff 	bl	8006fc8 <_printf_i>
 8008dca:	e7ed      	b.n	8008da8 <_svfiprintf_r+0x1c0>
 8008dcc:	0800983f 	.word	0x0800983f
 8008dd0:	08009845 	.word	0x08009845
 8008dd4:	08009849 	.word	0x08009849
 8008dd8:	08006a8d 	.word	0x08006a8d
 8008ddc:	08008b31 	.word	0x08008b31

08008de0 <__sflush_r>:
 8008de0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de6:	0716      	lsls	r6, r2, #28
 8008de8:	4605      	mov	r5, r0
 8008dea:	460c      	mov	r4, r1
 8008dec:	d454      	bmi.n	8008e98 <__sflush_r+0xb8>
 8008dee:	684b      	ldr	r3, [r1, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	dc02      	bgt.n	8008dfa <__sflush_r+0x1a>
 8008df4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	dd48      	ble.n	8008e8c <__sflush_r+0xac>
 8008dfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008dfc:	2e00      	cmp	r6, #0
 8008dfe:	d045      	beq.n	8008e8c <__sflush_r+0xac>
 8008e00:	2300      	movs	r3, #0
 8008e02:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e06:	682f      	ldr	r7, [r5, #0]
 8008e08:	6a21      	ldr	r1, [r4, #32]
 8008e0a:	602b      	str	r3, [r5, #0]
 8008e0c:	d030      	beq.n	8008e70 <__sflush_r+0x90>
 8008e0e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	0759      	lsls	r1, r3, #29
 8008e14:	d505      	bpl.n	8008e22 <__sflush_r+0x42>
 8008e16:	6863      	ldr	r3, [r4, #4]
 8008e18:	1ad2      	subs	r2, r2, r3
 8008e1a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e1c:	b10b      	cbz	r3, 8008e22 <__sflush_r+0x42>
 8008e1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e20:	1ad2      	subs	r2, r2, r3
 8008e22:	2300      	movs	r3, #0
 8008e24:	4628      	mov	r0, r5
 8008e26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e28:	6a21      	ldr	r1, [r4, #32]
 8008e2a:	47b0      	blx	r6
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	d106      	bne.n	8008e40 <__sflush_r+0x60>
 8008e32:	6829      	ldr	r1, [r5, #0]
 8008e34:	291d      	cmp	r1, #29
 8008e36:	d82b      	bhi.n	8008e90 <__sflush_r+0xb0>
 8008e38:	4a28      	ldr	r2, [pc, #160]	@ (8008edc <__sflush_r+0xfc>)
 8008e3a:	40ca      	lsrs	r2, r1
 8008e3c:	07d6      	lsls	r6, r2, #31
 8008e3e:	d527      	bpl.n	8008e90 <__sflush_r+0xb0>
 8008e40:	2200      	movs	r2, #0
 8008e42:	6062      	str	r2, [r4, #4]
 8008e44:	6922      	ldr	r2, [r4, #16]
 8008e46:	04d9      	lsls	r1, r3, #19
 8008e48:	6022      	str	r2, [r4, #0]
 8008e4a:	d504      	bpl.n	8008e56 <__sflush_r+0x76>
 8008e4c:	1c42      	adds	r2, r0, #1
 8008e4e:	d101      	bne.n	8008e54 <__sflush_r+0x74>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	b903      	cbnz	r3, 8008e56 <__sflush_r+0x76>
 8008e54:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e58:	602f      	str	r7, [r5, #0]
 8008e5a:	b1b9      	cbz	r1, 8008e8c <__sflush_r+0xac>
 8008e5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e60:	4299      	cmp	r1, r3
 8008e62:	d002      	beq.n	8008e6a <__sflush_r+0x8a>
 8008e64:	4628      	mov	r0, r5
 8008e66:	f7ff f9eb 	bl	8008240 <_free_r>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e6e:	e00d      	b.n	8008e8c <__sflush_r+0xac>
 8008e70:	2301      	movs	r3, #1
 8008e72:	4628      	mov	r0, r5
 8008e74:	47b0      	blx	r6
 8008e76:	4602      	mov	r2, r0
 8008e78:	1c50      	adds	r0, r2, #1
 8008e7a:	d1c9      	bne.n	8008e10 <__sflush_r+0x30>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d0c6      	beq.n	8008e10 <__sflush_r+0x30>
 8008e82:	2b1d      	cmp	r3, #29
 8008e84:	d001      	beq.n	8008e8a <__sflush_r+0xaa>
 8008e86:	2b16      	cmp	r3, #22
 8008e88:	d11d      	bne.n	8008ec6 <__sflush_r+0xe6>
 8008e8a:	602f      	str	r7, [r5, #0]
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e021      	b.n	8008ed4 <__sflush_r+0xf4>
 8008e90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e94:	b21b      	sxth	r3, r3
 8008e96:	e01a      	b.n	8008ece <__sflush_r+0xee>
 8008e98:	690f      	ldr	r7, [r1, #16]
 8008e9a:	2f00      	cmp	r7, #0
 8008e9c:	d0f6      	beq.n	8008e8c <__sflush_r+0xac>
 8008e9e:	0793      	lsls	r3, r2, #30
 8008ea0:	bf18      	it	ne
 8008ea2:	2300      	movne	r3, #0
 8008ea4:	680e      	ldr	r6, [r1, #0]
 8008ea6:	bf08      	it	eq
 8008ea8:	694b      	ldreq	r3, [r1, #20]
 8008eaa:	1bf6      	subs	r6, r6, r7
 8008eac:	600f      	str	r7, [r1, #0]
 8008eae:	608b      	str	r3, [r1, #8]
 8008eb0:	2e00      	cmp	r6, #0
 8008eb2:	ddeb      	ble.n	8008e8c <__sflush_r+0xac>
 8008eb4:	4633      	mov	r3, r6
 8008eb6:	463a      	mov	r2, r7
 8008eb8:	4628      	mov	r0, r5
 8008eba:	6a21      	ldr	r1, [r4, #32]
 8008ebc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008ec0:	47e0      	blx	ip
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	dc07      	bgt.n	8008ed6 <__sflush_r+0xf6>
 8008ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed6:	4407      	add	r7, r0
 8008ed8:	1a36      	subs	r6, r6, r0
 8008eda:	e7e9      	b.n	8008eb0 <__sflush_r+0xd0>
 8008edc:	20400001 	.word	0x20400001

08008ee0 <_fflush_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	690b      	ldr	r3, [r1, #16]
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	b913      	cbnz	r3, 8008ef0 <_fflush_r+0x10>
 8008eea:	2500      	movs	r5, #0
 8008eec:	4628      	mov	r0, r5
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	b118      	cbz	r0, 8008efa <_fflush_r+0x1a>
 8008ef2:	6a03      	ldr	r3, [r0, #32]
 8008ef4:	b90b      	cbnz	r3, 8008efa <_fflush_r+0x1a>
 8008ef6:	f7fe fa11 	bl	800731c <__sinit>
 8008efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d0f3      	beq.n	8008eea <_fflush_r+0xa>
 8008f02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f04:	07d0      	lsls	r0, r2, #31
 8008f06:	d404      	bmi.n	8008f12 <_fflush_r+0x32>
 8008f08:	0599      	lsls	r1, r3, #22
 8008f0a:	d402      	bmi.n	8008f12 <_fflush_r+0x32>
 8008f0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f0e:	f7fe fb1c 	bl	800754a <__retarget_lock_acquire_recursive>
 8008f12:	4628      	mov	r0, r5
 8008f14:	4621      	mov	r1, r4
 8008f16:	f7ff ff63 	bl	8008de0 <__sflush_r>
 8008f1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	07da      	lsls	r2, r3, #31
 8008f20:	d4e4      	bmi.n	8008eec <_fflush_r+0xc>
 8008f22:	89a3      	ldrh	r3, [r4, #12]
 8008f24:	059b      	lsls	r3, r3, #22
 8008f26:	d4e1      	bmi.n	8008eec <_fflush_r+0xc>
 8008f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f2a:	f7fe fb0f 	bl	800754c <__retarget_lock_release_recursive>
 8008f2e:	e7dd      	b.n	8008eec <_fflush_r+0xc>

08008f30 <memmove>:
 8008f30:	4288      	cmp	r0, r1
 8008f32:	b510      	push	{r4, lr}
 8008f34:	eb01 0402 	add.w	r4, r1, r2
 8008f38:	d902      	bls.n	8008f40 <memmove+0x10>
 8008f3a:	4284      	cmp	r4, r0
 8008f3c:	4623      	mov	r3, r4
 8008f3e:	d807      	bhi.n	8008f50 <memmove+0x20>
 8008f40:	1e43      	subs	r3, r0, #1
 8008f42:	42a1      	cmp	r1, r4
 8008f44:	d008      	beq.n	8008f58 <memmove+0x28>
 8008f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f4e:	e7f8      	b.n	8008f42 <memmove+0x12>
 8008f50:	4601      	mov	r1, r0
 8008f52:	4402      	add	r2, r0
 8008f54:	428a      	cmp	r2, r1
 8008f56:	d100      	bne.n	8008f5a <memmove+0x2a>
 8008f58:	bd10      	pop	{r4, pc}
 8008f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f62:	e7f7      	b.n	8008f54 <memmove+0x24>

08008f64 <_sbrk_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	2300      	movs	r3, #0
 8008f68:	4d05      	ldr	r5, [pc, #20]	@ (8008f80 <_sbrk_r+0x1c>)
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	602b      	str	r3, [r5, #0]
 8008f70:	f7f8 fafc 	bl	800156c <_sbrk>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_sbrk_r+0x1a>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_sbrk_r+0x1a>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	20004b08 	.word	0x20004b08

08008f84 <__assert_func>:
 8008f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f86:	4614      	mov	r4, r2
 8008f88:	461a      	mov	r2, r3
 8008f8a:	4b09      	ldr	r3, [pc, #36]	@ (8008fb0 <__assert_func+0x2c>)
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68d8      	ldr	r0, [r3, #12]
 8008f92:	b14c      	cbz	r4, 8008fa8 <__assert_func+0x24>
 8008f94:	4b07      	ldr	r3, [pc, #28]	@ (8008fb4 <__assert_func+0x30>)
 8008f96:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f9a:	9100      	str	r1, [sp, #0]
 8008f9c:	462b      	mov	r3, r5
 8008f9e:	4906      	ldr	r1, [pc, #24]	@ (8008fb8 <__assert_func+0x34>)
 8008fa0:	f000 f870 	bl	8009084 <fiprintf>
 8008fa4:	f000 f880 	bl	80090a8 <abort>
 8008fa8:	4b04      	ldr	r3, [pc, #16]	@ (8008fbc <__assert_func+0x38>)
 8008faa:	461c      	mov	r4, r3
 8008fac:	e7f3      	b.n	8008f96 <__assert_func+0x12>
 8008fae:	bf00      	nop
 8008fb0:	2000001c 	.word	0x2000001c
 8008fb4:	08009858 	.word	0x08009858
 8008fb8:	08009865 	.word	0x08009865
 8008fbc:	0800962d 	.word	0x0800962d

08008fc0 <_calloc_r>:
 8008fc0:	b570      	push	{r4, r5, r6, lr}
 8008fc2:	fba1 5402 	umull	r5, r4, r1, r2
 8008fc6:	b934      	cbnz	r4, 8008fd6 <_calloc_r+0x16>
 8008fc8:	4629      	mov	r1, r5
 8008fca:	f7ff f9ab 	bl	8008324 <_malloc_r>
 8008fce:	4606      	mov	r6, r0
 8008fd0:	b928      	cbnz	r0, 8008fde <_calloc_r+0x1e>
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	bd70      	pop	{r4, r5, r6, pc}
 8008fd6:	220c      	movs	r2, #12
 8008fd8:	2600      	movs	r6, #0
 8008fda:	6002      	str	r2, [r0, #0]
 8008fdc:	e7f9      	b.n	8008fd2 <_calloc_r+0x12>
 8008fde:	462a      	mov	r2, r5
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	f7fe fa46 	bl	8007472 <memset>
 8008fe6:	e7f4      	b.n	8008fd2 <_calloc_r+0x12>

08008fe8 <__ascii_mbtowc>:
 8008fe8:	b082      	sub	sp, #8
 8008fea:	b901      	cbnz	r1, 8008fee <__ascii_mbtowc+0x6>
 8008fec:	a901      	add	r1, sp, #4
 8008fee:	b142      	cbz	r2, 8009002 <__ascii_mbtowc+0x1a>
 8008ff0:	b14b      	cbz	r3, 8009006 <__ascii_mbtowc+0x1e>
 8008ff2:	7813      	ldrb	r3, [r2, #0]
 8008ff4:	600b      	str	r3, [r1, #0]
 8008ff6:	7812      	ldrb	r2, [r2, #0]
 8008ff8:	1e10      	subs	r0, r2, #0
 8008ffa:	bf18      	it	ne
 8008ffc:	2001      	movne	r0, #1
 8008ffe:	b002      	add	sp, #8
 8009000:	4770      	bx	lr
 8009002:	4610      	mov	r0, r2
 8009004:	e7fb      	b.n	8008ffe <__ascii_mbtowc+0x16>
 8009006:	f06f 0001 	mvn.w	r0, #1
 800900a:	e7f8      	b.n	8008ffe <__ascii_mbtowc+0x16>

0800900c <_realloc_r>:
 800900c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009010:	4607      	mov	r7, r0
 8009012:	4614      	mov	r4, r2
 8009014:	460d      	mov	r5, r1
 8009016:	b921      	cbnz	r1, 8009022 <_realloc_r+0x16>
 8009018:	4611      	mov	r1, r2
 800901a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800901e:	f7ff b981 	b.w	8008324 <_malloc_r>
 8009022:	b92a      	cbnz	r2, 8009030 <_realloc_r+0x24>
 8009024:	f7ff f90c 	bl	8008240 <_free_r>
 8009028:	4625      	mov	r5, r4
 800902a:	4628      	mov	r0, r5
 800902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009030:	f000 f841 	bl	80090b6 <_malloc_usable_size_r>
 8009034:	4284      	cmp	r4, r0
 8009036:	4606      	mov	r6, r0
 8009038:	d802      	bhi.n	8009040 <_realloc_r+0x34>
 800903a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800903e:	d8f4      	bhi.n	800902a <_realloc_r+0x1e>
 8009040:	4621      	mov	r1, r4
 8009042:	4638      	mov	r0, r7
 8009044:	f7ff f96e 	bl	8008324 <_malloc_r>
 8009048:	4680      	mov	r8, r0
 800904a:	b908      	cbnz	r0, 8009050 <_realloc_r+0x44>
 800904c:	4645      	mov	r5, r8
 800904e:	e7ec      	b.n	800902a <_realloc_r+0x1e>
 8009050:	42b4      	cmp	r4, r6
 8009052:	4622      	mov	r2, r4
 8009054:	4629      	mov	r1, r5
 8009056:	bf28      	it	cs
 8009058:	4632      	movcs	r2, r6
 800905a:	f7fe fa86 	bl	800756a <memcpy>
 800905e:	4629      	mov	r1, r5
 8009060:	4638      	mov	r0, r7
 8009062:	f7ff f8ed 	bl	8008240 <_free_r>
 8009066:	e7f1      	b.n	800904c <_realloc_r+0x40>

08009068 <__ascii_wctomb>:
 8009068:	4603      	mov	r3, r0
 800906a:	4608      	mov	r0, r1
 800906c:	b141      	cbz	r1, 8009080 <__ascii_wctomb+0x18>
 800906e:	2aff      	cmp	r2, #255	@ 0xff
 8009070:	d904      	bls.n	800907c <__ascii_wctomb+0x14>
 8009072:	228a      	movs	r2, #138	@ 0x8a
 8009074:	f04f 30ff 	mov.w	r0, #4294967295
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	4770      	bx	lr
 800907c:	2001      	movs	r0, #1
 800907e:	700a      	strb	r2, [r1, #0]
 8009080:	4770      	bx	lr
	...

08009084 <fiprintf>:
 8009084:	b40e      	push	{r1, r2, r3}
 8009086:	b503      	push	{r0, r1, lr}
 8009088:	4601      	mov	r1, r0
 800908a:	ab03      	add	r3, sp, #12
 800908c:	4805      	ldr	r0, [pc, #20]	@ (80090a4 <fiprintf+0x20>)
 800908e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009092:	6800      	ldr	r0, [r0, #0]
 8009094:	9301      	str	r3, [sp, #4]
 8009096:	f000 f83d 	bl	8009114 <_vfiprintf_r>
 800909a:	b002      	add	sp, #8
 800909c:	f85d eb04 	ldr.w	lr, [sp], #4
 80090a0:	b003      	add	sp, #12
 80090a2:	4770      	bx	lr
 80090a4:	2000001c 	.word	0x2000001c

080090a8 <abort>:
 80090a8:	2006      	movs	r0, #6
 80090aa:	b508      	push	{r3, lr}
 80090ac:	f000 fa06 	bl	80094bc <raise>
 80090b0:	2001      	movs	r0, #1
 80090b2:	f7f8 fa3b 	bl	800152c <_exit>

080090b6 <_malloc_usable_size_r>:
 80090b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ba:	1f18      	subs	r0, r3, #4
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bfbc      	itt	lt
 80090c0:	580b      	ldrlt	r3, [r1, r0]
 80090c2:	18c0      	addlt	r0, r0, r3
 80090c4:	4770      	bx	lr

080090c6 <__sfputc_r>:
 80090c6:	6893      	ldr	r3, [r2, #8]
 80090c8:	b410      	push	{r4}
 80090ca:	3b01      	subs	r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	6093      	str	r3, [r2, #8]
 80090d0:	da07      	bge.n	80090e2 <__sfputc_r+0x1c>
 80090d2:	6994      	ldr	r4, [r2, #24]
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	db01      	blt.n	80090dc <__sfputc_r+0x16>
 80090d8:	290a      	cmp	r1, #10
 80090da:	d102      	bne.n	80090e2 <__sfputc_r+0x1c>
 80090dc:	bc10      	pop	{r4}
 80090de:	f000 b931 	b.w	8009344 <__swbuf_r>
 80090e2:	6813      	ldr	r3, [r2, #0]
 80090e4:	1c58      	adds	r0, r3, #1
 80090e6:	6010      	str	r0, [r2, #0]
 80090e8:	7019      	strb	r1, [r3, #0]
 80090ea:	4608      	mov	r0, r1
 80090ec:	bc10      	pop	{r4}
 80090ee:	4770      	bx	lr

080090f0 <__sfputs_r>:
 80090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f2:	4606      	mov	r6, r0
 80090f4:	460f      	mov	r7, r1
 80090f6:	4614      	mov	r4, r2
 80090f8:	18d5      	adds	r5, r2, r3
 80090fa:	42ac      	cmp	r4, r5
 80090fc:	d101      	bne.n	8009102 <__sfputs_r+0x12>
 80090fe:	2000      	movs	r0, #0
 8009100:	e007      	b.n	8009112 <__sfputs_r+0x22>
 8009102:	463a      	mov	r2, r7
 8009104:	4630      	mov	r0, r6
 8009106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910a:	f7ff ffdc 	bl	80090c6 <__sfputc_r>
 800910e:	1c43      	adds	r3, r0, #1
 8009110:	d1f3      	bne.n	80090fa <__sfputs_r+0xa>
 8009112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009114 <_vfiprintf_r>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	460d      	mov	r5, r1
 800911a:	4614      	mov	r4, r2
 800911c:	4698      	mov	r8, r3
 800911e:	4606      	mov	r6, r0
 8009120:	b09d      	sub	sp, #116	@ 0x74
 8009122:	b118      	cbz	r0, 800912c <_vfiprintf_r+0x18>
 8009124:	6a03      	ldr	r3, [r0, #32]
 8009126:	b90b      	cbnz	r3, 800912c <_vfiprintf_r+0x18>
 8009128:	f7fe f8f8 	bl	800731c <__sinit>
 800912c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800912e:	07d9      	lsls	r1, r3, #31
 8009130:	d405      	bmi.n	800913e <_vfiprintf_r+0x2a>
 8009132:	89ab      	ldrh	r3, [r5, #12]
 8009134:	059a      	lsls	r2, r3, #22
 8009136:	d402      	bmi.n	800913e <_vfiprintf_r+0x2a>
 8009138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800913a:	f7fe fa06 	bl	800754a <__retarget_lock_acquire_recursive>
 800913e:	89ab      	ldrh	r3, [r5, #12]
 8009140:	071b      	lsls	r3, r3, #28
 8009142:	d501      	bpl.n	8009148 <_vfiprintf_r+0x34>
 8009144:	692b      	ldr	r3, [r5, #16]
 8009146:	b99b      	cbnz	r3, 8009170 <_vfiprintf_r+0x5c>
 8009148:	4629      	mov	r1, r5
 800914a:	4630      	mov	r0, r6
 800914c:	f000 f938 	bl	80093c0 <__swsetup_r>
 8009150:	b170      	cbz	r0, 8009170 <_vfiprintf_r+0x5c>
 8009152:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009154:	07dc      	lsls	r4, r3, #31
 8009156:	d504      	bpl.n	8009162 <_vfiprintf_r+0x4e>
 8009158:	f04f 30ff 	mov.w	r0, #4294967295
 800915c:	b01d      	add	sp, #116	@ 0x74
 800915e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009162:	89ab      	ldrh	r3, [r5, #12]
 8009164:	0598      	lsls	r0, r3, #22
 8009166:	d4f7      	bmi.n	8009158 <_vfiprintf_r+0x44>
 8009168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800916a:	f7fe f9ef 	bl	800754c <__retarget_lock_release_recursive>
 800916e:	e7f3      	b.n	8009158 <_vfiprintf_r+0x44>
 8009170:	2300      	movs	r3, #0
 8009172:	9309      	str	r3, [sp, #36]	@ 0x24
 8009174:	2320      	movs	r3, #32
 8009176:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800917a:	2330      	movs	r3, #48	@ 0x30
 800917c:	f04f 0901 	mov.w	r9, #1
 8009180:	f8cd 800c 	str.w	r8, [sp, #12]
 8009184:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009330 <_vfiprintf_r+0x21c>
 8009188:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800918c:	4623      	mov	r3, r4
 800918e:	469a      	mov	sl, r3
 8009190:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009194:	b10a      	cbz	r2, 800919a <_vfiprintf_r+0x86>
 8009196:	2a25      	cmp	r2, #37	@ 0x25
 8009198:	d1f9      	bne.n	800918e <_vfiprintf_r+0x7a>
 800919a:	ebba 0b04 	subs.w	fp, sl, r4
 800919e:	d00b      	beq.n	80091b8 <_vfiprintf_r+0xa4>
 80091a0:	465b      	mov	r3, fp
 80091a2:	4622      	mov	r2, r4
 80091a4:	4629      	mov	r1, r5
 80091a6:	4630      	mov	r0, r6
 80091a8:	f7ff ffa2 	bl	80090f0 <__sfputs_r>
 80091ac:	3001      	adds	r0, #1
 80091ae:	f000 80a7 	beq.w	8009300 <_vfiprintf_r+0x1ec>
 80091b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091b4:	445a      	add	r2, fp
 80091b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80091b8:	f89a 3000 	ldrb.w	r3, [sl]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f000 809f 	beq.w	8009300 <_vfiprintf_r+0x1ec>
 80091c2:	2300      	movs	r3, #0
 80091c4:	f04f 32ff 	mov.w	r2, #4294967295
 80091c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091cc:	f10a 0a01 	add.w	sl, sl, #1
 80091d0:	9304      	str	r3, [sp, #16]
 80091d2:	9307      	str	r3, [sp, #28]
 80091d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80091da:	4654      	mov	r4, sl
 80091dc:	2205      	movs	r2, #5
 80091de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e2:	4853      	ldr	r0, [pc, #332]	@ (8009330 <_vfiprintf_r+0x21c>)
 80091e4:	f7fe f9b3 	bl	800754e <memchr>
 80091e8:	9a04      	ldr	r2, [sp, #16]
 80091ea:	b9d8      	cbnz	r0, 8009224 <_vfiprintf_r+0x110>
 80091ec:	06d1      	lsls	r1, r2, #27
 80091ee:	bf44      	itt	mi
 80091f0:	2320      	movmi	r3, #32
 80091f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091f6:	0713      	lsls	r3, r2, #28
 80091f8:	bf44      	itt	mi
 80091fa:	232b      	movmi	r3, #43	@ 0x2b
 80091fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009200:	f89a 3000 	ldrb.w	r3, [sl]
 8009204:	2b2a      	cmp	r3, #42	@ 0x2a
 8009206:	d015      	beq.n	8009234 <_vfiprintf_r+0x120>
 8009208:	4654      	mov	r4, sl
 800920a:	2000      	movs	r0, #0
 800920c:	f04f 0c0a 	mov.w	ip, #10
 8009210:	9a07      	ldr	r2, [sp, #28]
 8009212:	4621      	mov	r1, r4
 8009214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009218:	3b30      	subs	r3, #48	@ 0x30
 800921a:	2b09      	cmp	r3, #9
 800921c:	d94b      	bls.n	80092b6 <_vfiprintf_r+0x1a2>
 800921e:	b1b0      	cbz	r0, 800924e <_vfiprintf_r+0x13a>
 8009220:	9207      	str	r2, [sp, #28]
 8009222:	e014      	b.n	800924e <_vfiprintf_r+0x13a>
 8009224:	eba0 0308 	sub.w	r3, r0, r8
 8009228:	fa09 f303 	lsl.w	r3, r9, r3
 800922c:	4313      	orrs	r3, r2
 800922e:	46a2      	mov	sl, r4
 8009230:	9304      	str	r3, [sp, #16]
 8009232:	e7d2      	b.n	80091da <_vfiprintf_r+0xc6>
 8009234:	9b03      	ldr	r3, [sp, #12]
 8009236:	1d19      	adds	r1, r3, #4
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	9103      	str	r1, [sp, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	bfbb      	ittet	lt
 8009240:	425b      	neglt	r3, r3
 8009242:	f042 0202 	orrlt.w	r2, r2, #2
 8009246:	9307      	strge	r3, [sp, #28]
 8009248:	9307      	strlt	r3, [sp, #28]
 800924a:	bfb8      	it	lt
 800924c:	9204      	strlt	r2, [sp, #16]
 800924e:	7823      	ldrb	r3, [r4, #0]
 8009250:	2b2e      	cmp	r3, #46	@ 0x2e
 8009252:	d10a      	bne.n	800926a <_vfiprintf_r+0x156>
 8009254:	7863      	ldrb	r3, [r4, #1]
 8009256:	2b2a      	cmp	r3, #42	@ 0x2a
 8009258:	d132      	bne.n	80092c0 <_vfiprintf_r+0x1ac>
 800925a:	9b03      	ldr	r3, [sp, #12]
 800925c:	3402      	adds	r4, #2
 800925e:	1d1a      	adds	r2, r3, #4
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	9203      	str	r2, [sp, #12]
 8009264:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009268:	9305      	str	r3, [sp, #20]
 800926a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009334 <_vfiprintf_r+0x220>
 800926e:	2203      	movs	r2, #3
 8009270:	4650      	mov	r0, sl
 8009272:	7821      	ldrb	r1, [r4, #0]
 8009274:	f7fe f96b 	bl	800754e <memchr>
 8009278:	b138      	cbz	r0, 800928a <_vfiprintf_r+0x176>
 800927a:	2240      	movs	r2, #64	@ 0x40
 800927c:	9b04      	ldr	r3, [sp, #16]
 800927e:	eba0 000a 	sub.w	r0, r0, sl
 8009282:	4082      	lsls	r2, r0
 8009284:	4313      	orrs	r3, r2
 8009286:	3401      	adds	r4, #1
 8009288:	9304      	str	r3, [sp, #16]
 800928a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800928e:	2206      	movs	r2, #6
 8009290:	4829      	ldr	r0, [pc, #164]	@ (8009338 <_vfiprintf_r+0x224>)
 8009292:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009296:	f7fe f95a 	bl	800754e <memchr>
 800929a:	2800      	cmp	r0, #0
 800929c:	d03f      	beq.n	800931e <_vfiprintf_r+0x20a>
 800929e:	4b27      	ldr	r3, [pc, #156]	@ (800933c <_vfiprintf_r+0x228>)
 80092a0:	bb1b      	cbnz	r3, 80092ea <_vfiprintf_r+0x1d6>
 80092a2:	9b03      	ldr	r3, [sp, #12]
 80092a4:	3307      	adds	r3, #7
 80092a6:	f023 0307 	bic.w	r3, r3, #7
 80092aa:	3308      	adds	r3, #8
 80092ac:	9303      	str	r3, [sp, #12]
 80092ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092b0:	443b      	add	r3, r7
 80092b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80092b4:	e76a      	b.n	800918c <_vfiprintf_r+0x78>
 80092b6:	460c      	mov	r4, r1
 80092b8:	2001      	movs	r0, #1
 80092ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80092be:	e7a8      	b.n	8009212 <_vfiprintf_r+0xfe>
 80092c0:	2300      	movs	r3, #0
 80092c2:	f04f 0c0a 	mov.w	ip, #10
 80092c6:	4619      	mov	r1, r3
 80092c8:	3401      	adds	r4, #1
 80092ca:	9305      	str	r3, [sp, #20]
 80092cc:	4620      	mov	r0, r4
 80092ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092d2:	3a30      	subs	r2, #48	@ 0x30
 80092d4:	2a09      	cmp	r2, #9
 80092d6:	d903      	bls.n	80092e0 <_vfiprintf_r+0x1cc>
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0c6      	beq.n	800926a <_vfiprintf_r+0x156>
 80092dc:	9105      	str	r1, [sp, #20]
 80092de:	e7c4      	b.n	800926a <_vfiprintf_r+0x156>
 80092e0:	4604      	mov	r4, r0
 80092e2:	2301      	movs	r3, #1
 80092e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80092e8:	e7f0      	b.n	80092cc <_vfiprintf_r+0x1b8>
 80092ea:	ab03      	add	r3, sp, #12
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	462a      	mov	r2, r5
 80092f0:	4630      	mov	r0, r6
 80092f2:	4b13      	ldr	r3, [pc, #76]	@ (8009340 <_vfiprintf_r+0x22c>)
 80092f4:	a904      	add	r1, sp, #16
 80092f6:	f7fd fbc9 	bl	8006a8c <_printf_float>
 80092fa:	4607      	mov	r7, r0
 80092fc:	1c78      	adds	r0, r7, #1
 80092fe:	d1d6      	bne.n	80092ae <_vfiprintf_r+0x19a>
 8009300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009302:	07d9      	lsls	r1, r3, #31
 8009304:	d405      	bmi.n	8009312 <_vfiprintf_r+0x1fe>
 8009306:	89ab      	ldrh	r3, [r5, #12]
 8009308:	059a      	lsls	r2, r3, #22
 800930a:	d402      	bmi.n	8009312 <_vfiprintf_r+0x1fe>
 800930c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800930e:	f7fe f91d 	bl	800754c <__retarget_lock_release_recursive>
 8009312:	89ab      	ldrh	r3, [r5, #12]
 8009314:	065b      	lsls	r3, r3, #25
 8009316:	f53f af1f 	bmi.w	8009158 <_vfiprintf_r+0x44>
 800931a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800931c:	e71e      	b.n	800915c <_vfiprintf_r+0x48>
 800931e:	ab03      	add	r3, sp, #12
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	462a      	mov	r2, r5
 8009324:	4630      	mov	r0, r6
 8009326:	4b06      	ldr	r3, [pc, #24]	@ (8009340 <_vfiprintf_r+0x22c>)
 8009328:	a904      	add	r1, sp, #16
 800932a:	f7fd fe4d 	bl	8006fc8 <_printf_i>
 800932e:	e7e4      	b.n	80092fa <_vfiprintf_r+0x1e6>
 8009330:	0800983f 	.word	0x0800983f
 8009334:	08009845 	.word	0x08009845
 8009338:	08009849 	.word	0x08009849
 800933c:	08006a8d 	.word	0x08006a8d
 8009340:	080090f1 	.word	0x080090f1

08009344 <__swbuf_r>:
 8009344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009346:	460e      	mov	r6, r1
 8009348:	4614      	mov	r4, r2
 800934a:	4605      	mov	r5, r0
 800934c:	b118      	cbz	r0, 8009356 <__swbuf_r+0x12>
 800934e:	6a03      	ldr	r3, [r0, #32]
 8009350:	b90b      	cbnz	r3, 8009356 <__swbuf_r+0x12>
 8009352:	f7fd ffe3 	bl	800731c <__sinit>
 8009356:	69a3      	ldr	r3, [r4, #24]
 8009358:	60a3      	str	r3, [r4, #8]
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	071a      	lsls	r2, r3, #28
 800935e:	d501      	bpl.n	8009364 <__swbuf_r+0x20>
 8009360:	6923      	ldr	r3, [r4, #16]
 8009362:	b943      	cbnz	r3, 8009376 <__swbuf_r+0x32>
 8009364:	4621      	mov	r1, r4
 8009366:	4628      	mov	r0, r5
 8009368:	f000 f82a 	bl	80093c0 <__swsetup_r>
 800936c:	b118      	cbz	r0, 8009376 <__swbuf_r+0x32>
 800936e:	f04f 37ff 	mov.w	r7, #4294967295
 8009372:	4638      	mov	r0, r7
 8009374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	6922      	ldr	r2, [r4, #16]
 800937a:	b2f6      	uxtb	r6, r6
 800937c:	1a98      	subs	r0, r3, r2
 800937e:	6963      	ldr	r3, [r4, #20]
 8009380:	4637      	mov	r7, r6
 8009382:	4283      	cmp	r3, r0
 8009384:	dc05      	bgt.n	8009392 <__swbuf_r+0x4e>
 8009386:	4621      	mov	r1, r4
 8009388:	4628      	mov	r0, r5
 800938a:	f7ff fda9 	bl	8008ee0 <_fflush_r>
 800938e:	2800      	cmp	r0, #0
 8009390:	d1ed      	bne.n	800936e <__swbuf_r+0x2a>
 8009392:	68a3      	ldr	r3, [r4, #8]
 8009394:	3b01      	subs	r3, #1
 8009396:	60a3      	str	r3, [r4, #8]
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	6022      	str	r2, [r4, #0]
 800939e:	701e      	strb	r6, [r3, #0]
 80093a0:	6962      	ldr	r2, [r4, #20]
 80093a2:	1c43      	adds	r3, r0, #1
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d004      	beq.n	80093b2 <__swbuf_r+0x6e>
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	07db      	lsls	r3, r3, #31
 80093ac:	d5e1      	bpl.n	8009372 <__swbuf_r+0x2e>
 80093ae:	2e0a      	cmp	r6, #10
 80093b0:	d1df      	bne.n	8009372 <__swbuf_r+0x2e>
 80093b2:	4621      	mov	r1, r4
 80093b4:	4628      	mov	r0, r5
 80093b6:	f7ff fd93 	bl	8008ee0 <_fflush_r>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d0d9      	beq.n	8009372 <__swbuf_r+0x2e>
 80093be:	e7d6      	b.n	800936e <__swbuf_r+0x2a>

080093c0 <__swsetup_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4b29      	ldr	r3, [pc, #164]	@ (8009468 <__swsetup_r+0xa8>)
 80093c4:	4605      	mov	r5, r0
 80093c6:	6818      	ldr	r0, [r3, #0]
 80093c8:	460c      	mov	r4, r1
 80093ca:	b118      	cbz	r0, 80093d4 <__swsetup_r+0x14>
 80093cc:	6a03      	ldr	r3, [r0, #32]
 80093ce:	b90b      	cbnz	r3, 80093d4 <__swsetup_r+0x14>
 80093d0:	f7fd ffa4 	bl	800731c <__sinit>
 80093d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093d8:	0719      	lsls	r1, r3, #28
 80093da:	d422      	bmi.n	8009422 <__swsetup_r+0x62>
 80093dc:	06da      	lsls	r2, r3, #27
 80093de:	d407      	bmi.n	80093f0 <__swsetup_r+0x30>
 80093e0:	2209      	movs	r2, #9
 80093e2:	602a      	str	r2, [r5, #0]
 80093e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093e8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	e033      	b.n	8009458 <__swsetup_r+0x98>
 80093f0:	0758      	lsls	r0, r3, #29
 80093f2:	d512      	bpl.n	800941a <__swsetup_r+0x5a>
 80093f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093f6:	b141      	cbz	r1, 800940a <__swsetup_r+0x4a>
 80093f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093fc:	4299      	cmp	r1, r3
 80093fe:	d002      	beq.n	8009406 <__swsetup_r+0x46>
 8009400:	4628      	mov	r0, r5
 8009402:	f7fe ff1d 	bl	8008240 <_free_r>
 8009406:	2300      	movs	r3, #0
 8009408:	6363      	str	r3, [r4, #52]	@ 0x34
 800940a:	89a3      	ldrh	r3, [r4, #12]
 800940c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009410:	81a3      	strh	r3, [r4, #12]
 8009412:	2300      	movs	r3, #0
 8009414:	6063      	str	r3, [r4, #4]
 8009416:	6923      	ldr	r3, [r4, #16]
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	f043 0308 	orr.w	r3, r3, #8
 8009420:	81a3      	strh	r3, [r4, #12]
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	b94b      	cbnz	r3, 800943a <__swsetup_r+0x7a>
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800942c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009430:	d003      	beq.n	800943a <__swsetup_r+0x7a>
 8009432:	4621      	mov	r1, r4
 8009434:	4628      	mov	r0, r5
 8009436:	f000 f882 	bl	800953e <__smakebuf_r>
 800943a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800943e:	f013 0201 	ands.w	r2, r3, #1
 8009442:	d00a      	beq.n	800945a <__swsetup_r+0x9a>
 8009444:	2200      	movs	r2, #0
 8009446:	60a2      	str	r2, [r4, #8]
 8009448:	6962      	ldr	r2, [r4, #20]
 800944a:	4252      	negs	r2, r2
 800944c:	61a2      	str	r2, [r4, #24]
 800944e:	6922      	ldr	r2, [r4, #16]
 8009450:	b942      	cbnz	r2, 8009464 <__swsetup_r+0xa4>
 8009452:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009456:	d1c5      	bne.n	80093e4 <__swsetup_r+0x24>
 8009458:	bd38      	pop	{r3, r4, r5, pc}
 800945a:	0799      	lsls	r1, r3, #30
 800945c:	bf58      	it	pl
 800945e:	6962      	ldrpl	r2, [r4, #20]
 8009460:	60a2      	str	r2, [r4, #8]
 8009462:	e7f4      	b.n	800944e <__swsetup_r+0x8e>
 8009464:	2000      	movs	r0, #0
 8009466:	e7f7      	b.n	8009458 <__swsetup_r+0x98>
 8009468:	2000001c 	.word	0x2000001c

0800946c <_raise_r>:
 800946c:	291f      	cmp	r1, #31
 800946e:	b538      	push	{r3, r4, r5, lr}
 8009470:	4605      	mov	r5, r0
 8009472:	460c      	mov	r4, r1
 8009474:	d904      	bls.n	8009480 <_raise_r+0x14>
 8009476:	2316      	movs	r3, #22
 8009478:	6003      	str	r3, [r0, #0]
 800947a:	f04f 30ff 	mov.w	r0, #4294967295
 800947e:	bd38      	pop	{r3, r4, r5, pc}
 8009480:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009482:	b112      	cbz	r2, 800948a <_raise_r+0x1e>
 8009484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009488:	b94b      	cbnz	r3, 800949e <_raise_r+0x32>
 800948a:	4628      	mov	r0, r5
 800948c:	f000 f830 	bl	80094f0 <_getpid_r>
 8009490:	4622      	mov	r2, r4
 8009492:	4601      	mov	r1, r0
 8009494:	4628      	mov	r0, r5
 8009496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800949a:	f000 b817 	b.w	80094cc <_kill_r>
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d00a      	beq.n	80094b8 <_raise_r+0x4c>
 80094a2:	1c59      	adds	r1, r3, #1
 80094a4:	d103      	bne.n	80094ae <_raise_r+0x42>
 80094a6:	2316      	movs	r3, #22
 80094a8:	6003      	str	r3, [r0, #0]
 80094aa:	2001      	movs	r0, #1
 80094ac:	e7e7      	b.n	800947e <_raise_r+0x12>
 80094ae:	2100      	movs	r1, #0
 80094b0:	4620      	mov	r0, r4
 80094b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80094b6:	4798      	blx	r3
 80094b8:	2000      	movs	r0, #0
 80094ba:	e7e0      	b.n	800947e <_raise_r+0x12>

080094bc <raise>:
 80094bc:	4b02      	ldr	r3, [pc, #8]	@ (80094c8 <raise+0xc>)
 80094be:	4601      	mov	r1, r0
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	f7ff bfd3 	b.w	800946c <_raise_r>
 80094c6:	bf00      	nop
 80094c8:	2000001c 	.word	0x2000001c

080094cc <_kill_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	2300      	movs	r3, #0
 80094d0:	4d06      	ldr	r5, [pc, #24]	@ (80094ec <_kill_r+0x20>)
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	602b      	str	r3, [r5, #0]
 80094da:	f7f8 f81f 	bl	800151c <_kill>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	d102      	bne.n	80094e8 <_kill_r+0x1c>
 80094e2:	682b      	ldr	r3, [r5, #0]
 80094e4:	b103      	cbz	r3, 80094e8 <_kill_r+0x1c>
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	bd38      	pop	{r3, r4, r5, pc}
 80094ea:	bf00      	nop
 80094ec:	20004b08 	.word	0x20004b08

080094f0 <_getpid_r>:
 80094f0:	f7f8 b812 	b.w	8001518 <_getpid>

080094f4 <__swhatbuf_r>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	460c      	mov	r4, r1
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	4615      	mov	r5, r2
 80094fe:	2900      	cmp	r1, #0
 8009500:	461e      	mov	r6, r3
 8009502:	b096      	sub	sp, #88	@ 0x58
 8009504:	da0c      	bge.n	8009520 <__swhatbuf_r+0x2c>
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	2100      	movs	r1, #0
 800950a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800950e:	bf14      	ite	ne
 8009510:	2340      	movne	r3, #64	@ 0x40
 8009512:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009516:	2000      	movs	r0, #0
 8009518:	6031      	str	r1, [r6, #0]
 800951a:	602b      	str	r3, [r5, #0]
 800951c:	b016      	add	sp, #88	@ 0x58
 800951e:	bd70      	pop	{r4, r5, r6, pc}
 8009520:	466a      	mov	r2, sp
 8009522:	f000 f849 	bl	80095b8 <_fstat_r>
 8009526:	2800      	cmp	r0, #0
 8009528:	dbed      	blt.n	8009506 <__swhatbuf_r+0x12>
 800952a:	9901      	ldr	r1, [sp, #4]
 800952c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009530:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009534:	4259      	negs	r1, r3
 8009536:	4159      	adcs	r1, r3
 8009538:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800953c:	e7eb      	b.n	8009516 <__swhatbuf_r+0x22>

0800953e <__smakebuf_r>:
 800953e:	898b      	ldrh	r3, [r1, #12]
 8009540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009542:	079d      	lsls	r5, r3, #30
 8009544:	4606      	mov	r6, r0
 8009546:	460c      	mov	r4, r1
 8009548:	d507      	bpl.n	800955a <__smakebuf_r+0x1c>
 800954a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800954e:	6023      	str	r3, [r4, #0]
 8009550:	6123      	str	r3, [r4, #16]
 8009552:	2301      	movs	r3, #1
 8009554:	6163      	str	r3, [r4, #20]
 8009556:	b003      	add	sp, #12
 8009558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800955a:	466a      	mov	r2, sp
 800955c:	ab01      	add	r3, sp, #4
 800955e:	f7ff ffc9 	bl	80094f4 <__swhatbuf_r>
 8009562:	9f00      	ldr	r7, [sp, #0]
 8009564:	4605      	mov	r5, r0
 8009566:	4639      	mov	r1, r7
 8009568:	4630      	mov	r0, r6
 800956a:	f7fe fedb 	bl	8008324 <_malloc_r>
 800956e:	b948      	cbnz	r0, 8009584 <__smakebuf_r+0x46>
 8009570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009574:	059a      	lsls	r2, r3, #22
 8009576:	d4ee      	bmi.n	8009556 <__smakebuf_r+0x18>
 8009578:	f023 0303 	bic.w	r3, r3, #3
 800957c:	f043 0302 	orr.w	r3, r3, #2
 8009580:	81a3      	strh	r3, [r4, #12]
 8009582:	e7e2      	b.n	800954a <__smakebuf_r+0xc>
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800958a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800958e:	81a3      	strh	r3, [r4, #12]
 8009590:	9b01      	ldr	r3, [sp, #4]
 8009592:	6020      	str	r0, [r4, #0]
 8009594:	b15b      	cbz	r3, 80095ae <__smakebuf_r+0x70>
 8009596:	4630      	mov	r0, r6
 8009598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800959c:	f000 f81e 	bl	80095dc <_isatty_r>
 80095a0:	b128      	cbz	r0, 80095ae <__smakebuf_r+0x70>
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	f023 0303 	bic.w	r3, r3, #3
 80095a8:	f043 0301 	orr.w	r3, r3, #1
 80095ac:	81a3      	strh	r3, [r4, #12]
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	431d      	orrs	r5, r3
 80095b2:	81a5      	strh	r5, [r4, #12]
 80095b4:	e7cf      	b.n	8009556 <__smakebuf_r+0x18>
	...

080095b8 <_fstat_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	2300      	movs	r3, #0
 80095bc:	4d06      	ldr	r5, [pc, #24]	@ (80095d8 <_fstat_r+0x20>)
 80095be:	4604      	mov	r4, r0
 80095c0:	4608      	mov	r0, r1
 80095c2:	4611      	mov	r1, r2
 80095c4:	602b      	str	r3, [r5, #0]
 80095c6:	f7f7 ffc8 	bl	800155a <_fstat>
 80095ca:	1c43      	adds	r3, r0, #1
 80095cc:	d102      	bne.n	80095d4 <_fstat_r+0x1c>
 80095ce:	682b      	ldr	r3, [r5, #0]
 80095d0:	b103      	cbz	r3, 80095d4 <_fstat_r+0x1c>
 80095d2:	6023      	str	r3, [r4, #0]
 80095d4:	bd38      	pop	{r3, r4, r5, pc}
 80095d6:	bf00      	nop
 80095d8:	20004b08 	.word	0x20004b08

080095dc <_isatty_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	2300      	movs	r3, #0
 80095e0:	4d05      	ldr	r5, [pc, #20]	@ (80095f8 <_isatty_r+0x1c>)
 80095e2:	4604      	mov	r4, r0
 80095e4:	4608      	mov	r0, r1
 80095e6:	602b      	str	r3, [r5, #0]
 80095e8:	f7f7 ffbc 	bl	8001564 <_isatty>
 80095ec:	1c43      	adds	r3, r0, #1
 80095ee:	d102      	bne.n	80095f6 <_isatty_r+0x1a>
 80095f0:	682b      	ldr	r3, [r5, #0]
 80095f2:	b103      	cbz	r3, 80095f6 <_isatty_r+0x1a>
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
 80095f8:	20004b08 	.word	0x20004b08

080095fc <_init>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	bf00      	nop
 8009600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009602:	bc08      	pop	{r3}
 8009604:	469e      	mov	lr, r3
 8009606:	4770      	bx	lr

08009608 <_fini>:
 8009608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960a:	bf00      	nop
 800960c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800960e:	bc08      	pop	{r3}
 8009610:	469e      	mov	lr, r3
 8009612:	4770      	bx	lr
