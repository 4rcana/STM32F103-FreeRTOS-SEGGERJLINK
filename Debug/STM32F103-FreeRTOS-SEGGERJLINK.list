
STM32F103-FreeRTOS-SEGGERJLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007150  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08007260  08007260  00008260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800751c  0800751c  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800751c  0800751c  00009064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800751c  0800751c  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800751c  0800751c  0000851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007520  08007520  00008520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007524  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048a0  20000064  08007588  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004904  08007588  00009904  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019177  00000000  00000000  0000908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037af  00000000  00000000  00022204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  000259b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e6  00000000  00000000  00027100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e7c  00000000  00000000  000282e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001880a  00000000  00000000  00042162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab891  00000000  00000000  0005a96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001061fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006664  00000000  00000000  00106240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b6  00000000  00000000  0010c8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08007248 	.word	0x08007248

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08007248 	.word	0x08007248

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	@ 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20003c0c 	.word	0x20003c0c

080001dc <LEDGreen>:
 */

#include "LEDS.h"
#include "main.h"

void LEDGreen(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e2:	463b      	mov	r3, r7
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin;
 80001ee:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80001f2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f4:	2301      	movs	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001fc:	2302      	movs	r3, #2
 80001fe:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000200:	463b      	mov	r3, r7
 8000202:	4619      	mov	r1, r3
 8000204:	480f      	ldr	r0, [pc, #60]	@ (8000244 <LEDGreen+0x68>)
 8000206:	f000 fd97 	bl	8000d38 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED4_Pin|LED2_Pin;
 800020a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800020e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000210:	2300      	movs	r3, #0
 8000212:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000214:	2300      	movs	r3, #0
 8000216:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000218:	2302      	movs	r3, #2
 800021a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800021c:	463b      	mov	r3, r7
 800021e:	4619      	mov	r1, r3
 8000220:	4808      	ldr	r0, [pc, #32]	@ (8000244 <LEDGreen+0x68>)
 8000222:	f000 fd89 	bl	8000d38 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2180      	movs	r1, #128	@ 0x80
 800022a:	4806      	ldr	r0, [pc, #24]	@ (8000244 <LEDGreen+0x68>)
 800022c:	f000 ff08 	bl	8001040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000236:	4803      	ldr	r0, [pc, #12]	@ (8000244 <LEDGreen+0x68>)
 8000238:	f000 ff02 	bl	8001040 <HAL_GPIO_WritePin>
}
 800023c:	bf00      	nop
 800023e:	3710      	adds	r7, #16
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010c00 	.word	0x40010c00

08000248 <LEDBlue>:

void LEDBlue(){
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024e:	463b      	mov	r3, r7
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 800025a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800025e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000260:	2301      	movs	r3, #1
 8000262:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000264:	2300      	movs	r3, #0
 8000266:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000268:	2302      	movs	r3, #2
 800026a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026c:	463b      	mov	r3, r7
 800026e:	4619      	mov	r1, r3
 8000270:	480f      	ldr	r0, [pc, #60]	@ (80002b0 <LEDBlue+0x68>)
 8000272:	f000 fd61 	bl	8000d38 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin;
 8000276:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800027a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000280:	2300      	movs	r3, #0
 8000282:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000284:	2302      	movs	r3, #2
 8000286:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000288:	463b      	mov	r3, r7
 800028a:	4619      	mov	r1, r3
 800028c:	4808      	ldr	r0, [pc, #32]	@ (80002b0 <LEDBlue+0x68>)
 800028e:	f000 fd53 	bl	8000d38 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8000292:	2201      	movs	r2, #1
 8000294:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000298:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <LEDBlue+0x68>)
 800029a:	f000 fed1 	bl	8001040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2180      	movs	r1, #128	@ 0x80
 80002a2:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <LEDBlue+0x68>)
 80002a4:	f000 fecc 	bl	8001040 <HAL_GPIO_WritePin>
}
 80002a8:	bf00      	nop
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40010c00 	.word	0x40010c00

080002b4 <LEDRed>:

void LEDRed(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ba:	463b      	mov	r3, r7
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 80002c6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80002ca:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002cc:	2301      	movs	r3, #1
 80002ce:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d4:	2302      	movs	r3, #2
 80002d6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d8:	463b      	mov	r3, r7
 80002da:	4619      	mov	r1, r3
 80002dc:	480f      	ldr	r0, [pc, #60]	@ (800031c <LEDRed+0x68>)
 80002de:	f000 fd2b 	bl	8000d38 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin;
 80002e2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80002e6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002e8:	2300      	movs	r3, #0
 80002ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f0:	2302      	movs	r3, #2
 80002f2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f4:	463b      	mov	r3, r7
 80002f6:	4619      	mov	r1, r3
 80002f8:	4808      	ldr	r0, [pc, #32]	@ (800031c <LEDRed+0x68>)
 80002fa:	f000 fd1d 	bl	8000d38 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2180      	movs	r1, #128	@ 0x80
 8000302:	4806      	ldr	r0, [pc, #24]	@ (800031c <LEDRed+0x68>)
 8000304:	f000 fe9c 	bl	8001040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800030e:	4803      	ldr	r0, [pc, #12]	@ (800031c <LEDRed+0x68>)
 8000310:	f000 fe96 	bl	8001040 <HAL_GPIO_WritePin>
}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40010c00 	.word	0x40010c00

08000320 <LEDOff>:

void LEDOff(){
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	463b      	mov	r3, r7
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
 8000330:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8000332:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000336:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000338:	2300      	movs	r3, #0
 800033a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000340:	2302      	movs	r3, #2
 8000342:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000344:	463b      	mov	r3, r7
 8000346:	4619      	mov	r1, r3
 8000348:	4803      	ldr	r0, [pc, #12]	@ (8000358 <LEDOff+0x38>)
 800034a:	f000 fcf5 	bl	8000d38 <HAL_GPIO_Init>
}
 800034e:	bf00      	nop
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010c00 	.word	0x40010c00

0800035c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000364:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000368:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	2b00      	cmp	r3, #0
 8000372:	d013      	beq.n	800039c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000374:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000378:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800037c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000380:	2b00      	cmp	r3, #0
 8000382:	d00b      	beq.n	800039c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000384:	e000      	b.n	8000388 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000386:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000388:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0f9      	beq.n	8000386 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000392:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	b2d2      	uxtb	r2, r2
 800039a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800039c:	687b      	ldr	r3, [r7, #4]
}
 800039e:	4618      	mov	r0, r3
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f000 fbb2 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f850 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f000 f890 	bl	80004d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  SEGGER_SYSVIEW_Conf();
 80003b8:	f004 fcdc 	bl	8004d74 <SEGGER_SYSVIEW_Conf>
  osKernelInitialize();
 80003bc:	f001 fd1e 	bl	8001dfc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003c0:	4a15      	ldr	r2, [pc, #84]	@ (8000418 <main+0x70>)
 80003c2:	2100      	movs	r1, #0
 80003c4:	4815      	ldr	r0, [pc, #84]	@ (800041c <main+0x74>)
 80003c6:	f001 fd61 	bl	8001e8c <osThreadNew>
 80003ca:	4603      	mov	r3, r0
 80003cc:	4a14      	ldr	r2, [pc, #80]	@ (8000420 <main+0x78>)
 80003ce:	6013      	str	r3, [r2, #0]

  /* creation of GreenTask */
  GreenTaskHandle = osThreadNew(GreenLED, NULL, &GreenTask_attributes);
 80003d0:	4a14      	ldr	r2, [pc, #80]	@ (8000424 <main+0x7c>)
 80003d2:	2100      	movs	r1, #0
 80003d4:	4814      	ldr	r0, [pc, #80]	@ (8000428 <main+0x80>)
 80003d6:	f001 fd59 	bl	8001e8c <osThreadNew>
 80003da:	4603      	mov	r3, r0
 80003dc:	4a13      	ldr	r2, [pc, #76]	@ (800042c <main+0x84>)
 80003de:	6013      	str	r3, [r2, #0]

  /* creation of BlueTask */
  BlueTaskHandle = osThreadNew(BlueLED, NULL, &BlueTask_attributes);
 80003e0:	4a13      	ldr	r2, [pc, #76]	@ (8000430 <main+0x88>)
 80003e2:	2100      	movs	r1, #0
 80003e4:	4813      	ldr	r0, [pc, #76]	@ (8000434 <main+0x8c>)
 80003e6:	f001 fd51 	bl	8001e8c <osThreadNew>
 80003ea:	4603      	mov	r3, r0
 80003ec:	4a12      	ldr	r2, [pc, #72]	@ (8000438 <main+0x90>)
 80003ee:	6013      	str	r3, [r2, #0]

  /* creation of RedTask */
  RedTaskHandle = osThreadNew(RedLED, NULL, &RedTask_attributes);
 80003f0:	4a12      	ldr	r2, [pc, #72]	@ (800043c <main+0x94>)
 80003f2:	2100      	movs	r1, #0
 80003f4:	4812      	ldr	r0, [pc, #72]	@ (8000440 <main+0x98>)
 80003f6:	f001 fd49 	bl	8001e8c <osThreadNew>
 80003fa:	4603      	mov	r3, r0
 80003fc:	4a11      	ldr	r2, [pc, #68]	@ (8000444 <main+0x9c>)
 80003fe:	6013      	str	r3, [r2, #0]

  /* creation of LedMUX */
  LedMUXHandle = osThreadNew(StartLedMUX, NULL, &LedMUX_attributes);
 8000400:	4a11      	ldr	r2, [pc, #68]	@ (8000448 <main+0xa0>)
 8000402:	2100      	movs	r1, #0
 8000404:	4811      	ldr	r0, [pc, #68]	@ (800044c <main+0xa4>)
 8000406:	f001 fd41 	bl	8001e8c <osThreadNew>
 800040a:	4603      	mov	r3, r0
 800040c:	4a10      	ldr	r2, [pc, #64]	@ (8000450 <main+0xa8>)
 800040e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000410:	f001 fd16 	bl	8001e40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <main+0x6c>
 8000418:	080073dc 	.word	0x080073dc
 800041c:	0800060d 	.word	0x0800060d
 8000420:	20000080 	.word	0x20000080
 8000424:	08007400 	.word	0x08007400
 8000428:	0800061d 	.word	0x0800061d
 800042c:	20000084 	.word	0x20000084
 8000430:	08007424 	.word	0x08007424
 8000434:	080006d1 	.word	0x080006d1
 8000438:	20000088 	.word	0x20000088
 800043c:	08007448 	.word	0x08007448
 8000440:	08000721 	.word	0x08000721
 8000444:	2000008c 	.word	0x2000008c
 8000448:	0800746c 	.word	0x0800746c
 800044c:	08000771 	.word	0x08000771
 8000450:	20000090 	.word	0x20000090

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b090      	sub	sp, #64	@ 0x40
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	2228      	movs	r2, #40	@ 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f006 fa62 	bl	800692c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	2302      	movs	r3, #2
 8000478:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047a:	2301      	movs	r3, #1
 800047c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047e:	2310      	movs	r3, #16
 8000480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000482:	2302      	movs	r3, #2
 8000484:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000486:	2300      	movs	r3, #0
 8000488:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800048a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800048e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	f107 0318 	add.w	r3, r7, #24
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fe03 	bl	80010a0 <HAL_RCC_OscConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004a0:	f000 f9e5 	bl	800086e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a4:	230f      	movs	r3, #15
 80004a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a8:	2302      	movs	r3, #2
 80004aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2102      	movs	r1, #2
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 f870 	bl	80015a4 <HAL_RCC_ClockConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004ca:	f000 f9d0 	bl	800086e <Error_Handler>
  }
}
 80004ce:	bf00      	nop
 80004d0:	3740      	adds	r7, #64	@ 0x40
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ec:	4b42      	ldr	r3, [pc, #264]	@ (80005f8 <MX_GPIO_Init+0x120>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a41      	ldr	r2, [pc, #260]	@ (80005f8 <MX_GPIO_Init+0x120>)
 80004f2:	f043 0310 	orr.w	r3, r3, #16
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b3f      	ldr	r3, [pc, #252]	@ (80005f8 <MX_GPIO_Init+0x120>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0310 	and.w	r3, r3, #16
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b3c      	ldr	r3, [pc, #240]	@ (80005f8 <MX_GPIO_Init+0x120>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a3b      	ldr	r2, [pc, #236]	@ (80005f8 <MX_GPIO_Init+0x120>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b39      	ldr	r3, [pc, #228]	@ (80005f8 <MX_GPIO_Init+0x120>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	4b36      	ldr	r3, [pc, #216]	@ (80005f8 <MX_GPIO_Init+0x120>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a35      	ldr	r2, [pc, #212]	@ (80005f8 <MX_GPIO_Init+0x120>)
 8000522:	f043 0308 	orr.w	r3, r3, #8
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b33      	ldr	r3, [pc, #204]	@ (80005f8 <MX_GPIO_Init+0x120>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0308 	and.w	r3, r3, #8
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2120      	movs	r1, #32
 8000538:	4830      	ldr	r0, [pc, #192]	@ (80005fc <MX_GPIO_Init+0x124>)
 800053a:	f000 fd81 	bl	8001040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000544:	482e      	ldr	r0, [pc, #184]	@ (8000600 <MX_GPIO_Init+0x128>)
 8000546:	f000 fd7b 	bl	8001040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000550:	4b2c      	ldr	r3, [pc, #176]	@ (8000604 <MX_GPIO_Init+0x12c>)
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	482a      	ldr	r0, [pc, #168]	@ (8000608 <MX_GPIO_Init+0x130>)
 8000560:	f000 fbea 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000564:	2320      	movs	r3, #32
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2302      	movs	r3, #2
 8000572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	4820      	ldr	r0, [pc, #128]	@ (80005fc <MX_GPIO_Init+0x124>)
 800057c:	f000 fbdc 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Left_Button_Pin */
  GPIO_InitStruct.Pin = Left_Button_Pin;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000584:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <MX_GPIO_Init+0x12c>)
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000588:	2301      	movs	r3, #1
 800058a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Left_Button_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4619      	mov	r1, r3
 8000592:	481b      	ldr	r0, [pc, #108]	@ (8000600 <MX_GPIO_Init+0x128>)
 8000594:	f000 fbd0 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin;
 8000598:	23c0      	movs	r3, #192	@ 0xc0
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	4815      	ldr	r0, [pc, #84]	@ (8000600 <MX_GPIO_Init+0x128>)
 80005ac:	f000 fbc4 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80005b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2302      	movs	r3, #2
 80005c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	4619      	mov	r1, r3
 80005c8:	480d      	ldr	r0, [pc, #52]	@ (8000600 <MX_GPIO_Init+0x128>)
 80005ca:	f000 fbb5 	bl	8000d38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2105      	movs	r1, #5
 80005d2:	2006      	movs	r0, #6
 80005d4:	f000 fb85 	bl	8000ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005d8:	2006      	movs	r0, #6
 80005da:	f000 fb9e 	bl	8000d1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2105      	movs	r1, #5
 80005e2:	2028      	movs	r0, #40	@ 0x28
 80005e4:	f000 fb7d 	bl	8000ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005e8:	2028      	movs	r0, #40	@ 0x28
 80005ea:	f000 fb96 	bl	8000d1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005ee:	bf00      	nop
 80005f0:	3720      	adds	r7, #32
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800
 8000600:	40010c00 	.word	0x40010c00
 8000604:	10210000 	.word	0x10210000
 8000608:	40011000 	.word	0x40011000

0800060c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f001 fcfb 	bl	8002010 <osDelay>
 800061a:	e7fb      	b.n	8000614 <StartDefaultTask+0x8>

0800061c <GreenLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenLED */
void GreenLED(void *argument)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenLED */
  uint8_t counter = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	if(GreenState == OFF) {
 8000628:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <GreenLED+0x90>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d103      	bne.n	8000638 <GreenLED+0x1c>
		GreenState = ON;
 8000630:	4b1e      	ldr	r3, [pc, #120]	@ (80006ac <GreenLED+0x90>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	e002      	b.n	800063e <GreenLED+0x22>
	}
	else {
		GreenState = OFF;
 8000638:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <GreenLED+0x90>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
	}

	counter++;
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	3301      	adds	r3, #1
 8000642:	73fb      	strb	r3, [r7, #15]

	sprintf(message_buffer,"GreenTask counter = %d\n",counter);
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	461a      	mov	r2, r3
 8000648:	4919      	ldr	r1, [pc, #100]	@ (80006b0 <GreenLED+0x94>)
 800064a:	481a      	ldr	r0, [pc, #104]	@ (80006b4 <GreenLED+0x98>)
 800064c:	f006 f93c 	bl	80068c8 <siprintf>
	ITM_Print(message_buffer);
 8000650:	4818      	ldr	r0, [pc, #96]	@ (80006b4 <GreenLED+0x98>)
 8000652:	f000 f8f7 	bl	8000844 <ITM_Print>

	if(Left_Button_State == PRESSED){
 8000656:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <GreenLED+0x9c>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d10e      	bne.n	800067c <GreenLED+0x60>
		sprintf(message_buffer,"Terminating GreenTask\n");
 800065e:	4917      	ldr	r1, [pc, #92]	@ (80006bc <GreenLED+0xa0>)
 8000660:	4814      	ldr	r0, [pc, #80]	@ (80006b4 <GreenLED+0x98>)
 8000662:	f006 f931 	bl	80068c8 <siprintf>
		ITM_Print(message_buffer);
 8000666:	4813      	ldr	r0, [pc, #76]	@ (80006b4 <GreenLED+0x98>)
 8000668:	f000 f8ec 	bl	8000844 <ITM_Print>
		GreenState = OFF;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <GreenLED+0x90>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
		osThreadTerminate(GreenTaskHandle);
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <GreenLED+0xa4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fc9d 	bl	8001fb6 <osThreadTerminate>
	}

	if(counter==5){
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	2b05      	cmp	r3, #5
 8000680:	d10e      	bne.n	80006a0 <GreenLED+0x84>
		sprintf(message_buffer,"Terminating RedTask\n");
 8000682:	4910      	ldr	r1, [pc, #64]	@ (80006c4 <GreenLED+0xa8>)
 8000684:	480b      	ldr	r0, [pc, #44]	@ (80006b4 <GreenLED+0x98>)
 8000686:	f006 f91f 	bl	80068c8 <siprintf>
		ITM_Print(message_buffer);
 800068a:	480a      	ldr	r0, [pc, #40]	@ (80006b4 <GreenLED+0x98>)
 800068c:	f000 f8da 	bl	8000844 <ITM_Print>
		osThreadTerminate(RedTaskHandle);
 8000690:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <GreenLED+0xac>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fc8e 	bl	8001fb6 <osThreadTerminate>
		RedState = OFF;
 800069a:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <GreenLED+0xb0>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
	}

    osDelay(1000);
 80006a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a4:	f001 fcb4 	bl	8002010 <osDelay>
	if(GreenState == OFF) {
 80006a8:	e7be      	b.n	8000628 <GreenLED+0xc>
 80006aa:	bf00      	nop
 80006ac:	20000001 	.word	0x20000001
 80006b0:	08007294 	.word	0x08007294
 80006b4:	20000094 	.word	0x20000094
 80006b8:	20000000 	.word	0x20000000
 80006bc:	080072ac 	.word	0x080072ac
 80006c0:	20000084 	.word	0x20000084
 80006c4:	080072c4 	.word	0x080072c4
 80006c8:	2000008c 	.word	0x2000008c
 80006cc:	20000002 	.word	0x20000002

080006d0 <BlueLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BlueLED */
void BlueLED(void *argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlueLED */
  uint8_t counter=0;
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	if(BlueState == OFF) {
 80006dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <BlueLED+0x44>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d103      	bne.n	80006ec <BlueLED+0x1c>
		BlueState = ON;
 80006e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <BlueLED+0x44>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e002      	b.n	80006f2 <BlueLED+0x22>
	}
	else {
		BlueState = OFF;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <BlueLED+0x44>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
	}

	counter++;
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	3301      	adds	r3, #1
 80006f6:	73fb      	strb	r3, [r7, #15]

	sprintf(message_buffer,"BlueTask counter = %d\n",counter);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	461a      	mov	r2, r3
 80006fc:	4906      	ldr	r1, [pc, #24]	@ (8000718 <BlueLED+0x48>)
 80006fe:	4807      	ldr	r0, [pc, #28]	@ (800071c <BlueLED+0x4c>)
 8000700:	f006 f8e2 	bl	80068c8 <siprintf>
	ITM_Print(message_buffer);
 8000704:	4805      	ldr	r0, [pc, #20]	@ (800071c <BlueLED+0x4c>)
 8000706:	f000 f89d 	bl	8000844 <ITM_Print>

    osDelay(2000);
 800070a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800070e:	f001 fc7f 	bl	8002010 <osDelay>
	if(BlueState == OFF) {
 8000712:	e7e3      	b.n	80006dc <BlueLED+0xc>
 8000714:	20000003 	.word	0x20000003
 8000718:	080072dc 	.word	0x080072dc
 800071c:	20000094 	.word	0x20000094

08000720 <RedLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedLED */
void RedLED(void *argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedLED */
  uint8_t counter=0;
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	if(RedState == OFF) {
 800072c:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <RedLED+0x44>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d103      	bne.n	800073c <RedLED+0x1c>
		RedState = ON;
 8000734:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <RedLED+0x44>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
 800073a:	e002      	b.n	8000742 <RedLED+0x22>
	}
	else {
		RedState = OFF;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <RedLED+0x44>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
	}
	counter++;
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	3301      	adds	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]

	sprintf(message_buffer,"RedTask counter = %d\n",counter);
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	461a      	mov	r2, r3
 800074c:	4906      	ldr	r1, [pc, #24]	@ (8000768 <RedLED+0x48>)
 800074e:	4807      	ldr	r0, [pc, #28]	@ (800076c <RedLED+0x4c>)
 8000750:	f006 f8ba 	bl	80068c8 <siprintf>
	ITM_Print(message_buffer);
 8000754:	4805      	ldr	r0, [pc, #20]	@ (800076c <RedLED+0x4c>)
 8000756:	f000 f875 	bl	8000844 <ITM_Print>

    osDelay(3000);
 800075a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800075e:	f001 fc57 	bl	8002010 <osDelay>
	if(RedState == OFF) {
 8000762:	e7e3      	b.n	800072c <RedLED+0xc>
 8000764:	20000002 	.word	0x20000002
 8000768:	080072f4 	.word	0x080072f4
 800076c:	20000094 	.word	0x20000094

08000770 <StartLedMUX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedMUX */
void StartLedMUX(void *argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedMUX */
  /* Infinite loop */
  for(;;)
  {
	if(GreenState == ON){
 8000778:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <StartLedMUX+0x70>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d106      	bne.n	800078e <StartLedMUX+0x1e>
		LEDOff();
 8000780:	f7ff fdce 	bl	8000320 <LEDOff>
		LEDGreen();
 8000784:	f7ff fd2a 	bl	80001dc <LEDGreen>
		osDelay(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f001 fc41 	bl	8002010 <osDelay>
	}

	if(BlueState == ON){
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <StartLedMUX+0x74>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d106      	bne.n	80007a4 <StartLedMUX+0x34>
		LEDOff();
 8000796:	f7ff fdc3 	bl	8000320 <LEDOff>
		LEDBlue();
 800079a:	f7ff fd55 	bl	8000248 <LEDBlue>
		osDelay(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f001 fc36 	bl	8002010 <osDelay>
	}

	if(RedState == ON){
 80007a4:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <StartLedMUX+0x78>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d106      	bne.n	80007ba <StartLedMUX+0x4a>
		LEDOff();
 80007ac:	f7ff fdb8 	bl	8000320 <LEDOff>
		LEDRed();
 80007b0:	f7ff fd80 	bl	80002b4 <LEDRed>
		osDelay(1);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f001 fc2b 	bl	8002010 <osDelay>
	}

	if(GreenState == OFF && BlueState == OFF && RedState == OFF){
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <StartLedMUX+0x70>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d1da      	bne.n	8000778 <StartLedMUX+0x8>
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <StartLedMUX+0x74>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d1d6      	bne.n	8000778 <StartLedMUX+0x8>
 80007ca:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <StartLedMUX+0x78>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d1d2      	bne.n	8000778 <StartLedMUX+0x8>
		LEDOff();
 80007d2:	f7ff fda5 	bl	8000320 <LEDOff>
		osDelay(100);
 80007d6:	2064      	movs	r0, #100	@ 0x64
 80007d8:	f001 fc1a 	bl	8002010 <osDelay>
	if(GreenState == ON){
 80007dc:	e7cc      	b.n	8000778 <StartLedMUX+0x8>
 80007de:	bf00      	nop
 80007e0:	20000001 	.word	0x20000001
 80007e4:	20000003 	.word	0x20000003
 80007e8:	20000002 	.word	0x20000002

080007ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a04      	ldr	r2, [pc, #16]	@ (800080c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d101      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007fe:	f000 f99f 	bl	8000b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40000800 	.word	0x40000800

08000810 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);

	if(GPIO_Pin == Left_Button_Pin){
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d10a      	bne.n	8000836 <HAL_GPIO_EXTI_Callback+0x26>
		if(Left_Button_State == WAIT){
 8000820:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <HAL_GPIO_EXTI_Callback+0x30>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d103      	bne.n	8000830 <HAL_GPIO_EXTI_Callback+0x20>
			Left_Button_State = PRESSED;
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_GPIO_EXTI_Callback+0x30>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
		}
		else{
			Left_Button_State = WAIT;
		}
	}
}
 800082e:	e002      	b.n	8000836 <HAL_GPIO_EXTI_Callback+0x26>
			Left_Button_State = WAIT;
 8000830:	4b03      	ldr	r3, [pc, #12]	@ (8000840 <HAL_GPIO_EXTI_Callback+0x30>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	20000000 	.word	0x20000000

08000844 <ITM_Print>:

void ITM_Print(const char *message_buffer){
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	while(*message_buffer){
 800084c:	e006      	b.n	800085c <ITM_Print+0x18>
		ITM_SendChar(*message_buffer++);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	607a      	str	r2, [r7, #4]
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fd80 	bl	800035c <ITM_SendChar>
	while(*message_buffer){
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f4      	bne.n	800084e <ITM_Print+0xa>
	}
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000872:	b672      	cpsid	i
}
 8000874:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000876:	bf00      	nop
 8000878:	e7fd      	b.n	8000876 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000882:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <HAL_MspInit+0x68>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a17      	ldr	r2, [pc, #92]	@ (80008e4 <HAL_MspInit+0x68>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <HAL_MspInit+0x68>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_MspInit+0x68>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	4a11      	ldr	r2, [pc, #68]	@ (80008e4 <HAL_MspInit+0x68>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	61d3      	str	r3, [r2, #28]
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <HAL_MspInit+0x68>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	210f      	movs	r1, #15
 80008b6:	f06f 0001 	mvn.w	r0, #1
 80008ba:	f000 fa12 	bl	8000ce2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008be:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <HAL_MspInit+0x6c>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <HAL_MspInit+0x6c>)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010000 	.word	0x40010000

080008ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08e      	sub	sp, #56	@ 0x38
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000902:	4b34      	ldr	r3, [pc, #208]	@ (80009d4 <HAL_InitTick+0xe8>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a33      	ldr	r2, [pc, #204]	@ (80009d4 <HAL_InitTick+0xe8>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b31      	ldr	r3, [pc, #196]	@ (80009d4 <HAL_InitTick+0xe8>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800091a:	f107 0210 	add.w	r2, r7, #16
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f000 ff99 	bl	800185c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800092a:	6a3b      	ldr	r3, [r7, #32]
 800092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800092e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000930:	2b00      	cmp	r3, #0
 8000932:	d103      	bne.n	800093c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000934:	f000 ff7e 	bl	8001834 <HAL_RCC_GetPCLK1Freq>
 8000938:	6378      	str	r0, [r7, #52]	@ 0x34
 800093a:	e004      	b.n	8000946 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800093c:	f000 ff7a 	bl	8001834 <HAL_RCC_GetPCLK1Freq>
 8000940:	4603      	mov	r3, r0
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000948:	4a23      	ldr	r2, [pc, #140]	@ (80009d8 <HAL_InitTick+0xec>)
 800094a:	fba2 2303 	umull	r2, r3, r2, r3
 800094e:	0c9b      	lsrs	r3, r3, #18
 8000950:	3b01      	subs	r3, #1
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000954:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <HAL_InitTick+0xf0>)
 8000956:	4a22      	ldr	r2, [pc, #136]	@ (80009e0 <HAL_InitTick+0xf4>)
 8000958:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800095a:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <HAL_InitTick+0xf0>)
 800095c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000960:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000962:	4a1e      	ldr	r2, [pc, #120]	@ (80009dc <HAL_InitTick+0xf0>)
 8000964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000966:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000968:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <HAL_InitTick+0xf0>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <HAL_InitTick+0xf0>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <HAL_InitTick+0xf0>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800097a:	4818      	ldr	r0, [pc, #96]	@ (80009dc <HAL_InitTick+0xf0>)
 800097c:	f000 ffbc 	bl	80018f8 <HAL_TIM_Base_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000986:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800098a:	2b00      	cmp	r3, #0
 800098c:	d11b      	bne.n	80009c6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800098e:	4813      	ldr	r0, [pc, #76]	@ (80009dc <HAL_InitTick+0xf0>)
 8000990:	f001 f80a 	bl	80019a8 <HAL_TIM_Base_Start_IT>
 8000994:	4603      	mov	r3, r0
 8000996:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800099a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d111      	bne.n	80009c6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009a2:	201e      	movs	r0, #30
 80009a4:	f000 f9b9 	bl	8000d1a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b0f      	cmp	r3, #15
 80009ac:	d808      	bhi.n	80009c0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80009ae:	2200      	movs	r2, #0
 80009b0:	6879      	ldr	r1, [r7, #4]
 80009b2:	201e      	movs	r0, #30
 80009b4:	f000 f995 	bl	8000ce2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b8:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <HAL_InitTick+0xf8>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	e002      	b.n	80009c6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3738      	adds	r7, #56	@ 0x38
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000
 80009d8:	431bde83 	.word	0x431bde83
 80009dc:	200000bc 	.word	0x200000bc
 80009e0:	40000800 	.word	0x40000800
 80009e4:	20000008 	.word	0x20000008

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <NMI_Handler+0x4>

080009f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <MemManage_Handler+0x4>

08000a00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_Button_Pin);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f000 fb25 	bl	8001070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a30:	4802      	ldr	r0, [pc, #8]	@ (8000a3c <TIM4_IRQHandler+0x10>)
 8000a32:	f001 f80b 	bl	8001a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000bc 	.word	0x200000bc

08000a40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a44:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a48:	f000 fb12 	bl	8001070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	@ (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d207      	bcs.n	8000a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a80:	f005 ff5c 	bl	800693c <__errno>
 8000a84:	4603      	mov	r3, r0
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20005000 	.word	0x20005000
 8000ab0:	00000400 	.word	0x00000400
 8000ab4:	20000104 	.word	0x20000104
 8000ab8:	20004908 	.word	0x20004908

08000abc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac8:	f7ff fff8 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480b      	ldr	r0, [pc, #44]	@ (8000afc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ace:	490c      	ldr	r1, [pc, #48]	@ (8000b00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a09      	ldr	r2, [pc, #36]	@ (8000b08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ae4:	4c09      	ldr	r4, [pc, #36]	@ (8000b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af2:	f005 ff29 	bl	8006948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af6:	f7ff fc57 	bl	80003a8 <main>
  bx lr
 8000afa:	4770      	bx	lr
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000b04:	08007524 	.word	0x08007524
  ldr r2, =_sbss
 8000b08:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b0c:	20004904 	.word	0x20004904

08000b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_2_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <HAL_Init+0x28>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	@ (8000b3c <HAL_Init+0x28>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f8d1 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f7ff fede 	bl	80008ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fea4 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40022000 	.word	0x40022000

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a03      	ldr	r2, [pc, #12]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	2000000c 	.word	0x2000000c
 8000b60:	20000108 	.word	0x20000108

08000b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	@ (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	20000108 	.word	0x20000108

08000b78 <__NVIC_SetPriorityGrouping>:
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4906      	ldr	r1, [pc, #24]	@ (8000c10 <__NVIC_EnableIRQ+0x34>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	@ (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	@ (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	@ 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	@ 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff4f 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff64 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ffb2 	bl	8000c68 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff81 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff57 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b08b      	sub	sp, #44	@ 0x2c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e169      	b.n	8001020 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8158 	bne.w	800101a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a9a      	ldr	r2, [pc, #616]	@ (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d05e      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d74:	4a98      	ldr	r2, [pc, #608]	@ (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d875      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d7a:	4a98      	ldr	r2, [pc, #608]	@ (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d058      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d80:	4a96      	ldr	r2, [pc, #600]	@ (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d86f      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d86:	4a96      	ldr	r2, [pc, #600]	@ (8000fe0 <HAL_GPIO_Init+0x2a8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d052      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d8c:	4a94      	ldr	r2, [pc, #592]	@ (8000fe0 <HAL_GPIO_Init+0x2a8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d869      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d92:	4a94      	ldr	r2, [pc, #592]	@ (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d04c      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d98:	4a92      	ldr	r2, [pc, #584]	@ (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d863      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d9e:	4a92      	ldr	r2, [pc, #584]	@ (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d046      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000da4:	4a90      	ldr	r2, [pc, #576]	@ (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d85d      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000daa:	2b12      	cmp	r3, #18
 8000dac:	d82a      	bhi.n	8000e04 <HAL_GPIO_Init+0xcc>
 8000dae:	2b12      	cmp	r3, #18
 8000db0:	d859      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000db2:	a201      	add	r2, pc, #4	@ (adr r2, 8000db8 <HAL_GPIO_Init+0x80>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000e33 	.word	0x08000e33
 8000dbc:	08000e0d 	.word	0x08000e0d
 8000dc0:	08000e1f 	.word	0x08000e1f
 8000dc4:	08000e61 	.word	0x08000e61
 8000dc8:	08000e67 	.word	0x08000e67
 8000dcc:	08000e67 	.word	0x08000e67
 8000dd0:	08000e67 	.word	0x08000e67
 8000dd4:	08000e67 	.word	0x08000e67
 8000dd8:	08000e67 	.word	0x08000e67
 8000ddc:	08000e67 	.word	0x08000e67
 8000de0:	08000e67 	.word	0x08000e67
 8000de4:	08000e67 	.word	0x08000e67
 8000de8:	08000e67 	.word	0x08000e67
 8000dec:	08000e67 	.word	0x08000e67
 8000df0:	08000e67 	.word	0x08000e67
 8000df4:	08000e67 	.word	0x08000e67
 8000df8:	08000e67 	.word	0x08000e67
 8000dfc:	08000e15 	.word	0x08000e15
 8000e00:	08000e29 	.word	0x08000e29
 8000e04:	4a79      	ldr	r2, [pc, #484]	@ (8000fec <HAL_GPIO_Init+0x2b4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e0a:	e02c      	b.n	8000e66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	623b      	str	r3, [r7, #32]
          break;
 8000e12:	e029      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e024      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	3308      	adds	r3, #8
 8000e24:	623b      	str	r3, [r7, #32]
          break;
 8000e26:	e01f      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	330c      	adds	r3, #12
 8000e2e:	623b      	str	r3, [r7, #32]
          break;
 8000e30:	e01a      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e013      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d105      	bne.n	8000e54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	611a      	str	r2, [r3, #16]
          break;
 8000e52:	e009      	b.n	8000e68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e54:	2308      	movs	r3, #8
 8000e56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	615a      	str	r2, [r3, #20]
          break;
 8000e5e:	e003      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e000      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          break;
 8000e66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2bff      	cmp	r3, #255	@ 0xff
 8000e6c:	d801      	bhi.n	8000e72 <HAL_GPIO_Init+0x13a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	e001      	b.n	8000e76 <HAL_GPIO_Init+0x13e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3304      	adds	r3, #4
 8000e76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2bff      	cmp	r3, #255	@ 0xff
 8000e7c:	d802      	bhi.n	8000e84 <HAL_GPIO_Init+0x14c>
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	e002      	b.n	8000e8a <HAL_GPIO_Init+0x152>
 8000e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e86:	3b08      	subs	r3, #8
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	210f      	movs	r1, #15
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	6a39      	ldr	r1, [r7, #32]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 80b1 	beq.w	800101a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a4c      	ldr	r2, [pc, #304]	@ (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ed0:	4a48      	ldr	r2, [pc, #288]	@ (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000edc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a40      	ldr	r2, [pc, #256]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d013      	beq.n	8000f24 <HAL_GPIO_Init+0x1ec>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a3f      	ldr	r2, [pc, #252]	@ (8000ffc <HAL_GPIO_Init+0x2c4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d00d      	beq.n	8000f20 <HAL_GPIO_Init+0x1e8>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a3e      	ldr	r2, [pc, #248]	@ (8001000 <HAL_GPIO_Init+0x2c8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0x1e4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8001004 <HAL_GPIO_Init+0x2cc>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d101      	bne.n	8000f18 <HAL_GPIO_Init+0x1e0>
 8000f14:	2303      	movs	r3, #3
 8000f16:	e006      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f18:	2304      	movs	r3, #4
 8000f1a:	e004      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f24:	2300      	movs	r3, #0
 8000f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f28:	f002 0203 	and.w	r2, r2, #3
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	4093      	lsls	r3, r2
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f36:	492f      	ldr	r1, [pc, #188]	@ (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d006      	beq.n	8000f5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f50:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	492c      	ldr	r1, [pc, #176]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	608b      	str	r3, [r1, #8]
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	4928      	ldr	r1, [pc, #160]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f78:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	4922      	ldr	r1, [pc, #136]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	60cb      	str	r3, [r1, #12]
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f86:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	491e      	ldr	r1, [pc, #120]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	4918      	ldr	r1, [pc, #96]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fae:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4914      	ldr	r1, [pc, #80]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d021      	beq.n	800100c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	490e      	ldr	r1, [pc, #56]	@ (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	600b      	str	r3, [r1, #0]
 8000fd4:	e021      	b.n	800101a <HAL_GPIO_Init+0x2e2>
 8000fd6:	bf00      	nop
 8000fd8:	10320000 	.word	0x10320000
 8000fdc:	10310000 	.word	0x10310000
 8000fe0:	10220000 	.word	0x10220000
 8000fe4:	10210000 	.word	0x10210000
 8000fe8:	10120000 	.word	0x10120000
 8000fec:	10110000 	.word	0x10110000
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	40010800 	.word	0x40010800
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	40011000 	.word	0x40011000
 8001004:	40011400 	.word	0x40011400
 8001008:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800100c:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <HAL_GPIO_Init+0x304>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	43db      	mvns	r3, r3
 8001014:	4909      	ldr	r1, [pc, #36]	@ (800103c <HAL_GPIO_Init+0x304>)
 8001016:	4013      	ands	r3, r2
 8001018:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101c:	3301      	adds	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001026:	fa22 f303 	lsr.w	r3, r2, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f47f ae8e 	bne.w	8000d4c <HAL_GPIO_Init+0x14>
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	372c      	adds	r7, #44	@ 0x2c
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	40010400 	.word	0x40010400

08001040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
 800104c:	4613      	mov	r3, r2
 800104e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001050:	787b      	ldrb	r3, [r7, #1]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800105c:	e003      	b.n	8001066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	041a      	lsls	r2, r3, #16
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	611a      	str	r2, [r3, #16]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800107a:	4b08      	ldr	r3, [pc, #32]	@ (800109c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	4013      	ands	r3, r2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d006      	beq.n	8001094 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001086:	4a05      	ldr	r2, [pc, #20]	@ (800109c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fbbe 	bl	8000810 <HAL_GPIO_EXTI_Callback>
  }
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e272      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8087 	beq.w	80011ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c0:	4b92      	ldr	r3, [pc, #584]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d00c      	beq.n	80010e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010cc:	4b8f      	ldr	r3, [pc, #572]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d112      	bne.n	80010fe <HAL_RCC_OscConfig+0x5e>
 80010d8:	4b8c      	ldr	r3, [pc, #560]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e4:	d10b      	bne.n	80010fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e6:	4b89      	ldr	r3, [pc, #548]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d06c      	beq.n	80011cc <HAL_RCC_OscConfig+0x12c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d168      	bne.n	80011cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e24c      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001106:	d106      	bne.n	8001116 <HAL_RCC_OscConfig+0x76>
 8001108:	4b80      	ldr	r3, [pc, #512]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a7f      	ldr	r2, [pc, #508]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 800110e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	e02e      	b.n	8001174 <HAL_RCC_OscConfig+0xd4>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x98>
 800111e:	4b7b      	ldr	r3, [pc, #492]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a7a      	ldr	r2, [pc, #488]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b78      	ldr	r3, [pc, #480]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a77      	ldr	r2, [pc, #476]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001130:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e01d      	b.n	8001174 <HAL_RCC_OscConfig+0xd4>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0xbc>
 8001142:	4b72      	ldr	r3, [pc, #456]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a71      	ldr	r2, [pc, #452]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b6f      	ldr	r3, [pc, #444]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a6e      	ldr	r2, [pc, #440]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0xd4>
 800115c:	4b6b      	ldr	r3, [pc, #428]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a6a      	ldr	r2, [pc, #424]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b68      	ldr	r3, [pc, #416]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a67      	ldr	r2, [pc, #412]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 800116e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001172:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d013      	beq.n	80011a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fcf2 	bl	8000b64 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fcee 	bl	8000b64 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e200      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	4b5d      	ldr	r3, [pc, #372]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0xe4>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fcde 	bl	8000b64 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fcda 	bl	8000b64 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	@ 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e1ec      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011be:	4b53      	ldr	r3, [pc, #332]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x10c>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d063      	beq.n	80012a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011da:	4b4c      	ldr	r3, [pc, #304]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011e6:	4b49      	ldr	r3, [pc, #292]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d11c      	bne.n	800122c <HAL_RCC_OscConfig+0x18c>
 80011f2:	4b46      	ldr	r3, [pc, #280]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d116      	bne.n	800122c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	4b43      	ldr	r3, [pc, #268]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <HAL_RCC_OscConfig+0x176>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d001      	beq.n	8001216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e1c0      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	4b3d      	ldr	r3, [pc, #244]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4939      	ldr	r1, [pc, #228]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	e03a      	b.n	80012a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d020      	beq.n	8001276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001234:	4b36      	ldr	r3, [pc, #216]	@ (8001310 <HAL_RCC_OscConfig+0x270>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff fc93 	bl	8000b64 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001242:	f7ff fc8f 	bl	8000b64 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e1a1      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001260:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4927      	ldr	r1, [pc, #156]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001270:	4313      	orrs	r3, r2
 8001272:	600b      	str	r3, [r1, #0]
 8001274:	e015      	b.n	80012a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001276:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <HAL_RCC_OscConfig+0x270>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fc72 	bl	8000b64 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001284:	f7ff fc6e 	bl	8000b64 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e180      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d03a      	beq.n	8001324 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d019      	beq.n	80012ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b6:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <HAL_RCC_OscConfig+0x274>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012bc:	f7ff fc52 	bl	8000b64 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fc4e 	bl	8000b64 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e160      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80012d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f000 faea 	bl	80018bc <RCC_Delay>
 80012e8:	e01c      	b.n	8001324 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_RCC_OscConfig+0x274>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f0:	f7ff fc38 	bl	8000b64 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f6:	e00f      	b.n	8001318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f8:	f7ff fc34 	bl	8000b64 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d908      	bls.n	8001318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e146      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	42420000 	.word	0x42420000
 8001314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	4b92      	ldr	r3, [pc, #584]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 800131a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e9      	bne.n	80012f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80a6 	beq.w	800147e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001336:	4b8b      	ldr	r3, [pc, #556]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b88      	ldr	r3, [pc, #544]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a87      	ldr	r2, [pc, #540]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b85      	ldr	r3, [pc, #532]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135e:	4b82      	ldr	r3, [pc, #520]	@ (8001568 <HAL_RCC_OscConfig+0x4c8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d118      	bne.n	800139c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136a:	4b7f      	ldr	r3, [pc, #508]	@ (8001568 <HAL_RCC_OscConfig+0x4c8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a7e      	ldr	r2, [pc, #504]	@ (8001568 <HAL_RCC_OscConfig+0x4c8>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001376:	f7ff fbf5 	bl	8000b64 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137e:	f7ff fbf1 	bl	8000b64 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b64      	cmp	r3, #100	@ 0x64
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e103      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001390:	4b75      	ldr	r3, [pc, #468]	@ (8001568 <HAL_RCC_OscConfig+0x4c8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d106      	bne.n	80013b2 <HAL_RCC_OscConfig+0x312>
 80013a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6213      	str	r3, [r2, #32]
 80013b0:	e02d      	b.n	800140e <HAL_RCC_OscConfig+0x36e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x334>
 80013ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a69      	ldr	r2, [pc, #420]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	6213      	str	r3, [r2, #32]
 80013c6:	4b67      	ldr	r3, [pc, #412]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4a66      	ldr	r2, [pc, #408]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	f023 0304 	bic.w	r3, r3, #4
 80013d0:	6213      	str	r3, [r2, #32]
 80013d2:	e01c      	b.n	800140e <HAL_RCC_OscConfig+0x36e>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d10c      	bne.n	80013f6 <HAL_RCC_OscConfig+0x356>
 80013dc:	4b61      	ldr	r3, [pc, #388]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a60      	ldr	r2, [pc, #384]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6213      	str	r3, [r2, #32]
 80013f4:	e00b      	b.n	800140e <HAL_RCC_OscConfig+0x36e>
 80013f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6213      	str	r3, [r2, #32]
 8001402:	4b58      	ldr	r3, [pc, #352]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a57      	ldr	r2, [pc, #348]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f023 0304 	bic.w	r3, r3, #4
 800140c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d015      	beq.n	8001442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff fba5 	bl	8000b64 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141c:	e00a      	b.n	8001434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141e:	f7ff fba1 	bl	8000b64 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142c:	4293      	cmp	r3, r2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e0b1      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001434:	4b4b      	ldr	r3, [pc, #300]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0ee      	beq.n	800141e <HAL_RCC_OscConfig+0x37e>
 8001440:	e014      	b.n	800146c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff fb8f 	bl	8000b64 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff fb8b 	bl	8000b64 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001458:	4293      	cmp	r3, r2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e09b      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001460:	4b40      	ldr	r3, [pc, #256]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1ee      	bne.n	800144a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800146c:	7dfb      	ldrb	r3, [r7, #23]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d105      	bne.n	800147e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001472:	4b3c      	ldr	r3, [pc, #240]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a3b      	ldr	r2, [pc, #236]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800147c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8087 	beq.w	8001596 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001488:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b08      	cmp	r3, #8
 8001492:	d061      	beq.n	8001558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d146      	bne.n	800152a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149c:	4b33      	ldr	r3, [pc, #204]	@ (800156c <HAL_RCC_OscConfig+0x4cc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff fb5f 	bl	8000b64 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014aa:	f7ff fb5b 	bl	8000b64 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e06d      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014bc:	4b29      	ldr	r3, [pc, #164]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f0      	bne.n	80014aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d0:	d108      	bne.n	80014e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014d2:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	4921      	ldr	r1, [pc, #132]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a19      	ldr	r1, [r3, #32]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f4:	430b      	orrs	r3, r1
 80014f6:	491b      	ldr	r1, [pc, #108]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <HAL_RCC_OscConfig+0x4cc>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fb2f 	bl	8000b64 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff fb2b 	bl	8000b64 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e03d      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x46a>
 8001528:	e035      	b.n	8001596 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <HAL_RCC_OscConfig+0x4cc>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fb18 	bl	8000b64 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff fb14 	bl	8000b64 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e026      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x498>
 8001556:	e01e      	b.n	8001596 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d107      	bne.n	8001570 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e019      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
 8001564:	40021000 	.word	0x40021000
 8001568:	40007000 	.word	0x40007000
 800156c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <HAL_RCC_OscConfig+0x500>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	429a      	cmp	r2, r3
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	429a      	cmp	r2, r3
 8001590:	d001      	beq.n	8001596 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0d0      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d910      	bls.n	80015e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b67      	ldr	r3, [pc, #412]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 0207 	bic.w	r2, r3, #7
 80015ce:	4965      	ldr	r1, [pc, #404]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b63      	ldr	r3, [pc, #396]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0b8      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001600:	4b59      	ldr	r3, [pc, #356]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a58      	ldr	r2, [pc, #352]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800160a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001618:	4b53      	ldr	r3, [pc, #332]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4a52      	ldr	r2, [pc, #328]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001624:	4b50      	ldr	r3, [pc, #320]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	494d      	ldr	r1, [pc, #308]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	4313      	orrs	r3, r2
 8001634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d040      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d115      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e07f      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	4b41      	ldr	r3, [pc, #260]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e073      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4b3d      	ldr	r3, [pc, #244]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06b      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001682:	4b39      	ldr	r3, [pc, #228]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f023 0203 	bic.w	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4936      	ldr	r1, [pc, #216]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001694:	f7ff fa66 	bl	8000b64 <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f7ff fa62 	bl	8000b64 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e053      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 020c 	and.w	r2, r3, #12
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1eb      	bne.n	800169c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c4:	4b27      	ldr	r3, [pc, #156]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d210      	bcs.n	80016f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b24      	ldr	r3, [pc, #144]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 0207 	bic.w	r2, r3, #7
 80016da:	4922      	ldr	r1, [pc, #136]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b20      	ldr	r3, [pc, #128]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e032      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001700:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4916      	ldr	r1, [pc, #88]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d009      	beq.n	8001732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800171e:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	490e      	ldr	r1, [pc, #56]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001732:	f000 f821 	bl	8001778 <HAL_RCC_GetSysClockFreq>
 8001736:	4602      	mov	r2, r0
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	490a      	ldr	r1, [pc, #40]	@ (800176c <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	5ccb      	ldrb	r3, [r1, r3]
 8001746:	fa22 f303 	lsr.w	r3, r2, r3
 800174a:	4a09      	ldr	r2, [pc, #36]	@ (8001770 <HAL_RCC_ClockConfig+0x1cc>)
 800174c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <HAL_RCC_ClockConfig+0x1d0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff f8ca 	bl	80008ec <HAL_InitTick>

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000
 8001768:	40021000 	.word	0x40021000
 800176c:	08007490 	.word	0x08007490
 8001770:	20000004 	.word	0x20000004
 8001774:	20000008 	.word	0x20000008

08001778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001792:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <HAL_RCC_GetSysClockFreq+0x94>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d002      	beq.n	80017a8 <HAL_RCC_GetSysClockFreq+0x30>
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d003      	beq.n	80017ae <HAL_RCC_GetSysClockFreq+0x36>
 80017a6:	e027      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x98>)
 80017aa:	613b      	str	r3, [r7, #16]
      break;
 80017ac:	e027      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	0c9b      	lsrs	r3, r3, #18
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	4a17      	ldr	r2, [pc, #92]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017b8:	5cd3      	ldrb	r3, [r2, r3]
 80017ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d010      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <HAL_RCC_GetSysClockFreq+0x94>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	0c5b      	lsrs	r3, r3, #17
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	4a11      	ldr	r2, [pc, #68]	@ (8001818 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017d2:	5cd3      	ldrb	r3, [r2, r3]
 80017d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x98>)
 80017da:	fb03 f202 	mul.w	r2, r3, r2
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e004      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a0c      	ldr	r2, [pc, #48]	@ (800181c <HAL_RCC_GetSysClockFreq+0xa4>)
 80017ec:	fb02 f303 	mul.w	r3, r2, r3
 80017f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	613b      	str	r3, [r7, #16]
      break;
 80017f6:	e002      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x98>)
 80017fa:	613b      	str	r3, [r7, #16]
      break;
 80017fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fe:	693b      	ldr	r3, [r7, #16]
}
 8001800:	4618      	mov	r0, r3
 8001802:	371c      	adds	r7, #28
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	007a1200 	.word	0x007a1200
 8001814:	080074a8 	.word	0x080074a8
 8001818:	080074b8 	.word	0x080074b8
 800181c:	003d0900 	.word	0x003d0900

08001820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001824:	4b02      	ldr	r3, [pc, #8]	@ (8001830 <HAL_RCC_GetHCLKFreq+0x10>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001838:	f7ff fff2 	bl	8001820 <HAL_RCC_GetHCLKFreq>
 800183c:	4602      	mov	r2, r0
 800183e:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	4903      	ldr	r1, [pc, #12]	@ (8001858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800184a:	5ccb      	ldrb	r3, [r1, r3]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	080074a0 	.word	0x080074a0

0800185c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	220f      	movs	r2, #15
 800186a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_RCC_GetClockConfig+0x58>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001878:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_RCC_GetClockConfig+0x58>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_RCC_GetClockConfig+0x58>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <HAL_RCC_GetClockConfig+0x58>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_RCC_GetClockConfig+0x5c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0207 	and.w	r2, r3, #7
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40022000 	.word	0x40022000

080018bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <RCC_Delay+0x34>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <RCC_Delay+0x38>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	0a5b      	lsrs	r3, r3, #9
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018d8:	bf00      	nop
  }
  while (Delay --);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1e5a      	subs	r2, r3, #1
 80018de:	60fa      	str	r2, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f9      	bne.n	80018d8 <RCC_Delay+0x1c>
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000004 	.word	0x20000004
 80018f4:	10624dd3 	.word	0x10624dd3

080018f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e041      	b.n	800198e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d106      	bne.n	8001924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f839 	bl	8001996 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3304      	adds	r3, #4
 8001934:	4619      	mov	r1, r3
 8001936:	4610      	mov	r0, r2
 8001938:	f000 f99c 	bl	8001c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d001      	beq.n	80019c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e03a      	b.n	8001a36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a18      	ldr	r2, [pc, #96]	@ (8001a40 <HAL_TIM_Base_Start_IT+0x98>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00e      	beq.n	8001a00 <HAL_TIM_Base_Start_IT+0x58>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ea:	d009      	beq.n	8001a00 <HAL_TIM_Base_Start_IT+0x58>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <HAL_TIM_Base_Start_IT+0x9c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d004      	beq.n	8001a00 <HAL_TIM_Base_Start_IT+0x58>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a13      	ldr	r2, [pc, #76]	@ (8001a48 <HAL_TIM_Base_Start_IT+0xa0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d111      	bne.n	8001a24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d010      	beq.n	8001a34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a22:	e007      	b.n	8001a34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0201 	orr.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40000800 	.word	0x40000800

08001a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d020      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01b      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0202 	mvn.w	r2, #2
 8001a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f8d1 	bl	8001c3e <HAL_TIM_IC_CaptureCallback>
 8001a9c:	e005      	b.n	8001aaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f8c4 	bl	8001c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8d3 	bl	8001c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d020      	beq.n	8001afc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01b      	beq.n	8001afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f06f 0204 	mvn.w	r2, #4
 8001acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f8ab 	bl	8001c3e <HAL_TIM_IC_CaptureCallback>
 8001ae8:	e005      	b.n	8001af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f89e 	bl	8001c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f8ad 	bl	8001c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d020      	beq.n	8001b48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01b      	beq.n	8001b48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f06f 0208 	mvn.w	r2, #8
 8001b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f885 	bl	8001c3e <HAL_TIM_IC_CaptureCallback>
 8001b34:	e005      	b.n	8001b42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f878 	bl	8001c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f887 	bl	8001c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d020      	beq.n	8001b94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01b      	beq.n	8001b94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0210 	mvn.w	r2, #16
 8001b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2208      	movs	r2, #8
 8001b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f85f 	bl	8001c3e <HAL_TIM_IC_CaptureCallback>
 8001b80:	e005      	b.n	8001b8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f852 	bl	8001c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f861 	bl	8001c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00c      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0201 	mvn.w	r2, #1
 8001bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe fe1a 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00c      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8c3 	bl	8001d62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00c      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f831 	bl	8001c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00c      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0220 	mvn.w	r2, #32
 8001c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f896 	bl	8001d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a2f      	ldr	r2, [pc, #188]	@ (8001d44 <TIM_Base_SetConfig+0xd0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00b      	beq.n	8001ca4 <TIM_Base_SetConfig+0x30>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c92:	d007      	beq.n	8001ca4 <TIM_Base_SetConfig+0x30>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a2c      	ldr	r2, [pc, #176]	@ (8001d48 <TIM_Base_SetConfig+0xd4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d003      	beq.n	8001ca4 <TIM_Base_SetConfig+0x30>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a2b      	ldr	r2, [pc, #172]	@ (8001d4c <TIM_Base_SetConfig+0xd8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d108      	bne.n	8001cb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a22      	ldr	r2, [pc, #136]	@ (8001d44 <TIM_Base_SetConfig+0xd0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00b      	beq.n	8001cd6 <TIM_Base_SetConfig+0x62>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc4:	d007      	beq.n	8001cd6 <TIM_Base_SetConfig+0x62>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d48 <TIM_Base_SetConfig+0xd4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d003      	beq.n	8001cd6 <TIM_Base_SetConfig+0x62>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d4c <TIM_Base_SetConfig+0xd8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d108      	bne.n	8001ce8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001d44 <TIM_Base_SetConfig+0xd0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d103      	bne.n	8001d1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f023 0201 	bic.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	611a      	str	r2, [r3, #16]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	40012c00 	.word	0x40012c00
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40000800 	.word	0x40000800

08001d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <__NVIC_SetPriority>:
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	@ (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	@ (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <SysTick_Handler+0x1c>)
 8001dce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001dd0:	f001 ff8e 	bl	8003cf0 <xTaskGetSchedulerState>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d001      	beq.n	8001dde <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001dda:	f002 fcb5 	bl	8004748 <xPortSysTickHandler>
  }
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001dec:	2100      	movs	r1, #0
 8001dee:	f06f 0004 	mvn.w	r0, #4
 8001df2:	f7ff ffbf 	bl	8001d74 <__NVIC_SetPriority>
#endif
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e02:	f3ef 8305 	mrs	r3, IPSR
 8001e06:	603b      	str	r3, [r7, #0]
  return(result);
 8001e08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e0e:	f06f 0305 	mvn.w	r3, #5
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	e00c      	b.n	8001e30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <osKernelInitialize+0x40>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <osKernelInitialize+0x40>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	e002      	b.n	8001e30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	2000010c 	.word	0x2000010c

08001e40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e46:	f3ef 8305 	mrs	r3, IPSR
 8001e4a:	603b      	str	r3, [r7, #0]
  return(result);
 8001e4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001e52:	f06f 0305 	mvn.w	r3, #5
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	e010      	b.n	8001e7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <osKernelStart+0x48>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d109      	bne.n	8001e76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e62:	f7ff ffc1 	bl	8001de8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e66:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <osKernelStart+0x48>)
 8001e68:	2202      	movs	r2, #2
 8001e6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e6c:	f001 f918 	bl	80030a0 <vTaskStartScheduler>
      stat = osOK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	e002      	b.n	8001e7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e7c:	687b      	ldr	r3, [r7, #4]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000010c 	.word	0x2000010c

08001e8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	@ 0x38
 8001e90:	af04      	add	r7, sp, #16
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e9c:	f3ef 8305 	mrs	r3, IPSR
 8001ea0:	617b      	str	r3, [r7, #20]
  return(result);
 8001ea2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 8081 	bne.w	8001fac <osThreadNew+0x120>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d07d      	beq.n	8001fac <osThreadNew+0x120>
    stack = configMINIMAL_STACK_SIZE;
 8001eb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eb4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001eb6:	2318      	movs	r3, #24
 8001eb8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d045      	beq.n	8001f56 <osThreadNew+0xca>
      if (attr->name != NULL) {
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <osThreadNew+0x4c>
        name = attr->name;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <osThreadNew+0x72>
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b38      	cmp	r3, #56	@ 0x38
 8001ef0:	d805      	bhi.n	8001efe <osThreadNew+0x72>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <osThreadNew+0x76>
        return (NULL);
 8001efe:	2300      	movs	r3, #0
 8001f00:	e055      	b.n	8001fae <osThreadNew+0x122>
      }

      if (attr->stack_size > 0U) {
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <osThreadNew+0x86>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00e      	beq.n	8001f38 <osThreadNew+0xac>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001f20:	d90a      	bls.n	8001f38 <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <osThreadNew+0xac>
        mem = 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	e010      	b.n	8001f5a <osThreadNew+0xce>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10c      	bne.n	8001f5a <osThreadNew+0xce>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d108      	bne.n	8001f5a <osThreadNew+0xce>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d104      	bne.n	8001f5a <osThreadNew+0xce>
          mem = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	e001      	b.n	8001f5a <osThreadNew+0xce>
        }
      }
    }
    else {
      mem = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d110      	bne.n	8001f82 <osThreadNew+0xf6>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f68:	9202      	str	r2, [sp, #8]
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	6a3a      	ldr	r2, [r7, #32]
 8001f74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 fce4 	bl	8002944 <xTaskCreateStatic>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	e014      	b.n	8001fac <osThreadNew+0x120>
      #endif
    }
    else {
      if (mem == 0) {
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d111      	bne.n	8001fac <osThreadNew+0x120>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fd3e 	bl	8002a1e <xTaskCreate>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d001      	beq.n	8001fac <osThreadNew+0x120>
            hTask = NULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001fac:	693b      	ldr	r3, [r7, #16]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3728      	adds	r7, #40	@ 0x28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fc2:	f3ef 8305 	mrs	r3, IPSR
 8001fc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8001fce:	f06f 0305 	mvn.w	r3, #5
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e017      	b.n	8002006 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d103      	bne.n	8001fe4 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8001fdc:	f06f 0303 	mvn.w	r3, #3
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e010      	b.n	8002006 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8001fe4:	6938      	ldr	r0, [r7, #16]
 8001fe6:	f000 ff65 	bl	8002eb4 <eTaskGetState>
 8001fea:	4603      	mov	r3, r0
 8001fec:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d005      	beq.n	8002000 <osThreadTerminate+0x4a>
      stat = osOK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8001ff8:	6938      	ldr	r0, [r7, #16]
 8001ffa:	f000 fe81 	bl	8002d00 <vTaskDelete>
 8001ffe:	e002      	b.n	8002006 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8002000:	f06f 0302 	mvn.w	r3, #2
 8002004:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8002006:	697b      	ldr	r3, [r7, #20]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002018:	f3ef 8305 	mrs	r3, IPSR
 800201c:	60bb      	str	r3, [r7, #8]
  return(result);
 800201e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <osDelay+0x1c>
    stat = osErrorISR;
 8002024:	f06f 0305 	mvn.w	r3, #5
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	e007      	b.n	800203c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 ff04 	bl	8002e44 <vTaskDelay>
    }
  }

  return (stat);
 800203c:	68fb      	ldr	r3, [r7, #12]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a07      	ldr	r2, [pc, #28]	@ (8002074 <vApplicationGetIdleTaskMemory+0x2c>)
 8002058:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4a06      	ldr	r2, [pc, #24]	@ (8002078 <vApplicationGetIdleTaskMemory+0x30>)
 800205e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002066:	601a      	str	r2, [r3, #0]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000110 	.word	0x20000110
 8002078:	2000016c 	.word	0x2000016c

0800207c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a07      	ldr	r2, [pc, #28]	@ (80020a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800208c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	4a06      	ldr	r2, [pc, #24]	@ (80020ac <vApplicationGetTimerTaskMemory+0x30>)
 8002092:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800209a:	601a      	str	r2, [r3, #0]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	2000056c 	.word	0x2000056c
 80020ac:	200005c8 	.word	0x200005c8

080020b0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f103 0208 	add.w	r2, r3, #8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f103 0208 	add.w	r2, r3, #8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f103 0208 	add.w	r2, r3, #8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80020e4:	f240 1019 	movw	r0, #281	@ 0x119
 80020e8:	f004 f8c6 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002102:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002106:	f004 f8b7 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 800214e:	f240 101b 	movw	r0, #283	@ 0x11b
 8002152:	f004 f891 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d103      	bne.n	800217e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e00c      	b.n	8002198 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3308      	adds	r3, #8
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e002      	b.n	800218c <vListInsert+0x2e>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	429a      	cmp	r2, r3
 8002196:	d2f6      	bcs.n	8002186 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 80021c4:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 80021c8:	f004 f856 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6892      	ldr	r2, [r2, #8]
 80021ea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6852      	ldr	r2, [r2, #4]
 80021f4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d103      	bne.n	8002208 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	1e5a      	subs	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	f240 101d 	movw	r0, #285	@ 0x11d
 8002222:	f004 f865 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800223e:	2301      	movs	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10b      	bne.n	8002264 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800224c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002250:	f383 8811 	msr	BASEPRI, r3
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800225e:	bf00      	nop
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d05d      	beq.n	8002326 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800226e:	2b00      	cmp	r3, #0
 8002270:	d059      	beq.n	8002326 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227a:	2100      	movs	r1, #0
 800227c:	fba3 2302 	umull	r2, r3, r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d000      	beq.n	8002286 <xQueueGenericReset+0x52>
 8002284:	2101      	movs	r1, #1
 8002286:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d14c      	bne.n	8002326 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 800228c:	f002 f9dc 	bl	8004648 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002298:	6939      	ldr	r1, [r7, #16]
 800229a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	441a      	add	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2200      	movs	r2, #0
 80022aa:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022bc:	3b01      	subs	r3, #1
 80022be:	6939      	ldr	r1, [r7, #16]
 80022c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	441a      	add	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	22ff      	movs	r2, #255	@ 0xff
 80022d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	22ff      	movs	r2, #255	@ 0xff
 80022d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d114      	bne.n	800230c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01a      	beq.n	8002320 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	3310      	adds	r3, #16
 80022ee:	4618      	mov	r0, r3
 80022f0:	f001 fa84 	bl	80037fc <xTaskRemoveFromEventList>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d012      	beq.n	8002320 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80022fa:	4b18      	ldr	r3, [pc, #96]	@ (800235c <xQueueGenericReset+0x128>)
 80022fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	f3bf 8f4f 	dsb	sy
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	e009      	b.n	8002320 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	3310      	adds	r3, #16
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fecd 	bl	80020b0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	3324      	adds	r3, #36	@ 0x24
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fec8 	bl	80020b0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002320:	f002 f9c2 	bl	80046a8 <vPortExitCritical>
 8002324:	e001      	b.n	800232a <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10b      	bne.n	8002348 <xQueueGenericReset+0x114>
    __asm volatile
 8002330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002334:	f383 8811 	msr	BASEPRI, r3
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	f3bf 8f4f 	dsb	sy
 8002340:	60bb      	str	r3, [r7, #8]
}
 8002342:	bf00      	nop
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	4619      	mov	r1, r3
 800234c:	2096      	movs	r0, #150	@ 0x96
 800234e:	f003 ffcf 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002352:	697b      	ldr	r3, [r7, #20]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	e000ed04 	.word	0xe000ed04

08002360 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	@ 0x30
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10b      	bne.n	8002390 <xQueueGenericCreateStatic+0x30>
    __asm volatile
 8002378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800237c:	f383 8811 	msr	BASEPRI, r3
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	623b      	str	r3, [r7, #32]
}
 800238a:	bf00      	nop
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d031      	beq.n	80023fa <xQueueGenericCreateStatic+0x9a>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d02e      	beq.n	80023fa <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d028      	beq.n	80023fa <xQueueGenericCreateStatic+0x9a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d122      	bne.n	80023fa <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80023b4:	2350      	movs	r3, #80	@ 0x50
 80023b6:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b50      	cmp	r3, #80	@ 0x50
 80023bc:	d00b      	beq.n	80023d6 <xQueueGenericCreateStatic+0x76>
    __asm volatile
 80023be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c2:	f383 8811 	msr	BASEPRI, r3
 80023c6:	f3bf 8f6f 	isb	sy
 80023ca:	f3bf 8f4f 	dsb	sy
 80023ce:	61fb      	str	r3, [r7, #28]
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	e7fd      	b.n	80023d2 <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 80023d6:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023e4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f81e 	bl	8002434 <prvInitialiseNewQueue>
 80023f8:	e00e      	b.n	8002418 <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	61bb      	str	r3, [r7, #24]
}
 8002412:	bf00      	nop
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	4618      	mov	r0, r3
 800241c:	f004 f902 	bl	8006624 <SEGGER_SYSVIEW_ShrinkId>
 8002420:	4603      	mov	r3, r0
 8002422:	4619      	mov	r1, r3
 8002424:	2097      	movs	r0, #151	@ 0x97
 8002426:	f003 ff63 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800242c:	4618      	mov	r0, r3
 800242e:	3728      	adds	r7, #40	@ 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d103      	bne.n	8002450 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e002      	b.n	8002456 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002462:	2101      	movs	r1, #1
 8002464:	69b8      	ldr	r0, [r7, #24]
 8002466:	f7ff fee5 	bl	8002234 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08c      	sub	sp, #48	@ 0x30
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10b      	bne.n	80024ae <xQueueReceive+0x32>
    __asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	623b      	str	r3, [r7, #32]
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	e7fd      	b.n	80024aa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d103      	bne.n	80024bc <xQueueReceive+0x40>
 80024b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <xQueueReceive+0x44>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <xQueueReceive+0x46>
 80024c0:	2300      	movs	r3, #0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <xQueueReceive+0x62>
    __asm volatile
 80024c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ca:	f383 8811 	msr	BASEPRI, r3
 80024ce:	f3bf 8f6f 	isb	sy
 80024d2:	f3bf 8f4f 	dsb	sy
 80024d6:	61fb      	str	r3, [r7, #28]
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	e7fd      	b.n	80024da <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024de:	f001 fc07 	bl	8003cf0 <xTaskGetSchedulerState>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <xQueueReceive+0x72>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <xQueueReceive+0x76>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <xQueueReceive+0x78>
 80024f2:	2300      	movs	r3, #0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10b      	bne.n	8002510 <xQueueReceive+0x94>
    __asm volatile
 80024f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	61bb      	str	r3, [r7, #24]
}
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002510:	f002 f89a 	bl	8004648 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	2b00      	cmp	r3, #0
 800251e:	d023      	beq.n	8002568 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002524:	f000 f898 	bl	8002658 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	1e5a      	subs	r2, r3, #1
 800252c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00f      	beq.n	8002558 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253a:	3310      	adds	r3, #16
 800253c:	4618      	mov	r0, r3
 800253e:	f001 f95d 	bl	80037fc <xTaskRemoveFromEventList>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002548:	4b42      	ldr	r3, [pc, #264]	@ (8002654 <xQueueReceive+0x1d8>)
 800254a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002558:	f002 f8a6 	bl	80046a8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 800255c:	2101      	movs	r1, #1
 800255e:	20a4      	movs	r0, #164	@ 0xa4
 8002560:	f003 fec6 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002564:	2301      	movs	r3, #1
 8002566:	e071      	b.n	800264c <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d107      	bne.n	800257e <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800256e:	f002 f89b 	bl	80046a8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002572:	2100      	movs	r1, #0
 8002574:	20a4      	movs	r0, #164	@ 0xa4
 8002576:	f003 febb 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800257a:	2300      	movs	r3, #0
 800257c:	e066      	b.n	800264c <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800257e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d106      	bne.n	8002592 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4618      	mov	r0, r3
 800258a:	f001 fa19 	bl	80039c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800258e:	2301      	movs	r3, #1
 8002590:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002592:	f002 f889 	bl	80046a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002596:	f000 fde1 	bl	800315c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800259a:	f002 f855 	bl	8004648 <vPortEnterCritical>
 800259e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025a4:	b25b      	sxtb	r3, r3
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d103      	bne.n	80025b4 <xQueueReceive+0x138>
 80025ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025ba:	b25b      	sxtb	r3, r3
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d103      	bne.n	80025ca <xQueueReceive+0x14e>
 80025c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025ca:	f002 f86d 	bl	80046a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025ce:	1d3a      	adds	r2, r7, #4
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fa0a 	bl	80039f0 <xTaskCheckForTimeOut>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d123      	bne.n	800262a <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025e4:	f000 f8b0 	bl	8002748 <prvIsQueueEmpty>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d017      	beq.n	800261e <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f0:	3324      	adds	r3, #36	@ 0x24
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f001 f88e 	bl	8003718 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025fe:	f000 f851 	bl	80026a4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002602:	f000 fdb9 	bl	8003178 <xTaskResumeAll>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d181      	bne.n	8002510 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <xQueueReceive+0x1d8>)
 800260e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	e778      	b.n	8002510 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800261e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002620:	f000 f840 	bl	80026a4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002624:	f000 fda8 	bl	8003178 <xTaskResumeAll>
 8002628:	e772      	b.n	8002510 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800262a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800262c:	f000 f83a 	bl	80026a4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002630:	f000 fda2 	bl	8003178 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002634:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002636:	f000 f887 	bl	8002748 <prvIsQueueEmpty>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	f43f af67 	beq.w	8002510 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002642:	2100      	movs	r1, #0
 8002644:	20a4      	movs	r0, #164	@ 0xa4
 8002646:	f003 fe53 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 800264a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800264c:	4618      	mov	r0, r3
 800264e:	3730      	adds	r7, #48	@ 0x30
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	e000ed04 	.word	0xe000ed04

08002658 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	d018      	beq.n	800269c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	441a      	add	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	429a      	cmp	r2, r3
 8002682:	d303      	bcc.n	800268c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68d9      	ldr	r1, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	461a      	mov	r2, r3
 8002696:	6838      	ldr	r0, [r7, #0]
 8002698:	f004 f97c 	bl	8006994 <memcpy>
    }
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80026ac:	f001 ffcc 	bl	8004648 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026b6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026b8:	e011      	b.n	80026de <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d012      	beq.n	80026e8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3324      	adds	r3, #36	@ 0x24
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 f898 	bl	80037fc <xTaskRemoveFromEventList>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80026d2:	f001 f9f9 	bl	8003ac8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	3b01      	subs	r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	dce9      	bgt.n	80026ba <prvUnlockQueue+0x16>
 80026e6:	e000      	b.n	80026ea <prvUnlockQueue+0x46>
                    break;
 80026e8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	22ff      	movs	r2, #255	@ 0xff
 80026ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80026f2:	f001 ffd9 	bl	80046a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80026f6:	f001 ffa7 	bl	8004648 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002700:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002702:	e011      	b.n	8002728 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d012      	beq.n	8002732 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3310      	adds	r3, #16
 8002710:	4618      	mov	r0, r3
 8002712:	f001 f873 	bl	80037fc <xTaskRemoveFromEventList>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800271c:	f001 f9d4 	bl	8003ac8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002720:	7bbb      	ldrb	r3, [r7, #14]
 8002722:	3b01      	subs	r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800272c:	2b00      	cmp	r3, #0
 800272e:	dce9      	bgt.n	8002704 <prvUnlockQueue+0x60>
 8002730:	e000      	b.n	8002734 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002732:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	22ff      	movs	r2, #255	@ 0xff
 8002738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800273c:	f001 ffb4 	bl	80046a8 <vPortExitCritical>
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002750:	f001 ff7a 	bl	8004648 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800275c:	2301      	movs	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	e001      	b.n	8002766 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002766:	f001 ff9f 	bl	80046a8 <vPortExitCritical>

    return xReturn;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10b      	bne.n	80027a0 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8002788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	60fb      	str	r3, [r7, #12]
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d024      	beq.n	80027f0 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e01e      	b.n	80027ea <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80027ac:	4a18      	ldr	r2, [pc, #96]	@ (8002810 <vQueueAddToRegistry+0x9c>)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d105      	bne.n	80027c8 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4a13      	ldr	r2, [pc, #76]	@ (8002810 <vQueueAddToRegistry+0x9c>)
 80027c2:	4413      	add	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
                    break;
 80027c6:	e013      	b.n	80027f0 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <vQueueAddToRegistry+0x70>
 80027ce:	4a10      	ldr	r2, [pc, #64]	@ (8002810 <vQueueAddToRegistry+0x9c>)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d104      	bne.n	80027e4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4a0c      	ldr	r2, [pc, #48]	@ (8002810 <vQueueAddToRegistry+0x9c>)
 80027e0:	4413      	add	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3301      	adds	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b07      	cmp	r3, #7
 80027ee:	d9dd      	bls.n	80027ac <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002802:	20b6      	movs	r0, #182	@ 0xb6
 8002804:	f003 fd38 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002808:	bf00      	nop
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000dc8 	.word	0x20000dc8

08002814 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002824:	f001 ff10 	bl	8004648 <vPortEnterCritical>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800282e:	b25b      	sxtb	r3, r3
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d103      	bne.n	800283e <vQueueWaitForMessageRestricted+0x2a>
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002844:	b25b      	sxtb	r3, r3
 8002846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284a:	d103      	bne.n	8002854 <vQueueWaitForMessageRestricted+0x40>
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002854:	f001 ff28 	bl	80046a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285c:	2b00      	cmp	r3, #0
 800285e:	d106      	bne.n	800286e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3324      	adds	r3, #36	@ 0x24
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	4618      	mov	r0, r3
 800286a:	f000 ff7d 	bl	8003768 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800286e:	6978      	ldr	r0, [r7, #20]
 8002870:	f7ff ff18 	bl	80026a4 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002874:	20b9      	movs	r0, #185	@ 0xb9
 8002876:	f003 fcff 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800287a:	bf00      	nop
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8002882:	b580      	push	{r7, lr}
 8002884:	b08e      	sub	sp, #56	@ 0x38
 8002886:	af04      	add	r7, sp, #16
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8002890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10b      	bne.n	80028ae <prvCreateStaticTask+0x2c>
    __asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	623b      	str	r3, [r7, #32]
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	e7fd      	b.n	80028aa <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80028ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10b      	bne.n	80028cc <prvCreateStaticTask+0x4a>
    __asm volatile
 80028b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	61fb      	str	r3, [r7, #28]
}
 80028c6:	bf00      	nop
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80028cc:	235c      	movs	r3, #92	@ 0x5c
 80028ce:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b5c      	cmp	r3, #92	@ 0x5c
 80028d4:	d00b      	beq.n	80028ee <prvCreateStaticTask+0x6c>
    __asm volatile
 80028d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	61bb      	str	r3, [r7, #24]
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	e7fd      	b.n	80028ea <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 80028ee:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01f      	beq.n	8002936 <prvCreateStaticTask+0xb4>
 80028f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01c      	beq.n	8002936 <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 80028fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002900:	225c      	movs	r2, #92	@ 0x5c
 8002902:	2100      	movs	r1, #0
 8002904:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002906:	f004 f811 	bl	800692c <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800290e:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	2202      	movs	r2, #2
 8002914:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002918:	2300      	movs	r3, #0
 800291a:	9303      	str	r3, [sp, #12]
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f89d 	bl	8002a6e <prvInitialiseNewTask>
 8002934:	e001      	b.n	800293a <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 8002936:	2300      	movs	r3, #0
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800293c:	4618      	mov	r0, r3
 800293e:	3728      	adds	r7, #40	@ 0x28
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	@ 0x28
 8002948:	af04      	add	r7, sp, #16
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	9303      	str	r3, [sp, #12]
 800295c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f7ff ff87 	bl	8002882 <prvCreateStaticTask>
 8002974:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800297c:	6978      	ldr	r0, [r7, #20]
 800297e:	f000 f907 	bl	8002b90 <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4618      	mov	r0, r3
 8002986:	f003 fe4d 	bl	8006624 <SEGGER_SYSVIEW_ShrinkId>
 800298a:	4603      	mov	r3, r0
 800298c:	4619      	mov	r1, r3
 800298e:	20bf      	movs	r0, #191	@ 0xbf
 8002990:	f003 fcae 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002994:	693b      	ldr	r3, [r7, #16]
    }
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800299e:	b580      	push	{r7, lr}
 80029a0:	b08a      	sub	sp, #40	@ 0x28
 80029a2:	af04      	add	r7, sp, #16
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f001 ff55 	bl	8004860 <pvPortMalloc>
 80029b6:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d013      	beq.n	80029e6 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80029be:	205c      	movs	r0, #92	@ 0x5c
 80029c0:	f001 ff4e 	bl	8004860 <pvPortMalloc>
 80029c4:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80029cc:	225c      	movs	r2, #92	@ 0x5c
 80029ce:	2100      	movs	r1, #0
 80029d0:	6978      	ldr	r0, [r7, #20]
 80029d2:	f003 ffab 	bl	800692c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30
 80029dc:	e005      	b.n	80029ea <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80029de:	6938      	ldr	r0, [r7, #16]
 80029e0:	f002 f870 	bl	8004ac4 <vPortFree>
 80029e4:	e001      	b.n	80029ea <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d011      	beq.n	8002a14 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029f8:	2300      	movs	r3, #0
 80029fa:	9303      	str	r3, [sp, #12]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	9302      	str	r3, [sp, #8]
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f82d 	bl	8002a6e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002a14:	697b      	ldr	r3, [r7, #20]
    }
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b088      	sub	sp, #32
 8002a22:	af02      	add	r7, sp, #8
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff ffaf 	bl	800299e <prvCreateTask>
 8002a40:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002a48:	6938      	ldr	r0, [r7, #16]
 8002a4a:	f000 f8a1 	bl	8002b90 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e002      	b.n	8002a5a <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295
 8002a58:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	20c2      	movs	r0, #194	@ 0xc2
 8002a60:	f003 fc46 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002a64:	697b      	ldr	r3, [r7, #20]
    }
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b088      	sub	sp, #32
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	461a      	mov	r2, r3
 8002a86:	21a5      	movs	r1, #165	@ 0xa5
 8002a88:	f003 ff50 	bl	800692c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a96:	3b01      	subs	r3, #1
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	f023 0307 	bic.w	r3, r3, #7
 8002aa4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	617b      	str	r3, [r7, #20]
}
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	e7fd      	b.n	8002ac4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01e      	beq.n	8002b0c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	e012      	b.n	8002afa <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	4413      	add	r3, r2
 8002ada:	7819      	ldrb	r1, [r3, #0]
 8002adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3334      	adds	r3, #52	@ 0x34
 8002ae4:	460a      	mov	r2, r1
 8002ae6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	4413      	add	r3, r2
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	3301      	adds	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	2b0f      	cmp	r3, #15
 8002afe:	d9e9      	bls.n	8002ad4 <prvInitialiseNewTask+0x66>
 8002b00:	e000      	b.n	8002b04 <prvInitialiseNewTask+0x96>
            {
                break;
 8002b02:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0e:	2b37      	cmp	r3, #55	@ 0x37
 8002b10:	d90b      	bls.n	8002b2a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	613b      	str	r3, [r7, #16]
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	e7fd      	b.n	8002b26 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2c:	2b37      	cmp	r3, #55	@ 0x37
 8002b2e:	d901      	bls.n	8002b34 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b30:	2337      	movs	r3, #55	@ 0x37
 8002b32:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b38:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b3e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b42:	3304      	adds	r3, #4
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fad5 	bl	80020f4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4c:	3318      	adds	r3, #24
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fad0 	bl	80020f4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b58:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	69b8      	ldr	r0, [r7, #24]
 8002b70:	f001 fc2e 	bl	80043d0 <pxPortInitialiseStack>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b78:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b84:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b86:	bf00      	nop
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002b98:	f001 fd56 	bl	8004648 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002b9c:	4b51      	ldr	r3, [pc, #324]	@ (8002ce4 <prvAddNewTaskToReadyList+0x154>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	4a50      	ldr	r2, [pc, #320]	@ (8002ce4 <prvAddNewTaskToReadyList+0x154>)
 8002ba4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002ba6:	4b50      	ldr	r3, [pc, #320]	@ (8002ce8 <prvAddNewTaskToReadyList+0x158>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002bae:	4a4e      	ldr	r2, [pc, #312]	@ (8002ce8 <prvAddNewTaskToReadyList+0x158>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce4 <prvAddNewTaskToReadyList+0x154>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d110      	bne.n	8002bde <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002bbc:	f000 ffa8 	bl	8003b10 <prvInitialiseTaskLists>
 8002bc0:	e00d      	b.n	8002bde <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002cec <prvAddNewTaskToReadyList+0x15c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bca:	4b47      	ldr	r3, [pc, #284]	@ (8002ce8 <prvAddNewTaskToReadyList+0x158>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d802      	bhi.n	8002bde <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002bd8:	4a43      	ldr	r2, [pc, #268]	@ (8002ce8 <prvAddNewTaskToReadyList+0x158>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002bde:	4b44      	ldr	r3, [pc, #272]	@ (8002cf0 <prvAddNewTaskToReadyList+0x160>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3301      	adds	r3, #1
 8002be4:	4a42      	ldr	r2, [pc, #264]	@ (8002cf0 <prvAddNewTaskToReadyList+0x160>)
 8002be6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002be8:	4b41      	ldr	r3, [pc, #260]	@ (8002cf0 <prvAddNewTaskToReadyList+0x160>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <prvAddNewTaskToReadyList+0x94>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 fbed 	bl	80063d8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	461d      	mov	r5, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461c      	mov	r4, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	1ae3      	subs	r3, r4, r3
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	462b      	mov	r3, r5
 8002c20:	f002 f960 	bl	8004ee4 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 fc5a 	bl	80064e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c30:	4b30      	ldr	r3, [pc, #192]	@ (8002cf4 <prvAddNewTaskToReadyList+0x164>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d903      	bls.n	8002c40 <prvAddNewTaskToReadyList+0xb0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002cf4 <prvAddNewTaskToReadyList+0x164>)
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c44:	492c      	ldr	r1, [pc, #176]	@ (8002cf8 <prvAddNewTaskToReadyList+0x168>)
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	3304      	adds	r3, #4
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	3204      	adds	r2, #4
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	1d1a      	adds	r2, r3, #4
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf8 <prvAddNewTaskToReadyList+0x168>)
 8002c84:	441a      	add	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	615a      	str	r2, [r3, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c8e:	491a      	ldr	r1, [pc, #104]	@ (8002cf8 <prvAddNewTaskToReadyList+0x168>)
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ca0:	1c59      	adds	r1, r3, #1
 8002ca2:	4815      	ldr	r0, [pc, #84]	@ (8002cf8 <prvAddNewTaskToReadyList+0x168>)
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4403      	add	r3, r0
 8002cae:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002cb0:	f001 fcfa 	bl	80046a8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cec <prvAddNewTaskToReadyList+0x15c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00e      	beq.n	8002cda <prvAddNewTaskToReadyList+0x14a>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <prvAddNewTaskToReadyList+0x158>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d207      	bcs.n	8002cda <prvAddNewTaskToReadyList+0x14a>
 8002cca:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <prvAddNewTaskToReadyList+0x16c>)
 8002ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200012dc 	.word	0x200012dc
 8002ce8:	20000e08 	.word	0x20000e08
 8002cec:	200012e8 	.word	0x200012e8
 8002cf0:	200012f8 	.word	0x200012f8
 8002cf4:	200012e4 	.word	0x200012e4
 8002cf8:	20000e0c 	.word	0x20000e0c
 8002cfc:	e000ed04 	.word	0xe000ed04

08002d00 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8002d0c:	f001 fc9c 	bl	8004648 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <vTaskDelete+0x1c>
 8002d16:	4b43      	ldr	r3, [pc, #268]	@ (8002e24 <vTaskDelete+0x124>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	e000      	b.n	8002d1e <vTaskDelete+0x1e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fa55 	bl	80021d4 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d004      	beq.n	8002d3c <vTaskDelete+0x3c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	3318      	adds	r3, #24
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fa4c 	bl	80021d4 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002d3c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e28 <vTaskDelete+0x128>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	4a39      	ldr	r2, [pc, #228]	@ (8002e28 <vTaskDelete+0x128>)
 8002d44:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8002d46:	4b37      	ldr	r3, [pc, #220]	@ (8002e24 <vTaskDelete+0x124>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d101      	bne.n	8002d54 <vTaskDelete+0x54>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <vTaskDelete+0x56>
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8002d58:	4b34      	ldr	r3, [pc, #208]	@ (8002e2c <vTaskDelete+0x12c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01d      	beq.n	8002d9c <vTaskDelete+0x9c>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d01a      	beq.n	8002d9c <vTaskDelete+0x9c>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4830      	ldr	r0, [pc, #192]	@ (8002e30 <vTaskDelete+0x130>)
 8002d6e:	f7ff f9d0 	bl	8002112 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002d72:	4b30      	ldr	r3, [pc, #192]	@ (8002e34 <vTaskDelete+0x134>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3301      	adds	r3, #1
 8002d78:	4a2e      	ldr	r2, [pc, #184]	@ (8002e34 <vTaskDelete+0x134>)
 8002d7a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f003 fc50 	bl	8006624 <SEGGER_SYSVIEW_ShrinkId>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4619      	mov	r1, r3
 8002d88:	20c3      	movs	r0, #195	@ 0xc3
 8002d8a:	f002 fe9d 	bl	8005ac8 <SEGGER_SYSVIEW_RecordU32>
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f002 f90f 	bl	8004fb4 <SYSVIEW_DeleteTask>

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8002d96:	2301      	movs	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e013      	b.n	8002dc4 <vTaskDelete+0xc4>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002d9c:	4b26      	ldr	r3, [pc, #152]	@ (8002e38 <vTaskDelete+0x138>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	4a25      	ldr	r2, [pc, #148]	@ (8002e38 <vTaskDelete+0x138>)
 8002da4:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 fc3b 	bl	8006624 <SEGGER_SYSVIEW_ShrinkId>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	20c3      	movs	r0, #195	@ 0xc3
 8002db4:	f002 fe88 	bl	8005ac8 <SEGGER_SYSVIEW_RecordU32>
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f002 f8fa 	bl	8004fb4 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002dc0:	f000 ff7c 	bl	8003cbc <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002dc4:	f001 fc70 	bl	80046a8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d002      	beq.n	8002dd4 <vTaskDelete+0xd4>
        {
            prvDeleteTCB( pxTCB );
 8002dce:	6938      	ldr	r0, [r7, #16]
 8002dd0:	f000 ff44 	bl	8003c5c <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8002dd4:	4b15      	ldr	r3, [pc, #84]	@ (8002e2c <vTaskDelete+0x12c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01c      	beq.n	8002e16 <vTaskDelete+0x116>
            {
                if( pxTCB == pxCurrentTCB )
 8002ddc:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <vTaskDelete+0x124>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d117      	bne.n	8002e16 <vTaskDelete+0x116>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8002de6:	4b15      	ldr	r3, [pc, #84]	@ (8002e3c <vTaskDelete+0x13c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00b      	beq.n	8002e06 <vTaskDelete+0x106>
    __asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	60bb      	str	r3, [r7, #8]
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	e7fd      	b.n	8002e02 <vTaskDelete+0x102>
                    taskYIELD_WITHIN_API();
 8002e06:	4b0e      	ldr	r3, [pc, #56]	@ (8002e40 <vTaskDelete+0x140>)
 8002e08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	f3bf 8f6f 	isb	sy
                }
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
 8002e16:	20c3      	movs	r0, #195	@ 0xc3
 8002e18:	f003 fa2e 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002e1c:	bf00      	nop
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000e08 	.word	0x20000e08
 8002e28:	200012f8 	.word	0x200012f8
 8002e2c:	200012e8 	.word	0x200012e8
 8002e30:	200012b0 	.word	0x200012b0
 8002e34:	200012c4 	.word	0x200012c4
 8002e38:	200012dc 	.word	0x200012dc
 8002e3c:	20001304 	.word	0x20001304
 8002e40:	e000ed04 	.word	0xe000ed04

08002e44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d018      	beq.n	8002e88 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8002e56:	f000 f981 	bl	800315c <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8002e5a:	4b14      	ldr	r3, [pc, #80]	@ (8002eac <vTaskDelay+0x68>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d00b      	beq.n	8002e7a <vTaskDelay+0x36>
    __asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	60bb      	str	r3, [r7, #8]
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	e7fd      	b.n	8002e76 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 ff59 	bl	8003d34 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002e82:	f000 f979 	bl	8003178 <xTaskResumeAll>
 8002e86:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8002e8e:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <vTaskDelay+0x6c>)
 8002e90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8002e9e:	20c5      	movs	r0, #197	@ 0xc5
 8002ea0:	f003 f9ea 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20001304 	.word	0x20001304
 8002eb0:	e000ed04 	.word	0xe000ed04

08002eb4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	@ 0x28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxEventList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	61fb      	str	r3, [r7, #28]

        traceENTER_eTaskGetState( xTask );

        configASSERT( pxTCB );
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10b      	bne.n	8002ede <eTaskGetState+0x2a>
    __asm volatile
 8002ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	60bb      	str	r3, [r7, #8]
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	e7fd      	b.n	8002eda <eTaskGetState+0x26>

        #if ( configNUMBER_OF_CORES == 1 )
            if( pxTCB == pxCurrentTCB )
 8002ede:	4b36      	ldr	r3, [pc, #216]	@ (8002fb8 <eTaskGetState+0x104>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d103      	bne.n	8002ef0 <eTaskGetState+0x3c>
            {
                /* The task calling this function is querying its own state. */
                eReturn = eRunning;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002eee:	e056      	b.n	8002f9e <eTaskGetState+0xea>
            }
            else
        #endif
        {
            taskENTER_CRITICAL();
 8002ef0:	f001 fbaa 	bl	8004648 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	61bb      	str	r3, [r7, #24]
                pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efe:	617b      	str	r3, [r7, #20]
                pxDelayedList = pxDelayedTaskList;
 8002f00:	4b2e      	ldr	r3, [pc, #184]	@ (8002fbc <eTaskGetState+0x108>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	613b      	str	r3, [r7, #16]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8002f06:	4b2e      	ldr	r3, [pc, #184]	@ (8002fc0 <eTaskGetState+0x10c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]
            }
            taskEXIT_CRITICAL();
 8002f0c:	f001 fbcc 	bl	80046a8 <vPortExitCritical>

            if( pxEventList == &xPendingReadyList )
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc4 <eTaskGetState+0x110>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d103      	bne.n	8002f20 <eTaskGetState+0x6c>
            {
                /* The task has been placed on the pending ready list, so its
                 * state is eReady regardless of what list the task's state list
                 * item is currently placed on. */
                eReturn = eReady;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002f1e:	e03e      	b.n	8002f9e <eTaskGetState+0xea>
            }
            else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d003      	beq.n	8002f30 <eTaskGetState+0x7c>
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d103      	bne.n	8002f38 <eTaskGetState+0x84>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 8002f30:	2302      	movs	r3, #2
 8002f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002f36:	e032      	b.n	8002f9e <eTaskGetState+0xea>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	4a23      	ldr	r2, [pc, #140]	@ (8002fc8 <eTaskGetState+0x114>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d120      	bne.n	8002f82 <eTaskGetState+0xce>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d118      	bne.n	8002f7a <eTaskGetState+0xc6>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
 8002f52:	e00e      	b.n	8002f72 <eTaskGetState+0xbe>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3358      	adds	r3, #88	@ 0x58
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d103      	bne.n	8002f6c <eTaskGetState+0xb8>
                                {
                                    eReturn = eBlocked;
 8002f64:	2302      	movs	r3, #2
 8002f66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                    break;
 8002f6a:	e018      	b.n	8002f9e <eTaskGetState+0xea>
                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	623b      	str	r3, [r7, #32]
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	dded      	ble.n	8002f54 <eTaskGetState+0xa0>
 8002f78:	e011      	b.n	8002f9e <eTaskGetState+0xea>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002f80:	e00d      	b.n	8002f9e <eTaskGetState+0xea>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	4a11      	ldr	r2, [pc, #68]	@ (8002fcc <eTaskGetState+0x118>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d002      	beq.n	8002f90 <eTaskGetState+0xdc>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d103      	bne.n	8002f98 <eTaskGetState+0xe4>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 8002f90:	2304      	movs	r3, #4
 8002f92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002f96:	e002      	b.n	8002f9e <eTaskGetState+0xea>
            {
                #if ( configNUMBER_OF_CORES == 1 )
                {
                    /* If the task is not in any other state, it must be in the
                     * Ready (including pending ready) state. */
                    eReturn = eReady;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
                #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
            }
        }

        traceRETURN_eTaskGetState( eReturn );
 8002f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	20c6      	movs	r0, #198	@ 0xc6
 8002fa6:	f003 f9a3 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return eReturn;
 8002faa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3728      	adds	r7, #40	@ 0x28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000e08 	.word	0x20000e08
 8002fbc:	20001294 	.word	0x20001294
 8002fc0:	20001298 	.word	0x20001298
 8002fc4:	2000129c 	.word	0x2000129c
 8002fc8:	200012c8 	.word	0x200012c8
 8002fcc:	200012b0 	.word	0x200012b0

08002fd0 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b090      	sub	sp, #64	@ 0x40
 8002fd4:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002fde:	2300      	movs	r3, #0
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe2:	e013      	b.n	800300c <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8003094 <prvCreateIdleTasks+0xc4>)
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	4413      	add	r3, r2
 8002fea:	7819      	ldrb	r1, [r3, #0]
 8002fec:	f107 0210 	add.w	r2, r7, #16
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	4413      	add	r3, r2
 8002ff4:	460a      	mov	r2, r1
 8002ff6:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002ff8:	f107 0210 	add.w	r2, r7, #16
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	4413      	add	r3, r2
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d006      	beq.n	8003014 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	3301      	adds	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	2b0f      	cmp	r3, #15
 8003010:	dde8      	ble.n	8002fe4 <prvCreateIdleTasks+0x14>
 8003012:	e000      	b.n	8003016 <prvCreateIdleTasks+0x46>
        {
            break;
 8003014:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003016:	2300      	movs	r3, #0
 8003018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800301a:	e031      	b.n	8003080 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800301c:	4b1e      	ldr	r3, [pc, #120]	@ (8003098 <prvCreateIdleTasks+0xc8>)
 800301e:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8003024:	2300      	movs	r3, #0
 8003026:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8003028:	1d3a      	adds	r2, r7, #4
 800302a:	f107 0108 	add.w	r1, r7, #8
 800302e:	f107 030c 	add.w	r3, r7, #12
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff f808 	bl	8002048 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	f107 0110 	add.w	r1, r7, #16
 8003042:	9202      	str	r2, [sp, #8]
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	2300      	movs	r3, #0
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	2300      	movs	r3, #0
 800304c:	4602      	mov	r2, r0
 800304e:	6a38      	ldr	r0, [r7, #32]
 8003050:	f7ff fc78 	bl	8002944 <xTaskCreateStatic>
 8003054:	4602      	mov	r2, r0
 8003056:	4911      	ldr	r1, [pc, #68]	@ (800309c <prvCreateIdleTasks+0xcc>)
 8003058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 800305e:	4a0f      	ldr	r2, [pc, #60]	@ (800309c <prvCreateIdleTasks+0xcc>)
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 800306a:	2301      	movs	r3, #1
 800306c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800306e:	e001      	b.n	8003074 <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 8003070:	2300      	movs	r3, #0
 8003072:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800307a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307c:	3301      	adds	r3, #1
 800307e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	ddca      	ble.n	800301c <prvCreateIdleTasks+0x4c>
 8003086:	e000      	b.n	800308a <prvCreateIdleTasks+0xba>
        {
            break;
 8003088:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800308a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800308c:	4618      	mov	r0, r3
 800308e:	3730      	adds	r7, #48	@ 0x30
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	0800730c 	.word	0x0800730c
 8003098:	08003ae1 	.word	0x08003ae1
 800309c:	20001300 	.word	0x20001300

080030a0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80030a6:	f7ff ff93 	bl	8002fd0 <prvCreateIdleTasks>
 80030aa:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d102      	bne.n	80030b8 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80030b2:	f000 febb 	bl	8003e2c <xTimerCreateTimerTask>
 80030b6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d129      	bne.n	8003112 <vTaskStartScheduler+0x72>
    __asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	60bb      	str	r3, [r7, #8]
}
 80030d0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80030d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003144 <vTaskStartScheduler+0xa4>)
 80030d4:	f04f 32ff 	mov.w	r2, #4294967295
 80030d8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80030da:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <vTaskStartScheduler+0xa8>)
 80030dc:	2201      	movs	r2, #1
 80030de:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030e0:	4b1a      	ldr	r3, [pc, #104]	@ (800314c <vTaskStartScheduler+0xac>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80030e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003150 <vTaskStartScheduler+0xb0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3334      	adds	r3, #52	@ 0x34
 80030ec:	2205      	movs	r2, #5
 80030ee:	4919      	ldr	r1, [pc, #100]	@ (8003154 <vTaskStartScheduler+0xb4>)
 80030f0:	4618      	mov	r0, r3
 80030f2:	f003 fc0b 	bl	800690c <memcmp>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <vTaskStartScheduler+0x68>
 80030fc:	4b14      	ldr	r3, [pc, #80]	@ (8003150 <vTaskStartScheduler+0xb0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f003 f9ab 	bl	800645c <SEGGER_SYSVIEW_OnTaskStartExec>
 8003106:	e001      	b.n	800310c <vTaskStartScheduler+0x6c>
 8003108:	f003 f94a 	bl	80063a0 <SEGGER_SYSVIEW_OnIdle>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800310c:	f001 f9de 	bl	80044cc <xPortStartScheduler>
 8003110:	e00f      	b.n	8003132 <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d10b      	bne.n	8003132 <vTaskStartScheduler+0x92>
    __asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	607b      	str	r3, [r7, #4]
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	e7fd      	b.n	800312e <vTaskStartScheduler+0x8e>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003132:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <vTaskStartScheduler+0xb8>)
 8003134:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003136:	20cd      	movs	r0, #205	@ 0xcd
 8003138:	f003 f89e 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
}
 800313c:	bf00      	nop
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	200012fc 	.word	0x200012fc
 8003148:	200012e8 	.word	0x200012e8
 800314c:	200012e0 	.word	0x200012e0
 8003150:	20000e08 	.word	0x20000e08
 8003154:	0800730c 	.word	0x0800730c
 8003158:	080074bc 	.word	0x080074bc

0800315c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003160:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <vTaskSuspendAll+0x18>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3301      	adds	r3, #1
 8003166:	4a03      	ldr	r2, [pc, #12]	@ (8003174 <vTaskSuspendAll+0x18>)
 8003168:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800316a:	20cf      	movs	r0, #207	@ 0xcf
 800316c:	f003 f884 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20001304 	.word	0x20001304

08003178 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003186:	f001 fa5f 	bl	8004648 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800318e:	4b7a      	ldr	r3, [pc, #488]	@ (8003378 <xTaskResumeAll+0x200>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10b      	bne.n	80031ae <xTaskResumeAll+0x36>
    __asm volatile
 8003196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	603b      	str	r3, [r7, #0]
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	e7fd      	b.n	80031aa <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80031ae:	4b72      	ldr	r3, [pc, #456]	@ (8003378 <xTaskResumeAll+0x200>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	4a70      	ldr	r2, [pc, #448]	@ (8003378 <xTaskResumeAll+0x200>)
 80031b6:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80031b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003378 <xTaskResumeAll+0x200>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f040 80cf 	bne.w	8003360 <xTaskResumeAll+0x1e8>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031c2:	4b6e      	ldr	r3, [pc, #440]	@ (800337c <xTaskResumeAll+0x204>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 80ca 	beq.w	8003360 <xTaskResumeAll+0x1e8>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031cc:	e093      	b.n	80032f6 <xTaskResumeAll+0x17e>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80031ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003380 <xTaskResumeAll+0x208>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	6a12      	ldr	r2, [r2, #32]
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	69d2      	ldr	r2, [r2, #28]
 80031ee:	605a      	str	r2, [r3, #4]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	3318      	adds	r3, #24
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d103      	bne.n	8003204 <xTaskResumeAll+0x8c>
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	6a1a      	ldr	r2, [r3, #32]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2200      	movs	r2, #0
 8003208:	629a      	str	r2, [r3, #40]	@ 0x28
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	1e5a      	subs	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	68d2      	ldr	r2, [r2, #12]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	6892      	ldr	r2, [r2, #8]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3304      	adds	r3, #4
 8003236:	429a      	cmp	r2, r3
 8003238:	d103      	bne.n	8003242 <xTaskResumeAll+0xca>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	2200      	movs	r2, #0
 8003246:	615a      	str	r2, [r3, #20]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	1e5a      	subs	r2, r3, #1
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4618      	mov	r0, r3
 8003256:	f003 f943 	bl	80064e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800325e:	4b49      	ldr	r3, [pc, #292]	@ (8003384 <xTaskResumeAll+0x20c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d903      	bls.n	800326e <xTaskResumeAll+0xf6>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326a:	4a46      	ldr	r2, [pc, #280]	@ (8003384 <xTaskResumeAll+0x20c>)
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003272:	4945      	ldr	r1, [pc, #276]	@ (8003388 <xTaskResumeAll+0x210>)
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3304      	adds	r3, #4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	3204      	adds	r2, #4
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	1d1a      	adds	r2, r3, #4
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4a35      	ldr	r2, [pc, #212]	@ (8003388 <xTaskResumeAll+0x210>)
 80032b2:	441a      	add	r2, r3
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	615a      	str	r2, [r3, #20]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032bc:	4932      	ldr	r1, [pc, #200]	@ (8003388 <xTaskResumeAll+0x210>)
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032ce:	1c59      	adds	r1, r3, #1
 80032d0:	482d      	ldr	r0, [pc, #180]	@ (8003388 <xTaskResumeAll+0x210>)
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4403      	add	r3, r0
 80032dc:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e2:	4b2a      	ldr	r3, [pc, #168]	@ (800338c <xTaskResumeAll+0x214>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d904      	bls.n	80032f6 <xTaskResumeAll+0x17e>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80032ec:	4a28      	ldr	r2, [pc, #160]	@ (8003390 <xTaskResumeAll+0x218>)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2101      	movs	r1, #1
 80032f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032f6:	4b22      	ldr	r3, [pc, #136]	@ (8003380 <xTaskResumeAll+0x208>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f47f af67 	bne.w	80031ce <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <xTaskResumeAll+0x192>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003306:	f000 fcd9 	bl	8003cbc <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800330a:	4b22      	ldr	r3, [pc, #136]	@ (8003394 <xTaskResumeAll+0x21c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d012      	beq.n	800333c <xTaskResumeAll+0x1c4>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003316:	f000 f869 	bl	80033ec <xTaskIncrementTick>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d004      	beq.n	800332a <xTaskResumeAll+0x1b2>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003320:	4a1b      	ldr	r2, [pc, #108]	@ (8003390 <xTaskResumeAll+0x218>)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2101      	movs	r1, #1
 8003326:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3b01      	subs	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ef      	bne.n	8003316 <xTaskResumeAll+0x19e>

                            xPendedTicks = 0;
 8003336:	4b17      	ldr	r3, [pc, #92]	@ (8003394 <xTaskResumeAll+0x21c>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800333c:	4a14      	ldr	r2, [pc, #80]	@ (8003390 <xTaskResumeAll+0x218>)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <xTaskResumeAll+0x1e8>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003348:	2301      	movs	r3, #1
 800334a:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800334c:	4b0f      	ldr	r3, [pc, #60]	@ (800338c <xTaskResumeAll+0x214>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <xTaskResumeAll+0x220>)
 8003352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003360:	f001 f9a2 	bl	80046a8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	4619      	mov	r1, r3
 8003368:	20d0      	movs	r0, #208	@ 0xd0
 800336a:	f002 ffc1 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 800336e:	69bb      	ldr	r3, [r7, #24]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3720      	adds	r7, #32
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20001304 	.word	0x20001304
 800337c:	200012dc 	.word	0x200012dc
 8003380:	2000129c 	.word	0x2000129c
 8003384:	200012e4 	.word	0x200012e4
 8003388:	20000e0c 	.word	0x20000e0c
 800338c:	20000e08 	.word	0x20000e08
 8003390:	200012f0 	.word	0x200012f0
 8003394:	200012ec 	.word	0x200012ec
 8003398:	e000ed04 	.word	0xe000ed04

0800339c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80033a2:	4b06      	ldr	r3, [pc, #24]	@ (80033bc <xTaskGetTickCount+0x20>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	20d1      	movs	r0, #209	@ 0xd1
 80033ac:	f002 ffa0 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 80033b0:	687b      	ldr	r3, [r7, #4]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	200012e0 	.word	0x200012e0

080033c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033c6:	f001 fa0b 	bl	80047e0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80033ce:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <xTaskGetTickCountFromISR+0x28>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80033d4:	6839      	ldr	r1, [r7, #0]
 80033d6:	20d2      	movs	r0, #210	@ 0xd2
 80033d8:	f002 ff8a 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80033dc:	683b      	ldr	r3, [r7, #0]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	200012e0 	.word	0x200012e0

080033ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	@ 0x28
 80033f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80033f6:	4b84      	ldr	r3, [pc, #528]	@ (8003608 <xTaskIncrementTick+0x21c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f040 80f4 	bne.w	80035e8 <xTaskIncrementTick+0x1fc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003400:	4b82      	ldr	r3, [pc, #520]	@ (800360c <xTaskIncrementTick+0x220>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003408:	4a80      	ldr	r2, [pc, #512]	@ (800360c <xTaskIncrementTick+0x220>)
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d121      	bne.n	8003458 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003414:	4b7e      	ldr	r3, [pc, #504]	@ (8003610 <xTaskIncrementTick+0x224>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <xTaskIncrementTick+0x4a>
    __asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	607b      	str	r3, [r7, #4]
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	e7fd      	b.n	8003432 <xTaskIncrementTick+0x46>
 8003436:	4b76      	ldr	r3, [pc, #472]	@ (8003610 <xTaskIncrementTick+0x224>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	4b75      	ldr	r3, [pc, #468]	@ (8003614 <xTaskIncrementTick+0x228>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a73      	ldr	r2, [pc, #460]	@ (8003610 <xTaskIncrementTick+0x224>)
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	4a73      	ldr	r2, [pc, #460]	@ (8003614 <xTaskIncrementTick+0x228>)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4b73      	ldr	r3, [pc, #460]	@ (8003618 <xTaskIncrementTick+0x22c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3301      	adds	r3, #1
 8003450:	4a71      	ldr	r2, [pc, #452]	@ (8003618 <xTaskIncrementTick+0x22c>)
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	f000 fc32 	bl	8003cbc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003458:	4b70      	ldr	r3, [pc, #448]	@ (800361c <xTaskIncrementTick+0x230>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6a3a      	ldr	r2, [r7, #32]
 800345e:	429a      	cmp	r2, r3
 8003460:	f0c0 80ad 	bcc.w	80035be <xTaskIncrementTick+0x1d2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003464:	4b6a      	ldr	r3, [pc, #424]	@ (8003610 <xTaskIncrementTick+0x224>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d104      	bne.n	8003478 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800346e:	4b6b      	ldr	r3, [pc, #428]	@ (800361c <xTaskIncrementTick+0x230>)
 8003470:	f04f 32ff 	mov.w	r2, #4294967295
 8003474:	601a      	str	r2, [r3, #0]
                    break;
 8003476:	e0a2      	b.n	80035be <xTaskIncrementTick+0x1d2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003478:	4b65      	ldr	r3, [pc, #404]	@ (8003610 <xTaskIncrementTick+0x224>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	429a      	cmp	r2, r3
 800348e:	d203      	bcs.n	8003498 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003490:	4a62      	ldr	r2, [pc, #392]	@ (800361c <xTaskIncrementTick+0x230>)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	6013      	str	r3, [r2, #0]
                        break;
 8003496:	e092      	b.n	80035be <xTaskIncrementTick+0x1d2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	68d2      	ldr	r2, [r2, #12]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	6892      	ldr	r2, [r2, #8]
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	3304      	adds	r3, #4
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d103      	bne.n	80034c6 <xTaskIncrementTick+0xda>
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2200      	movs	r2, #0
 80034ca:	615a      	str	r2, [r3, #20]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	1e5a      	subs	r2, r3, #1
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01e      	beq.n	800351c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	6a12      	ldr	r2, [r2, #32]
 80034ec:	609a      	str	r2, [r3, #8]
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	69d2      	ldr	r2, [r2, #28]
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	3318      	adds	r3, #24
 8003500:	429a      	cmp	r2, r3
 8003502:	d103      	bne.n	800350c <xTaskIncrementTick+0x120>
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	6a1a      	ldr	r2, [r3, #32]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2200      	movs	r2, #0
 8003510:	629a      	str	r2, [r3, #40]	@ 0x28
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	1e5a      	subs	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4618      	mov	r0, r3
 8003520:	f002 ffde 	bl	80064e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003528:	4b3d      	ldr	r3, [pc, #244]	@ (8003620 <xTaskIncrementTick+0x234>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d903      	bls.n	8003538 <xTaskIncrementTick+0x14c>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	4a3a      	ldr	r2, [pc, #232]	@ (8003620 <xTaskIncrementTick+0x234>)
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353c:	4939      	ldr	r1, [pc, #228]	@ (8003624 <xTaskIncrementTick+0x238>)
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3304      	adds	r3, #4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	60da      	str	r2, [r3, #12]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	3204      	adds	r2, #4
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	1d1a      	adds	r2, r3, #4
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4a2a      	ldr	r2, [pc, #168]	@ (8003624 <xTaskIncrementTick+0x238>)
 800357c:	441a      	add	r2, r3
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	615a      	str	r2, [r3, #20]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003586:	4927      	ldr	r1, [pc, #156]	@ (8003624 <xTaskIncrementTick+0x238>)
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003598:	1c59      	adds	r1, r3, #1
 800359a:	4822      	ldr	r0, [pc, #136]	@ (8003624 <xTaskIncrementTick+0x238>)
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4403      	add	r3, r0
 80035a6:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003628 <xTaskIncrementTick+0x23c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b2:	429a      	cmp	r2, r3
 80035b4:	f67f af56 	bls.w	8003464 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035bc:	e752      	b.n	8003464 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80035be:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <xTaskIncrementTick+0x23c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c4:	4917      	ldr	r1, [pc, #92]	@ (8003624 <xTaskIncrementTick+0x238>)
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d901      	bls.n	80035da <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 80035d6:	2301      	movs	r3, #1
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80035da:	4b14      	ldr	r3, [pc, #80]	@ (800362c <xTaskIncrementTick+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <xTaskIncrementTick+0x206>
                {
                    xSwitchRequired = pdTRUE;
 80035e2:	2301      	movs	r3, #1
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e6:	e004      	b.n	80035f2 <xTaskIncrementTick+0x206>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80035e8:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <xTaskIncrementTick+0x244>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3301      	adds	r3, #1
 80035ee:	4a10      	ldr	r2, [pc, #64]	@ (8003630 <xTaskIncrementTick+0x244>)
 80035f0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	4619      	mov	r1, r3
 80035f6:	20db      	movs	r0, #219	@ 0xdb
 80035f8:	f002 fe7a 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3728      	adds	r7, #40	@ 0x28
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20001304 	.word	0x20001304
 800360c:	200012e0 	.word	0x200012e0
 8003610:	20001294 	.word	0x20001294
 8003614:	20001298 	.word	0x20001298
 8003618:	200012f4 	.word	0x200012f4
 800361c:	200012fc 	.word	0x200012fc
 8003620:	200012e4 	.word	0x200012e4
 8003624:	20000e0c 	.word	0x20000e0c
 8003628:	20000e08 	.word	0x20000e08
 800362c:	200012f0 	.word	0x200012f0
 8003630:	200012ec 	.word	0x200012ec

08003634 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800363a:	4b31      	ldr	r3, [pc, #196]	@ (8003700 <vTaskSwitchContext+0xcc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003642:	4b30      	ldr	r3, [pc, #192]	@ (8003704 <vTaskSwitchContext+0xd0>)
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003648:	e056      	b.n	80036f8 <vTaskSwitchContext+0xc4>
            xYieldPendings[ 0 ] = pdFALSE;
 800364a:	4b2e      	ldr	r3, [pc, #184]	@ (8003704 <vTaskSwitchContext+0xd0>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003650:	4b2d      	ldr	r3, [pc, #180]	@ (8003708 <vTaskSwitchContext+0xd4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	e011      	b.n	800367c <vTaskSwitchContext+0x48>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10b      	bne.n	8003676 <vTaskSwitchContext+0x42>
    __asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	607b      	str	r3, [r7, #4]
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	e7fd      	b.n	8003672 <vTaskSwitchContext+0x3e>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3b01      	subs	r3, #1
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	4923      	ldr	r1, [pc, #140]	@ (800370c <vTaskSwitchContext+0xd8>)
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0e3      	beq.n	8003658 <vTaskSwitchContext+0x24>
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4a1c      	ldr	r2, [pc, #112]	@ (800370c <vTaskSwitchContext+0xd8>)
 800369c:	4413      	add	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	3308      	adds	r3, #8
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d103      	bne.n	80036be <vTaskSwitchContext+0x8a>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a12      	ldr	r2, [pc, #72]	@ (8003710 <vTaskSwitchContext+0xdc>)
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003708 <vTaskSwitchContext+0xd4>)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80036ce:	4b10      	ldr	r3, [pc, #64]	@ (8003710 <vTaskSwitchContext+0xdc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3334      	adds	r3, #52	@ 0x34
 80036d4:	2205      	movs	r2, #5
 80036d6:	490f      	ldr	r1, [pc, #60]	@ (8003714 <vTaskSwitchContext+0xe0>)
 80036d8:	4618      	mov	r0, r3
 80036da:	f003 f917 	bl	800690c <memcmp>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <vTaskSwitchContext+0xbc>
 80036e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003710 <vTaskSwitchContext+0xdc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f002 feb7 	bl	800645c <SEGGER_SYSVIEW_OnTaskStartExec>
 80036ee:	e001      	b.n	80036f4 <vTaskSwitchContext+0xc0>
 80036f0:	f002 fe56 	bl	80063a0 <SEGGER_SYSVIEW_OnIdle>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80036f4:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <vTaskSwitchContext+0xdc>)
 80036f6:	681b      	ldr	r3, [r3, #0]
    }
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20001304 	.word	0x20001304
 8003704:	200012f0 	.word	0x200012f0
 8003708:	200012e4 	.word	0x200012e4
 800370c:	20000e0c 	.word	0x20000e0c
 8003710:	20000e08 	.word	0x20000e08
 8003714:	0800730c 	.word	0x0800730c

08003718 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	60fb      	str	r3, [r7, #12]
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	e7fd      	b.n	800373c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003740:	4b08      	ldr	r3, [pc, #32]	@ (8003764 <vTaskPlaceOnEventList+0x4c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3318      	adds	r3, #24
 8003746:	4619      	mov	r1, r3
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7fe fd08 	bl	800215e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800374e:	2101      	movs	r1, #1
 8003750:	6838      	ldr	r0, [r7, #0]
 8003752:	f000 faef 	bl	8003d34 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003756:	20e1      	movs	r0, #225	@ 0xe1
 8003758:	f002 fd8e 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000e08 	.word	0x20000e08

08003768 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	613b      	str	r3, [r7, #16]
}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	e7fd      	b.n	800378e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	4b17      	ldr	r3, [pc, #92]	@ (80037f8 <vTaskPlaceOnEventListRestricted+0x90>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	61da      	str	r2, [r3, #28]
 80037a0:	4b15      	ldr	r3, [pc, #84]	@ (80037f8 <vTaskPlaceOnEventListRestricted+0x90>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	6892      	ldr	r2, [r2, #8]
 80037a8:	621a      	str	r2, [r3, #32]
 80037aa:	4b13      	ldr	r3, [pc, #76]	@ (80037f8 <vTaskPlaceOnEventListRestricted+0x90>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	3218      	adds	r2, #24
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	4b10      	ldr	r3, [pc, #64]	@ (80037f8 <vTaskPlaceOnEventListRestricted+0x90>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f103 0218 	add.w	r2, r3, #24
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <vTaskPlaceOnEventListRestricted+0x90>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80037da:	f04f 33ff 	mov.w	r3, #4294967295
 80037de:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	68b8      	ldr	r0, [r7, #8]
 80037e4:	f000 faa6 	bl	8003d34 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80037e8:	20e3      	movs	r0, #227	@ 0xe3
 80037ea:	f002 fd45 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80037ee:	bf00      	nop
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000e08 	.word	0x20000e08

080037fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	@ 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	60fb      	str	r3, [r7, #12]
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	e7fd      	b.n	8003826 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	6a3a      	ldr	r2, [r7, #32]
 8003836:	6a12      	ldr	r2, [r2, #32]
 8003838:	609a      	str	r2, [r3, #8]
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	6a3a      	ldr	r2, [r7, #32]
 8003840:	69d2      	ldr	r2, [r2, #28]
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	3318      	adds	r3, #24
 800384c:	429a      	cmp	r2, r3
 800384e:	d103      	bne.n	8003858 <xTaskRemoveFromEventList+0x5c>
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	6a1a      	ldr	r2, [r3, #32]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	2200      	movs	r2, #0
 800385c:	629a      	str	r2, [r3, #40]	@ 0x28
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	1e5a      	subs	r2, r3, #1
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003868:	4b4f      	ldr	r3, [pc, #316]	@ (80039a8 <xTaskRemoveFromEventList+0x1ac>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d165      	bne.n	800393c <xTaskRemoveFromEventList+0x140>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	6a3a      	ldr	r2, [r7, #32]
 800387c:	68d2      	ldr	r2, [r2, #12]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	6a3a      	ldr	r2, [r7, #32]
 8003886:	6892      	ldr	r2, [r2, #8]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	3304      	adds	r3, #4
 8003892:	429a      	cmp	r2, r3
 8003894:	d103      	bne.n	800389e <xTaskRemoveFromEventList+0xa2>
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	2200      	movs	r2, #0
 80038a2:	615a      	str	r2, [r3, #20]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	1e5a      	subs	r2, r3, #1
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f002 fe15 	bl	80064e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ba:	4b3c      	ldr	r3, [pc, #240]	@ (80039ac <xTaskRemoveFromEventList+0x1b0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d903      	bls.n	80038ca <xTaskRemoveFromEventList+0xce>
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c6:	4a39      	ldr	r2, [pc, #228]	@ (80039ac <xTaskRemoveFromEventList+0x1b0>)
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ce:	4938      	ldr	r1, [pc, #224]	@ (80039b0 <xTaskRemoveFromEventList+0x1b4>)
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3304      	adds	r3, #4
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	609a      	str	r2, [r3, #8]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	6a3a      	ldr	r2, [r7, #32]
 80038f4:	3204      	adds	r2, #4
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	1d1a      	adds	r2, r3, #4
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4a28      	ldr	r2, [pc, #160]	@ (80039b0 <xTaskRemoveFromEventList+0x1b4>)
 800390e:	441a      	add	r2, r3
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	615a      	str	r2, [r3, #20]
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003918:	4925      	ldr	r1, [pc, #148]	@ (80039b0 <xTaskRemoveFromEventList+0x1b4>)
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a3a      	ldr	r2, [r7, #32]
 8003928:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800392a:	1c59      	adds	r1, r3, #1
 800392c:	4820      	ldr	r0, [pc, #128]	@ (80039b0 <xTaskRemoveFromEventList+0x1b4>)
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4403      	add	r3, r0
 8003938:	6019      	str	r1, [r3, #0]
 800393a:	e01b      	b.n	8003974 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800393c:	4b1d      	ldr	r3, [pc, #116]	@ (80039b4 <xTaskRemoveFromEventList+0x1b8>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	61da      	str	r2, [r3, #28]
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	621a      	str	r2, [r3, #32]
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	6a3a      	ldr	r2, [r7, #32]
 8003956:	3218      	adds	r2, #24
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	f103 0218 	add.w	r2, r3, #24
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	4a13      	ldr	r2, [pc, #76]	@ (80039b4 <xTaskRemoveFromEventList+0x1b8>)
 8003968:	629a      	str	r2, [r3, #40]	@ 0x28
 800396a:	4b12      	ldr	r3, [pc, #72]	@ (80039b4 <xTaskRemoveFromEventList+0x1b8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3301      	adds	r3, #1
 8003970:	4a10      	ldr	r2, [pc, #64]	@ (80039b4 <xTaskRemoveFromEventList+0x1b8>)
 8003972:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003978:	4b0f      	ldr	r3, [pc, #60]	@ (80039b8 <xTaskRemoveFromEventList+0x1bc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397e:	429a      	cmp	r2, r3
 8003980:	d905      	bls.n	800398e <xTaskRemoveFromEventList+0x192>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003982:	2301      	movs	r3, #1
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003986:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <xTaskRemoveFromEventList+0x1c0>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	e001      	b.n	8003992 <xTaskRemoveFromEventList+0x196>
        }
        else
        {
            xReturn = pdFALSE;
 800398e:	2300      	movs	r3, #0
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	4619      	mov	r1, r3
 8003996:	20e4      	movs	r0, #228	@ 0xe4
 8003998:	f002 fcaa 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3728      	adds	r7, #40	@ 0x28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20001304 	.word	0x20001304
 80039ac:	200012e4 	.word	0x200012e4
 80039b0:	20000e0c 	.word	0x20000e0c
 80039b4:	2000129c 	.word	0x2000129c
 80039b8:	20000e08 	.word	0x20000e08
 80039bc:	200012f0 	.word	0x200012f0

080039c0 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039c8:	4b07      	ldr	r3, [pc, #28]	@ (80039e8 <vTaskInternalSetTimeOutState+0x28>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80039d0:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <vTaskInternalSetTimeOutState+0x2c>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 80039d8:	20e7      	movs	r0, #231	@ 0xe7
 80039da:	f002 fc4d 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200012f4 	.word	0x200012f4
 80039ec:	200012e0 	.word	0x200012e0

080039f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10b      	bne.n	8003a18 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	613b      	str	r3, [r7, #16]
}
 8003a12:	bf00      	nop
 8003a14:	bf00      	nop
 8003a16:	e7fd      	b.n	8003a14 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10b      	bne.n	8003a36 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	60fb      	str	r3, [r7, #12]
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	e7fd      	b.n	8003a32 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003a36:	f000 fe07 	bl	8004648 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003a3a:	4b21      	ldr	r3, [pc, #132]	@ (8003ac0 <xTaskCheckForTimeOut+0xd0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a52:	d102      	bne.n	8003a5a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	e026      	b.n	8003aa8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b19      	ldr	r3, [pc, #100]	@ (8003ac4 <xTaskCheckForTimeOut+0xd4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d00a      	beq.n	8003a7c <xTaskCheckForTimeOut+0x8c>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d305      	bcc.n	8003a7c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a70:	2301      	movs	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e015      	b.n	8003aa8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d20b      	bcs.n	8003a9e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	1ad2      	subs	r2, r2, r3
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff ff94 	bl	80039c0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	e004      	b.n	8003aa8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003aa8:	f000 fdfe 	bl	80046a8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	20e8      	movs	r0, #232	@ 0xe8
 8003ab2:	f002 fc1d 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3720      	adds	r7, #32
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200012e0 	.word	0x200012e0
 8003ac4:	200012f4 	.word	0x200012f4

08003ac8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003acc:	4b03      	ldr	r3, [pc, #12]	@ (8003adc <vTaskMissedYield+0x14>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003ad2:	20e9      	movs	r0, #233	@ 0xe9
 8003ad4:	f002 fbd0 	bl	8006278 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	200012f0 	.word	0x200012f0

08003ae0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ae8:	f000 f852 	bl	8003b90 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003aec:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <prvIdleTask+0x28>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d9f9      	bls.n	8003ae8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003af4:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <prvIdleTask+0x2c>)
 8003af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003b04:	e7f0      	b.n	8003ae8 <prvIdleTask+0x8>
 8003b06:	bf00      	nop
 8003b08:	20000e0c 	.word	0x20000e0c
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	e00c      	b.n	8003b36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <prvInitialiseTaskLists+0x60>)
 8003b28:	4413      	add	r3, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe fac0 	bl	80020b0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3301      	adds	r3, #1
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b37      	cmp	r3, #55	@ 0x37
 8003b3a:	d9ef      	bls.n	8003b1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003b3c:	480d      	ldr	r0, [pc, #52]	@ (8003b74 <prvInitialiseTaskLists+0x64>)
 8003b3e:	f7fe fab7 	bl	80020b0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003b42:	480d      	ldr	r0, [pc, #52]	@ (8003b78 <prvInitialiseTaskLists+0x68>)
 8003b44:	f7fe fab4 	bl	80020b0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003b48:	480c      	ldr	r0, [pc, #48]	@ (8003b7c <prvInitialiseTaskLists+0x6c>)
 8003b4a:	f7fe fab1 	bl	80020b0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003b4e:	480c      	ldr	r0, [pc, #48]	@ (8003b80 <prvInitialiseTaskLists+0x70>)
 8003b50:	f7fe faae 	bl	80020b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003b54:	480b      	ldr	r0, [pc, #44]	@ (8003b84 <prvInitialiseTaskLists+0x74>)
 8003b56:	f7fe faab 	bl	80020b0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <prvInitialiseTaskLists+0x78>)
 8003b5c:	4a05      	ldr	r2, [pc, #20]	@ (8003b74 <prvInitialiseTaskLists+0x64>)
 8003b5e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b60:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <prvInitialiseTaskLists+0x7c>)
 8003b62:	4a05      	ldr	r2, [pc, #20]	@ (8003b78 <prvInitialiseTaskLists+0x68>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000e0c 	.word	0x20000e0c
 8003b74:	2000126c 	.word	0x2000126c
 8003b78:	20001280 	.word	0x20001280
 8003b7c:	2000129c 	.word	0x2000129c
 8003b80:	200012b0 	.word	0x200012b0
 8003b84:	200012c8 	.word	0x200012c8
 8003b88:	20001294 	.word	0x20001294
 8003b8c:	20001298 	.word	0x20001298

08003b90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b96:	e019      	b.n	8003bcc <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003b98:	f000 fd56 	bl	8004648 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003b9c:	4b10      	ldr	r3, [pc, #64]	@ (8003be0 <prvCheckTasksWaitingTermination+0x50>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe fb13 	bl	80021d4 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003bae:	4b0d      	ldr	r3, [pc, #52]	@ (8003be4 <prvCheckTasksWaitingTermination+0x54>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8003be4 <prvCheckTasksWaitingTermination+0x54>)
 8003bb6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <prvCheckTasksWaitingTermination+0x58>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003be8 <prvCheckTasksWaitingTermination+0x58>)
 8003bc0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003bc2:	f000 fd71 	bl	80046a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f848 	bl	8003c5c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bcc:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <prvCheckTasksWaitingTermination+0x58>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e1      	bne.n	8003b98 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200012b0 	.word	0x200012b0
 8003be4:	200012dc 	.word	0x200012dc
 8003be8:	200012c4 	.word	0x200012c4

08003bec <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003bf8:	e005      	b.n	8003c06 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	607b      	str	r3, [r7, #4]
            uxCount++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3301      	adds	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2ba5      	cmp	r3, #165	@ 0xa5
 8003c0c:	d0f5      	beq.n	8003bfa <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	60fb      	str	r3, [r7, #12]

        return uxCount;
 8003c14:	68fb      	ldr	r3, [r7, #12]
    }
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        traceENTER_uxTaskGetStackHighWaterMark( xTask );

        pxTCB = prvGetTCBFromHandle( xTask );
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d102      	bne.n	8003c34 <uxTaskGetStackHighWaterMark+0x14>
 8003c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c58 <uxTaskGetStackHighWaterMark+0x38>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	e000      	b.n	8003c36 <uxTaskGetStackHighWaterMark+0x16>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3c:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8003c3e:	6938      	ldr	r0, [r7, #16]
 8003c40:	f7ff ffd4 	bl	8003bec <prvTaskCheckFreeStackSpace>
 8003c44:	60f8      	str	r0, [r7, #12]

        traceRETURN_uxTaskGetStackHighWaterMark( uxReturn );
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	20f2      	movs	r0, #242	@ 0xf2
 8003c4a:	f002 fb51 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return uxReturn;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
    }
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000e08 	.word	0x20000e08

08003c5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d108      	bne.n	8003c80 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 ff26 	bl	8004ac4 <vPortFree>
                vPortFree( pxTCB );
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 ff23 	bl	8004ac4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c7e:	e019      	b.n	8003cb4 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d103      	bne.n	8003c92 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 ff1a 	bl	8004ac4 <vPortFree>
    }
 8003c90:	e010      	b.n	8003cb4 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d00b      	beq.n	8003cb4 <prvDeleteTCB+0x58>
    __asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60fb      	str	r3, [r7, #12]
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	e7fd      	b.n	8003cb0 <prvDeleteTCB+0x54>
    }
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cc0:	4b09      	ldr	r3, [pc, #36]	@ (8003ce8 <prvResetNextTaskUnblockTime+0x2c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d104      	bne.n	8003cd4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003cca:	4b08      	ldr	r3, [pc, #32]	@ (8003cec <prvResetNextTaskUnblockTime+0x30>)
 8003ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003cd2:	e005      	b.n	8003ce0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cd4:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <prvResetNextTaskUnblockTime+0x2c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a03      	ldr	r2, [pc, #12]	@ (8003cec <prvResetNextTaskUnblockTime+0x30>)
 8003cde:	6013      	str	r3, [r2, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr
 8003ce8:	20001294 	.word	0x20001294
 8003cec:	200012fc 	.word	0x200012fc

08003cf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <xTaskGetSchedulerState+0x3c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	607b      	str	r3, [r7, #4]
 8003d02:	e008      	b.n	8003d16 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003d04:	4b0a      	ldr	r3, [pc, #40]	@ (8003d30 <xTaskGetSchedulerState+0x40>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d102      	bne.n	8003d12 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	e001      	b.n	8003d16 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003d12:	2300      	movs	r3, #0
 8003d14:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	20f5      	movs	r0, #245	@ 0xf5
 8003d1c:	f002 fae8 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003d20:	687b      	ldr	r3, [r7, #4]
    }
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200012e8 	.word	0x200012e8
 8003d30:	20001304 	.word	0x20001304

08003d34 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d3e:	4b35      	ldr	r3, [pc, #212]	@ (8003e14 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003d44:	4b34      	ldr	r3, [pc, #208]	@ (8003e18 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003d4a:	4b34      	ldr	r3, [pc, #208]	@ (8003e1c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d50:	4b33      	ldr	r3, [pc, #204]	@ (8003e20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3304      	adds	r3, #4
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fa3c 	bl	80021d4 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d124      	bne.n	8003dae <prvAddCurrentTaskToDelayedList+0x7a>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d021      	beq.n	8003dae <prvAddCurrentTaskToDelayedList+0x7a>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e24 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	4b2b      	ldr	r3, [pc, #172]	@ (8003e20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	4b29      	ldr	r3, [pc, #164]	@ (8003e20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	6892      	ldr	r2, [r2, #8]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	4b27      	ldr	r3, [pc, #156]	@ (8003e20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	3204      	adds	r2, #4
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	4b24      	ldr	r3, [pc, #144]	@ (8003e20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	1d1a      	adds	r2, r3, #4
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	4b21      	ldr	r3, [pc, #132]	@ (8003e20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a21      	ldr	r2, [pc, #132]	@ (8003e24 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d9e:	615a      	str	r2, [r3, #20]
 8003da0:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e24 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003dac:	e02e      	b.n	8003e0c <prvAddCurrentTaskToDelayedList+0xd8>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4413      	add	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003db6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d20d      	bcs.n	8003de2 <prvAddCurrentTaskToDelayedList+0xae>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003dc6:	4b16      	ldr	r3, [pc, #88]	@ (8003e20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2104      	movs	r1, #4
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f002 fbc9 	bl	8006564 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003dd2:	4b13      	ldr	r3, [pc, #76]	@ (8003e20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4619      	mov	r1, r3
 8003dda:	6978      	ldr	r0, [r7, #20]
 8003ddc:	f7fe f9bf 	bl	800215e <vListInsert>
}
 8003de0:	e014      	b.n	8003e0c <prvAddCurrentTaskToDelayedList+0xd8>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003de2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2104      	movs	r1, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f002 fbbb 	bl	8006564 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003dee:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <prvAddCurrentTaskToDelayedList+0xec>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	69b8      	ldr	r0, [r7, #24]
 8003df8:	f7fe f9b1 	bl	800215e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8003e28 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d202      	bcs.n	8003e0c <prvAddCurrentTaskToDelayedList+0xd8>
                    xNextTaskUnblockTime = xTimeToWake;
 8003e06:	4a08      	ldr	r2, [pc, #32]	@ (8003e28 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6013      	str	r3, [r2, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	3720      	adds	r7, #32
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	200012e0 	.word	0x200012e0
 8003e18:	20001294 	.word	0x20001294
 8003e1c:	20001298 	.word	0x20001298
 8003e20:	20000e08 	.word	0x20000e08
 8003e24:	200012c8 	.word	0x200012c8
 8003e28:	200012fc 	.word	0x200012fc

08003e2c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	@ 0x28
 8003e30:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e36:	f000 fa8b 	bl	8004350 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e3a:	4b20      	ldr	r3, [pc, #128]	@ (8003ebc <xTimerCreateTimerTask+0x90>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d021      	beq.n	8003e86 <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 8003e4a:	1d3a      	adds	r2, r7, #4
 8003e4c:	f107 0108 	add.w	r1, r7, #8
 8003e50:	f107 030c 	add.w	r3, r7, #12
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe f911 	bl	800207c <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	9202      	str	r2, [sp, #8]
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	2302      	movs	r3, #2
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	460a      	mov	r2, r1
 8003e6c:	4914      	ldr	r1, [pc, #80]	@ (8003ec0 <xTimerCreateTimerTask+0x94>)
 8003e6e:	4815      	ldr	r0, [pc, #84]	@ (8003ec4 <xTimerCreateTimerTask+0x98>)
 8003e70:	f7fe fd68 	bl	8002944 <xTaskCreateStatic>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4a14      	ldr	r2, [pc, #80]	@ (8003ec8 <xTimerCreateTimerTask+0x9c>)
 8003e78:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8003e7a:	4b13      	ldr	r3, [pc, #76]	@ (8003ec8 <xTimerCreateTimerTask+0x9c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 8003e82:	2301      	movs	r3, #1
 8003e84:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10b      	bne.n	8003ea4 <xTimerCreateTimerTask+0x78>
    __asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	613b      	str	r3, [r7, #16]
}
 8003e9e:	bf00      	nop
 8003ea0:	bf00      	nop
 8003ea2:	e7fd      	b.n	8003ea0 <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003eac:	f002 fa20 	bl	80062f0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003eb0:	697b      	ldr	r3, [r7, #20]
    }
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20001338 	.word	0x20001338
 8003ec0:	08007314 	.word	0x08007314
 8003ec4:	08003f71 	.word	0x08003f71
 8003ec8:	2000133c 	.word	0x2000133c

08003ecc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ed8:	e008      	b.n	8003eec <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	18d1      	adds	r1, r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f8dd 	bl	80040b8 <prvInsertTimerInActiveList>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1ea      	bne.n	8003eda <prvReloadTimer+0xe>
        }
    }
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f1a:	4b14      	ldr	r3, [pc, #80]	@ (8003f6c <prvProcessExpiredTimer+0x5c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe f953 	bl	80021d4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff ffc3 	bl	8003ecc <prvReloadTimer>
 8003f46:	e008      	b.n	8003f5a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	4798      	blx	r3
    }
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20001330 	.word	0x20001330

08003f70 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f78:	f107 0308 	add.w	r3, r7, #8
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f859 	bl	8004034 <prvGetNextExpireTime>
 8003f82:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4619      	mov	r1, r3
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f805 	bl	8003f98 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003f8e:	f000 f8d5 	bl	800413c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f92:	bf00      	nop
 8003f94:	e7f0      	b.n	8003f78 <prvTimerTask+0x8>
	...

08003f98 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003fa2:	f7ff f8db 	bl	800315c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fa6:	f107 0308 	add.w	r3, r7, #8
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f864 	bl	8004078 <prvSampleTimeNow>
 8003fb0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d130      	bne.n	800401a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <prvProcessTimerOrBlockTask+0x3c>
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d806      	bhi.n	8003fd4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003fc6:	f7ff f8d7 	bl	8003178 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003fca:	68f9      	ldr	r1, [r7, #12]
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff ff9f 	bl	8003f10 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003fd2:	e024      	b.n	800401e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fda:	4b13      	ldr	r3, [pc, #76]	@ (8004028 <prvProcessTimerOrBlockTask+0x90>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <prvProcessTimerOrBlockTask+0x50>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <prvProcessTimerOrBlockTask+0x52>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003fec:	4b0f      	ldr	r3, [pc, #60]	@ (800402c <prvProcessTimerOrBlockTask+0x94>)
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f7fe fc0b 	bl	8002814 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003ffe:	f7ff f8bb 	bl	8003178 <xTaskResumeAll>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004008:	4b09      	ldr	r3, [pc, #36]	@ (8004030 <prvProcessTimerOrBlockTask+0x98>)
 800400a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	f3bf 8f6f 	isb	sy
    }
 8004018:	e001      	b.n	800401e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800401a:	f7ff f8ad 	bl	8003178 <xTaskResumeAll>
    }
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20001334 	.word	0x20001334
 800402c:	20001338 	.word	0x20001338
 8004030:	e000ed04 	.word	0xe000ed04

08004034 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800403c:	4b0d      	ldr	r3, [pc, #52]	@ (8004074 <prvGetNextExpireTime+0x40>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <prvGetNextExpireTime+0x16>
 8004046:	2201      	movs	r2, #1
 8004048:	e000      	b.n	800404c <prvGetNextExpireTime+0x18>
 800404a:	2200      	movs	r2, #0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d105      	bne.n	8004064 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004058:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <prvGetNextExpireTime+0x40>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	e001      	b.n	8004068 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004068:	68fb      	ldr	r3, [r7, #12]
    }
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	20001330 	.word	0x20001330

08004078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004080:	f7ff f98c 	bl	800339c <xTaskGetTickCount>
 8004084:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004086:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <prvSampleTimeNow+0x3c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	429a      	cmp	r2, r3
 800408e:	d205      	bcs.n	800409c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004090:	f000 f938 	bl	8004304 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e002      	b.n	80040a2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80040a2:	4a04      	ldr	r2, [pc, #16]	@ (80040b4 <prvSampleTimeNow+0x3c>)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80040a8:	68fb      	ldr	r3, [r7, #12]
    }
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20001340 	.word	0x20001340

080040b8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d812      	bhi.n	8004104 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	1ad2      	subs	r2, r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d302      	bcc.n	80040f2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	e01b      	b.n	800412a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80040f2:	4b10      	ldr	r3, [pc, #64]	@ (8004134 <prvInsertTimerInActiveList+0x7c>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3304      	adds	r3, #4
 80040fa:	4619      	mov	r1, r3
 80040fc:	4610      	mov	r0, r2
 80040fe:	f7fe f82e 	bl	800215e <vListInsert>
 8004102:	e012      	b.n	800412a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d206      	bcs.n	800411a <prvInsertTimerInActiveList+0x62>
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d302      	bcc.n	800411a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004114:	2301      	movs	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e007      	b.n	800412a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800411a:	4b07      	ldr	r3, [pc, #28]	@ (8004138 <prvInsertTimerInActiveList+0x80>)
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3304      	adds	r3, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f7fe f81a 	bl	800215e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800412a:	697b      	ldr	r3, [r7, #20]
    }
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20001334 	.word	0x20001334
 8004138:	20001330 	.word	0x20001330

0800413c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	@ 0x28
 8004140:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8004142:	1d3b      	adds	r3, r7, #4
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800414e:	e0c7      	b.n	80042e0 <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	da19      	bge.n	800418a <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	3304      	adds	r3, #4
 800415a:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10b      	bne.n	800417a <prvProcessReceivedCommands+0x3e>
    __asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	61bb      	str	r3, [r7, #24]
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	e7fd      	b.n	8004176 <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004180:	6850      	ldr	r0, [r2, #4]
 8004182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004184:	6892      	ldr	r2, [r2, #8]
 8004186:	4611      	mov	r1, r2
 8004188:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f2c0 80a7 	blt.w	80042e0 <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe f816 	bl	80021d4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041a8:	463b      	mov	r3, r7
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff ff64 	bl	8004078 <prvSampleTimeNow>
 80041b0:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	f200 808f 	bhi.w	80042da <prvProcessReceivedCommands+0x19e>
 80041bc:	a201      	add	r2, pc, #4	@ (adr r2, 80041c4 <prvProcessReceivedCommands+0x88>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	080041e9 	.word	0x080041e9
 80041cc:	08004251 	.word	0x08004251
 80041d0:	08004265 	.word	0x08004265
 80041d4:	080042b1 	.word	0x080042b1
 80041d8:	080041e9 	.word	0x080041e9
 80041dc:	080041e9 	.word	0x080041e9
 80041e0:	08004251 	.word	0x08004251
 80041e4:	08004265 	.word	0x08004265
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	18d1      	adds	r1, r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	6a38      	ldr	r0, [r7, #32]
 8004208:	f7ff ff56 	bl	80040b8 <prvInsertTimerInActiveList>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d065      	beq.n	80042de <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d009      	beq.n	8004234 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	4413      	add	r3, r2
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	4619      	mov	r1, r3
 800422c:	6a38      	ldr	r0, [r7, #32]
 800422e:	f7ff fe4d 	bl	8003ecc <prvReloadTimer>
 8004232:	e008      	b.n	8004246 <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	b2da      	uxtb	r2, r3
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	6a38      	ldr	r0, [r7, #32]
 800424c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800424e:	e046      	b.n	80042de <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	b2da      	uxtb	r2, r3
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004262:	e03d      	b.n	80042e0 <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	b2da      	uxtb	r2, r3
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <prvProcessReceivedCommands+0x160>
    __asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	617b      	str	r3, [r7, #20]
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	e7fd      	b.n	8004298 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	699a      	ldr	r2, [r3, #24]
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	18d1      	adds	r1, r2, r3
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	6a38      	ldr	r0, [r7, #32]
 80042aa:	f7ff ff05 	bl	80040b8 <prvInsertTimerInActiveList>
                        break;
 80042ae:	e017      	b.n	80042e0 <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d103      	bne.n	80042c6 <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 80042be:	6a38      	ldr	r0, [r7, #32]
 80042c0:	f000 fc00 	bl	8004ac4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80042c4:	e00c      	b.n	80042e0 <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80042d8:	e002      	b.n	80042e0 <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 80042da:	bf00      	nop
 80042dc:	e000      	b.n	80042e0 <prvProcessReceivedCommands+0x1a4>
                        break;
 80042de:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80042e0:	4b07      	ldr	r3, [pc, #28]	@ (8004300 <prvProcessReceivedCommands+0x1c4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	1d39      	adds	r1, r7, #4
 80042e6:	2200      	movs	r2, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fe f8c7 	bl	800247c <xQueueReceive>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f47f af2d 	bne.w	8004150 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	3728      	adds	r7, #40	@ 0x28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20001338 	.word	0x20001338

08004304 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800430a:	e009      	b.n	8004320 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800430c:	4b0e      	ldr	r3, [pc, #56]	@ (8004348 <prvSwitchTimerLists+0x44>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004316:	f04f 31ff 	mov.w	r1, #4294967295
 800431a:	6838      	ldr	r0, [r7, #0]
 800431c:	f7ff fdf8 	bl	8003f10 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004320:	4b09      	ldr	r3, [pc, #36]	@ (8004348 <prvSwitchTimerLists+0x44>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800432a:	4b07      	ldr	r3, [pc, #28]	@ (8004348 <prvSwitchTimerLists+0x44>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004330:	4b06      	ldr	r3, [pc, #24]	@ (800434c <prvSwitchTimerLists+0x48>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a04      	ldr	r2, [pc, #16]	@ (8004348 <prvSwitchTimerLists+0x44>)
 8004336:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004338:	4a04      	ldr	r2, [pc, #16]	@ (800434c <prvSwitchTimerLists+0x48>)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6013      	str	r3, [r2, #0]
    }
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20001330 	.word	0x20001330
 800434c:	20001334 	.word	0x20001334

08004350 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004356:	f000 f977 	bl	8004648 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800435a:	4b15      	ldr	r3, [pc, #84]	@ (80043b0 <prvCheckForValidListAndQueue+0x60>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d120      	bne.n	80043a4 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8004362:	4814      	ldr	r0, [pc, #80]	@ (80043b4 <prvCheckForValidListAndQueue+0x64>)
 8004364:	f7fd fea4 	bl	80020b0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004368:	4813      	ldr	r0, [pc, #76]	@ (80043b8 <prvCheckForValidListAndQueue+0x68>)
 800436a:	f7fd fea1 	bl	80020b0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800436e:	4b13      	ldr	r3, [pc, #76]	@ (80043bc <prvCheckForValidListAndQueue+0x6c>)
 8004370:	4a10      	ldr	r2, [pc, #64]	@ (80043b4 <prvCheckForValidListAndQueue+0x64>)
 8004372:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004374:	4b12      	ldr	r3, [pc, #72]	@ (80043c0 <prvCheckForValidListAndQueue+0x70>)
 8004376:	4a10      	ldr	r2, [pc, #64]	@ (80043b8 <prvCheckForValidListAndQueue+0x68>)
 8004378:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800437a:	2300      	movs	r3, #0
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	4b11      	ldr	r3, [pc, #68]	@ (80043c4 <prvCheckForValidListAndQueue+0x74>)
 8004380:	4a11      	ldr	r2, [pc, #68]	@ (80043c8 <prvCheckForValidListAndQueue+0x78>)
 8004382:	2110      	movs	r1, #16
 8004384:	200a      	movs	r0, #10
 8004386:	f7fd ffeb 	bl	8002360 <xQueueGenericCreateStatic>
 800438a:	4603      	mov	r3, r0
 800438c:	4a08      	ldr	r2, [pc, #32]	@ (80043b0 <prvCheckForValidListAndQueue+0x60>)
 800438e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004390:	4b07      	ldr	r3, [pc, #28]	@ (80043b0 <prvCheckForValidListAndQueue+0x60>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004398:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <prvCheckForValidListAndQueue+0x60>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	490b      	ldr	r1, [pc, #44]	@ (80043cc <prvCheckForValidListAndQueue+0x7c>)
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe f9e8 	bl	8002774 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80043a4:	f000 f980 	bl	80046a8 <vPortExitCritical>
    }
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20001338 	.word	0x20001338
 80043b4:	20001308 	.word	0x20001308
 80043b8:	2000131c 	.word	0x2000131c
 80043bc:	20001330 	.word	0x20001330
 80043c0:	20001334 	.word	0x20001334
 80043c4:	200013e4 	.word	0x200013e4
 80043c8:	20001344 	.word	0x20001344
 80043cc:	0800731c 	.word	0x0800731c

080043d0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3b04      	subs	r3, #4
 80043e0:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3b04      	subs	r3, #4
 80043ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f023 0201 	bic.w	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3b04      	subs	r3, #4
 80043fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004400:	4a08      	ldr	r2, [pc, #32]	@ (8004424 <pxPortInitialiseStack+0x54>)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3b14      	subs	r3, #20
 800440a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3b20      	subs	r3, #32
 8004416:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004418:	68fb      	ldr	r3, [r7, #12]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	08004429 	.word	0x08004429

08004428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800442e:	2300      	movs	r3, #0
 8004430:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004432:	4b12      	ldr	r3, [pc, #72]	@ (800447c <prvTaskExitError+0x54>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d00b      	beq.n	8004454 <prvTaskExitError+0x2c>
    __asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	60fb      	str	r3, [r7, #12]
}
 800444e:	bf00      	nop
 8004450:	bf00      	nop
 8004452:	e7fd      	b.n	8004450 <prvTaskExitError+0x28>
    __asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	60bb      	str	r3, [r7, #8]
}
 8004466:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004468:	bf00      	nop
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0fc      	beq.n	800446a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr
 800447c:	20000010 	.word	0x20000010

08004480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004480:	4b07      	ldr	r3, [pc, #28]	@ (80044a0 <pxCurrentTCBConst2>)
 8004482:	6819      	ldr	r1, [r3, #0]
 8004484:	6808      	ldr	r0, [r1, #0]
 8004486:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800448a:	f380 8809 	msr	PSP, r0
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f380 8811 	msr	BASEPRI, r0
 800449a:	f04e 0e0d 	orr.w	lr, lr, #13
 800449e:	4770      	bx	lr

080044a0 <pxCurrentTCBConst2>:
 80044a0:	20000e08 	.word	0x20000e08
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80044a8:	4806      	ldr	r0, [pc, #24]	@ (80044c4 <prvPortStartFirstTask+0x1c>)
 80044aa:	6800      	ldr	r0, [r0, #0]
 80044ac:	6800      	ldr	r0, [r0, #0]
 80044ae:	f380 8808 	msr	MSP, r0
 80044b2:	b662      	cpsie	i
 80044b4:	b661      	cpsie	f
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	df00      	svc	0
 80044c0:	bf00      	nop
 80044c2:	0000      	.short	0x0000
 80044c4:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop

080044cc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	@ 0x28
 80044d0:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80044d2:	4b54      	ldr	r3, [pc, #336]	@ (8004624 <xPortStartScheduler+0x158>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	332c      	adds	r3, #44	@ 0x2c
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a52      	ldr	r2, [pc, #328]	@ (8004628 <xPortStartScheduler+0x15c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00b      	beq.n	80044fc <xPortStartScheduler+0x30>
    __asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	61bb      	str	r3, [r7, #24]
}
 80044f6:	bf00      	nop
 80044f8:	bf00      	nop
 80044fa:	e7fd      	b.n	80044f8 <xPortStartScheduler+0x2c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	3338      	adds	r3, #56	@ 0x38
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a4a      	ldr	r2, [pc, #296]	@ (800462c <xPortStartScheduler+0x160>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00b      	beq.n	8004520 <xPortStartScheduler+0x54>
    __asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	61fb      	str	r3, [r7, #28]
}
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	e7fd      	b.n	800451c <xPortStartScheduler+0x50>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004524:	4b42      	ldr	r3, [pc, #264]	@ (8004630 <xPortStartScheduler+0x164>)
 8004526:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	22ff      	movs	r2, #255	@ 0xff
 8004534:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004546:	b2da      	uxtb	r2, r3
 8004548:	4b3a      	ldr	r3, [pc, #232]	@ (8004634 <xPortStartScheduler+0x168>)
 800454a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800454c:	4b39      	ldr	r3, [pc, #228]	@ (8004634 <xPortStartScheduler+0x168>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10b      	bne.n	800456c <xPortStartScheduler+0xa0>
    __asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	617b      	str	r3, [r7, #20]
}
 8004566:	bf00      	nop
 8004568:	bf00      	nop
 800456a:	e7fd      	b.n	8004568 <xPortStartScheduler+0x9c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004576:	2b00      	cmp	r3, #0
 8004578:	d013      	beq.n	80045a2 <xPortStartScheduler+0xd6>
    __asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	613b      	str	r3, [r7, #16]
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	e7fd      	b.n	800458e <xPortStartScheduler+0xc2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	3301      	adds	r3, #1
 8004596:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045aa:	2b80      	cmp	r3, #128	@ 0x80
 80045ac:	d0f1      	beq.n	8004592 <xPortStartScheduler+0xc6>
        }

        if( ulImplementedPrioBits == 8 )
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d103      	bne.n	80045bc <xPortStartScheduler+0xf0>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80045b4:	4b20      	ldr	r3, [pc, #128]	@ (8004638 <xPortStartScheduler+0x16c>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	e004      	b.n	80045c6 <xPortStartScheduler+0xfa>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f1c3 0307 	rsb	r3, r3, #7
 80045c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004638 <xPortStartScheduler+0x16c>)
 80045c4:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004638 <xPortStartScheduler+0x16c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004638 <xPortStartScheduler+0x16c>)
 80045ce:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045d0:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <xPortStartScheduler+0x16c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045d8:	4a17      	ldr	r2, [pc, #92]	@ (8004638 <xPortStartScheduler+0x16c>)
 80045da:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80045e4:	4b15      	ldr	r3, [pc, #84]	@ (800463c <xPortStartScheduler+0x170>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a14      	ldr	r2, [pc, #80]	@ (800463c <xPortStartScheduler+0x170>)
 80045ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ee:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80045f0:	4b12      	ldr	r3, [pc, #72]	@ (800463c <xPortStartScheduler+0x170>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a11      	ldr	r2, [pc, #68]	@ (800463c <xPortStartScheduler+0x170>)
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80045fc:	4b10      	ldr	r3, [pc, #64]	@ (8004640 <xPortStartScheduler+0x174>)
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004602:	f000 f8cb 	bl	800479c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004606:	4b0f      	ldr	r3, [pc, #60]	@ (8004644 <xPortStartScheduler+0x178>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800460c:	f7ff ff4c 	bl	80044a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004610:	f7ff f810 	bl	8003634 <vTaskSwitchContext>
    prvTaskExitError();
 8004614:	f7ff ff08 	bl	8004428 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3728      	adds	r7, #40	@ 0x28
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	e000ed08 	.word	0xe000ed08
 8004628:	08004481 	.word	0x08004481
 800462c:	08004701 	.word	0x08004701
 8004630:	e000e400 	.word	0xe000e400
 8004634:	20001434 	.word	0x20001434
 8004638:	20001438 	.word	0x20001438
 800463c:	e000ed20 	.word	0xe000ed20
 8004640:	e000ed1c 	.word	0xe000ed1c
 8004644:	20000010 	.word	0x20000010

08004648 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
    __asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	607b      	str	r3, [r7, #4]
}
 8004660:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004662:	4b0f      	ldr	r3, [pc, #60]	@ (80046a0 <vPortEnterCritical+0x58>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3301      	adds	r3, #1
 8004668:	4a0d      	ldr	r2, [pc, #52]	@ (80046a0 <vPortEnterCritical+0x58>)
 800466a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800466c:	4b0c      	ldr	r3, [pc, #48]	@ (80046a0 <vPortEnterCritical+0x58>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d110      	bne.n	8004696 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004674:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <vPortEnterCritical+0x5c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <vPortEnterCritical+0x4e>
    __asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	603b      	str	r3, [r7, #0]
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	e7fd      	b.n	8004692 <vPortEnterCritical+0x4a>
    }
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	20000010 	.word	0x20000010
 80046a4:	e000ed04 	.word	0xe000ed04

080046a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80046ae:	4b12      	ldr	r3, [pc, #72]	@ (80046f8 <vPortExitCritical+0x50>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10b      	bne.n	80046ce <vPortExitCritical+0x26>
    __asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	607b      	str	r3, [r7, #4]
}
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop
 80046cc:	e7fd      	b.n	80046ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80046ce:	4b0a      	ldr	r3, [pc, #40]	@ (80046f8 <vPortExitCritical+0x50>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	4a08      	ldr	r2, [pc, #32]	@ (80046f8 <vPortExitCritical+0x50>)
 80046d6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80046d8:	4b07      	ldr	r3, [pc, #28]	@ (80046f8 <vPortExitCritical+0x50>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <vPortExitCritical+0x44>
 80046e0:	2300      	movs	r3, #0
 80046e2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80046ea:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000010 	.word	0x20000010
 80046fc:	00000000 	.word	0x00000000

08004700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004700:	f3ef 8009 	mrs	r0, PSP
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	4b0d      	ldr	r3, [pc, #52]	@ (8004740 <pxCurrentTCBConst>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004710:	6010      	str	r0, [r2, #0]
 8004712:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004716:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800471a:	f380 8811 	msr	BASEPRI, r0
 800471e:	f7fe ff89 	bl	8003634 <vTaskSwitchContext>
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f380 8811 	msr	BASEPRI, r0
 800472a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800472e:	6819      	ldr	r1, [r3, #0]
 8004730:	6808      	ldr	r0, [r1, #0]
 8004732:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004736:	f380 8809 	msr	PSP, r0
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	4770      	bx	lr

08004740 <pxCurrentTCBConst>:
 8004740:	20000e08 	.word	0x20000e08
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop

08004748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
    __asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	607b      	str	r3, [r7, #4]
}
 8004760:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004762:	f001 fd0f 	bl	8006184 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004766:	f7fe fe41 	bl	80033ec <xTaskIncrementTick>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d006      	beq.n	800477e <xPortSysTickHandler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004770:	f001 fd66 	bl	8006240 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004774:	4b08      	ldr	r3, [pc, #32]	@ (8004798 <xPortSysTickHandler+0x50>)
 8004776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e001      	b.n	8004782 <xPortSysTickHandler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800477e:	f001 fd43 	bl	8006208 <SEGGER_SYSVIEW_RecordExitISR>
 8004782:	2300      	movs	r3, #0
 8004784:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	f383 8811 	msr	BASEPRI, r3
}
 800478c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	e000ed04 	.word	0xe000ed04

0800479c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047a0:	4b0a      	ldr	r3, [pc, #40]	@ (80047cc <vPortSetupTimerInterrupt+0x30>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047a6:	4b0a      	ldr	r3, [pc, #40]	@ (80047d0 <vPortSetupTimerInterrupt+0x34>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047ac:	4b09      	ldr	r3, [pc, #36]	@ (80047d4 <vPortSetupTimerInterrupt+0x38>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a09      	ldr	r2, [pc, #36]	@ (80047d8 <vPortSetupTimerInterrupt+0x3c>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	099b      	lsrs	r3, r3, #6
 80047b8:	4a08      	ldr	r2, [pc, #32]	@ (80047dc <vPortSetupTimerInterrupt+0x40>)
 80047ba:	3b01      	subs	r3, #1
 80047bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047be:	4b03      	ldr	r3, [pc, #12]	@ (80047cc <vPortSetupTimerInterrupt+0x30>)
 80047c0:	2207      	movs	r2, #7
 80047c2:	601a      	str	r2, [r3, #0]
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr
 80047cc:	e000e010 	.word	0xe000e010
 80047d0:	e000e018 	.word	0xe000e018
 80047d4:	20000004 	.word	0x20000004
 80047d8:	10624dd3 	.word	0x10624dd3
 80047dc:	e000e014 	.word	0xe000e014

080047e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80047e6:	f3ef 8305 	mrs	r3, IPSR
 80047ea:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b0f      	cmp	r3, #15
 80047f0:	d915      	bls.n	800481e <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047f2:	4a17      	ldr	r2, [pc, #92]	@ (8004850 <vPortValidateInterruptPriority+0x70>)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047fc:	4b15      	ldr	r3, [pc, #84]	@ (8004854 <vPortValidateInterruptPriority+0x74>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	7afa      	ldrb	r2, [r7, #11]
 8004802:	429a      	cmp	r2, r3
 8004804:	d20b      	bcs.n	800481e <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	607b      	str	r3, [r7, #4]
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	e7fd      	b.n	800481a <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800481e:	4b0e      	ldr	r3, [pc, #56]	@ (8004858 <vPortValidateInterruptPriority+0x78>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004826:	4b0d      	ldr	r3, [pc, #52]	@ (800485c <vPortValidateInterruptPriority+0x7c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d90b      	bls.n	8004846 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	603b      	str	r3, [r7, #0]
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <vPortValidateInterruptPriority+0x62>
    }
 8004846:	bf00      	nop
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr
 8004850:	e000e3f0 	.word	0xe000e3f0
 8004854:	20001434 	.word	0x20001434
 8004858:	e000ed0c 	.word	0xe000ed0c
 800485c:	20001438 	.word	0x20001438

08004860 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08e      	sub	sp, #56	@ 0x38
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004868:	2300      	movs	r3, #0
 800486a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d022      	beq.n	80048b8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004872:	2308      	movs	r3, #8
 8004874:	43db      	mvns	r3, r3
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	429a      	cmp	r2, r3
 800487a:	d81b      	bhi.n	80048b4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800487c:	2208      	movs	r2, #8
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4413      	add	r3, r2
 8004882:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	2b00      	cmp	r3, #0
 800488c:	d014      	beq.n	80048b8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	f1c3 0308 	rsb	r3, r3, #8
 8004898:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800489a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489c:	43db      	mvns	r3, r3
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d804      	bhi.n	80048ae <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	4413      	add	r3, r2
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	e004      	b.n	80048b8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	e001      	b.n	80048b8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80048b8:	f7fe fc50 	bl	800315c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80048bc:	4b7a      	ldr	r3, [pc, #488]	@ (8004aa8 <pvPortMalloc+0x248>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80048c4:	f000 f974 	bl	8004bb0 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f2c0 80d3 	blt.w	8004a76 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80cf 	beq.w	8004a76 <pvPortMalloc+0x216>
 80048d8:	4b74      	ldr	r3, [pc, #464]	@ (8004aac <pvPortMalloc+0x24c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	429a      	cmp	r2, r3
 80048e0:	f200 80c9 	bhi.w	8004a76 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80048e4:	4b72      	ldr	r3, [pc, #456]	@ (8004ab0 <pvPortMalloc+0x250>)
 80048e6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80048e8:	4b71      	ldr	r3, [pc, #452]	@ (8004ab0 <pvPortMalloc+0x250>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80048ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f0:	4a70      	ldr	r2, [pc, #448]	@ (8004ab4 <pvPortMalloc+0x254>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d305      	bcc.n	8004902 <pvPortMalloc+0xa2>
 80048f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f8:	4a6f      	ldr	r2, [pc, #444]	@ (8004ab8 <pvPortMalloc+0x258>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d801      	bhi.n	8004902 <pvPortMalloc+0xa2>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <pvPortMalloc+0xa4>
 8004902:	2300      	movs	r3, #0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d129      	bne.n	800495c <pvPortMalloc+0xfc>
    __asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	623b      	str	r3, [r7, #32]
}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004922:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800492a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492c:	4a61      	ldr	r2, [pc, #388]	@ (8004ab4 <pvPortMalloc+0x254>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d305      	bcc.n	800493e <pvPortMalloc+0xde>
 8004932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004934:	4a60      	ldr	r2, [pc, #384]	@ (8004ab8 <pvPortMalloc+0x258>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d801      	bhi.n	800493e <pvPortMalloc+0xde>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <pvPortMalloc+0xe0>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <pvPortMalloc+0xfc>
    __asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	61fb      	str	r3, [r7, #28]
}
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	e7fd      	b.n	8004958 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800495c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	429a      	cmp	r2, r3
 8004964:	d903      	bls.n	800496e <pvPortMalloc+0x10e>
 8004966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1d8      	bne.n	8004920 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800496e:	4b4e      	ldr	r3, [pc, #312]	@ (8004aa8 <pvPortMalloc+0x248>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004974:	429a      	cmp	r2, r3
 8004976:	d07e      	beq.n	8004a76 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2208      	movs	r2, #8
 800497e:	4413      	add	r3, r2
 8004980:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004984:	4a4b      	ldr	r2, [pc, #300]	@ (8004ab4 <pvPortMalloc+0x254>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d305      	bcc.n	8004996 <pvPortMalloc+0x136>
 800498a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498c:	4a4a      	ldr	r2, [pc, #296]	@ (8004ab8 <pvPortMalloc+0x258>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d801      	bhi.n	8004996 <pvPortMalloc+0x136>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <pvPortMalloc+0x138>
 8004996:	2300      	movs	r3, #0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10b      	bne.n	80049b4 <pvPortMalloc+0x154>
    __asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	61bb      	str	r3, [r7, #24]
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	e7fd      	b.n	80049b0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ba:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80049bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d90b      	bls.n	80049de <pvPortMalloc+0x17e>
    __asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	617b      	str	r3, [r7, #20]
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	e7fd      	b.n	80049da <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	1ad2      	subs	r2, r2, r3
 80049e6:	2308      	movs	r3, #8
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d924      	bls.n	8004a38 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00b      	beq.n	8004a18 <pvPortMalloc+0x1b8>
    __asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	613b      	str	r3, [r7, #16]
}
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	e7fd      	b.n	8004a14 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	1ad2      	subs	r2, r2, r3
 8004a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a22:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a36:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a38:	4b1c      	ldr	r3, [pc, #112]	@ (8004aac <pvPortMalloc+0x24c>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	4a1a      	ldr	r2, [pc, #104]	@ (8004aac <pvPortMalloc+0x24c>)
 8004a44:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a46:	4b19      	ldr	r3, [pc, #100]	@ (8004aac <pvPortMalloc+0x24c>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004abc <pvPortMalloc+0x25c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d203      	bcs.n	8004a5a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a52:	4b16      	ldr	r3, [pc, #88]	@ (8004aac <pvPortMalloc+0x24c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a19      	ldr	r2, [pc, #100]	@ (8004abc <pvPortMalloc+0x25c>)
 8004a58:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a64:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a6c:	4b14      	ldr	r3, [pc, #80]	@ (8004ac0 <pvPortMalloc+0x260>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3301      	adds	r3, #1
 8004a72:	4a13      	ldr	r2, [pc, #76]	@ (8004ac0 <pvPortMalloc+0x260>)
 8004a74:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a76:	f7fe fb7f 	bl	8003178 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <pvPortMalloc+0x23c>
    __asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	60fb      	str	r3, [r7, #12]
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	e7fd      	b.n	8004a98 <pvPortMalloc+0x238>
    return pvReturn;
 8004a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3738      	adds	r7, #56	@ 0x38
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20003b54 	.word	0x20003b54
 8004aac:	20003b58 	.word	0x20003b58
 8004ab0:	20003b4c 	.word	0x20003b4c
 8004ab4:	2000143c 	.word	0x2000143c
 8004ab8:	20003b4b 	.word	0x20003b4b
 8004abc:	20003b5c 	.word	0x20003b5c
 8004ac0:	20003b60 	.word	0x20003b60

08004ac4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d060      	beq.n	8004b98 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	425b      	negs	r3, r3
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	4a2e      	ldr	r2, [pc, #184]	@ (8004ba0 <vPortFree+0xdc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d305      	bcc.n	8004af8 <vPortFree+0x34>
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	4a2d      	ldr	r2, [pc, #180]	@ (8004ba4 <vPortFree+0xe0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d801      	bhi.n	8004af8 <vPortFree+0x34>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <vPortFree+0x36>
 8004af8:	2300      	movs	r3, #0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10b      	bne.n	8004b16 <vPortFree+0x52>
    __asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	617b      	str	r3, [r7, #20]
}
 8004b10:	bf00      	nop
 8004b12:	bf00      	nop
 8004b14:	e7fd      	b.n	8004b12 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	db0b      	blt.n	8004b36 <vPortFree+0x72>
    __asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	613b      	str	r3, [r7, #16]
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	e7fd      	b.n	8004b32 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <vPortFree+0x92>
    __asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	60fb      	str	r3, [r7, #12]
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	e7fd      	b.n	8004b52 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	da1c      	bge.n	8004b98 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d118      	bne.n	8004b98 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8004b72:	f7fe faf3 	bl	800315c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba8 <vPortFree+0xe4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4413      	add	r3, r2
 8004b80:	4a09      	ldr	r2, [pc, #36]	@ (8004ba8 <vPortFree+0xe4>)
 8004b82:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b84:	69b8      	ldr	r0, [r7, #24]
 8004b86:	f000 f86d 	bl	8004c64 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b8a:	4b08      	ldr	r3, [pc, #32]	@ (8004bac <vPortFree+0xe8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	4a06      	ldr	r2, [pc, #24]	@ (8004bac <vPortFree+0xe8>)
 8004b92:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b94:	f7fe faf0 	bl	8003178 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b98:	bf00      	nop
 8004b9a:	3720      	adds	r7, #32
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	2000143c 	.word	0x2000143c
 8004ba4:	20003b4b 	.word	0x20003b4b
 8004ba8:	20003b58 	.word	0x20003b58
 8004bac:	20003b64 	.word	0x20003b64

08004bb0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bb6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004bba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004bbc:	4b24      	ldr	r3, [pc, #144]	@ (8004c50 <prvHeapInit+0xa0>)
 8004bbe:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00c      	beq.n	8004be4 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3307      	adds	r3, #7
 8004bce:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0307 	bic.w	r3, r3, #7
 8004bd6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	4a1c      	ldr	r2, [pc, #112]	@ (8004c50 <prvHeapInit+0xa0>)
 8004be0:	4413      	add	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c54 <prvHeapInit+0xa4>)
 8004be8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bea:	4b1a      	ldr	r3, [pc, #104]	@ (8004c54 <prvHeapInit+0xa4>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f023 0307 	bic.w	r3, r3, #7
 8004c06:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a13      	ldr	r2, [pc, #76]	@ (8004c58 <prvHeapInit+0xa8>)
 8004c0c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c0e:	4b12      	ldr	r3, [pc, #72]	@ (8004c58 <prvHeapInit+0xa8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2200      	movs	r2, #0
 8004c14:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004c16:	4b10      	ldr	r3, [pc, #64]	@ (8004c58 <prvHeapInit+0xa8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	1ad2      	subs	r2, r2, r3
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <prvHeapInit+0xa8>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	4a08      	ldr	r2, [pc, #32]	@ (8004c5c <prvHeapInit+0xac>)
 8004c3a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4a07      	ldr	r2, [pc, #28]	@ (8004c60 <prvHeapInit+0xb0>)
 8004c42:	6013      	str	r3, [r2, #0]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	2000143c 	.word	0x2000143c
 8004c54:	20003b4c 	.word	0x20003b4c
 8004c58:	20003b54 	.word	0x20003b54
 8004c5c:	20003b5c 	.word	0x20003b5c
 8004c60:	20003b58 	.word	0x20003b58

08004c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004c6c:	4b36      	ldr	r3, [pc, #216]	@ (8004d48 <prvInsertBlockIntoFreeList+0xe4>)
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	e002      	b.n	8004c78 <prvInsertBlockIntoFreeList+0x14>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d8f7      	bhi.n	8004c72 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	4a30      	ldr	r2, [pc, #192]	@ (8004d48 <prvInsertBlockIntoFreeList+0xe4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d018      	beq.n	8004cbc <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	4a2f      	ldr	r2, [pc, #188]	@ (8004d4c <prvInsertBlockIntoFreeList+0xe8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d305      	bcc.n	8004c9e <prvInsertBlockIntoFreeList+0x3a>
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4a2e      	ldr	r2, [pc, #184]	@ (8004d50 <prvInsertBlockIntoFreeList+0xec>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d801      	bhi.n	8004c9e <prvInsertBlockIntoFreeList+0x3a>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <prvInsertBlockIntoFreeList+0x3c>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	60fb      	str	r3, [r7, #12]
}
 8004cb6:	bf00      	nop
 8004cb8:	bf00      	nop
 8004cba:	e7fd      	b.n	8004cb8 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d108      	bne.n	8004ce0 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	441a      	add	r2, r3
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	441a      	add	r2, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d118      	bne.n	8004d26 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4b16      	ldr	r3, [pc, #88]	@ (8004d54 <prvInsertBlockIntoFreeList+0xf0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d00d      	beq.n	8004d1c <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	441a      	add	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	e008      	b.n	8004d2e <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d54 <prvInsertBlockIntoFreeList+0xf0>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e003      	b.n	8004d2e <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d002      	beq.n	8004d3c <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20003b4c 	.word	0x20003b4c
 8004d4c:	2000143c 	.word	0x2000143c
 8004d50:	20003b4b 	.word	0x20003b4b
 8004d54:	20003b54 	.word	0x20003b54

08004d58 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d5c:	4803      	ldr	r0, [pc, #12]	@ (8004d6c <_cbSendSystemDesc+0x14>)
 8004d5e:	f001 f9bb 	bl	80060d8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d62:	4803      	ldr	r0, [pc, #12]	@ (8004d70 <_cbSendSystemDesc+0x18>)
 8004d64:	f001 f9b8 	bl	80060d8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d68:	bf00      	nop
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	08007324 	.word	0x08007324
 8004d70:	08007358 	.word	0x08007358

08004d74 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d78:	4b06      	ldr	r3, [pc, #24]	@ (8004d94 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	4b05      	ldr	r3, [pc, #20]	@ (8004d98 <SEGGER_SYSVIEW_Conf+0x24>)
 8004d82:	4a06      	ldr	r2, [pc, #24]	@ (8004d9c <SEGGER_SYSVIEW_Conf+0x28>)
 8004d84:	f000 fe30 	bl	80059e8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d88:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8004d8c:	f000 fe70 	bl	8005a70 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000004 	.word	0x20000004
 8004d98:	08004d59 	.word	0x08004d59
 8004d9c:	080074c0 	.word	0x080074c0

08004da0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004da6:	2300      	movs	r3, #0
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	e048      	b.n	8004e3e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8004dac:	4929      	ldr	r1, [pc, #164]	@ (8004e54 <_cbSendTaskList+0xb4>)
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fe ff2f 	bl	8003c20 <uxTaskGetStackHighWaterMark>
 8004dc2:	4601      	mov	r1, r0
 8004dc4:	4823      	ldr	r0, [pc, #140]	@ (8004e54 <_cbSendTaskList+0xb4>)
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4403      	add	r3, r0
 8004dd2:	3310      	adds	r3, #16
 8004dd4:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004dd6:	491f      	ldr	r1, [pc, #124]	@ (8004e54 <_cbSendTaskList+0xb4>)
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	491b      	ldr	r1, [pc, #108]	@ (8004e54 <_cbSendTaskList+0xb4>)
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	3304      	adds	r3, #4
 8004df6:	6819      	ldr	r1, [r3, #0]
 8004df8:	4c16      	ldr	r4, [pc, #88]	@ (8004e54 <_cbSendTaskList+0xb4>)
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4423      	add	r3, r4
 8004e06:	3308      	adds	r3, #8
 8004e08:	681c      	ldr	r4, [r3, #0]
 8004e0a:	4d12      	ldr	r5, [pc, #72]	@ (8004e54 <_cbSendTaskList+0xb4>)
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	442b      	add	r3, r5
 8004e18:	330c      	adds	r3, #12
 8004e1a:	681d      	ldr	r5, [r3, #0]
 8004e1c:	4e0d      	ldr	r6, [pc, #52]	@ (8004e54 <_cbSendTaskList+0xb4>)
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4433      	add	r3, r6
 8004e2a:	3310      	adds	r3, #16
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	462b      	mov	r3, r5
 8004e32:	4622      	mov	r2, r4
 8004e34:	f000 f97a 	bl	800512c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <_cbSendTaskList+0xb8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d3b1      	bcc.n	8004dac <_cbSendTaskList+0xc>
  }
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20003b68 	.word	0x20003b68
 8004e58:	20003c08 	.word	0x20003c08

08004e5c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e60:	b082      	sub	sp, #8
 8004e62:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004e64:	f7fe faac 	bl	80033c0 <xTaskGetTickCountFromISR>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	469a      	mov	sl, r3
 8004e6e:	4693      	mov	fp, r2
 8004e70:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004e74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	f04f 0a00 	mov.w	sl, #0
 8004e80:	f04f 0b00 	mov.w	fp, #0
 8004e84:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004e88:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004e8c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004e90:	4652      	mov	r2, sl
 8004e92:	465b      	mov	r3, fp
 8004e94:	1a14      	subs	r4, r2, r0
 8004e96:	eb63 0501 	sbc.w	r5, r3, r1
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	00ab      	lsls	r3, r5, #2
 8004ea4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ea8:	00a2      	lsls	r2, r4, #2
 8004eaa:	4614      	mov	r4, r2
 8004eac:	461d      	mov	r5, r3
 8004eae:	eb14 0800 	adds.w	r8, r4, r0
 8004eb2:	eb45 0901 	adc.w	r9, r5, r1
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eca:	4690      	mov	r8, r2
 8004ecc:	4699      	mov	r9, r3
 8004ece:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	4619      	mov	r1, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004ee4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ef2:	2205      	movs	r2, #5
 8004ef4:	492b      	ldr	r1, [pc, #172]	@ (8004fa4 <SYSVIEW_AddTask+0xc0>)
 8004ef6:	68b8      	ldr	r0, [r7, #8]
 8004ef8:	f001 fd08 	bl	800690c <memcmp>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d04b      	beq.n	8004f9a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f02:	4b29      	ldr	r3, [pc, #164]	@ (8004fa8 <SYSVIEW_AddTask+0xc4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b07      	cmp	r3, #7
 8004f08:	d903      	bls.n	8004f12 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f0a:	4828      	ldr	r0, [pc, #160]	@ (8004fac <SYSVIEW_AddTask+0xc8>)
 8004f0c:	f001 fc80 	bl	8006810 <SEGGER_SYSVIEW_Warn>
    return;
 8004f10:	e044      	b.n	8004f9c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f12:	4b25      	ldr	r3, [pc, #148]	@ (8004fa8 <SYSVIEW_AddTask+0xc4>)
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4926      	ldr	r1, [pc, #152]	@ (8004fb0 <SYSVIEW_AddTask+0xcc>)
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f26:	4b20      	ldr	r3, [pc, #128]	@ (8004fa8 <SYSVIEW_AddTask+0xc4>)
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4921      	ldr	r1, [pc, #132]	@ (8004fb0 <SYSVIEW_AddTask+0xcc>)
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	3304      	adds	r3, #4
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa8 <SYSVIEW_AddTask+0xc4>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	491b      	ldr	r1, [pc, #108]	@ (8004fb0 <SYSVIEW_AddTask+0xcc>)
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f52:	4b15      	ldr	r3, [pc, #84]	@ (8004fa8 <SYSVIEW_AddTask+0xc4>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4916      	ldr	r1, [pc, #88]	@ (8004fb0 <SYSVIEW_AddTask+0xcc>)
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	330c      	adds	r3, #12
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004f68:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa8 <SYSVIEW_AddTask+0xc4>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4910      	ldr	r1, [pc, #64]	@ (8004fb0 <SYSVIEW_AddTask+0xcc>)
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	3310      	adds	r3, #16
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa8 <SYSVIEW_AddTask+0xc4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3301      	adds	r3, #1
 8004f84:	4a08      	ldr	r2, [pc, #32]	@ (8004fa8 <SYSVIEW_AddTask+0xc4>)
 8004f86:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f8ca 	bl	800512c <SYSVIEW_SendTaskInfo>
 8004f98:	e000      	b.n	8004f9c <SYSVIEW_AddTask+0xb8>
    return;
 8004f9a:	bf00      	nop

}
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	08007368 	.word	0x08007368
 8004fa8:	20003c08 	.word	0x20003c08
 8004fac:	08007370 	.word	0x08007370
 8004fb0:	20003b68 	.word	0x20003b68

08004fb4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004fbc:	4b59      	ldr	r3, [pc, #356]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80ab 	beq.w	800511c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e00d      	b.n	8004fe8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004fcc:	4956      	ldr	r1, [pc, #344]	@ (8005128 <SYSVIEW_DeleteTask+0x174>)
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d008      	beq.n	8004ff4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	4b4e      	ldr	r3, [pc, #312]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d3ec      	bcc.n	8004fcc <SYSVIEW_DeleteTask+0x18>
 8004ff2:	e000      	b.n	8004ff6 <SYSVIEW_DeleteTask+0x42>
      break;
 8004ff4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d111      	bne.n	8005026 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4a46      	ldr	r2, [pc, #280]	@ (8005128 <SYSVIEW_DeleteTask+0x174>)
 800500e:	4413      	add	r3, r2
 8005010:	2214      	movs	r2, #20
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f001 fc89 	bl	800692c <memset>
    _NumTasks--;
 800501a:	4b42      	ldr	r3, [pc, #264]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3b01      	subs	r3, #1
 8005020:	4a40      	ldr	r2, [pc, #256]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	e07b      	b.n	800511e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005026:	4b3f      	ldr	r3, [pc, #252]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	429a      	cmp	r2, r3
 800502e:	d276      	bcs.n	800511e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005030:	4b3c      	ldr	r3, [pc, #240]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	1e5a      	subs	r2, r3, #1
 8005036:	493c      	ldr	r1, [pc, #240]	@ (8005128 <SYSVIEW_DeleteTask+0x174>)
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	6819      	ldr	r1, [r3, #0]
 8005044:	4838      	ldr	r0, [pc, #224]	@ (8005128 <SYSVIEW_DeleteTask+0x174>)
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4403      	add	r3, r0
 8005052:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005054:	4b33      	ldr	r3, [pc, #204]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	1e5a      	subs	r2, r3, #1
 800505a:	4933      	ldr	r1, [pc, #204]	@ (8005128 <SYSVIEW_DeleteTask+0x174>)
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	3304      	adds	r3, #4
 8005068:	6819      	ldr	r1, [r3, #0]
 800506a:	482f      	ldr	r0, [pc, #188]	@ (8005128 <SYSVIEW_DeleteTask+0x174>)
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4403      	add	r3, r0
 8005078:	3304      	adds	r3, #4
 800507a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800507c:	4b29      	ldr	r3, [pc, #164]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	1e5a      	subs	r2, r3, #1
 8005082:	4929      	ldr	r1, [pc, #164]	@ (8005128 <SYSVIEW_DeleteTask+0x174>)
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	3308      	adds	r3, #8
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	4825      	ldr	r0, [pc, #148]	@ (8005128 <SYSVIEW_DeleteTask+0x174>)
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4403      	add	r3, r0
 80050a0:	3308      	adds	r3, #8
 80050a2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80050a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	1e5a      	subs	r2, r3, #1
 80050aa:	491f      	ldr	r1, [pc, #124]	@ (8005128 <SYSVIEW_DeleteTask+0x174>)
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	330c      	adds	r3, #12
 80050b8:	6819      	ldr	r1, [r3, #0]
 80050ba:	481b      	ldr	r0, [pc, #108]	@ (8005128 <SYSVIEW_DeleteTask+0x174>)
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4403      	add	r3, r0
 80050c8:	330c      	adds	r3, #12
 80050ca:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80050cc:	4b15      	ldr	r3, [pc, #84]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	1e5a      	subs	r2, r3, #1
 80050d2:	4915      	ldr	r1, [pc, #84]	@ (8005128 <SYSVIEW_DeleteTask+0x174>)
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	3310      	adds	r3, #16
 80050e0:	6819      	ldr	r1, [r3, #0]
 80050e2:	4811      	ldr	r0, [pc, #68]	@ (8005128 <SYSVIEW_DeleteTask+0x174>)
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4403      	add	r3, r0
 80050f0:	3310      	adds	r3, #16
 80050f2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80050f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	1e5a      	subs	r2, r3, #1
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4a09      	ldr	r2, [pc, #36]	@ (8005128 <SYSVIEW_DeleteTask+0x174>)
 8005104:	4413      	add	r3, r2
 8005106:	2214      	movs	r2, #20
 8005108:	2100      	movs	r1, #0
 800510a:	4618      	mov	r0, r3
 800510c:	f001 fc0e 	bl	800692c <memset>
    _NumTasks--;
 8005110:	4b04      	ldr	r3, [pc, #16]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3b01      	subs	r3, #1
 8005116:	4a03      	ldr	r2, [pc, #12]	@ (8005124 <SYSVIEW_DeleteTask+0x170>)
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e000      	b.n	800511e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800511c:	bf00      	nop
  }
}
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20003c08 	.word	0x20003c08
 8005128:	20003b68 	.word	0x20003b68

0800512c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	@ 0x28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800513a:	f107 0310 	add.w	r3, r7, #16
 800513e:	2218      	movs	r2, #24
 8005140:	2100      	movs	r1, #0
 8005142:	4618      	mov	r0, r3
 8005144:	f001 fbf2 	bl	800692c <memset>
  TaskInfo.TaskID     = TaskID;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800515c:	f107 0310 	add.w	r3, r7, #16
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fec1 	bl	8005ee8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005166:	bf00      	nop
 8005168:	3728      	adds	r7, #40	@ 0x28
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005176:	4b25      	ldr	r3, [pc, #148]	@ (800520c <_DoInit+0x9c>)
 8005178:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800517a:	22a8      	movs	r2, #168	@ 0xa8
 800517c:	2100      	movs	r1, #0
 800517e:	6838      	ldr	r0, [r7, #0]
 8005180:	f001 fbd4 	bl	800692c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2203      	movs	r2, #3
 8005188:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2203      	movs	r2, #3
 800518e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	4a1f      	ldr	r2, [pc, #124]	@ (8005210 <_DoInit+0xa0>)
 8005194:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	4a1e      	ldr	r2, [pc, #120]	@ (8005214 <_DoInit+0xa4>)
 800519a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051a2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2200      	movs	r2, #0
 80051a8:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2200      	movs	r2, #0
 80051ae:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2200      	movs	r2, #0
 80051b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	4a15      	ldr	r2, [pc, #84]	@ (8005210 <_DoInit+0xa0>)
 80051ba:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	4a16      	ldr	r2, [pc, #88]	@ (8005218 <_DoInit+0xa8>)
 80051c0:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2210      	movs	r2, #16
 80051c6:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2200      	movs	r2, #0
 80051cc:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2200      	movs	r2, #0
 80051d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2200      	movs	r2, #0
 80051d8:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80051da:	2300      	movs	r3, #0
 80051dc:	607b      	str	r3, [r7, #4]
 80051de:	e00c      	b.n	80051fa <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f1c3 030f 	rsb	r3, r3, #15
 80051e6:	4a0d      	ldr	r2, [pc, #52]	@ (800521c <_DoInit+0xac>)
 80051e8:	5cd1      	ldrb	r1, [r2, r3]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4413      	add	r3, r2
 80051f0:	460a      	mov	r2, r1
 80051f2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3301      	adds	r3, #1
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b0f      	cmp	r3, #15
 80051fe:	d9ef      	bls.n	80051e0 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20003c0c 	.word	0x20003c0c
 8005210:	080073c0 	.word	0x080073c0
 8005214:	20003cb4 	.word	0x20003cb4
 8005218:	200040b4 	.word	0x200040b4
 800521c:	080074c8 	.word	0x080074c8

08005220 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b08c      	sub	sp, #48	@ 0x30
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800522c:	4b3e      	ldr	r3, [pc, #248]	@ (8005328 <SEGGER_RTT_ReadNoLock+0x108>)
 800522e:	623b      	str	r3, [r7, #32]
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b53      	cmp	r3, #83	@ 0x53
 8005238:	d001      	beq.n	800523e <SEGGER_RTT_ReadNoLock+0x1e>
 800523a:	f7ff ff99 	bl	8005170 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4613      	mov	r3, r2
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	4413      	add	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	3360      	adds	r3, #96	@ 0x60
 800524a:	4a37      	ldr	r2, [pc, #220]	@ (8005328 <SEGGER_RTT_ReadNoLock+0x108>)
 800524c:	4413      	add	r3, r2
 800524e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005260:	2300      	movs	r3, #0
 8005262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	429a      	cmp	r2, r3
 800526a:	d92b      	bls.n	80052c4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4293      	cmp	r3, r2
 800527c:	bf28      	it	cs
 800527e:	4613      	movcs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005288:	4413      	add	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	6939      	ldr	r1, [r7, #16]
 8005290:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005292:	f001 fb7f 	bl	8006994 <memcpy>
    NumBytesRead += NumBytesRem;
 8005296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4413      	add	r3, r2
 800529c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800529e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4413      	add	r3, r2
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	4413      	add	r3, r2
 80052b4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052bc:	429a      	cmp	r2, r3
 80052be:	d101      	bne.n	80052c4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80052c0:	2300      	movs	r3, #0
 80052c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4293      	cmp	r3, r2
 80052d2:	bf28      	it	cs
 80052d4:	4613      	movcs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d019      	beq.n	8005312 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e4:	4413      	add	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	6939      	ldr	r1, [r7, #16]
 80052ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052ee:	f001 fb51 	bl	8006994 <memcpy>
    NumBytesRead += NumBytesRem;
 80052f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	4413      	add	r3, r2
 80052f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80052fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	4413      	add	r3, r2
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800530a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	4413      	add	r3, r2
 8005310:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800531c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800531e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005320:	4618      	mov	r0, r3
 8005322:	3730      	adds	r7, #48	@ 0x30
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20003c0c 	.word	0x20003c0c

0800532c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800533a:	4b3c      	ldr	r3, [pc, #240]	@ (800542c <SEGGER_RTT_AllocUpBuffer+0x100>)
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b53      	cmp	r3, #83	@ 0x53
 8005346:	d001      	beq.n	800534c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005348:	f7ff ff12 	bl	8005170 <_DoInit>
  SEGGER_RTT_LOCK();
 800534c:	f3ef 8311 	mrs	r3, BASEPRI
 8005350:	f04f 0120 	mov.w	r1, #32
 8005354:	f381 8811 	msr	BASEPRI, r1
 8005358:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800535a:	4b34      	ldr	r3, [pc, #208]	@ (800542c <SEGGER_RTT_AllocUpBuffer+0x100>)
 800535c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005362:	6939      	ldr	r1, [r7, #16]
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	4613      	mov	r3, r2
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	4413      	add	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	440b      	add	r3, r1
 8005372:	3304      	adds	r3, #4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	3301      	adds	r3, #1
 800537e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	429a      	cmp	r2, r3
 8005388:	dbeb      	blt.n	8005362 <SEGGER_RTT_AllocUpBuffer+0x36>
 800538a:	e000      	b.n	800538e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800538c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	429a      	cmp	r2, r3
 8005396:	da3d      	bge.n	8005414 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005398:	6939      	ldr	r1, [r7, #16]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	440b      	add	r3, r1
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80053ac:	6939      	ldr	r1, [r7, #16]
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	4613      	mov	r3, r2
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	4413      	add	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	440b      	add	r3, r1
 80053bc:	3304      	adds	r3, #4
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80053c2:	6939      	ldr	r1, [r7, #16]
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	4613      	mov	r3, r2
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	4413      	add	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	440b      	add	r3, r1
 80053d0:	3320      	adds	r3, #32
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80053d6:	6939      	ldr	r1, [r7, #16]
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	4613      	mov	r3, r2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	4413      	add	r3, r2
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	440b      	add	r3, r1
 80053e4:	3328      	adds	r3, #40	@ 0x28
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80053ea:	6939      	ldr	r1, [r7, #16]
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	440b      	add	r3, r1
 80053f8:	3324      	adds	r3, #36	@ 0x24
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80053fe:	6939      	ldr	r1, [r7, #16]
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	4613      	mov	r3, r2
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	4413      	add	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	440b      	add	r3, r1
 800540c:	332c      	adds	r3, #44	@ 0x2c
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	e002      	b.n	800541a <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8005414:	f04f 33ff 	mov.w	r3, #4294967295
 8005418:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005420:	69fb      	ldr	r3, [r7, #28]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20003c0c 	.word	0x20003c0c

08005430 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	@ 0x28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800543e:	4b20      	ldr	r3, [pc, #128]	@ (80054c0 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8005440:	623b      	str	r3, [r7, #32]
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b53      	cmp	r3, #83	@ 0x53
 800544a:	d001      	beq.n	8005450 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800544c:	f7ff fe90 	bl	8005170 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005450:	4b1b      	ldr	r3, [pc, #108]	@ (80054c0 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8005452:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d82a      	bhi.n	80054b0 <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 800545a:	f3ef 8311 	mrs	r3, BASEPRI
 800545e:	f04f 0120 	mov.w	r1, #32
 8005462:	f381 8811 	msr	BASEPRI, r1
 8005466:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4613      	mov	r3, r2
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	4413      	add	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	3360      	adds	r3, #96	@ 0x60
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00e      	beq.n	800549e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2200      	movs	r2, #0
 8005496:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2200      	movs	r2, #0
 800549c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ae:	e002      	b.n	80054b6 <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 80054b0:	f04f 33ff 	mov.w	r3, #4294967295
 80054b4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3728      	adds	r7, #40	@ 0x28
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20003c0c 	.word	0x20003c0c

080054c4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d105      	bne.n	80054e2 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	60fa      	str	r2, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	e022      	b.n	8005528 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	60fa      	str	r2, [r7, #12]
 80054ec:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b80      	cmp	r3, #128	@ 0x80
 80054f2:	d90a      	bls.n	800550a <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80054f4:	2380      	movs	r3, #128	@ 0x80
 80054f6:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80054f8:	e007      	b.n	800550a <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	1c53      	adds	r3, r2, #1
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	1c59      	adds	r1, r3, #1
 8005504:	60f9      	str	r1, [r7, #12]
 8005506:	7812      	ldrb	r2, [r2, #0]
 8005508:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	1e5a      	subs	r2, r3, #1
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <_EncodeStr+0x58>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1ee      	bne.n	80054fa <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	b2da      	uxtb	r2, r3
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005528:	68fb      	ldr	r3, [r7, #12]
}
 800552a:	4618      	mov	r0, r3
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3307      	adds	r3, #7
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr
	...

0800554c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005552:	4b34      	ldr	r3, [pc, #208]	@ (8005624 <_HandleIncomingPacket+0xd8>)
 8005554:	7e1b      	ldrb	r3, [r3, #24]
 8005556:	4618      	mov	r0, r3
 8005558:	1cfb      	adds	r3, r7, #3
 800555a:	2201      	movs	r2, #1
 800555c:	4619      	mov	r1, r3
 800555e:	f7ff fe5f 	bl	8005220 <SEGGER_RTT_ReadNoLock>
 8005562:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d057      	beq.n	800561a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	2b80      	cmp	r3, #128	@ 0x80
 800556e:	d031      	beq.n	80055d4 <_HandleIncomingPacket+0x88>
 8005570:	2b80      	cmp	r3, #128	@ 0x80
 8005572:	dc40      	bgt.n	80055f6 <_HandleIncomingPacket+0xaa>
 8005574:	2b07      	cmp	r3, #7
 8005576:	dc15      	bgt.n	80055a4 <_HandleIncomingPacket+0x58>
 8005578:	2b00      	cmp	r3, #0
 800557a:	dd3c      	ble.n	80055f6 <_HandleIncomingPacket+0xaa>
 800557c:	3b01      	subs	r3, #1
 800557e:	2b06      	cmp	r3, #6
 8005580:	d839      	bhi.n	80055f6 <_HandleIncomingPacket+0xaa>
 8005582:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <_HandleIncomingPacket+0x3c>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055ab 	.word	0x080055ab
 800558c:	080055b1 	.word	0x080055b1
 8005590:	080055b7 	.word	0x080055b7
 8005594:	080055bd 	.word	0x080055bd
 8005598:	080055c3 	.word	0x080055c3
 800559c:	080055c9 	.word	0x080055c9
 80055a0:	080055cf 	.word	0x080055cf
 80055a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80055a6:	d033      	beq.n	8005610 <_HandleIncomingPacket+0xc4>
 80055a8:	e025      	b.n	80055f6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80055aa:	f000 fb23 	bl	8005bf4 <SEGGER_SYSVIEW_Start>
      break;
 80055ae:	e034      	b.n	800561a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80055b0:	f000 fbda 	bl	8005d68 <SEGGER_SYSVIEW_Stop>
      break;
 80055b4:	e031      	b.n	800561a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80055b6:	f000 fdb3 	bl	8006120 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80055ba:	e02e      	b.n	800561a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80055bc:	f000 fd78 	bl	80060b0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80055c0:	e02b      	b.n	800561a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80055c2:	f000 fbf7 	bl	8005db4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80055c6:	e028      	b.n	800561a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80055c8:	f001 f8e4 	bl	8006794 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80055cc:	e025      	b.n	800561a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80055ce:	f001 f8c3 	bl	8006758 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80055d2:	e022      	b.n	800561a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055d4:	4b13      	ldr	r3, [pc, #76]	@ (8005624 <_HandleIncomingPacket+0xd8>)
 80055d6:	7e1b      	ldrb	r3, [r3, #24]
 80055d8:	4618      	mov	r0, r3
 80055da:	1cfb      	adds	r3, r7, #3
 80055dc:	2201      	movs	r2, #1
 80055de:	4619      	mov	r1, r3
 80055e0:	f7ff fe1e 	bl	8005220 <SEGGER_RTT_ReadNoLock>
 80055e4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d013      	beq.n	8005614 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80055ec:	78fb      	ldrb	r3, [r7, #3]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f001 f828 	bl	8006644 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80055f4:	e00e      	b.n	8005614 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	b25b      	sxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	da0c      	bge.n	8005618 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055fe:	4b09      	ldr	r3, [pc, #36]	@ (8005624 <_HandleIncomingPacket+0xd8>)
 8005600:	7e1b      	ldrb	r3, [r3, #24]
 8005602:	4618      	mov	r0, r3
 8005604:	1cfb      	adds	r3, r7, #3
 8005606:	2201      	movs	r2, #1
 8005608:	4619      	mov	r1, r3
 800560a:	f7ff fe09 	bl	8005220 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800560e:	e003      	b.n	8005618 <_HandleIncomingPacket+0xcc>
      break;
 8005610:	bf00      	nop
 8005612:	e002      	b.n	800561a <_HandleIncomingPacket+0xce>
      break;
 8005614:	bf00      	nop
 8005616:	e000      	b.n	800561a <_HandleIncomingPacket+0xce>
      break;
 8005618:	bf00      	nop
    }
  }
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	200046a8 	.word	0x200046a8

08005628 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b08c      	sub	sp, #48	@ 0x30
 800562c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800562e:	2301      	movs	r3, #1
 8005630:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005632:	1d3b      	adds	r3, r7, #4
 8005634:	3301      	adds	r3, #1
 8005636:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800563c:	4b31      	ldr	r3, [pc, #196]	@ (8005704 <_TrySendOverflowPacket+0xdc>)
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005642:	e00b      	b.n	800565c <_TrySendOverflowPacket+0x34>
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	b2da      	uxtb	r2, r3
 8005648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564a:	1c59      	adds	r1, r3, #1
 800564c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800564e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	09db      	lsrs	r3, r3, #7
 800565a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800565c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005660:	d8f0      	bhi.n	8005644 <_TrySendOverflowPacket+0x1c>
 8005662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005668:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005670:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005672:	4b25      	ldr	r3, [pc, #148]	@ (8005708 <_TrySendOverflowPacket+0xe0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005678:	4b22      	ldr	r3, [pc, #136]	@ (8005704 <_TrySendOverflowPacket+0xdc>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	627b      	str	r3, [r7, #36]	@ 0x24
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	623b      	str	r3, [r7, #32]
 800568a:	e00b      	b.n	80056a4 <_TrySendOverflowPacket+0x7c>
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	b2da      	uxtb	r2, r3
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	1c59      	adds	r1, r3, #1
 8005694:	6279      	str	r1, [r7, #36]	@ 0x24
 8005696:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	09db      	lsrs	r3, r3, #7
 80056a2:	623b      	str	r3, [r7, #32]
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80056a8:	d8f0      	bhi.n	800568c <_TrySendOverflowPacket+0x64>
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80056b0:	6a3a      	ldr	r2, [r7, #32]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80056ba:	4b12      	ldr	r3, [pc, #72]	@ (8005704 <_TrySendOverflowPacket+0xdc>)
 80056bc:	785b      	ldrb	r3, [r3, #1]
 80056be:	4618      	mov	r0, r3
 80056c0:	1d3b      	adds	r3, r7, #4
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	1d3b      	adds	r3, r7, #4
 80056ca:	4619      	mov	r1, r3
 80056cc:	f7fa fd40 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056d0:	4603      	mov	r3, r0
 80056d2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80056da:	4a0a      	ldr	r2, [pc, #40]	@ (8005704 <_TrySendOverflowPacket+0xdc>)
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80056e0:	4b08      	ldr	r3, [pc, #32]	@ (8005704 <_TrySendOverflowPacket+0xdc>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	4b06      	ldr	r3, [pc, #24]	@ (8005704 <_TrySendOverflowPacket+0xdc>)
 80056ea:	701a      	strb	r2, [r3, #0]
 80056ec:	e004      	b.n	80056f8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80056ee:	4b05      	ldr	r3, [pc, #20]	@ (8005704 <_TrySendOverflowPacket+0xdc>)
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	3301      	adds	r3, #1
 80056f4:	4a03      	ldr	r2, [pc, #12]	@ (8005704 <_TrySendOverflowPacket+0xdc>)
 80056f6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80056f8:	693b      	ldr	r3, [r7, #16]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3730      	adds	r7, #48	@ 0x30
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	200046a8 	.word	0x200046a8
 8005708:	e0001004 	.word	0xe0001004

0800570c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800570c:	b580      	push	{r7, lr}
 800570e:	b08a      	sub	sp, #40	@ 0x28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005718:	4b98      	ldr	r3, [pc, #608]	@ (800597c <_SendPacket+0x270>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d010      	beq.n	8005742 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005720:	4b96      	ldr	r3, [pc, #600]	@ (800597c <_SendPacket+0x270>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 812d 	beq.w	8005984 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800572a:	4b94      	ldr	r3, [pc, #592]	@ (800597c <_SendPacket+0x270>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d109      	bne.n	8005746 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005732:	f7ff ff79 	bl	8005628 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005736:	4b91      	ldr	r3, [pc, #580]	@ (800597c <_SendPacket+0x270>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b01      	cmp	r3, #1
 800573c:	f040 8124 	bne.w	8005988 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005740:	e001      	b.n	8005746 <_SendPacket+0x3a>
    goto Send;
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <_SendPacket+0x3c>
Send:
 8005746:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b1f      	cmp	r3, #31
 800574c:	d809      	bhi.n	8005762 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800574e:	4b8b      	ldr	r3, [pc, #556]	@ (800597c <_SendPacket+0x270>)
 8005750:	69da      	ldr	r2, [r3, #28]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	fa22 f303 	lsr.w	r3, r2, r3
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	f040 8115 	bne.w	800598c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b17      	cmp	r3, #23
 8005766:	d807      	bhi.n	8005778 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3b01      	subs	r3, #1
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	e0c4      	b.n	8005902 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2b7f      	cmp	r3, #127	@ 0x7f
 8005784:	d912      	bls.n	80057ac <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	09da      	lsrs	r2, r3, #7
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3b01      	subs	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	3a01      	subs	r2, #1
 800579e:	60fa      	str	r2, [r7, #12]
 80057a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	e006      	b.n	80057ba <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b7e      	cmp	r3, #126	@ 0x7e
 80057be:	d807      	bhi.n	80057d0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	e098      	b.n	8005902 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057d6:	d212      	bcs.n	80057fe <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	09da      	lsrs	r2, r3, #7
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3b01      	subs	r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	3a01      	subs	r2, #1
 80057f0:	60fa      	str	r2, [r7, #12]
 80057f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	e081      	b.n	8005902 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005804:	d21d      	bcs.n	8005842 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	0b9a      	lsrs	r2, r3, #14
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3b01      	subs	r3, #1
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	09db      	lsrs	r3, r3, #7
 800581a:	b2db      	uxtb	r3, r3
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	3a01      	subs	r2, #1
 8005820:	60fa      	str	r2, [r7, #12]
 8005822:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005826:	b2da      	uxtb	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	b2db      	uxtb	r3, r3
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	3a01      	subs	r2, #1
 8005834:	60fa      	str	r2, [r7, #12]
 8005836:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800583a:	b2da      	uxtb	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	e05f      	b.n	8005902 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005848:	d228      	bcs.n	800589c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	0d5a      	lsrs	r2, r3, #21
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3b01      	subs	r3, #1
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	0b9b      	lsrs	r3, r3, #14
 800585e:	b2db      	uxtb	r3, r3
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	3a01      	subs	r2, #1
 8005864:	60fa      	str	r2, [r7, #12]
 8005866:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800586a:	b2da      	uxtb	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	09db      	lsrs	r3, r3, #7
 8005874:	b2db      	uxtb	r3, r3
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	3a01      	subs	r2, #1
 800587a:	60fa      	str	r2, [r7, #12]
 800587c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	3a01      	subs	r2, #1
 800588e:	60fa      	str	r2, [r7, #12]
 8005890:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005894:	b2da      	uxtb	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e032      	b.n	8005902 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	0f1a      	lsrs	r2, r3, #28
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	0d5b      	lsrs	r3, r3, #21
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	3a01      	subs	r2, #1
 80058b6:	60fa      	str	r2, [r7, #12]
 80058b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	0b9b      	lsrs	r3, r3, #14
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	3a01      	subs	r2, #1
 80058cc:	60fa      	str	r2, [r7, #12]
 80058ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	09db      	lsrs	r3, r3, #7
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	3a01      	subs	r2, #1
 80058e2:	60fa      	str	r2, [r7, #12]
 80058e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	3a01      	subs	r2, #1
 80058f6:	60fa      	str	r2, [r7, #12]
 80058f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005902:	4b1f      	ldr	r3, [pc, #124]	@ (8005980 <_SendPacket+0x274>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005908:	4b1c      	ldr	r3, [pc, #112]	@ (800597c <_SendPacket+0x270>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	623b      	str	r3, [r7, #32]
 800591a:	e00b      	b.n	8005934 <_SendPacket+0x228>
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	b2da      	uxtb	r2, r3
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	1c59      	adds	r1, r3, #1
 8005924:	6279      	str	r1, [r7, #36]	@ 0x24
 8005926:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	09db      	lsrs	r3, r3, #7
 8005932:	623b      	str	r3, [r7, #32]
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	2b7f      	cmp	r3, #127	@ 0x7f
 8005938:	d8f0      	bhi.n	800591c <_SendPacket+0x210>
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005940:	6a3a      	ldr	r2, [r7, #32]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800594a:	4b0c      	ldr	r3, [pc, #48]	@ (800597c <_SendPacket+0x270>)
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	4618      	mov	r0, r3
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	461a      	mov	r2, r3
 8005958:	68f9      	ldr	r1, [r7, #12]
 800595a:	f7fa fbf9 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800595e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005966:	4a05      	ldr	r2, [pc, #20]	@ (800597c <_SendPacket+0x270>)
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	60d3      	str	r3, [r2, #12]
 800596c:	e00f      	b.n	800598e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800596e:	4b03      	ldr	r3, [pc, #12]	@ (800597c <_SendPacket+0x270>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	b2da      	uxtb	r2, r3
 8005976:	4b01      	ldr	r3, [pc, #4]	@ (800597c <_SendPacket+0x270>)
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	e008      	b.n	800598e <_SendPacket+0x282>
 800597c:	200046a8 	.word	0x200046a8
 8005980:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005984:	bf00      	nop
 8005986:	e002      	b.n	800598e <_SendPacket+0x282>
      goto SendDone;
 8005988:	bf00      	nop
 800598a:	e000      	b.n	800598e <_SendPacket+0x282>
      goto SendDone;
 800598c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800598e:	4b14      	ldr	r3, [pc, #80]	@ (80059e0 <_SendPacket+0x2d4>)
 8005990:	7e1b      	ldrb	r3, [r3, #24]
 8005992:	4619      	mov	r1, r3
 8005994:	4a13      	ldr	r2, [pc, #76]	@ (80059e4 <_SendPacket+0x2d8>)
 8005996:	460b      	mov	r3, r1
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	440b      	add	r3, r1
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4413      	add	r3, r2
 80059a0:	336c      	adds	r3, #108	@ 0x6c
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	4b0e      	ldr	r3, [pc, #56]	@ (80059e0 <_SendPacket+0x2d4>)
 80059a6:	7e1b      	ldrb	r3, [r3, #24]
 80059a8:	4618      	mov	r0, r3
 80059aa:	490e      	ldr	r1, [pc, #56]	@ (80059e4 <_SendPacket+0x2d8>)
 80059ac:	4603      	mov	r3, r0
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	4403      	add	r3, r0
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	440b      	add	r3, r1
 80059b6:	3370      	adds	r3, #112	@ 0x70
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d00b      	beq.n	80059d6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80059be:	4b08      	ldr	r3, [pc, #32]	@ (80059e0 <_SendPacket+0x2d4>)
 80059c0:	789b      	ldrb	r3, [r3, #2]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d107      	bne.n	80059d6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80059c6:	4b06      	ldr	r3, [pc, #24]	@ (80059e0 <_SendPacket+0x2d4>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80059cc:	f7ff fdbe 	bl	800554c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80059d0:	4b03      	ldr	r3, [pc, #12]	@ (80059e0 <_SendPacket+0x2d4>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80059d6:	bf00      	nop
 80059d8:	3728      	adds	r7, #40	@ 0x28
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	200046a8 	.word	0x200046a8
 80059e4:	20003c0c 	.word	0x20003c0c

080059e8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80059f6:	2300      	movs	r3, #0
 80059f8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80059fc:	4917      	ldr	r1, [pc, #92]	@ (8005a5c <SEGGER_SYSVIEW_Init+0x74>)
 80059fe:	4818      	ldr	r0, [pc, #96]	@ (8005a60 <SEGGER_SYSVIEW_Init+0x78>)
 8005a00:	f7ff fc94 	bl	800532c <SEGGER_RTT_AllocUpBuffer>
 8005a04:	4603      	mov	r3, r0
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	4b16      	ldr	r3, [pc, #88]	@ (8005a64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a0a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005a0c:	4b15      	ldr	r3, [pc, #84]	@ (8005a64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a0e:	785a      	ldrb	r2, [r3, #1]
 8005a10:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a12:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005a14:	4b13      	ldr	r3, [pc, #76]	@ (8005a64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a16:	7e1b      	ldrb	r3, [r3, #24]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	2308      	movs	r3, #8
 8005a20:	4a11      	ldr	r2, [pc, #68]	@ (8005a68 <SEGGER_SYSVIEW_Init+0x80>)
 8005a22:	490f      	ldr	r1, [pc, #60]	@ (8005a60 <SEGGER_SYSVIEW_Init+0x78>)
 8005a24:	f7ff fd04 	bl	8005430 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005a28:	4b0e      	ldr	r3, [pc, #56]	@ (8005a64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005a6c <SEGGER_SYSVIEW_Init+0x84>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a0c      	ldr	r2, [pc, #48]	@ (8005a64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a34:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005a36:	4a0b      	ldr	r2, [pc, #44]	@ (8005a64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005a3c:	4a09      	ldr	r2, [pc, #36]	@ (8005a64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005a42:	4a08      	ldr	r2, [pc, #32]	@ (8005a64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005a48:	4a06      	ldr	r2, [pc, #24]	@ (8005a64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005a4e:	4b05      	ldr	r3, [pc, #20]	@ (8005a64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	200040c4 	.word	0x200040c4
 8005a60:	080073d4 	.word	0x080073d4
 8005a64:	200046a8 	.word	0x200046a8
 8005a68:	200046a0 	.word	0x200046a0
 8005a6c:	e0001004 	.word	0xe0001004

08005a70 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005a78:	4a03      	ldr	r2, [pc, #12]	@ (8005a88 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6113      	str	r3, [r2, #16]
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr
 8005a88:	200046a8 	.word	0x200046a8

08005a8c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a94:	f3ef 8311 	mrs	r3, BASEPRI
 8005a98:	f04f 0120 	mov.w	r1, #32
 8005a9c:	f381 8811 	msr	BASEPRI, r1
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	4808      	ldr	r0, [pc, #32]	@ (8005ac4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005aa4:	f7ff fd46 	bl	8005534 <_PreparePacket>
 8005aa8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	68b8      	ldr	r0, [r7, #8]
 8005ab0:	f7ff fe2c 	bl	800570c <_SendPacket>
  RECORD_END();
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f383 8811 	msr	BASEPRI, r3
}
 8005aba:	bf00      	nop
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	200046d8 	.word	0x200046d8

08005ac8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ad2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ad6:	f04f 0120 	mov.w	r1, #32
 8005ada:	f381 8811 	msr	BASEPRI, r1
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	4816      	ldr	r0, [pc, #88]	@ (8005b3c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005ae2:	f7ff fd27 	bl	8005534 <_PreparePacket>
 8005ae6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	e00b      	b.n	8005b0e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	1c59      	adds	r1, r3, #1
 8005afe:	61f9      	str	r1, [r7, #28]
 8005b00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	09db      	lsrs	r3, r3, #7
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b12:	d8f0      	bhi.n	8005af6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	61fa      	str	r2, [r7, #28]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68f9      	ldr	r1, [r7, #12]
 8005b28:	6938      	ldr	r0, [r7, #16]
 8005b2a:	f7ff fdef 	bl	800570c <_SendPacket>
  RECORD_END();
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f383 8811 	msr	BASEPRI, r3
}
 8005b34:	bf00      	nop
 8005b36:	3720      	adds	r7, #32
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	200046d8 	.word	0x200046d8

08005b40 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	@ 0x30
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b50:	f04f 0120 	mov.w	r1, #32
 8005b54:	f381 8811 	msr	BASEPRI, r1
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	4825      	ldr	r0, [pc, #148]	@ (8005bf0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005b5c:	f7ff fcea 	bl	8005534 <_PreparePacket>
 8005b60:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b6e:	e00b      	b.n	8005b88 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b76:	1c59      	adds	r1, r3, #1
 8005b78:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b84:	09db      	lsrs	r3, r3, #7
 8005b86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b8c:	d8f0      	bhi.n	8005b70 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	623b      	str	r3, [r7, #32]
 8005ba6:	e00b      	b.n	8005bc0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bae:	1c59      	adds	r1, r3, #1
 8005bb0:	6279      	str	r1, [r7, #36]	@ 0x24
 8005bb2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	09db      	lsrs	r3, r3, #7
 8005bbe:	623b      	str	r3, [r7, #32]
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bc4:	d8f0      	bhi.n	8005ba8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bcc:	6a3a      	ldr	r2, [r7, #32]
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	6979      	ldr	r1, [r7, #20]
 8005bda:	69b8      	ldr	r0, [r7, #24]
 8005bdc:	f7ff fd96 	bl	800570c <_SendPacket>
  RECORD_END();
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	f383 8811 	msr	BASEPRI, r3
}
 8005be6:	bf00      	nop
 8005be8:	3730      	adds	r7, #48	@ 0x30
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	200046d8 	.word	0x200046d8

08005bf4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08c      	sub	sp, #48	@ 0x30
 8005bf8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005bfa:	4b58      	ldr	r3, [pc, #352]	@ (8005d5c <SEGGER_SYSVIEW_Start+0x168>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005c00:	f3ef 8311 	mrs	r3, BASEPRI
 8005c04:	f04f 0120 	mov.w	r1, #32
 8005c08:	f381 8811 	msr	BASEPRI, r1
 8005c0c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005c0e:	4b53      	ldr	r3, [pc, #332]	@ (8005d5c <SEGGER_SYSVIEW_Start+0x168>)
 8005c10:	785b      	ldrb	r3, [r3, #1]
 8005c12:	220a      	movs	r2, #10
 8005c14:	4952      	ldr	r1, [pc, #328]	@ (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fa fa9a 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005c22:	200a      	movs	r0, #10
 8005c24:	f7ff ff32 	bl	8005a8c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c28:	f3ef 8311 	mrs	r3, BASEPRI
 8005c2c:	f04f 0120 	mov.w	r1, #32
 8005c30:	f381 8811 	msr	BASEPRI, r1
 8005c34:	60bb      	str	r3, [r7, #8]
 8005c36:	484b      	ldr	r0, [pc, #300]	@ (8005d64 <SEGGER_SYSVIEW_Start+0x170>)
 8005c38:	f7ff fc7c 	bl	8005534 <_PreparePacket>
 8005c3c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c46:	4b45      	ldr	r3, [pc, #276]	@ (8005d5c <SEGGER_SYSVIEW_Start+0x168>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c4c:	e00b      	b.n	8005c66 <SEGGER_SYSVIEW_Start+0x72>
 8005c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c54:	1c59      	adds	r1, r3, #1
 8005c56:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005c58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c62:	09db      	lsrs	r3, r3, #7
 8005c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c68:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c6a:	d8f0      	bhi.n	8005c4e <SEGGER_SYSVIEW_Start+0x5a>
 8005c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c80:	4b36      	ldr	r3, [pc, #216]	@ (8005d5c <SEGGER_SYSVIEW_Start+0x168>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	623b      	str	r3, [r7, #32]
 8005c86:	e00b      	b.n	8005ca0 <SEGGER_SYSVIEW_Start+0xac>
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8e:	1c59      	adds	r1, r3, #1
 8005c90:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	09db      	lsrs	r3, r3, #7
 8005c9e:	623b      	str	r3, [r7, #32]
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ca4:	d8f0      	bhi.n	8005c88 <SEGGER_SYSVIEW_Start+0x94>
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cac:	6a3a      	ldr	r2, [r7, #32]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	4b28      	ldr	r3, [pc, #160]	@ (8005d5c <SEGGER_SYSVIEW_Start+0x168>)
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	e00b      	b.n	8005cda <SEGGER_SYSVIEW_Start+0xe6>
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	1c59      	adds	r1, r3, #1
 8005cca:	61f9      	str	r1, [r7, #28]
 8005ccc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	09db      	lsrs	r3, r3, #7
 8005cd8:	61bb      	str	r3, [r7, #24]
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cde:	d8f0      	bhi.n	8005cc2 <SEGGER_SYSVIEW_Start+0xce>
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	61fa      	str	r2, [r7, #28]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	e00b      	b.n	8005d12 <SEGGER_SYSVIEW_Start+0x11e>
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	1c59      	adds	r1, r3, #1
 8005d02:	6179      	str	r1, [r7, #20]
 8005d04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	09db      	lsrs	r3, r3, #7
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d16:	d8f0      	bhi.n	8005cfa <SEGGER_SYSVIEW_Start+0x106>
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	617a      	str	r2, [r7, #20]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d28:	2218      	movs	r2, #24
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff fced 	bl	800570c <_SendPacket>
      RECORD_END();
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d38:	4b08      	ldr	r3, [pc, #32]	@ (8005d5c <SEGGER_SYSVIEW_Start+0x168>)
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005d40:	4b06      	ldr	r3, [pc, #24]	@ (8005d5c <SEGGER_SYSVIEW_Start+0x168>)
 8005d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d44:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005d46:	f000 f9eb 	bl	8006120 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005d4a:	f000 f9b1 	bl	80060b0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005d4e:	f000 fd21 	bl	8006794 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005d52:	bf00      	nop
 8005d54:	3730      	adds	r7, #48	@ 0x30
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	200046a8 	.word	0x200046a8
 8005d60:	080074dc 	.word	0x080074dc
 8005d64:	200046d8 	.word	0x200046d8

08005d68 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d72:	f04f 0120 	mov.w	r1, #32
 8005d76:	f381 8811 	msr	BASEPRI, r1
 8005d7a:	607b      	str	r3, [r7, #4]
 8005d7c:	480b      	ldr	r0, [pc, #44]	@ (8005dac <SEGGER_SYSVIEW_Stop+0x44>)
 8005d7e:	f7ff fbd9 	bl	8005534 <_PreparePacket>
 8005d82:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005d84:	4b0a      	ldr	r3, [pc, #40]	@ (8005db0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d007      	beq.n	8005d9c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005d8c:	220b      	movs	r2, #11
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6838      	ldr	r0, [r7, #0]
 8005d92:	f7ff fcbb 	bl	800570c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005d96:	4b06      	ldr	r3, [pc, #24]	@ (8005db0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f383 8811 	msr	BASEPRI, r3
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	200046d8 	.word	0x200046d8
 8005db0:	200046a8 	.word	0x200046a8

08005db4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08c      	sub	sp, #48	@ 0x30
 8005db8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dba:	f3ef 8311 	mrs	r3, BASEPRI
 8005dbe:	f04f 0120 	mov.w	r1, #32
 8005dc2:	f381 8811 	msr	BASEPRI, r1
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	4845      	ldr	r0, [pc, #276]	@ (8005ee0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005dca:	f7ff fbb3 	bl	8005534 <_PreparePacket>
 8005dce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dd8:	4b42      	ldr	r3, [pc, #264]	@ (8005ee4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dde:	e00b      	b.n	8005df8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de6:	1c59      	adds	r1, r3, #1
 8005de8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005dea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df4:	09db      	lsrs	r3, r3, #7
 8005df6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dfc:	d8f0      	bhi.n	8005de0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e12:	4b34      	ldr	r3, [pc, #208]	@ (8005ee4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	623b      	str	r3, [r7, #32]
 8005e18:	e00b      	b.n	8005e32 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	1c59      	adds	r1, r3, #1
 8005e22:	6279      	str	r1, [r7, #36]	@ 0x24
 8005e24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	09db      	lsrs	r3, r3, #7
 8005e30:	623b      	str	r3, [r7, #32]
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e36:	d8f0      	bhi.n	8005e1a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e3e:	6a3a      	ldr	r2, [r7, #32]
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	701a      	strb	r2, [r3, #0]
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	61fb      	str	r3, [r7, #28]
 8005e4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ee4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	61bb      	str	r3, [r7, #24]
 8005e52:	e00b      	b.n	8005e6c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	1c59      	adds	r1, r3, #1
 8005e5c:	61f9      	str	r1, [r7, #28]
 8005e5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	09db      	lsrs	r3, r3, #7
 8005e6a:	61bb      	str	r3, [r7, #24]
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e70:	d8f0      	bhi.n	8005e54 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	61fa      	str	r2, [r7, #28]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	2300      	movs	r3, #0
 8005e88:	613b      	str	r3, [r7, #16]
 8005e8a:	e00b      	b.n	8005ea4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	1c59      	adds	r1, r3, #1
 8005e94:	6179      	str	r1, [r7, #20]
 8005e96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	09db      	lsrs	r3, r3, #7
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ea8:	d8f0      	bhi.n	8005e8c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	617a      	str	r2, [r7, #20]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005eba:	2218      	movs	r2, #24
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	68b8      	ldr	r0, [r7, #8]
 8005ec0:	f7ff fc24 	bl	800570c <_SendPacket>
  RECORD_END();
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005eca:	4b06      	ldr	r3, [pc, #24]	@ (8005ee4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005ed2:	4b04      	ldr	r3, [pc, #16]	@ (8005ee4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	4798      	blx	r3
  }
}
 8005ed8:	bf00      	nop
 8005eda:	3730      	adds	r7, #48	@ 0x30
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	200046d8 	.word	0x200046d8
 8005ee4:	200046a8 	.word	0x200046a8

08005ee8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b092      	sub	sp, #72	@ 0x48
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005ef0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ef4:	f04f 0120 	mov.w	r1, #32
 8005ef8:	f381 8811 	msr	BASEPRI, r1
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	486a      	ldr	r0, [pc, #424]	@ (80060a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005f00:	f7ff fb18 	bl	8005534 <_PreparePacket>
 8005f04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	4b66      	ldr	r3, [pc, #408]	@ (80060ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f1a:	e00b      	b.n	8005f34 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f22:	1c59      	adds	r1, r3, #1
 8005f24:	6479      	str	r1, [r7, #68]	@ 0x44
 8005f26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f30:	09db      	lsrs	r3, r3, #7
 8005f32:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f36:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f38:	d8f0      	bhi.n	8005f1c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005f3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f54:	e00b      	b.n	8005f6e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f5c:	1c59      	adds	r1, r3, #1
 8005f5e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005f60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	09db      	lsrs	r3, r3, #7
 8005f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f70:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f72:	d8f0      	bhi.n	8005f56 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f82:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f7ff fa99 	bl	80054c4 <_EncodeStr>
 8005f92:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005f94:	2209      	movs	r2, #9
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	6938      	ldr	r0, [r7, #16]
 8005f9a:	f7ff fbb7 	bl	800570c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4b40      	ldr	r3, [pc, #256]	@ (80060ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fb2:	e00b      	b.n	8005fcc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fba:	1c59      	adds	r1, r3, #1
 8005fbc:	6379      	str	r1, [r7, #52]	@ 0x34
 8005fbe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc8:	09db      	lsrs	r3, r3, #7
 8005fca:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fce:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fd0:	d8f0      	bhi.n	8005fb4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	637a      	str	r2, [r7, #52]	@ 0x34
 8005fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fec:	e00b      	b.n	8006006 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff4:	1c59      	adds	r1, r3, #1
 8005ff6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005ff8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006002:	09db      	lsrs	r3, r3, #7
 8006004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006008:	2b7f      	cmp	r3, #127	@ 0x7f
 800600a:	d8f0      	bhi.n	8005fee <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800600c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	623b      	str	r3, [r7, #32]
 8006026:	e00b      	b.n	8006040 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	b2da      	uxtb	r2, r3
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	1c59      	adds	r1, r3, #1
 8006030:	6279      	str	r1, [r7, #36]	@ 0x24
 8006032:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	09db      	lsrs	r3, r3, #7
 800603e:	623b      	str	r3, [r7, #32]
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	2b7f      	cmp	r3, #127	@ 0x7f
 8006044:	d8f0      	bhi.n	8006028 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	627a      	str	r2, [r7, #36]	@ 0x24
 800604c:	6a3a      	ldr	r2, [r7, #32]
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	e00b      	b.n	800607a <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	b2da      	uxtb	r2, r3
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	1c59      	adds	r1, r3, #1
 800606a:	61f9      	str	r1, [r7, #28]
 800606c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	09db      	lsrs	r3, r3, #7
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b7f      	cmp	r3, #127	@ 0x7f
 800607e:	d8f0      	bhi.n	8006062 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	61fa      	str	r2, [r7, #28]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006090:	2215      	movs	r2, #21
 8006092:	68f9      	ldr	r1, [r7, #12]
 8006094:	6938      	ldr	r0, [r7, #16]
 8006096:	f7ff fb39 	bl	800570c <_SendPacket>
  RECORD_END();
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f383 8811 	msr	BASEPRI, r3
}
 80060a0:	bf00      	nop
 80060a2:	3748      	adds	r7, #72	@ 0x48
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	200046d8 	.word	0x200046d8
 80060ac:	200046a8 	.word	0x200046a8

080060b0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80060b4:	4b07      	ldr	r3, [pc, #28]	@ (80060d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d008      	beq.n	80060ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80060bc:	4b05      	ldr	r3, [pc, #20]	@ (80060d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80060c6:	4b03      	ldr	r3, [pc, #12]	@ (80060d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	4798      	blx	r3
  }
}
 80060ce:	bf00      	nop
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	200046a8 	.word	0x200046a8

080060d8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060e0:	f3ef 8311 	mrs	r3, BASEPRI
 80060e4:	f04f 0120 	mov.w	r1, #32
 80060e8:	f381 8811 	msr	BASEPRI, r1
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	480b      	ldr	r0, [pc, #44]	@ (800611c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80060f0:	f7ff fa20 	bl	8005534 <_PreparePacket>
 80060f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060f6:	2280      	movs	r2, #128	@ 0x80
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	6938      	ldr	r0, [r7, #16]
 80060fc:	f7ff f9e2 	bl	80054c4 <_EncodeStr>
 8006100:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006102:	220e      	movs	r2, #14
 8006104:	68f9      	ldr	r1, [r7, #12]
 8006106:	6938      	ldr	r0, [r7, #16]
 8006108:	f7ff fb00 	bl	800570c <_SendPacket>
  RECORD_END();
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f383 8811 	msr	BASEPRI, r3
}
 8006112:	bf00      	nop
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	200046d8 	.word	0x200046d8

08006120 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006120:	b590      	push	{r4, r7, lr}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006126:	4b15      	ldr	r3, [pc, #84]	@ (800617c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d01a      	beq.n	8006164 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800612e:	4b13      	ldr	r3, [pc, #76]	@ (800617c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d015      	beq.n	8006164 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006138:	4b10      	ldr	r3, [pc, #64]	@ (800617c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4798      	blx	r3
 8006140:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006144:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006146:	e9d7 0100 	ldrd	r0, r1, [r7]
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	000a      	movs	r2, r1
 8006154:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006156:	4613      	mov	r3, r2
 8006158:	461a      	mov	r2, r3
 800615a:	4621      	mov	r1, r4
 800615c:	200d      	movs	r0, #13
 800615e:	f7ff fcef 	bl	8005b40 <SEGGER_SYSVIEW_RecordU32x2>
 8006162:	e006      	b.n	8006172 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006164:	4b06      	ldr	r3, [pc, #24]	@ (8006180 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4619      	mov	r1, r3
 800616a:	200c      	movs	r0, #12
 800616c:	f7ff fcac 	bl	8005ac8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006170:	bf00      	nop
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	bd90      	pop	{r4, r7, pc}
 800617a:	bf00      	nop
 800617c:	200046a8 	.word	0x200046a8
 8006180:	e0001004 	.word	0xe0001004

08006184 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800618a:	f3ef 8311 	mrs	r3, BASEPRI
 800618e:	f04f 0120 	mov.w	r1, #32
 8006192:	f381 8811 	msr	BASEPRI, r1
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	4819      	ldr	r0, [pc, #100]	@ (8006200 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800619a:	f7ff f9cb 	bl	8005534 <_PreparePacket>
 800619e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80061a4:	4b17      	ldr	r3, [pc, #92]	@ (8006204 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ac:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	e00b      	b.n	80061d0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	1c59      	adds	r1, r3, #1
 80061c0:	6179      	str	r1, [r7, #20]
 80061c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	09db      	lsrs	r3, r3, #7
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80061d4:	d8f0      	bhi.n	80061b8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	617a      	str	r2, [r7, #20]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80061e6:	2202      	movs	r2, #2
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	68b8      	ldr	r0, [r7, #8]
 80061ec:	f7ff fa8e 	bl	800570c <_SendPacket>
  RECORD_END();
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f383 8811 	msr	BASEPRI, r3
}
 80061f6:	bf00      	nop
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200046d8 	.word	0x200046d8
 8006204:	e000ed04 	.word	0xe000ed04

08006208 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800620e:	f3ef 8311 	mrs	r3, BASEPRI
 8006212:	f04f 0120 	mov.w	r1, #32
 8006216:	f381 8811 	msr	BASEPRI, r1
 800621a:	607b      	str	r3, [r7, #4]
 800621c:	4807      	ldr	r0, [pc, #28]	@ (800623c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800621e:	f7ff f989 	bl	8005534 <_PreparePacket>
 8006222:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006224:	2203      	movs	r2, #3
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6838      	ldr	r0, [r7, #0]
 800622a:	f7ff fa6f 	bl	800570c <_SendPacket>
  RECORD_END();
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f383 8811 	msr	BASEPRI, r3
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	200046d8 	.word	0x200046d8

08006240 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006246:	f3ef 8311 	mrs	r3, BASEPRI
 800624a:	f04f 0120 	mov.w	r1, #32
 800624e:	f381 8811 	msr	BASEPRI, r1
 8006252:	607b      	str	r3, [r7, #4]
 8006254:	4807      	ldr	r0, [pc, #28]	@ (8006274 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006256:	f7ff f96d 	bl	8005534 <_PreparePacket>
 800625a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800625c:	2212      	movs	r2, #18
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6838      	ldr	r0, [r7, #0]
 8006262:	f7ff fa53 	bl	800570c <_SendPacket>
  RECORD_END();
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f383 8811 	msr	BASEPRI, r3
}
 800626c:	bf00      	nop
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	200046d8 	.word	0x200046d8

08006278 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006280:	f3ef 8311 	mrs	r3, BASEPRI
 8006284:	f04f 0120 	mov.w	r1, #32
 8006288:	f381 8811 	msr	BASEPRI, r1
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	4817      	ldr	r0, [pc, #92]	@ (80062ec <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006290:	f7ff f950 	bl	8005534 <_PreparePacket>
 8006294:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	e00b      	b.n	80062bc <SEGGER_SYSVIEW_RecordEndCall+0x44>
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	1c59      	adds	r1, r3, #1
 80062ac:	61f9      	str	r1, [r7, #28]
 80062ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	09db      	lsrs	r3, r3, #7
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	2b7f      	cmp	r3, #127	@ 0x7f
 80062c0:	d8f0      	bhi.n	80062a4 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	61fa      	str	r2, [r7, #28]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80062d2:	221c      	movs	r2, #28
 80062d4:	68f9      	ldr	r1, [r7, #12]
 80062d6:	6938      	ldr	r0, [r7, #16]
 80062d8:	f7ff fa18 	bl	800570c <_SendPacket>
  RECORD_END();
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f383 8811 	msr	BASEPRI, r3
}
 80062e2:	bf00      	nop
 80062e4:	3720      	adds	r7, #32
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	200046d8 	.word	0x200046d8

080062f0 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08a      	sub	sp, #40	@ 0x28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80062fa:	f3ef 8311 	mrs	r3, BASEPRI
 80062fe:	f04f 0120 	mov.w	r1, #32
 8006302:	f381 8811 	msr	BASEPRI, r1
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	4824      	ldr	r0, [pc, #144]	@ (800639c <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 800630a:	f7ff f913 	bl	8005534 <_PreparePacket>
 800630e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	627b      	str	r3, [r7, #36]	@ 0x24
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	623b      	str	r3, [r7, #32]
 800631c:	e00b      	b.n	8006336 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	b2da      	uxtb	r2, r3
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	1c59      	adds	r1, r3, #1
 8006326:	6279      	str	r1, [r7, #36]	@ 0x24
 8006328:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	09db      	lsrs	r3, r3, #7
 8006334:	623b      	str	r3, [r7, #32]
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	2b7f      	cmp	r3, #127	@ 0x7f
 800633a:	d8f0      	bhi.n	800631e <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	627a      	str	r2, [r7, #36]	@ 0x24
 8006342:	6a3a      	ldr	r2, [r7, #32]
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	61bb      	str	r3, [r7, #24]
 8006354:	e00b      	b.n	800636e <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	b2da      	uxtb	r2, r3
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	1c59      	adds	r1, r3, #1
 800635e:	61f9      	str	r1, [r7, #28]
 8006360:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	09db      	lsrs	r3, r3, #7
 800636c:	61bb      	str	r3, [r7, #24]
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	2b7f      	cmp	r3, #127	@ 0x7f
 8006372:	d8f0      	bhi.n	8006356 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	61fa      	str	r2, [r7, #28]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006384:	221c      	movs	r2, #28
 8006386:	68f9      	ldr	r1, [r7, #12]
 8006388:	6938      	ldr	r0, [r7, #16]
 800638a:	f7ff f9bf 	bl	800570c <_SendPacket>
  RECORD_END();
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f383 8811 	msr	BASEPRI, r3
}
 8006394:	bf00      	nop
 8006396:	3728      	adds	r7, #40	@ 0x28
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	200046d8 	.word	0x200046d8

080063a0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063a6:	f3ef 8311 	mrs	r3, BASEPRI
 80063aa:	f04f 0120 	mov.w	r1, #32
 80063ae:	f381 8811 	msr	BASEPRI, r1
 80063b2:	607b      	str	r3, [r7, #4]
 80063b4:	4807      	ldr	r0, [pc, #28]	@ (80063d4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80063b6:	f7ff f8bd 	bl	8005534 <_PreparePacket>
 80063ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80063bc:	2211      	movs	r2, #17
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6838      	ldr	r0, [r7, #0]
 80063c2:	f7ff f9a3 	bl	800570c <_SendPacket>
  RECORD_END();
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f383 8811 	msr	BASEPRI, r3
}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	200046d8 	.word	0x200046d8

080063d8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063e0:	f3ef 8311 	mrs	r3, BASEPRI
 80063e4:	f04f 0120 	mov.w	r1, #32
 80063e8:	f381 8811 	msr	BASEPRI, r1
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	4819      	ldr	r0, [pc, #100]	@ (8006454 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80063f0:	f7ff f8a0 	bl	8005534 <_PreparePacket>
 80063f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063fa:	4b17      	ldr	r3, [pc, #92]	@ (8006458 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	61bb      	str	r3, [r7, #24]
 800640c:	e00b      	b.n	8006426 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	1c59      	adds	r1, r3, #1
 8006416:	61f9      	str	r1, [r7, #28]
 8006418:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	09db      	lsrs	r3, r3, #7
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	2b7f      	cmp	r3, #127	@ 0x7f
 800642a:	d8f0      	bhi.n	800640e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	61fa      	str	r2, [r7, #28]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800643c:	2208      	movs	r2, #8
 800643e:	68f9      	ldr	r1, [r7, #12]
 8006440:	6938      	ldr	r0, [r7, #16]
 8006442:	f7ff f963 	bl	800570c <_SendPacket>
  RECORD_END();
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f383 8811 	msr	BASEPRI, r3
}
 800644c:	bf00      	nop
 800644e:	3720      	adds	r7, #32
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	200046d8 	.word	0x200046d8
 8006458:	200046a8 	.word	0x200046a8

0800645c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006464:	f3ef 8311 	mrs	r3, BASEPRI
 8006468:	f04f 0120 	mov.w	r1, #32
 800646c:	f381 8811 	msr	BASEPRI, r1
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	4819      	ldr	r0, [pc, #100]	@ (80064d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006474:	f7ff f85e 	bl	8005534 <_PreparePacket>
 8006478:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800647e:	4b17      	ldr	r3, [pc, #92]	@ (80064dc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	e00b      	b.n	80064aa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	b2da      	uxtb	r2, r3
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	1c59      	adds	r1, r3, #1
 800649a:	61f9      	str	r1, [r7, #28]
 800649c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	09db      	lsrs	r3, r3, #7
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80064ae:	d8f0      	bhi.n	8006492 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	61fa      	str	r2, [r7, #28]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80064c0:	2204      	movs	r2, #4
 80064c2:	68f9      	ldr	r1, [r7, #12]
 80064c4:	6938      	ldr	r0, [r7, #16]
 80064c6:	f7ff f921 	bl	800570c <_SendPacket>
  RECORD_END();
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f383 8811 	msr	BASEPRI, r3
}
 80064d0:	bf00      	nop
 80064d2:	3720      	adds	r7, #32
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	200046d8 	.word	0x200046d8
 80064dc:	200046a8 	.word	0x200046a8

080064e0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064e8:	f3ef 8311 	mrs	r3, BASEPRI
 80064ec:	f04f 0120 	mov.w	r1, #32
 80064f0:	f381 8811 	msr	BASEPRI, r1
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	4819      	ldr	r0, [pc, #100]	@ (800655c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80064f8:	f7ff f81c 	bl	8005534 <_PreparePacket>
 80064fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006502:	4b17      	ldr	r3, [pc, #92]	@ (8006560 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	61bb      	str	r3, [r7, #24]
 8006514:	e00b      	b.n	800652e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	b2da      	uxtb	r2, r3
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	1c59      	adds	r1, r3, #1
 800651e:	61f9      	str	r1, [r7, #28]
 8006520:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	09db      	lsrs	r3, r3, #7
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b7f      	cmp	r3, #127	@ 0x7f
 8006532:	d8f0      	bhi.n	8006516 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	61fa      	str	r2, [r7, #28]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	701a      	strb	r2, [r3, #0]
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006544:	2206      	movs	r2, #6
 8006546:	68f9      	ldr	r1, [r7, #12]
 8006548:	6938      	ldr	r0, [r7, #16]
 800654a:	f7ff f8df 	bl	800570c <_SendPacket>
  RECORD_END();
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f383 8811 	msr	BASEPRI, r3
}
 8006554:	bf00      	nop
 8006556:	3720      	adds	r7, #32
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	200046d8 	.word	0x200046d8
 8006560:	200046a8 	.word	0x200046a8

08006564 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b08a      	sub	sp, #40	@ 0x28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800656e:	f3ef 8311 	mrs	r3, BASEPRI
 8006572:	f04f 0120 	mov.w	r1, #32
 8006576:	f381 8811 	msr	BASEPRI, r1
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	4827      	ldr	r0, [pc, #156]	@ (800661c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800657e:	f7fe ffd9 	bl	8005534 <_PreparePacket>
 8006582:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006588:	4b25      	ldr	r3, [pc, #148]	@ (8006620 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	627b      	str	r3, [r7, #36]	@ 0x24
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	623b      	str	r3, [r7, #32]
 800659a:	e00b      	b.n	80065b4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a2:	1c59      	adds	r1, r3, #1
 80065a4:	6279      	str	r1, [r7, #36]	@ 0x24
 80065a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	09db      	lsrs	r3, r3, #7
 80065b2:	623b      	str	r3, [r7, #32]
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80065b8:	d8f0      	bhi.n	800659c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	627a      	str	r2, [r7, #36]	@ 0x24
 80065c0:	6a3a      	ldr	r2, [r7, #32]
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	61fb      	str	r3, [r7, #28]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	e00b      	b.n	80065ec <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	1c59      	adds	r1, r3, #1
 80065dc:	61f9      	str	r1, [r7, #28]
 80065de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	09db      	lsrs	r3, r3, #7
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80065f0:	d8f0      	bhi.n	80065d4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	61fa      	str	r2, [r7, #28]
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006602:	2207      	movs	r2, #7
 8006604:	68f9      	ldr	r1, [r7, #12]
 8006606:	6938      	ldr	r0, [r7, #16]
 8006608:	f7ff f880 	bl	800570c <_SendPacket>
  RECORD_END();
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f383 8811 	msr	BASEPRI, r3
}
 8006612:	bf00      	nop
 8006614:	3728      	adds	r7, #40	@ 0x28
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	200046d8 	.word	0x200046d8
 8006620:	200046a8 	.word	0x200046a8

08006624 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800662c:	4b04      	ldr	r3, [pc, #16]	@ (8006640 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	1ad3      	subs	r3, r2, r3
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	200046a8 	.word	0x200046a8

08006644 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006644:	b580      	push	{r7, lr}
 8006646:	b08c      	sub	sp, #48	@ 0x30
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800664e:	4b40      	ldr	r3, [pc, #256]	@ (8006750 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d077      	beq.n	8006746 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006656:	4b3e      	ldr	r3, [pc, #248]	@ (8006750 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800665c:	2300      	movs	r3, #0
 800665e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006660:	e008      	b.n	8006674 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006670:	3301      	adds	r3, #1
 8006672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006678:	429a      	cmp	r2, r3
 800667a:	d3f2      	bcc.n	8006662 <SEGGER_SYSVIEW_SendModule+0x1e>
 800667c:	e000      	b.n	8006680 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800667e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d055      	beq.n	8006732 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006686:	f3ef 8311 	mrs	r3, BASEPRI
 800668a:	f04f 0120 	mov.w	r1, #32
 800668e:	f381 8811 	msr	BASEPRI, r1
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	482f      	ldr	r0, [pc, #188]	@ (8006754 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006696:	f7fe ff4d 	bl	8005534 <_PreparePacket>
 800669a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	623b      	str	r3, [r7, #32]
 80066a8:	e00b      	b.n	80066c2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	1c59      	adds	r1, r3, #1
 80066b2:	6279      	str	r1, [r7, #36]	@ 0x24
 80066b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066b8:	b2d2      	uxtb	r2, r2
 80066ba:	701a      	strb	r2, [r3, #0]
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	09db      	lsrs	r3, r3, #7
 80066c0:	623b      	str	r3, [r7, #32]
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80066c6:	d8f0      	bhi.n	80066aa <SEGGER_SYSVIEW_SendModule+0x66>
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80066ce:	6a3a      	ldr	r2, [r7, #32]
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	e00b      	b.n	80066fc <SEGGER_SYSVIEW_SendModule+0xb8>
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	1c59      	adds	r1, r3, #1
 80066ec:	61f9      	str	r1, [r7, #28]
 80066ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	09db      	lsrs	r3, r3, #7
 80066fa:	61bb      	str	r3, [r7, #24]
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006700:	d8f0      	bhi.n	80066e4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	61fa      	str	r2, [r7, #28]
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2280      	movs	r2, #128	@ 0x80
 8006718:	4619      	mov	r1, r3
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f7fe fed2 	bl	80054c4 <_EncodeStr>
 8006720:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006722:	2216      	movs	r2, #22
 8006724:	68f9      	ldr	r1, [r7, #12]
 8006726:	6938      	ldr	r0, [r7, #16]
 8006728:	f7fe fff0 	bl	800570c <_SendPacket>
      RECORD_END();
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d006      	beq.n	8006746 <SEGGER_SYSVIEW_SendModule+0x102>
 8006738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	4798      	blx	r3
    }
  }
}
 8006746:	bf00      	nop
 8006748:	3730      	adds	r7, #48	@ 0x30
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	200046d0 	.word	0x200046d0
 8006754:	200046d8 	.word	0x200046d8

08006758 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800675e:	4b0c      	ldr	r3, [pc, #48]	@ (8006790 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00f      	beq.n	8006786 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006766:	4b0a      	ldr	r3, [pc, #40]	@ (8006790 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1f2      	bne.n	800676c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006786:	bf00      	nop
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	200046d0 	.word	0x200046d0

08006794 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800679a:	f3ef 8311 	mrs	r3, BASEPRI
 800679e:	f04f 0120 	mov.w	r1, #32
 80067a2:	f381 8811 	msr	BASEPRI, r1
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	4817      	ldr	r0, [pc, #92]	@ (8006808 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80067aa:	f7fe fec3 	bl	8005534 <_PreparePacket>
 80067ae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	4b14      	ldr	r3, [pc, #80]	@ (800680c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	e00b      	b.n	80067d8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	1c59      	adds	r1, r3, #1
 80067c8:	6179      	str	r1, [r7, #20]
 80067ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	09db      	lsrs	r3, r3, #7
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b7f      	cmp	r3, #127	@ 0x7f
 80067dc:	d8f0      	bhi.n	80067c0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	617a      	str	r2, [r7, #20]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80067ee:	221b      	movs	r2, #27
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	68b8      	ldr	r0, [r7, #8]
 80067f4:	f7fe ff8a 	bl	800570c <_SendPacket>
  RECORD_END();
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f383 8811 	msr	BASEPRI, r3
}
 80067fe:	bf00      	nop
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	200046d8 	.word	0x200046d8
 800680c:	200046d4 	.word	0x200046d4

08006810 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006810:	b580      	push	{r7, lr}
 8006812:	b08a      	sub	sp, #40	@ 0x28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006818:	f3ef 8311 	mrs	r3, BASEPRI
 800681c:	f04f 0120 	mov.w	r1, #32
 8006820:	f381 8811 	msr	BASEPRI, r1
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	4827      	ldr	r0, [pc, #156]	@ (80068c4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006828:	f7fe fe84 	bl	8005534 <_PreparePacket>
 800682c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800682e:	2280      	movs	r2, #128	@ 0x80
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	6938      	ldr	r0, [r7, #16]
 8006834:	f7fe fe46 	bl	80054c4 <_EncodeStr>
 8006838:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	627b      	str	r3, [r7, #36]	@ 0x24
 800683e:	2301      	movs	r3, #1
 8006840:	623b      	str	r3, [r7, #32]
 8006842:	e00b      	b.n	800685c <SEGGER_SYSVIEW_Warn+0x4c>
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	b2da      	uxtb	r2, r3
 8006848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684a:	1c59      	adds	r1, r3, #1
 800684c:	6279      	str	r1, [r7, #36]	@ 0x24
 800684e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	09db      	lsrs	r3, r3, #7
 800685a:	623b      	str	r3, [r7, #32]
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006860:	d8f0      	bhi.n	8006844 <SEGGER_SYSVIEW_Warn+0x34>
 8006862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	627a      	str	r2, [r7, #36]	@ 0x24
 8006868:	6a3a      	ldr	r2, [r7, #32]
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	701a      	strb	r2, [r3, #0]
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	61fb      	str	r3, [r7, #28]
 8006876:	2300      	movs	r3, #0
 8006878:	61bb      	str	r3, [r7, #24]
 800687a:	e00b      	b.n	8006894 <SEGGER_SYSVIEW_Warn+0x84>
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	b2da      	uxtb	r2, r3
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	1c59      	adds	r1, r3, #1
 8006884:	61f9      	str	r1, [r7, #28]
 8006886:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	09db      	lsrs	r3, r3, #7
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	2b7f      	cmp	r3, #127	@ 0x7f
 8006898:	d8f0      	bhi.n	800687c <SEGGER_SYSVIEW_Warn+0x6c>
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	61fa      	str	r2, [r7, #28]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80068aa:	221a      	movs	r2, #26
 80068ac:	68f9      	ldr	r1, [r7, #12]
 80068ae:	6938      	ldr	r0, [r7, #16]
 80068b0:	f7fe ff2c 	bl	800570c <_SendPacket>
  RECORD_END();
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f383 8811 	msr	BASEPRI, r3
}
 80068ba:	bf00      	nop
 80068bc:	3728      	adds	r7, #40	@ 0x28
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	200046d8 	.word	0x200046d8

080068c8 <siprintf>:
 80068c8:	b40e      	push	{r1, r2, r3}
 80068ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80068ce:	b510      	push	{r4, lr}
 80068d0:	2400      	movs	r4, #0
 80068d2:	b09d      	sub	sp, #116	@ 0x74
 80068d4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80068d6:	9002      	str	r0, [sp, #8]
 80068d8:	9006      	str	r0, [sp, #24]
 80068da:	9107      	str	r1, [sp, #28]
 80068dc:	9104      	str	r1, [sp, #16]
 80068de:	4809      	ldr	r0, [pc, #36]	@ (8006904 <siprintf+0x3c>)
 80068e0:	4909      	ldr	r1, [pc, #36]	@ (8006908 <siprintf+0x40>)
 80068e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068e6:	9105      	str	r1, [sp, #20]
 80068e8:	6800      	ldr	r0, [r0, #0]
 80068ea:	a902      	add	r1, sp, #8
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80068f0:	f000 f9b0 	bl	8006c54 <_svfiprintf_r>
 80068f4:	9b02      	ldr	r3, [sp, #8]
 80068f6:	701c      	strb	r4, [r3, #0]
 80068f8:	b01d      	add	sp, #116	@ 0x74
 80068fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068fe:	b003      	add	sp, #12
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000014 	.word	0x20000014
 8006908:	ffff0208 	.word	0xffff0208

0800690c <memcmp>:
 800690c:	b510      	push	{r4, lr}
 800690e:	3901      	subs	r1, #1
 8006910:	4402      	add	r2, r0
 8006912:	4290      	cmp	r0, r2
 8006914:	d101      	bne.n	800691a <memcmp+0xe>
 8006916:	2000      	movs	r0, #0
 8006918:	e005      	b.n	8006926 <memcmp+0x1a>
 800691a:	7803      	ldrb	r3, [r0, #0]
 800691c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006920:	42a3      	cmp	r3, r4
 8006922:	d001      	beq.n	8006928 <memcmp+0x1c>
 8006924:	1b18      	subs	r0, r3, r4
 8006926:	bd10      	pop	{r4, pc}
 8006928:	3001      	adds	r0, #1
 800692a:	e7f2      	b.n	8006912 <memcmp+0x6>

0800692c <memset>:
 800692c:	4603      	mov	r3, r0
 800692e:	4402      	add	r2, r0
 8006930:	4293      	cmp	r3, r2
 8006932:	d100      	bne.n	8006936 <memset+0xa>
 8006934:	4770      	bx	lr
 8006936:	f803 1b01 	strb.w	r1, [r3], #1
 800693a:	e7f9      	b.n	8006930 <memset+0x4>

0800693c <__errno>:
 800693c:	4b01      	ldr	r3, [pc, #4]	@ (8006944 <__errno+0x8>)
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	20000014 	.word	0x20000014

08006948 <__libc_init_array>:
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	2600      	movs	r6, #0
 800694c:	4d0c      	ldr	r5, [pc, #48]	@ (8006980 <__libc_init_array+0x38>)
 800694e:	4c0d      	ldr	r4, [pc, #52]	@ (8006984 <__libc_init_array+0x3c>)
 8006950:	1b64      	subs	r4, r4, r5
 8006952:	10a4      	asrs	r4, r4, #2
 8006954:	42a6      	cmp	r6, r4
 8006956:	d109      	bne.n	800696c <__libc_init_array+0x24>
 8006958:	f000 fc76 	bl	8007248 <_init>
 800695c:	2600      	movs	r6, #0
 800695e:	4d0a      	ldr	r5, [pc, #40]	@ (8006988 <__libc_init_array+0x40>)
 8006960:	4c0a      	ldr	r4, [pc, #40]	@ (800698c <__libc_init_array+0x44>)
 8006962:	1b64      	subs	r4, r4, r5
 8006964:	10a4      	asrs	r4, r4, #2
 8006966:	42a6      	cmp	r6, r4
 8006968:	d105      	bne.n	8006976 <__libc_init_array+0x2e>
 800696a:	bd70      	pop	{r4, r5, r6, pc}
 800696c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006970:	4798      	blx	r3
 8006972:	3601      	adds	r6, #1
 8006974:	e7ee      	b.n	8006954 <__libc_init_array+0xc>
 8006976:	f855 3b04 	ldr.w	r3, [r5], #4
 800697a:	4798      	blx	r3
 800697c:	3601      	adds	r6, #1
 800697e:	e7f2      	b.n	8006966 <__libc_init_array+0x1e>
 8006980:	0800751c 	.word	0x0800751c
 8006984:	0800751c 	.word	0x0800751c
 8006988:	0800751c 	.word	0x0800751c
 800698c:	08007520 	.word	0x08007520

08006990 <__retarget_lock_acquire_recursive>:
 8006990:	4770      	bx	lr

08006992 <__retarget_lock_release_recursive>:
 8006992:	4770      	bx	lr

08006994 <memcpy>:
 8006994:	440a      	add	r2, r1
 8006996:	4291      	cmp	r1, r2
 8006998:	f100 33ff 	add.w	r3, r0, #4294967295
 800699c:	d100      	bne.n	80069a0 <memcpy+0xc>
 800699e:	4770      	bx	lr
 80069a0:	b510      	push	{r4, lr}
 80069a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069a6:	4291      	cmp	r1, r2
 80069a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069ac:	d1f9      	bne.n	80069a2 <memcpy+0xe>
 80069ae:	bd10      	pop	{r4, pc}

080069b0 <_free_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4605      	mov	r5, r0
 80069b4:	2900      	cmp	r1, #0
 80069b6:	d040      	beq.n	8006a3a <_free_r+0x8a>
 80069b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069bc:	1f0c      	subs	r4, r1, #4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bfb8      	it	lt
 80069c2:	18e4      	addlt	r4, r4, r3
 80069c4:	f000 f8de 	bl	8006b84 <__malloc_lock>
 80069c8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a3c <_free_r+0x8c>)
 80069ca:	6813      	ldr	r3, [r2, #0]
 80069cc:	b933      	cbnz	r3, 80069dc <_free_r+0x2c>
 80069ce:	6063      	str	r3, [r4, #4]
 80069d0:	6014      	str	r4, [r2, #0]
 80069d2:	4628      	mov	r0, r5
 80069d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069d8:	f000 b8da 	b.w	8006b90 <__malloc_unlock>
 80069dc:	42a3      	cmp	r3, r4
 80069de:	d908      	bls.n	80069f2 <_free_r+0x42>
 80069e0:	6820      	ldr	r0, [r4, #0]
 80069e2:	1821      	adds	r1, r4, r0
 80069e4:	428b      	cmp	r3, r1
 80069e6:	bf01      	itttt	eq
 80069e8:	6819      	ldreq	r1, [r3, #0]
 80069ea:	685b      	ldreq	r3, [r3, #4]
 80069ec:	1809      	addeq	r1, r1, r0
 80069ee:	6021      	streq	r1, [r4, #0]
 80069f0:	e7ed      	b.n	80069ce <_free_r+0x1e>
 80069f2:	461a      	mov	r2, r3
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	b10b      	cbz	r3, 80069fc <_free_r+0x4c>
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	d9fa      	bls.n	80069f2 <_free_r+0x42>
 80069fc:	6811      	ldr	r1, [r2, #0]
 80069fe:	1850      	adds	r0, r2, r1
 8006a00:	42a0      	cmp	r0, r4
 8006a02:	d10b      	bne.n	8006a1c <_free_r+0x6c>
 8006a04:	6820      	ldr	r0, [r4, #0]
 8006a06:	4401      	add	r1, r0
 8006a08:	1850      	adds	r0, r2, r1
 8006a0a:	4283      	cmp	r3, r0
 8006a0c:	6011      	str	r1, [r2, #0]
 8006a0e:	d1e0      	bne.n	80069d2 <_free_r+0x22>
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	4408      	add	r0, r1
 8006a16:	6010      	str	r0, [r2, #0]
 8006a18:	6053      	str	r3, [r2, #4]
 8006a1a:	e7da      	b.n	80069d2 <_free_r+0x22>
 8006a1c:	d902      	bls.n	8006a24 <_free_r+0x74>
 8006a1e:	230c      	movs	r3, #12
 8006a20:	602b      	str	r3, [r5, #0]
 8006a22:	e7d6      	b.n	80069d2 <_free_r+0x22>
 8006a24:	6820      	ldr	r0, [r4, #0]
 8006a26:	1821      	adds	r1, r4, r0
 8006a28:	428b      	cmp	r3, r1
 8006a2a:	bf01      	itttt	eq
 8006a2c:	6819      	ldreq	r1, [r3, #0]
 8006a2e:	685b      	ldreq	r3, [r3, #4]
 8006a30:	1809      	addeq	r1, r1, r0
 8006a32:	6021      	streq	r1, [r4, #0]
 8006a34:	6063      	str	r3, [r4, #4]
 8006a36:	6054      	str	r4, [r2, #4]
 8006a38:	e7cb      	b.n	80069d2 <_free_r+0x22>
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	20004900 	.word	0x20004900

08006a40 <sbrk_aligned>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	4e0f      	ldr	r6, [pc, #60]	@ (8006a80 <sbrk_aligned+0x40>)
 8006a44:	460c      	mov	r4, r1
 8006a46:	6831      	ldr	r1, [r6, #0]
 8006a48:	4605      	mov	r5, r0
 8006a4a:	b911      	cbnz	r1, 8006a52 <sbrk_aligned+0x12>
 8006a4c:	f000 fba8 	bl	80071a0 <_sbrk_r>
 8006a50:	6030      	str	r0, [r6, #0]
 8006a52:	4621      	mov	r1, r4
 8006a54:	4628      	mov	r0, r5
 8006a56:	f000 fba3 	bl	80071a0 <_sbrk_r>
 8006a5a:	1c43      	adds	r3, r0, #1
 8006a5c:	d103      	bne.n	8006a66 <sbrk_aligned+0x26>
 8006a5e:	f04f 34ff 	mov.w	r4, #4294967295
 8006a62:	4620      	mov	r0, r4
 8006a64:	bd70      	pop	{r4, r5, r6, pc}
 8006a66:	1cc4      	adds	r4, r0, #3
 8006a68:	f024 0403 	bic.w	r4, r4, #3
 8006a6c:	42a0      	cmp	r0, r4
 8006a6e:	d0f8      	beq.n	8006a62 <sbrk_aligned+0x22>
 8006a70:	1a21      	subs	r1, r4, r0
 8006a72:	4628      	mov	r0, r5
 8006a74:	f000 fb94 	bl	80071a0 <_sbrk_r>
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d1f2      	bne.n	8006a62 <sbrk_aligned+0x22>
 8006a7c:	e7ef      	b.n	8006a5e <sbrk_aligned+0x1e>
 8006a7e:	bf00      	nop
 8006a80:	200048fc 	.word	0x200048fc

08006a84 <_malloc_r>:
 8006a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a88:	1ccd      	adds	r5, r1, #3
 8006a8a:	f025 0503 	bic.w	r5, r5, #3
 8006a8e:	3508      	adds	r5, #8
 8006a90:	2d0c      	cmp	r5, #12
 8006a92:	bf38      	it	cc
 8006a94:	250c      	movcc	r5, #12
 8006a96:	2d00      	cmp	r5, #0
 8006a98:	4606      	mov	r6, r0
 8006a9a:	db01      	blt.n	8006aa0 <_malloc_r+0x1c>
 8006a9c:	42a9      	cmp	r1, r5
 8006a9e:	d904      	bls.n	8006aaa <_malloc_r+0x26>
 8006aa0:	230c      	movs	r3, #12
 8006aa2:	6033      	str	r3, [r6, #0]
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b80 <_malloc_r+0xfc>
 8006aae:	f000 f869 	bl	8006b84 <__malloc_lock>
 8006ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ab6:	461c      	mov	r4, r3
 8006ab8:	bb44      	cbnz	r4, 8006b0c <_malloc_r+0x88>
 8006aba:	4629      	mov	r1, r5
 8006abc:	4630      	mov	r0, r6
 8006abe:	f7ff ffbf 	bl	8006a40 <sbrk_aligned>
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	d158      	bne.n	8006b7a <_malloc_r+0xf6>
 8006ac8:	f8d8 4000 	ldr.w	r4, [r8]
 8006acc:	4627      	mov	r7, r4
 8006ace:	2f00      	cmp	r7, #0
 8006ad0:	d143      	bne.n	8006b5a <_malloc_r+0xd6>
 8006ad2:	2c00      	cmp	r4, #0
 8006ad4:	d04b      	beq.n	8006b6e <_malloc_r+0xea>
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	4639      	mov	r1, r7
 8006ada:	4630      	mov	r0, r6
 8006adc:	eb04 0903 	add.w	r9, r4, r3
 8006ae0:	f000 fb5e 	bl	80071a0 <_sbrk_r>
 8006ae4:	4581      	cmp	r9, r0
 8006ae6:	d142      	bne.n	8006b6e <_malloc_r+0xea>
 8006ae8:	6821      	ldr	r1, [r4, #0]
 8006aea:	4630      	mov	r0, r6
 8006aec:	1a6d      	subs	r5, r5, r1
 8006aee:	4629      	mov	r1, r5
 8006af0:	f7ff ffa6 	bl	8006a40 <sbrk_aligned>
 8006af4:	3001      	adds	r0, #1
 8006af6:	d03a      	beq.n	8006b6e <_malloc_r+0xea>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	442b      	add	r3, r5
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	f8d8 3000 	ldr.w	r3, [r8]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	bb62      	cbnz	r2, 8006b60 <_malloc_r+0xdc>
 8006b06:	f8c8 7000 	str.w	r7, [r8]
 8006b0a:	e00f      	b.n	8006b2c <_malloc_r+0xa8>
 8006b0c:	6822      	ldr	r2, [r4, #0]
 8006b0e:	1b52      	subs	r2, r2, r5
 8006b10:	d420      	bmi.n	8006b54 <_malloc_r+0xd0>
 8006b12:	2a0b      	cmp	r2, #11
 8006b14:	d917      	bls.n	8006b46 <_malloc_r+0xc2>
 8006b16:	1961      	adds	r1, r4, r5
 8006b18:	42a3      	cmp	r3, r4
 8006b1a:	6025      	str	r5, [r4, #0]
 8006b1c:	bf18      	it	ne
 8006b1e:	6059      	strne	r1, [r3, #4]
 8006b20:	6863      	ldr	r3, [r4, #4]
 8006b22:	bf08      	it	eq
 8006b24:	f8c8 1000 	streq.w	r1, [r8]
 8006b28:	5162      	str	r2, [r4, r5]
 8006b2a:	604b      	str	r3, [r1, #4]
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	f000 f82f 	bl	8006b90 <__malloc_unlock>
 8006b32:	f104 000b 	add.w	r0, r4, #11
 8006b36:	1d23      	adds	r3, r4, #4
 8006b38:	f020 0007 	bic.w	r0, r0, #7
 8006b3c:	1ac2      	subs	r2, r0, r3
 8006b3e:	bf1c      	itt	ne
 8006b40:	1a1b      	subne	r3, r3, r0
 8006b42:	50a3      	strne	r3, [r4, r2]
 8006b44:	e7af      	b.n	8006aa6 <_malloc_r+0x22>
 8006b46:	6862      	ldr	r2, [r4, #4]
 8006b48:	42a3      	cmp	r3, r4
 8006b4a:	bf0c      	ite	eq
 8006b4c:	f8c8 2000 	streq.w	r2, [r8]
 8006b50:	605a      	strne	r2, [r3, #4]
 8006b52:	e7eb      	b.n	8006b2c <_malloc_r+0xa8>
 8006b54:	4623      	mov	r3, r4
 8006b56:	6864      	ldr	r4, [r4, #4]
 8006b58:	e7ae      	b.n	8006ab8 <_malloc_r+0x34>
 8006b5a:	463c      	mov	r4, r7
 8006b5c:	687f      	ldr	r7, [r7, #4]
 8006b5e:	e7b6      	b.n	8006ace <_malloc_r+0x4a>
 8006b60:	461a      	mov	r2, r3
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	d1fb      	bne.n	8006b60 <_malloc_r+0xdc>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	6053      	str	r3, [r2, #4]
 8006b6c:	e7de      	b.n	8006b2c <_malloc_r+0xa8>
 8006b6e:	230c      	movs	r3, #12
 8006b70:	4630      	mov	r0, r6
 8006b72:	6033      	str	r3, [r6, #0]
 8006b74:	f000 f80c 	bl	8006b90 <__malloc_unlock>
 8006b78:	e794      	b.n	8006aa4 <_malloc_r+0x20>
 8006b7a:	6005      	str	r5, [r0, #0]
 8006b7c:	e7d6      	b.n	8006b2c <_malloc_r+0xa8>
 8006b7e:	bf00      	nop
 8006b80:	20004900 	.word	0x20004900

08006b84 <__malloc_lock>:
 8006b84:	4801      	ldr	r0, [pc, #4]	@ (8006b8c <__malloc_lock+0x8>)
 8006b86:	f7ff bf03 	b.w	8006990 <__retarget_lock_acquire_recursive>
 8006b8a:	bf00      	nop
 8006b8c:	200048f8 	.word	0x200048f8

08006b90 <__malloc_unlock>:
 8006b90:	4801      	ldr	r0, [pc, #4]	@ (8006b98 <__malloc_unlock+0x8>)
 8006b92:	f7ff befe 	b.w	8006992 <__retarget_lock_release_recursive>
 8006b96:	bf00      	nop
 8006b98:	200048f8 	.word	0x200048f8

08006b9c <__ssputs_r>:
 8006b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba0:	461f      	mov	r7, r3
 8006ba2:	688e      	ldr	r6, [r1, #8]
 8006ba4:	4682      	mov	sl, r0
 8006ba6:	42be      	cmp	r6, r7
 8006ba8:	460c      	mov	r4, r1
 8006baa:	4690      	mov	r8, r2
 8006bac:	680b      	ldr	r3, [r1, #0]
 8006bae:	d82d      	bhi.n	8006c0c <__ssputs_r+0x70>
 8006bb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bb8:	d026      	beq.n	8006c08 <__ssputs_r+0x6c>
 8006bba:	6965      	ldr	r5, [r4, #20]
 8006bbc:	6909      	ldr	r1, [r1, #16]
 8006bbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bc2:	eba3 0901 	sub.w	r9, r3, r1
 8006bc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bca:	1c7b      	adds	r3, r7, #1
 8006bcc:	444b      	add	r3, r9
 8006bce:	106d      	asrs	r5, r5, #1
 8006bd0:	429d      	cmp	r5, r3
 8006bd2:	bf38      	it	cc
 8006bd4:	461d      	movcc	r5, r3
 8006bd6:	0553      	lsls	r3, r2, #21
 8006bd8:	d527      	bpl.n	8006c2a <__ssputs_r+0x8e>
 8006bda:	4629      	mov	r1, r5
 8006bdc:	f7ff ff52 	bl	8006a84 <_malloc_r>
 8006be0:	4606      	mov	r6, r0
 8006be2:	b360      	cbz	r0, 8006c3e <__ssputs_r+0xa2>
 8006be4:	464a      	mov	r2, r9
 8006be6:	6921      	ldr	r1, [r4, #16]
 8006be8:	f7ff fed4 	bl	8006994 <memcpy>
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf6:	81a3      	strh	r3, [r4, #12]
 8006bf8:	6126      	str	r6, [r4, #16]
 8006bfa:	444e      	add	r6, r9
 8006bfc:	6026      	str	r6, [r4, #0]
 8006bfe:	463e      	mov	r6, r7
 8006c00:	6165      	str	r5, [r4, #20]
 8006c02:	eba5 0509 	sub.w	r5, r5, r9
 8006c06:	60a5      	str	r5, [r4, #8]
 8006c08:	42be      	cmp	r6, r7
 8006c0a:	d900      	bls.n	8006c0e <__ssputs_r+0x72>
 8006c0c:	463e      	mov	r6, r7
 8006c0e:	4632      	mov	r2, r6
 8006c10:	4641      	mov	r1, r8
 8006c12:	6820      	ldr	r0, [r4, #0]
 8006c14:	f000 faaa 	bl	800716c <memmove>
 8006c18:	2000      	movs	r0, #0
 8006c1a:	68a3      	ldr	r3, [r4, #8]
 8006c1c:	1b9b      	subs	r3, r3, r6
 8006c1e:	60a3      	str	r3, [r4, #8]
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	4433      	add	r3, r6
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2a:	462a      	mov	r2, r5
 8006c2c:	f000 fad6 	bl	80071dc <_realloc_r>
 8006c30:	4606      	mov	r6, r0
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d1e0      	bne.n	8006bf8 <__ssputs_r+0x5c>
 8006c36:	4650      	mov	r0, sl
 8006c38:	6921      	ldr	r1, [r4, #16]
 8006c3a:	f7ff feb9 	bl	80069b0 <_free_r>
 8006c3e:	230c      	movs	r3, #12
 8006c40:	f8ca 3000 	str.w	r3, [sl]
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	e7e9      	b.n	8006c26 <__ssputs_r+0x8a>
	...

08006c54 <_svfiprintf_r>:
 8006c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c58:	4698      	mov	r8, r3
 8006c5a:	898b      	ldrh	r3, [r1, #12]
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	061b      	lsls	r3, r3, #24
 8006c60:	460d      	mov	r5, r1
 8006c62:	4614      	mov	r4, r2
 8006c64:	b09d      	sub	sp, #116	@ 0x74
 8006c66:	d510      	bpl.n	8006c8a <_svfiprintf_r+0x36>
 8006c68:	690b      	ldr	r3, [r1, #16]
 8006c6a:	b973      	cbnz	r3, 8006c8a <_svfiprintf_r+0x36>
 8006c6c:	2140      	movs	r1, #64	@ 0x40
 8006c6e:	f7ff ff09 	bl	8006a84 <_malloc_r>
 8006c72:	6028      	str	r0, [r5, #0]
 8006c74:	6128      	str	r0, [r5, #16]
 8006c76:	b930      	cbnz	r0, 8006c86 <_svfiprintf_r+0x32>
 8006c78:	230c      	movs	r3, #12
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c80:	b01d      	add	sp, #116	@ 0x74
 8006c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c86:	2340      	movs	r3, #64	@ 0x40
 8006c88:	616b      	str	r3, [r5, #20]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c8e:	2320      	movs	r3, #32
 8006c90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c94:	2330      	movs	r3, #48	@ 0x30
 8006c96:	f04f 0901 	mov.w	r9, #1
 8006c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c9e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006e38 <_svfiprintf_r+0x1e4>
 8006ca2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ca6:	4623      	mov	r3, r4
 8006ca8:	469a      	mov	sl, r3
 8006caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cae:	b10a      	cbz	r2, 8006cb4 <_svfiprintf_r+0x60>
 8006cb0:	2a25      	cmp	r2, #37	@ 0x25
 8006cb2:	d1f9      	bne.n	8006ca8 <_svfiprintf_r+0x54>
 8006cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8006cb8:	d00b      	beq.n	8006cd2 <_svfiprintf_r+0x7e>
 8006cba:	465b      	mov	r3, fp
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	f7ff ff6b 	bl	8006b9c <__ssputs_r>
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	f000 80a7 	beq.w	8006e1a <_svfiprintf_r+0x1c6>
 8006ccc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cce:	445a      	add	r2, fp
 8006cd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 809f 	beq.w	8006e1a <_svfiprintf_r+0x1c6>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ce6:	f10a 0a01 	add.w	sl, sl, #1
 8006cea:	9304      	str	r3, [sp, #16]
 8006cec:	9307      	str	r3, [sp, #28]
 8006cee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cf4:	4654      	mov	r4, sl
 8006cf6:	2205      	movs	r2, #5
 8006cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cfc:	484e      	ldr	r0, [pc, #312]	@ (8006e38 <_svfiprintf_r+0x1e4>)
 8006cfe:	f000 fa5f 	bl	80071c0 <memchr>
 8006d02:	9a04      	ldr	r2, [sp, #16]
 8006d04:	b9d8      	cbnz	r0, 8006d3e <_svfiprintf_r+0xea>
 8006d06:	06d0      	lsls	r0, r2, #27
 8006d08:	bf44      	itt	mi
 8006d0a:	2320      	movmi	r3, #32
 8006d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d10:	0711      	lsls	r1, r2, #28
 8006d12:	bf44      	itt	mi
 8006d14:	232b      	movmi	r3, #43	@ 0x2b
 8006d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d20:	d015      	beq.n	8006d4e <_svfiprintf_r+0xfa>
 8006d22:	4654      	mov	r4, sl
 8006d24:	2000      	movs	r0, #0
 8006d26:	f04f 0c0a 	mov.w	ip, #10
 8006d2a:	9a07      	ldr	r2, [sp, #28]
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d32:	3b30      	subs	r3, #48	@ 0x30
 8006d34:	2b09      	cmp	r3, #9
 8006d36:	d94b      	bls.n	8006dd0 <_svfiprintf_r+0x17c>
 8006d38:	b1b0      	cbz	r0, 8006d68 <_svfiprintf_r+0x114>
 8006d3a:	9207      	str	r2, [sp, #28]
 8006d3c:	e014      	b.n	8006d68 <_svfiprintf_r+0x114>
 8006d3e:	eba0 0308 	sub.w	r3, r0, r8
 8006d42:	fa09 f303 	lsl.w	r3, r9, r3
 8006d46:	4313      	orrs	r3, r2
 8006d48:	46a2      	mov	sl, r4
 8006d4a:	9304      	str	r3, [sp, #16]
 8006d4c:	e7d2      	b.n	8006cf4 <_svfiprintf_r+0xa0>
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	1d19      	adds	r1, r3, #4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	9103      	str	r1, [sp, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	bfbb      	ittet	lt
 8006d5a:	425b      	neglt	r3, r3
 8006d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d60:	9307      	strge	r3, [sp, #28]
 8006d62:	9307      	strlt	r3, [sp, #28]
 8006d64:	bfb8      	it	lt
 8006d66:	9204      	strlt	r2, [sp, #16]
 8006d68:	7823      	ldrb	r3, [r4, #0]
 8006d6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d6c:	d10a      	bne.n	8006d84 <_svfiprintf_r+0x130>
 8006d6e:	7863      	ldrb	r3, [r4, #1]
 8006d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d72:	d132      	bne.n	8006dda <_svfiprintf_r+0x186>
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	3402      	adds	r4, #2
 8006d78:	1d1a      	adds	r2, r3, #4
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	9203      	str	r2, [sp, #12]
 8006d7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d82:	9305      	str	r3, [sp, #20]
 8006d84:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006e3c <_svfiprintf_r+0x1e8>
 8006d88:	2203      	movs	r2, #3
 8006d8a:	4650      	mov	r0, sl
 8006d8c:	7821      	ldrb	r1, [r4, #0]
 8006d8e:	f000 fa17 	bl	80071c0 <memchr>
 8006d92:	b138      	cbz	r0, 8006da4 <_svfiprintf_r+0x150>
 8006d94:	2240      	movs	r2, #64	@ 0x40
 8006d96:	9b04      	ldr	r3, [sp, #16]
 8006d98:	eba0 000a 	sub.w	r0, r0, sl
 8006d9c:	4082      	lsls	r2, r0
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	3401      	adds	r4, #1
 8006da2:	9304      	str	r3, [sp, #16]
 8006da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da8:	2206      	movs	r2, #6
 8006daa:	4825      	ldr	r0, [pc, #148]	@ (8006e40 <_svfiprintf_r+0x1ec>)
 8006dac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006db0:	f000 fa06 	bl	80071c0 <memchr>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	d036      	beq.n	8006e26 <_svfiprintf_r+0x1d2>
 8006db8:	4b22      	ldr	r3, [pc, #136]	@ (8006e44 <_svfiprintf_r+0x1f0>)
 8006dba:	bb1b      	cbnz	r3, 8006e04 <_svfiprintf_r+0x1b0>
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	3307      	adds	r3, #7
 8006dc0:	f023 0307 	bic.w	r3, r3, #7
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	9303      	str	r3, [sp, #12]
 8006dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dca:	4433      	add	r3, r6
 8006dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dce:	e76a      	b.n	8006ca6 <_svfiprintf_r+0x52>
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dd8:	e7a8      	b.n	8006d2c <_svfiprintf_r+0xd8>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f04f 0c0a 	mov.w	ip, #10
 8006de0:	4619      	mov	r1, r3
 8006de2:	3401      	adds	r4, #1
 8006de4:	9305      	str	r3, [sp, #20]
 8006de6:	4620      	mov	r0, r4
 8006de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dec:	3a30      	subs	r2, #48	@ 0x30
 8006dee:	2a09      	cmp	r2, #9
 8006df0:	d903      	bls.n	8006dfa <_svfiprintf_r+0x1a6>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0c6      	beq.n	8006d84 <_svfiprintf_r+0x130>
 8006df6:	9105      	str	r1, [sp, #20]
 8006df8:	e7c4      	b.n	8006d84 <_svfiprintf_r+0x130>
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e02:	e7f0      	b.n	8006de6 <_svfiprintf_r+0x192>
 8006e04:	ab03      	add	r3, sp, #12
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	462a      	mov	r2, r5
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e48 <_svfiprintf_r+0x1f4>)
 8006e0e:	a904      	add	r1, sp, #16
 8006e10:	f3af 8000 	nop.w
 8006e14:	1c42      	adds	r2, r0, #1
 8006e16:	4606      	mov	r6, r0
 8006e18:	d1d6      	bne.n	8006dc8 <_svfiprintf_r+0x174>
 8006e1a:	89ab      	ldrh	r3, [r5, #12]
 8006e1c:	065b      	lsls	r3, r3, #25
 8006e1e:	f53f af2d 	bmi.w	8006c7c <_svfiprintf_r+0x28>
 8006e22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e24:	e72c      	b.n	8006c80 <_svfiprintf_r+0x2c>
 8006e26:	ab03      	add	r3, sp, #12
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	462a      	mov	r2, r5
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <_svfiprintf_r+0x1f4>)
 8006e30:	a904      	add	r1, sp, #16
 8006e32:	f000 f87d 	bl	8006f30 <_printf_i>
 8006e36:	e7ed      	b.n	8006e14 <_svfiprintf_r+0x1c0>
 8006e38:	080074e6 	.word	0x080074e6
 8006e3c:	080074ec 	.word	0x080074ec
 8006e40:	080074f0 	.word	0x080074f0
 8006e44:	00000000 	.word	0x00000000
 8006e48:	08006b9d 	.word	0x08006b9d

08006e4c <_printf_common>:
 8006e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e50:	4616      	mov	r6, r2
 8006e52:	4698      	mov	r8, r3
 8006e54:	688a      	ldr	r2, [r1, #8]
 8006e56:	690b      	ldr	r3, [r1, #16]
 8006e58:	4607      	mov	r7, r0
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	bfb8      	it	lt
 8006e5e:	4613      	movlt	r3, r2
 8006e60:	6033      	str	r3, [r6, #0]
 8006e62:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e66:	460c      	mov	r4, r1
 8006e68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e6c:	b10a      	cbz	r2, 8006e72 <_printf_common+0x26>
 8006e6e:	3301      	adds	r3, #1
 8006e70:	6033      	str	r3, [r6, #0]
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	0699      	lsls	r1, r3, #26
 8006e76:	bf42      	ittt	mi
 8006e78:	6833      	ldrmi	r3, [r6, #0]
 8006e7a:	3302      	addmi	r3, #2
 8006e7c:	6033      	strmi	r3, [r6, #0]
 8006e7e:	6825      	ldr	r5, [r4, #0]
 8006e80:	f015 0506 	ands.w	r5, r5, #6
 8006e84:	d106      	bne.n	8006e94 <_printf_common+0x48>
 8006e86:	f104 0a19 	add.w	sl, r4, #25
 8006e8a:	68e3      	ldr	r3, [r4, #12]
 8006e8c:	6832      	ldr	r2, [r6, #0]
 8006e8e:	1a9b      	subs	r3, r3, r2
 8006e90:	42ab      	cmp	r3, r5
 8006e92:	dc2b      	bgt.n	8006eec <_printf_common+0xa0>
 8006e94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e98:	6822      	ldr	r2, [r4, #0]
 8006e9a:	3b00      	subs	r3, #0
 8006e9c:	bf18      	it	ne
 8006e9e:	2301      	movne	r3, #1
 8006ea0:	0692      	lsls	r2, r2, #26
 8006ea2:	d430      	bmi.n	8006f06 <_printf_common+0xba>
 8006ea4:	4641      	mov	r1, r8
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006eac:	47c8      	blx	r9
 8006eae:	3001      	adds	r0, #1
 8006eb0:	d023      	beq.n	8006efa <_printf_common+0xae>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	6922      	ldr	r2, [r4, #16]
 8006eb6:	f003 0306 	and.w	r3, r3, #6
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	bf14      	ite	ne
 8006ebe:	2500      	movne	r5, #0
 8006ec0:	6833      	ldreq	r3, [r6, #0]
 8006ec2:	f04f 0600 	mov.w	r6, #0
 8006ec6:	bf08      	it	eq
 8006ec8:	68e5      	ldreq	r5, [r4, #12]
 8006eca:	f104 041a 	add.w	r4, r4, #26
 8006ece:	bf08      	it	eq
 8006ed0:	1aed      	subeq	r5, r5, r3
 8006ed2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006ed6:	bf08      	it	eq
 8006ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006edc:	4293      	cmp	r3, r2
 8006ede:	bfc4      	itt	gt
 8006ee0:	1a9b      	subgt	r3, r3, r2
 8006ee2:	18ed      	addgt	r5, r5, r3
 8006ee4:	42b5      	cmp	r5, r6
 8006ee6:	d11a      	bne.n	8006f1e <_printf_common+0xd2>
 8006ee8:	2000      	movs	r0, #0
 8006eea:	e008      	b.n	8006efe <_printf_common+0xb2>
 8006eec:	2301      	movs	r3, #1
 8006eee:	4652      	mov	r2, sl
 8006ef0:	4641      	mov	r1, r8
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	47c8      	blx	r9
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	d103      	bne.n	8006f02 <_printf_common+0xb6>
 8006efa:	f04f 30ff 	mov.w	r0, #4294967295
 8006efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f02:	3501      	adds	r5, #1
 8006f04:	e7c1      	b.n	8006e8a <_printf_common+0x3e>
 8006f06:	2030      	movs	r0, #48	@ 0x30
 8006f08:	18e1      	adds	r1, r4, r3
 8006f0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f14:	4422      	add	r2, r4
 8006f16:	3302      	adds	r3, #2
 8006f18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f1c:	e7c2      	b.n	8006ea4 <_printf_common+0x58>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	4622      	mov	r2, r4
 8006f22:	4641      	mov	r1, r8
 8006f24:	4638      	mov	r0, r7
 8006f26:	47c8      	blx	r9
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d0e6      	beq.n	8006efa <_printf_common+0xae>
 8006f2c:	3601      	adds	r6, #1
 8006f2e:	e7d9      	b.n	8006ee4 <_printf_common+0x98>

08006f30 <_printf_i>:
 8006f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f34:	7e0f      	ldrb	r7, [r1, #24]
 8006f36:	4691      	mov	r9, r2
 8006f38:	2f78      	cmp	r7, #120	@ 0x78
 8006f3a:	4680      	mov	r8, r0
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	469a      	mov	sl, r3
 8006f40:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f46:	d807      	bhi.n	8006f58 <_printf_i+0x28>
 8006f48:	2f62      	cmp	r7, #98	@ 0x62
 8006f4a:	d80a      	bhi.n	8006f62 <_printf_i+0x32>
 8006f4c:	2f00      	cmp	r7, #0
 8006f4e:	f000 80d1 	beq.w	80070f4 <_printf_i+0x1c4>
 8006f52:	2f58      	cmp	r7, #88	@ 0x58
 8006f54:	f000 80b8 	beq.w	80070c8 <_printf_i+0x198>
 8006f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f60:	e03a      	b.n	8006fd8 <_printf_i+0xa8>
 8006f62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f66:	2b15      	cmp	r3, #21
 8006f68:	d8f6      	bhi.n	8006f58 <_printf_i+0x28>
 8006f6a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f70 <_printf_i+0x40>)
 8006f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f70:	08006fc9 	.word	0x08006fc9
 8006f74:	08006fdd 	.word	0x08006fdd
 8006f78:	08006f59 	.word	0x08006f59
 8006f7c:	08006f59 	.word	0x08006f59
 8006f80:	08006f59 	.word	0x08006f59
 8006f84:	08006f59 	.word	0x08006f59
 8006f88:	08006fdd 	.word	0x08006fdd
 8006f8c:	08006f59 	.word	0x08006f59
 8006f90:	08006f59 	.word	0x08006f59
 8006f94:	08006f59 	.word	0x08006f59
 8006f98:	08006f59 	.word	0x08006f59
 8006f9c:	080070db 	.word	0x080070db
 8006fa0:	08007007 	.word	0x08007007
 8006fa4:	08007095 	.word	0x08007095
 8006fa8:	08006f59 	.word	0x08006f59
 8006fac:	08006f59 	.word	0x08006f59
 8006fb0:	080070fd 	.word	0x080070fd
 8006fb4:	08006f59 	.word	0x08006f59
 8006fb8:	08007007 	.word	0x08007007
 8006fbc:	08006f59 	.word	0x08006f59
 8006fc0:	08006f59 	.word	0x08006f59
 8006fc4:	0800709d 	.word	0x0800709d
 8006fc8:	6833      	ldr	r3, [r6, #0]
 8006fca:	1d1a      	adds	r2, r3, #4
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6032      	str	r2, [r6, #0]
 8006fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e09c      	b.n	8007116 <_printf_i+0x1e6>
 8006fdc:	6833      	ldr	r3, [r6, #0]
 8006fde:	6820      	ldr	r0, [r4, #0]
 8006fe0:	1d19      	adds	r1, r3, #4
 8006fe2:	6031      	str	r1, [r6, #0]
 8006fe4:	0606      	lsls	r6, r0, #24
 8006fe6:	d501      	bpl.n	8006fec <_printf_i+0xbc>
 8006fe8:	681d      	ldr	r5, [r3, #0]
 8006fea:	e003      	b.n	8006ff4 <_printf_i+0xc4>
 8006fec:	0645      	lsls	r5, r0, #25
 8006fee:	d5fb      	bpl.n	8006fe8 <_printf_i+0xb8>
 8006ff0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	da03      	bge.n	8007000 <_printf_i+0xd0>
 8006ff8:	232d      	movs	r3, #45	@ 0x2d
 8006ffa:	426d      	negs	r5, r5
 8006ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007000:	230a      	movs	r3, #10
 8007002:	4858      	ldr	r0, [pc, #352]	@ (8007164 <_printf_i+0x234>)
 8007004:	e011      	b.n	800702a <_printf_i+0xfa>
 8007006:	6821      	ldr	r1, [r4, #0]
 8007008:	6833      	ldr	r3, [r6, #0]
 800700a:	0608      	lsls	r0, r1, #24
 800700c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007010:	d402      	bmi.n	8007018 <_printf_i+0xe8>
 8007012:	0649      	lsls	r1, r1, #25
 8007014:	bf48      	it	mi
 8007016:	b2ad      	uxthmi	r5, r5
 8007018:	2f6f      	cmp	r7, #111	@ 0x6f
 800701a:	6033      	str	r3, [r6, #0]
 800701c:	bf14      	ite	ne
 800701e:	230a      	movne	r3, #10
 8007020:	2308      	moveq	r3, #8
 8007022:	4850      	ldr	r0, [pc, #320]	@ (8007164 <_printf_i+0x234>)
 8007024:	2100      	movs	r1, #0
 8007026:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800702a:	6866      	ldr	r6, [r4, #4]
 800702c:	2e00      	cmp	r6, #0
 800702e:	60a6      	str	r6, [r4, #8]
 8007030:	db05      	blt.n	800703e <_printf_i+0x10e>
 8007032:	6821      	ldr	r1, [r4, #0]
 8007034:	432e      	orrs	r6, r5
 8007036:	f021 0104 	bic.w	r1, r1, #4
 800703a:	6021      	str	r1, [r4, #0]
 800703c:	d04b      	beq.n	80070d6 <_printf_i+0x1a6>
 800703e:	4616      	mov	r6, r2
 8007040:	fbb5 f1f3 	udiv	r1, r5, r3
 8007044:	fb03 5711 	mls	r7, r3, r1, r5
 8007048:	5dc7      	ldrb	r7, [r0, r7]
 800704a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800704e:	462f      	mov	r7, r5
 8007050:	42bb      	cmp	r3, r7
 8007052:	460d      	mov	r5, r1
 8007054:	d9f4      	bls.n	8007040 <_printf_i+0x110>
 8007056:	2b08      	cmp	r3, #8
 8007058:	d10b      	bne.n	8007072 <_printf_i+0x142>
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	07df      	lsls	r7, r3, #31
 800705e:	d508      	bpl.n	8007072 <_printf_i+0x142>
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	6861      	ldr	r1, [r4, #4]
 8007064:	4299      	cmp	r1, r3
 8007066:	bfde      	ittt	le
 8007068:	2330      	movle	r3, #48	@ 0x30
 800706a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800706e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007072:	1b92      	subs	r2, r2, r6
 8007074:	6122      	str	r2, [r4, #16]
 8007076:	464b      	mov	r3, r9
 8007078:	4621      	mov	r1, r4
 800707a:	4640      	mov	r0, r8
 800707c:	f8cd a000 	str.w	sl, [sp]
 8007080:	aa03      	add	r2, sp, #12
 8007082:	f7ff fee3 	bl	8006e4c <_printf_common>
 8007086:	3001      	adds	r0, #1
 8007088:	d14a      	bne.n	8007120 <_printf_i+0x1f0>
 800708a:	f04f 30ff 	mov.w	r0, #4294967295
 800708e:	b004      	add	sp, #16
 8007090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	f043 0320 	orr.w	r3, r3, #32
 800709a:	6023      	str	r3, [r4, #0]
 800709c:	2778      	movs	r7, #120	@ 0x78
 800709e:	4832      	ldr	r0, [pc, #200]	@ (8007168 <_printf_i+0x238>)
 80070a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	6831      	ldr	r1, [r6, #0]
 80070a8:	061f      	lsls	r7, r3, #24
 80070aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80070ae:	d402      	bmi.n	80070b6 <_printf_i+0x186>
 80070b0:	065f      	lsls	r7, r3, #25
 80070b2:	bf48      	it	mi
 80070b4:	b2ad      	uxthmi	r5, r5
 80070b6:	6031      	str	r1, [r6, #0]
 80070b8:	07d9      	lsls	r1, r3, #31
 80070ba:	bf44      	itt	mi
 80070bc:	f043 0320 	orrmi.w	r3, r3, #32
 80070c0:	6023      	strmi	r3, [r4, #0]
 80070c2:	b11d      	cbz	r5, 80070cc <_printf_i+0x19c>
 80070c4:	2310      	movs	r3, #16
 80070c6:	e7ad      	b.n	8007024 <_printf_i+0xf4>
 80070c8:	4826      	ldr	r0, [pc, #152]	@ (8007164 <_printf_i+0x234>)
 80070ca:	e7e9      	b.n	80070a0 <_printf_i+0x170>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	f023 0320 	bic.w	r3, r3, #32
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	e7f6      	b.n	80070c4 <_printf_i+0x194>
 80070d6:	4616      	mov	r6, r2
 80070d8:	e7bd      	b.n	8007056 <_printf_i+0x126>
 80070da:	6833      	ldr	r3, [r6, #0]
 80070dc:	6825      	ldr	r5, [r4, #0]
 80070de:	1d18      	adds	r0, r3, #4
 80070e0:	6961      	ldr	r1, [r4, #20]
 80070e2:	6030      	str	r0, [r6, #0]
 80070e4:	062e      	lsls	r6, r5, #24
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	d501      	bpl.n	80070ee <_printf_i+0x1be>
 80070ea:	6019      	str	r1, [r3, #0]
 80070ec:	e002      	b.n	80070f4 <_printf_i+0x1c4>
 80070ee:	0668      	lsls	r0, r5, #25
 80070f0:	d5fb      	bpl.n	80070ea <_printf_i+0x1ba>
 80070f2:	8019      	strh	r1, [r3, #0]
 80070f4:	2300      	movs	r3, #0
 80070f6:	4616      	mov	r6, r2
 80070f8:	6123      	str	r3, [r4, #16]
 80070fa:	e7bc      	b.n	8007076 <_printf_i+0x146>
 80070fc:	6833      	ldr	r3, [r6, #0]
 80070fe:	2100      	movs	r1, #0
 8007100:	1d1a      	adds	r2, r3, #4
 8007102:	6032      	str	r2, [r6, #0]
 8007104:	681e      	ldr	r6, [r3, #0]
 8007106:	6862      	ldr	r2, [r4, #4]
 8007108:	4630      	mov	r0, r6
 800710a:	f000 f859 	bl	80071c0 <memchr>
 800710e:	b108      	cbz	r0, 8007114 <_printf_i+0x1e4>
 8007110:	1b80      	subs	r0, r0, r6
 8007112:	6060      	str	r0, [r4, #4]
 8007114:	6863      	ldr	r3, [r4, #4]
 8007116:	6123      	str	r3, [r4, #16]
 8007118:	2300      	movs	r3, #0
 800711a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800711e:	e7aa      	b.n	8007076 <_printf_i+0x146>
 8007120:	4632      	mov	r2, r6
 8007122:	4649      	mov	r1, r9
 8007124:	4640      	mov	r0, r8
 8007126:	6923      	ldr	r3, [r4, #16]
 8007128:	47d0      	blx	sl
 800712a:	3001      	adds	r0, #1
 800712c:	d0ad      	beq.n	800708a <_printf_i+0x15a>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	079b      	lsls	r3, r3, #30
 8007132:	d413      	bmi.n	800715c <_printf_i+0x22c>
 8007134:	68e0      	ldr	r0, [r4, #12]
 8007136:	9b03      	ldr	r3, [sp, #12]
 8007138:	4298      	cmp	r0, r3
 800713a:	bfb8      	it	lt
 800713c:	4618      	movlt	r0, r3
 800713e:	e7a6      	b.n	800708e <_printf_i+0x15e>
 8007140:	2301      	movs	r3, #1
 8007142:	4632      	mov	r2, r6
 8007144:	4649      	mov	r1, r9
 8007146:	4640      	mov	r0, r8
 8007148:	47d0      	blx	sl
 800714a:	3001      	adds	r0, #1
 800714c:	d09d      	beq.n	800708a <_printf_i+0x15a>
 800714e:	3501      	adds	r5, #1
 8007150:	68e3      	ldr	r3, [r4, #12]
 8007152:	9903      	ldr	r1, [sp, #12]
 8007154:	1a5b      	subs	r3, r3, r1
 8007156:	42ab      	cmp	r3, r5
 8007158:	dcf2      	bgt.n	8007140 <_printf_i+0x210>
 800715a:	e7eb      	b.n	8007134 <_printf_i+0x204>
 800715c:	2500      	movs	r5, #0
 800715e:	f104 0619 	add.w	r6, r4, #25
 8007162:	e7f5      	b.n	8007150 <_printf_i+0x220>
 8007164:	080074f7 	.word	0x080074f7
 8007168:	08007508 	.word	0x08007508

0800716c <memmove>:
 800716c:	4288      	cmp	r0, r1
 800716e:	b510      	push	{r4, lr}
 8007170:	eb01 0402 	add.w	r4, r1, r2
 8007174:	d902      	bls.n	800717c <memmove+0x10>
 8007176:	4284      	cmp	r4, r0
 8007178:	4623      	mov	r3, r4
 800717a:	d807      	bhi.n	800718c <memmove+0x20>
 800717c:	1e43      	subs	r3, r0, #1
 800717e:	42a1      	cmp	r1, r4
 8007180:	d008      	beq.n	8007194 <memmove+0x28>
 8007182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007186:	f803 2f01 	strb.w	r2, [r3, #1]!
 800718a:	e7f8      	b.n	800717e <memmove+0x12>
 800718c:	4601      	mov	r1, r0
 800718e:	4402      	add	r2, r0
 8007190:	428a      	cmp	r2, r1
 8007192:	d100      	bne.n	8007196 <memmove+0x2a>
 8007194:	bd10      	pop	{r4, pc}
 8007196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800719a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800719e:	e7f7      	b.n	8007190 <memmove+0x24>

080071a0 <_sbrk_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	2300      	movs	r3, #0
 80071a4:	4d05      	ldr	r5, [pc, #20]	@ (80071bc <_sbrk_r+0x1c>)
 80071a6:	4604      	mov	r4, r0
 80071a8:	4608      	mov	r0, r1
 80071aa:	602b      	str	r3, [r5, #0]
 80071ac:	f7f9 fc50 	bl	8000a50 <_sbrk>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d102      	bne.n	80071ba <_sbrk_r+0x1a>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	b103      	cbz	r3, 80071ba <_sbrk_r+0x1a>
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	200048f4 	.word	0x200048f4

080071c0 <memchr>:
 80071c0:	4603      	mov	r3, r0
 80071c2:	b510      	push	{r4, lr}
 80071c4:	b2c9      	uxtb	r1, r1
 80071c6:	4402      	add	r2, r0
 80071c8:	4293      	cmp	r3, r2
 80071ca:	4618      	mov	r0, r3
 80071cc:	d101      	bne.n	80071d2 <memchr+0x12>
 80071ce:	2000      	movs	r0, #0
 80071d0:	e003      	b.n	80071da <memchr+0x1a>
 80071d2:	7804      	ldrb	r4, [r0, #0]
 80071d4:	3301      	adds	r3, #1
 80071d6:	428c      	cmp	r4, r1
 80071d8:	d1f6      	bne.n	80071c8 <memchr+0x8>
 80071da:	bd10      	pop	{r4, pc}

080071dc <_realloc_r>:
 80071dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e0:	4607      	mov	r7, r0
 80071e2:	4614      	mov	r4, r2
 80071e4:	460d      	mov	r5, r1
 80071e6:	b921      	cbnz	r1, 80071f2 <_realloc_r+0x16>
 80071e8:	4611      	mov	r1, r2
 80071ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ee:	f7ff bc49 	b.w	8006a84 <_malloc_r>
 80071f2:	b92a      	cbnz	r2, 8007200 <_realloc_r+0x24>
 80071f4:	f7ff fbdc 	bl	80069b0 <_free_r>
 80071f8:	4625      	mov	r5, r4
 80071fa:	4628      	mov	r0, r5
 80071fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007200:	f000 f81a 	bl	8007238 <_malloc_usable_size_r>
 8007204:	4284      	cmp	r4, r0
 8007206:	4606      	mov	r6, r0
 8007208:	d802      	bhi.n	8007210 <_realloc_r+0x34>
 800720a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800720e:	d8f4      	bhi.n	80071fa <_realloc_r+0x1e>
 8007210:	4621      	mov	r1, r4
 8007212:	4638      	mov	r0, r7
 8007214:	f7ff fc36 	bl	8006a84 <_malloc_r>
 8007218:	4680      	mov	r8, r0
 800721a:	b908      	cbnz	r0, 8007220 <_realloc_r+0x44>
 800721c:	4645      	mov	r5, r8
 800721e:	e7ec      	b.n	80071fa <_realloc_r+0x1e>
 8007220:	42b4      	cmp	r4, r6
 8007222:	4622      	mov	r2, r4
 8007224:	4629      	mov	r1, r5
 8007226:	bf28      	it	cs
 8007228:	4632      	movcs	r2, r6
 800722a:	f7ff fbb3 	bl	8006994 <memcpy>
 800722e:	4629      	mov	r1, r5
 8007230:	4638      	mov	r0, r7
 8007232:	f7ff fbbd 	bl	80069b0 <_free_r>
 8007236:	e7f1      	b.n	800721c <_realloc_r+0x40>

08007238 <_malloc_usable_size_r>:
 8007238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800723c:	1f18      	subs	r0, r3, #4
 800723e:	2b00      	cmp	r3, #0
 8007240:	bfbc      	itt	lt
 8007242:	580b      	ldrlt	r3, [r1, r0]
 8007244:	18c0      	addlt	r0, r0, r3
 8007246:	4770      	bx	lr

08007248 <_init>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	bf00      	nop
 800724c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724e:	bc08      	pop	{r3}
 8007250:	469e      	mov	lr, r3
 8007252:	4770      	bx	lr

08007254 <_fini>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	bf00      	nop
 8007258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725a:	bc08      	pop	{r3}
 800725c:	469e      	mov	lr, r3
 800725e:	4770      	bx	lr
