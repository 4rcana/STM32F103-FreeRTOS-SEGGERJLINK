
STM32F103-FreeRTOS-SEGGERJLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080051d0  080051d0  000061d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800537c  0800537c  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800537c  0800537c  00007064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800537c  0800537c  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800537c  0800537c  0000637c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005380  08005380  00006380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005384  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000484c  20000064  080053e8  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200048b0  080053e8  000078b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ecb  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd3  00000000  00000000  00018f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0001bd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8f  00000000  00000000  0001ced0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036ba  00000000  00000000  0001dc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127db  00000000  00000000  00021319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009294d  00000000  00000000  00033af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e70  00000000  00000000  000c6484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000cb2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	080051b8 	.word	0x080051b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	080051b8 	.word	0x080051b8

08000150 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000158:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800015c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000160:	f003 0301 	and.w	r3, r3, #1
 8000164:	2b00      	cmp	r3, #0
 8000166:	d013      	beq.n	8000190 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000168:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800016c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000170:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000174:	2b00      	cmp	r3, #0
 8000176:	d00b      	beq.n	8000190 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	e000      	b.n	800017c <ITM_SendChar+0x2c>
    {
      __NOP();
 800017a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800017c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d0f9      	beq.n	800017a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000186:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	b2d2      	uxtb	r2, r2
 800018e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000190:	687b      	ldr	r3, [r7, #4]
}
 8000192:	4618      	mov	r0, r3
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a0:	f000 fbcc 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a4:	f000 f840 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a8:	f000 f880 	bl	80002ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001ac:	f001 fd3a 	bl	8001c24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001b0:	4a11      	ldr	r2, [pc, #68]	@ (80001f8 <main+0x5c>)
 80001b2:	2100      	movs	r1, #0
 80001b4:	4811      	ldr	r0, [pc, #68]	@ (80001fc <main+0x60>)
 80001b6:	f001 fd7d 	bl	8001cb4 <osThreadNew>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a10      	ldr	r2, [pc, #64]	@ (8000200 <main+0x64>)
 80001be:	6013      	str	r3, [r2, #0]

  /* creation of GreenTask */
  GreenTaskHandle = osThreadNew(GreenLED, NULL, &GreenTask_attributes);
 80001c0:	4a10      	ldr	r2, [pc, #64]	@ (8000204 <main+0x68>)
 80001c2:	2100      	movs	r1, #0
 80001c4:	4810      	ldr	r0, [pc, #64]	@ (8000208 <main+0x6c>)
 80001c6:	f001 fd75 	bl	8001cb4 <osThreadNew>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a0f      	ldr	r2, [pc, #60]	@ (800020c <main+0x70>)
 80001ce:	6013      	str	r3, [r2, #0]

  /* creation of BlueTask */
  BlueTaskHandle = osThreadNew(BlueLED, NULL, &BlueTask_attributes);
 80001d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000210 <main+0x74>)
 80001d2:	2100      	movs	r1, #0
 80001d4:	480f      	ldr	r0, [pc, #60]	@ (8000214 <main+0x78>)
 80001d6:	f001 fd6d 	bl	8001cb4 <osThreadNew>
 80001da:	4603      	mov	r3, r0
 80001dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000218 <main+0x7c>)
 80001de:	6013      	str	r3, [r2, #0]

  /* creation of RedTask */
  RedTaskHandle = osThreadNew(RedLED, NULL, &RedTask_attributes);
 80001e0:	4a0e      	ldr	r2, [pc, #56]	@ (800021c <main+0x80>)
 80001e2:	2100      	movs	r1, #0
 80001e4:	480e      	ldr	r0, [pc, #56]	@ (8000220 <main+0x84>)
 80001e6:	f001 fd65 	bl	8001cb4 <osThreadNew>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000224 <main+0x88>)
 80001ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001f0:	f001 fd3a 	bl	8001c68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f4:	bf00      	nop
 80001f6:	e7fd      	b.n	80001f4 <main+0x58>
 80001f8:	0800528c 	.word	0x0800528c
 80001fc:	080003e1 	.word	0x080003e1
 8000200:	20000080 	.word	0x20000080
 8000204:	080052b0 	.word	0x080052b0
 8000208:	080003f1 	.word	0x080003f1
 800020c:	20000084 	.word	0x20000084
 8000210:	080052d4 	.word	0x080052d4
 8000214:	080004dd 	.word	0x080004dd
 8000218:	20000088 	.word	0x20000088
 800021c:	080052f8 	.word	0x080052f8
 8000220:	08000579 	.word	0x08000579
 8000224:	2000008c 	.word	0x2000008c

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	@ 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	@ 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f004 fb30 	bl	800489c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024a:	2302      	movs	r3, #2
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800025a:	2300      	movs	r3, #0
 800025c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800025e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fe2d 	bl	8000ec8 <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000274:	f000 fa0f 	bl	8000696 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000278:	230f      	movs	r3, #15
 800027a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027c:	2302      	movs	r3, #2
 800027e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f001 f89a 	bl	80013cc <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800029e:	f000 f9fa 	bl	8000696 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	@ 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c0:	4b42      	ldr	r3, [pc, #264]	@ (80003cc <MX_GPIO_Init+0x120>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a41      	ldr	r2, [pc, #260]	@ (80003cc <MX_GPIO_Init+0x120>)
 80002c6:	f043 0310 	orr.w	r3, r3, #16
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b3f      	ldr	r3, [pc, #252]	@ (80003cc <MX_GPIO_Init+0x120>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0310 	and.w	r3, r3, #16
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	4b3c      	ldr	r3, [pc, #240]	@ (80003cc <MX_GPIO_Init+0x120>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a3b      	ldr	r2, [pc, #236]	@ (80003cc <MX_GPIO_Init+0x120>)
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b39      	ldr	r3, [pc, #228]	@ (80003cc <MX_GPIO_Init+0x120>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0304 	and.w	r3, r3, #4
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f0:	4b36      	ldr	r3, [pc, #216]	@ (80003cc <MX_GPIO_Init+0x120>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a35      	ldr	r2, [pc, #212]	@ (80003cc <MX_GPIO_Init+0x120>)
 80002f6:	f043 0308 	orr.w	r3, r3, #8
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b33      	ldr	r3, [pc, #204]	@ (80003cc <MX_GPIO_Init+0x120>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0308 	and.w	r3, r3, #8
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2120      	movs	r1, #32
 800030c:	4830      	ldr	r0, [pc, #192]	@ (80003d0 <MX_GPIO_Init+0x124>)
 800030e:	f000 fdab 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000318:	482e      	ldr	r0, [pc, #184]	@ (80003d4 <MX_GPIO_Init+0x128>)
 800031a:	f000 fda5 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800031e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000324:	4b2c      	ldr	r3, [pc, #176]	@ (80003d8 <MX_GPIO_Init+0x12c>)
 8000326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000328:	2300      	movs	r3, #0
 800032a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800032c:	f107 0310 	add.w	r3, r7, #16
 8000330:	4619      	mov	r1, r3
 8000332:	482a      	ldr	r0, [pc, #168]	@ (80003dc <MX_GPIO_Init+0x130>)
 8000334:	f000 fc14 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000338:	2320      	movs	r3, #32
 800033a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033c:	2301      	movs	r3, #1
 800033e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000344:	2302      	movs	r3, #2
 8000346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000348:	f107 0310 	add.w	r3, r7, #16
 800034c:	4619      	mov	r1, r3
 800034e:	4820      	ldr	r0, [pc, #128]	@ (80003d0 <MX_GPIO_Init+0x124>)
 8000350:	f000 fc06 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : Left_Button_Pin */
  GPIO_InitStruct.Pin = Left_Button_Pin;
 8000354:	2301      	movs	r3, #1
 8000356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000358:	4b1f      	ldr	r3, [pc, #124]	@ (80003d8 <MX_GPIO_Init+0x12c>)
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035c:	2301      	movs	r3, #1
 800035e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Left_Button_GPIO_Port, &GPIO_InitStruct);
 8000360:	f107 0310 	add.w	r3, r7, #16
 8000364:	4619      	mov	r1, r3
 8000366:	481b      	ldr	r0, [pc, #108]	@ (80003d4 <MX_GPIO_Init+0x128>)
 8000368:	f000 fbfa 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin;
 800036c:	23c0      	movs	r3, #192	@ 0xc0
 800036e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000378:	f107 0310 	add.w	r3, r7, #16
 800037c:	4619      	mov	r1, r3
 800037e:	4815      	ldr	r0, [pc, #84]	@ (80003d4 <MX_GPIO_Init+0x128>)
 8000380:	f000 fbee 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000384:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	2302      	movs	r3, #2
 8000394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	4619      	mov	r1, r3
 800039c:	480d      	ldr	r0, [pc, #52]	@ (80003d4 <MX_GPIO_Init+0x128>)
 800039e:	f000 fbdf 	bl	8000b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2105      	movs	r1, #5
 80003a6:	2006      	movs	r0, #6
 80003a8:	f000 fbaf 	bl	8000b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80003ac:	2006      	movs	r0, #6
 80003ae:	f000 fbc8 	bl	8000b42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2105      	movs	r1, #5
 80003b6:	2028      	movs	r0, #40	@ 0x28
 80003b8:	f000 fba7 	bl	8000b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003bc:	2028      	movs	r0, #40	@ 0x28
 80003be:	f000 fbc0 	bl	8000b42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010800 	.word	0x40010800
 80003d4:	40010c00 	.word	0x40010c00
 80003d8:	10210000 	.word	0x10210000
 80003dc:	40011000 	.word	0x40011000

080003e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003e8:	2001      	movs	r0, #1
 80003ea:	f001 fd23 	bl	8001e34 <osDelay>
 80003ee:	e7fb      	b.n	80003e8 <StartDefaultTask+0x8>

080003f0 <GreenLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenLED */
void GreenLED(void *argument)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenLED */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f107 030c 	add.w	r3, r7, #12
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
  uint8_t counter = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
	counter++;
 800040a:	7ffb      	ldrb	r3, [r7, #31]
 800040c:	3301      	adds	r3, #1
 800040e:	77fb      	strb	r3, [r7, #31]

	sprintf(message_buffer,"GreenTask counter = %d\n",counter);
 8000410:	7ffb      	ldrb	r3, [r7, #31]
 8000412:	461a      	mov	r2, r3
 8000414:	4929      	ldr	r1, [pc, #164]	@ (80004bc <GreenLED+0xcc>)
 8000416:	482a      	ldr	r0, [pc, #168]	@ (80004c0 <GreenLED+0xd0>)
 8000418:	f004 fa1e 	bl	8004858 <siprintf>
	ITM_Print(message_buffer);
 800041c:	4828      	ldr	r0, [pc, #160]	@ (80004c0 <GreenLED+0xd0>)
 800041e:	f000 f925 	bl	800066c <ITM_Print>

	if(Left_Button_State == PRESSED){
 8000422:	4b28      	ldr	r3, [pc, #160]	@ (80004c4 <GreenLED+0xd4>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d10b      	bne.n	8000442 <GreenLED+0x52>
		sprintf(message_buffer,"Terminating GreenTask\n");
 800042a:	4927      	ldr	r1, [pc, #156]	@ (80004c8 <GreenLED+0xd8>)
 800042c:	4824      	ldr	r0, [pc, #144]	@ (80004c0 <GreenLED+0xd0>)
 800042e:	f004 fa13 	bl	8004858 <siprintf>
		ITM_Print(message_buffer);
 8000432:	4823      	ldr	r0, [pc, #140]	@ (80004c0 <GreenLED+0xd0>)
 8000434:	f000 f91a 	bl	800066c <ITM_Print>
		osThreadTerminate(GreenTaskHandle);
 8000438:	4b24      	ldr	r3, [pc, #144]	@ (80004cc <GreenLED+0xdc>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4618      	mov	r0, r3
 800043e:	f001 fccc 	bl	8001dda <osThreadTerminate>
	}

	if(counter==5){
 8000442:	7ffb      	ldrb	r3, [r7, #31]
 8000444:	2b05      	cmp	r3, #5
 8000446:	d10b      	bne.n	8000460 <GreenLED+0x70>
		sprintf(message_buffer,"Terminating RedTask\n");
 8000448:	4921      	ldr	r1, [pc, #132]	@ (80004d0 <GreenLED+0xe0>)
 800044a:	481d      	ldr	r0, [pc, #116]	@ (80004c0 <GreenLED+0xd0>)
 800044c:	f004 fa04 	bl	8004858 <siprintf>
		ITM_Print(message_buffer);
 8000450:	481b      	ldr	r0, [pc, #108]	@ (80004c0 <GreenLED+0xd0>)
 8000452:	f000 f90b 	bl	800066c <ITM_Print>
		osThreadTerminate(RedTaskHandle);
 8000456:	4b1f      	ldr	r3, [pc, #124]	@ (80004d4 <GreenLED+0xe4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f001 fcbd 	bl	8001dda <osThreadTerminate>
	}

	GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin;
 8000460:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000464:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	2301      	movs	r3, #1
 8000468:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	2302      	movs	r3, #2
 8000470:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	4619      	mov	r1, r3
 8000478:	4817      	ldr	r0, [pc, #92]	@ (80004d8 <GreenLED+0xe8>)
 800047a:	f000 fb71 	bl	8000b60 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED4_Pin|LED2_Pin;
 800047e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000482:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000484:	2300      	movs	r3, #0
 8000486:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048c:	2302      	movs	r3, #2
 800048e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	4619      	mov	r1, r3
 8000496:	4810      	ldr	r0, [pc, #64]	@ (80004d8 <GreenLED+0xe8>)
 8000498:	f000 fb62 	bl	8000b60 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2180      	movs	r1, #128	@ 0x80
 80004a0:	480d      	ldr	r0, [pc, #52]	@ (80004d8 <GreenLED+0xe8>)
 80004a2:	f000 fce1 	bl	8000e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004ac:	480a      	ldr	r0, [pc, #40]	@ (80004d8 <GreenLED+0xe8>)
 80004ae:	f000 fcdb 	bl	8000e68 <HAL_GPIO_WritePin>

    osDelay(1000);
 80004b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004b6:	f001 fcbd 	bl	8001e34 <osDelay>
	counter++;
 80004ba:	e7a6      	b.n	800040a <GreenLED+0x1a>
 80004bc:	080051fc 	.word	0x080051fc
 80004c0:	20000090 	.word	0x20000090
 80004c4:	20000000 	.word	0x20000000
 80004c8:	08005214 	.word	0x08005214
 80004cc:	20000084 	.word	0x20000084
 80004d0:	0800522c 	.word	0x0800522c
 80004d4:	2000008c 	.word	0x2000008c
 80004d8:	40010c00 	.word	0x40010c00

080004dc <BlueLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BlueLED */
void BlueLED(void *argument)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlueLED */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
  uint8_t counter=0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
	counter++;
 80004f6:	7ffb      	ldrb	r3, [r7, #31]
 80004f8:	3301      	adds	r3, #1
 80004fa:	77fb      	strb	r3, [r7, #31]

	sprintf(message_buffer,"BlueTask counter = %d\n",counter);
 80004fc:	7ffb      	ldrb	r3, [r7, #31]
 80004fe:	461a      	mov	r2, r3
 8000500:	491a      	ldr	r1, [pc, #104]	@ (800056c <BlueLED+0x90>)
 8000502:	481b      	ldr	r0, [pc, #108]	@ (8000570 <BlueLED+0x94>)
 8000504:	f004 f9a8 	bl	8004858 <siprintf>
	ITM_Print(message_buffer);
 8000508:	4819      	ldr	r0, [pc, #100]	@ (8000570 <BlueLED+0x94>)
 800050a:	f000 f8af 	bl	800066c <ITM_Print>


	GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 800050e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000512:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000514:	2301      	movs	r3, #1
 8000516:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051c:	2302      	movs	r3, #2
 800051e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4619      	mov	r1, r3
 8000526:	4813      	ldr	r0, [pc, #76]	@ (8000574 <BlueLED+0x98>)
 8000528:	f000 fb1a 	bl	8000b60 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin;
 800052c:	23c0      	movs	r3, #192	@ 0xc0
 800052e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000530:	2300      	movs	r3, #0
 8000532:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2302      	movs	r3, #2
 800053a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	4619      	mov	r1, r3
 8000542:	480c      	ldr	r0, [pc, #48]	@ (8000574 <BlueLED+0x98>)
 8000544:	f000 fb0c 	bl	8000b60 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800054e:	4809      	ldr	r0, [pc, #36]	@ (8000574 <BlueLED+0x98>)
 8000550:	f000 fc8a 	bl	8000e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800055a:	4806      	ldr	r0, [pc, #24]	@ (8000574 <BlueLED+0x98>)
 800055c:	f000 fc84 	bl	8000e68 <HAL_GPIO_WritePin>

    osDelay(2001);
 8000560:	f240 70d1 	movw	r0, #2001	@ 0x7d1
 8000564:	f001 fc66 	bl	8001e34 <osDelay>
	counter++;
 8000568:	bf00      	nop
 800056a:	e7c4      	b.n	80004f6 <BlueLED+0x1a>
 800056c:	08005244 	.word	0x08005244
 8000570:	20000090 	.word	0x20000090
 8000574:	40010c00 	.word	0x40010c00

08000578 <RedLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedLED */
void RedLED(void *argument)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedLED */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
  uint8_t counter=0;
 800058e:	2300      	movs	r3, #0
 8000590:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
	counter++;
 8000592:	7ffb      	ldrb	r3, [r7, #31]
 8000594:	3301      	adds	r3, #1
 8000596:	77fb      	strb	r3, [r7, #31]

	sprintf(message_buffer,"RedTask counter = %d\n",counter);
 8000598:	7ffb      	ldrb	r3, [r7, #31]
 800059a:	461a      	mov	r2, r3
 800059c:	491a      	ldr	r1, [pc, #104]	@ (8000608 <RedLED+0x90>)
 800059e:	481b      	ldr	r0, [pc, #108]	@ (800060c <RedLED+0x94>)
 80005a0:	f004 f95a 	bl	8004858 <siprintf>
	ITM_Print(message_buffer);
 80005a4:	4819      	ldr	r0, [pc, #100]	@ (800060c <RedLED+0x94>)
 80005a6:	f000 f861 	bl	800066c <ITM_Print>

	GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin;
 80005aa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80005ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2302      	movs	r3, #2
 80005ba:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	4813      	ldr	r0, [pc, #76]	@ (8000610 <RedLED+0x98>)
 80005c4:	f000 facc 	bl	8000b60 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80005c8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80005cc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2302      	movs	r3, #2
 80005d8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	4619      	mov	r1, r3
 80005e0:	480b      	ldr	r0, [pc, #44]	@ (8000610 <RedLED+0x98>)
 80005e2:	f000 fabd 	bl	8000b60 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2140      	movs	r1, #64	@ 0x40
 80005ea:	4809      	ldr	r0, [pc, #36]	@ (8000610 <RedLED+0x98>)
 80005ec:	f000 fc3c 	bl	8000e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005f6:	4806      	ldr	r0, [pc, #24]	@ (8000610 <RedLED+0x98>)
 80005f8:	f000 fc36 	bl	8000e68 <HAL_GPIO_WritePin>

    osDelay(3002);
 80005fc:	f640 30ba 	movw	r0, #3002	@ 0xbba
 8000600:	f001 fc18 	bl	8001e34 <osDelay>
	counter++;
 8000604:	bf00      	nop
 8000606:	e7c4      	b.n	8000592 <RedLED+0x1a>
 8000608:	0800525c 	.word	0x0800525c
 800060c:	20000090 	.word	0x20000090
 8000610:	40010c00 	.word	0x40010c00

08000614 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d101      	bne.n	800062a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000626:	f000 f99f 	bl	8000968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40000800 	.word	0x40000800

08000638 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);

	if(GPIO_Pin == Left_Button_Pin){
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d10a      	bne.n	800065e <HAL_GPIO_EXTI_Callback+0x26>
		if(Left_Button_State == WAIT){
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <HAL_GPIO_EXTI_Callback+0x30>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d103      	bne.n	8000658 <HAL_GPIO_EXTI_Callback+0x20>
			Left_Button_State = PRESSED;
 8000650:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <HAL_GPIO_EXTI_Callback+0x30>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
		}
		else{
			Left_Button_State = WAIT;
		}
	}
}
 8000656:	e002      	b.n	800065e <HAL_GPIO_EXTI_Callback+0x26>
			Left_Button_State = WAIT;
 8000658:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <HAL_GPIO_EXTI_Callback+0x30>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	20000000 	.word	0x20000000

0800066c <ITM_Print>:


void ITM_Print(const char *message_buffer) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    while (*message_buffer) {
 8000674:	e006      	b.n	8000684 <ITM_Print+0x18>
        ITM_SendChar(*message_buffer++);  // Send each character
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fd66 	bl	8000150 <ITM_SendChar>
    while (*message_buffer) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f4      	bne.n	8000676 <ITM_Print+0xa>
    }
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069a:	b672      	cpsid	i
}
 800069c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069e:	bf00      	nop
 80006a0:	e7fd      	b.n	800069e <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006aa:	4b18      	ldr	r3, [pc, #96]	@ (800070c <HAL_MspInit+0x68>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a17      	ldr	r2, [pc, #92]	@ (800070c <HAL_MspInit+0x68>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b15      	ldr	r3, [pc, #84]	@ (800070c <HAL_MspInit+0x68>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <HAL_MspInit+0x68>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a11      	ldr	r2, [pc, #68]	@ (800070c <HAL_MspInit+0x68>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <HAL_MspInit+0x68>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	210f      	movs	r1, #15
 80006de:	f06f 0001 	mvn.w	r0, #1
 80006e2:	f000 fa12 	bl	8000b0a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <HAL_MspInit+0x6c>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	4a04      	ldr	r2, [pc, #16]	@ (8000710 <HAL_MspInit+0x6c>)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000
 8000710:	40010000 	.word	0x40010000

08000714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08e      	sub	sp, #56	@ 0x38
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800071c:	2300      	movs	r3, #0
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000724:	2300      	movs	r3, #0
 8000726:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800072a:	4b34      	ldr	r3, [pc, #208]	@ (80007fc <HAL_InitTick+0xe8>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	4a33      	ldr	r2, [pc, #204]	@ (80007fc <HAL_InitTick+0xe8>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	61d3      	str	r3, [r2, #28]
 8000736:	4b31      	ldr	r3, [pc, #196]	@ (80007fc <HAL_InitTick+0xe8>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000742:	f107 0210 	add.w	r2, r7, #16
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f000 ff99 	bl	8001684 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000752:	6a3b      	ldr	r3, [r7, #32]
 8000754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000758:	2b00      	cmp	r3, #0
 800075a:	d103      	bne.n	8000764 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800075c:	f000 ff7e 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 8000760:	6378      	str	r0, [r7, #52]	@ 0x34
 8000762:	e004      	b.n	800076e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000764:	f000 ff7a 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 8000768:	4603      	mov	r3, r0
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800076e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000770:	4a23      	ldr	r2, [pc, #140]	@ (8000800 <HAL_InitTick+0xec>)
 8000772:	fba2 2303 	umull	r2, r3, r2, r3
 8000776:	0c9b      	lsrs	r3, r3, #18
 8000778:	3b01      	subs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800077c:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <HAL_InitTick+0xf0>)
 800077e:	4a22      	ldr	r2, [pc, #136]	@ (8000808 <HAL_InitTick+0xf4>)
 8000780:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000782:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <HAL_InitTick+0xf0>)
 8000784:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000788:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <HAL_InitTick+0xf0>)
 800078c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800078e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000790:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <HAL_InitTick+0xf0>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000796:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <HAL_InitTick+0xf0>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079c:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <HAL_InitTick+0xf0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80007a2:	4818      	ldr	r0, [pc, #96]	@ (8000804 <HAL_InitTick+0xf0>)
 80007a4:	f000 ffbc 	bl	8001720 <HAL_TIM_Base_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80007ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d11b      	bne.n	80007ee <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80007b6:	4813      	ldr	r0, [pc, #76]	@ (8000804 <HAL_InitTick+0xf0>)
 80007b8:	f001 f80a 	bl	80017d0 <HAL_TIM_Base_Start_IT>
 80007bc:	4603      	mov	r3, r0
 80007be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80007c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d111      	bne.n	80007ee <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007ca:	201e      	movs	r0, #30
 80007cc:	f000 f9b9 	bl	8000b42 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b0f      	cmp	r3, #15
 80007d4:	d808      	bhi.n	80007e8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80007d6:	2200      	movs	r2, #0
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	201e      	movs	r0, #30
 80007dc:	f000 f995 	bl	8000b0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e0:	4a0a      	ldr	r2, [pc, #40]	@ (800080c <HAL_InitTick+0xf8>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6013      	str	r3, [r2, #0]
 80007e6:	e002      	b.n	80007ee <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80007e8:	2301      	movs	r3, #1
 80007ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3738      	adds	r7, #56	@ 0x38
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	431bde83 	.word	0x431bde83
 8000804:	200000b8 	.word	0x200000b8
 8000808:	40000800 	.word	0x40000800
 800080c:	20000008 	.word	0x20000008

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <NMI_Handler+0x4>

08000818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <MemManage_Handler+0x4>

08000828 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <UsageFault_Handler+0x4>

08000838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_Button_Pin);
 8000848:	2001      	movs	r0, #1
 800084a:	f000 fb25 	bl	8000e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000858:	4802      	ldr	r0, [pc, #8]	@ (8000864 <TIM4_IRQHandler+0x10>)
 800085a:	f001 f80b 	bl	8001874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000b8 	.word	0x200000b8

08000868 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800086c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000870:	f000 fb12 	bl	8000e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000880:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d207      	bcs.n	80008b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a8:	f004 f800 	bl	80048ac <__errno>
 80008ac:	4603      	mov	r3, r0
 80008ae:	220c      	movs	r2, #12
 80008b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	e009      	b.n	80008cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008be:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <_sbrk+0x64>)
 80008c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20005000 	.word	0x20005000
 80008d8:	00000400 	.word	0x00000400
 80008dc:	20000100 	.word	0x20000100
 80008e0:	200048b0 	.word	0x200048b0

080008e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f0:	f7ff fff8 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480b      	ldr	r0, [pc, #44]	@ (8000924 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008f6:	490c      	ldr	r1, [pc, #48]	@ (8000928 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008f8:	4a0c      	ldr	r2, [pc, #48]	@ (800092c <LoopFillZerobss+0x16>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a09      	ldr	r2, [pc, #36]	@ (8000930 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800090c:	4c09      	ldr	r4, [pc, #36]	@ (8000934 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091a:	f003 ffcd 	bl	80048b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff fc3d 	bl	800019c <main>
  bx lr
 8000922:	4770      	bx	lr
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800092c:	08005384 	.word	0x08005384
  ldr r2, =_sbss
 8000930:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000934:	200048b0 	.word	0x200048b0

08000938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_2_IRQHandler>
	...

0800093c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <HAL_Init+0x28>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <HAL_Init+0x28>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f8d1 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	200f      	movs	r0, #15
 8000954:	f7ff fede 	bl	8000714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff fea4 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <HAL_IncTick+0x1c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <HAL_IncTick+0x20>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a03      	ldr	r2, [pc, #12]	@ (8000988 <HAL_IncTick+0x20>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	2000000c 	.word	0x2000000c
 8000988:	20000104 	.word	0x20000104

0800098c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return uwTick;
 8000990:	4b02      	ldr	r3, [pc, #8]	@ (800099c <HAL_GetTick+0x10>)
 8000992:	681b      	ldr	r3, [r3, #0]
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	20000104 	.word	0x20000104

080009a0 <__NVIC_SetPriorityGrouping>:
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d2:	4a04      	ldr	r2, [pc, #16]	@ (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	60d3      	str	r3, [r2, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_GetPriorityGrouping>:
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ec:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <__NVIC_GetPriorityGrouping+0x18>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	f003 0307 	and.w	r3, r3, #7
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_EnableIRQ>:
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	db0b      	blt.n	8000a2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 021f 	and.w	r2, r3, #31
 8000a1c:	4906      	ldr	r1, [pc, #24]	@ (8000a38 <__NVIC_EnableIRQ+0x34>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	095b      	lsrs	r3, r3, #5
 8000a24:	2001      	movs	r0, #1
 8000a26:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <__NVIC_SetPriority>:
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db0a      	blt.n	8000a66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	490c      	ldr	r1, [pc, #48]	@ (8000a88 <__NVIC_SetPriority+0x4c>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	440b      	add	r3, r1
 8000a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000a64:	e00a      	b.n	8000a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4908      	ldr	r1, [pc, #32]	@ (8000a8c <__NVIC_SetPriority+0x50>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	3b04      	subs	r3, #4
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	440b      	add	r3, r1
 8000a7a:	761a      	strb	r2, [r3, #24]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <NVIC_EncodePriority>:
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	@ 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	f1c3 0307 	rsb	r3, r3, #7
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	bf28      	it	cs
 8000aae:	2304      	movcs	r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d902      	bls.n	8000ac0 <NVIC_EncodePriority+0x30>
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3b03      	subs	r3, #3
 8000abe:	e000      	b.n	8000ac2 <NVIC_EncodePriority+0x32>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43d9      	mvns	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	4313      	orrs	r3, r2
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3724      	adds	r7, #36	@ 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ff4f 	bl	80009a0 <__NVIC_SetPriorityGrouping>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
 8000b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b1c:	f7ff ff64 	bl	80009e8 <__NVIC_GetPriorityGrouping>
 8000b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	6978      	ldr	r0, [r7, #20]
 8000b28:	f7ff ffb2 	bl	8000a90 <NVIC_EncodePriority>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff81 	bl	8000a3c <__NVIC_SetPriority>
}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff57 	bl	8000a04 <__NVIC_EnableIRQ>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b08b      	sub	sp, #44	@ 0x2c
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b72:	e169      	b.n	8000e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b74:	2201      	movs	r2, #1
 8000b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	69fa      	ldr	r2, [r7, #28]
 8000b84:	4013      	ands	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f040 8158 	bne.w	8000e42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	4a9a      	ldr	r2, [pc, #616]	@ (8000e00 <HAL_GPIO_Init+0x2a0>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d05e      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000b9c:	4a98      	ldr	r2, [pc, #608]	@ (8000e00 <HAL_GPIO_Init+0x2a0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d875      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000ba2:	4a98      	ldr	r2, [pc, #608]	@ (8000e04 <HAL_GPIO_Init+0x2a4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d058      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000ba8:	4a96      	ldr	r2, [pc, #600]	@ (8000e04 <HAL_GPIO_Init+0x2a4>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d86f      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bae:	4a96      	ldr	r2, [pc, #600]	@ (8000e08 <HAL_GPIO_Init+0x2a8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d052      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000bb4:	4a94      	ldr	r2, [pc, #592]	@ (8000e08 <HAL_GPIO_Init+0x2a8>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d869      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bba:	4a94      	ldr	r2, [pc, #592]	@ (8000e0c <HAL_GPIO_Init+0x2ac>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d04c      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000bc0:	4a92      	ldr	r2, [pc, #584]	@ (8000e0c <HAL_GPIO_Init+0x2ac>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d863      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bc6:	4a92      	ldr	r2, [pc, #584]	@ (8000e10 <HAL_GPIO_Init+0x2b0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d046      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000bcc:	4a90      	ldr	r2, [pc, #576]	@ (8000e10 <HAL_GPIO_Init+0x2b0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d85d      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bd2:	2b12      	cmp	r3, #18
 8000bd4:	d82a      	bhi.n	8000c2c <HAL_GPIO_Init+0xcc>
 8000bd6:	2b12      	cmp	r3, #18
 8000bd8:	d859      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bda:	a201      	add	r2, pc, #4	@ (adr r2, 8000be0 <HAL_GPIO_Init+0x80>)
 8000bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be0:	08000c5b 	.word	0x08000c5b
 8000be4:	08000c35 	.word	0x08000c35
 8000be8:	08000c47 	.word	0x08000c47
 8000bec:	08000c89 	.word	0x08000c89
 8000bf0:	08000c8f 	.word	0x08000c8f
 8000bf4:	08000c8f 	.word	0x08000c8f
 8000bf8:	08000c8f 	.word	0x08000c8f
 8000bfc:	08000c8f 	.word	0x08000c8f
 8000c00:	08000c8f 	.word	0x08000c8f
 8000c04:	08000c8f 	.word	0x08000c8f
 8000c08:	08000c8f 	.word	0x08000c8f
 8000c0c:	08000c8f 	.word	0x08000c8f
 8000c10:	08000c8f 	.word	0x08000c8f
 8000c14:	08000c8f 	.word	0x08000c8f
 8000c18:	08000c8f 	.word	0x08000c8f
 8000c1c:	08000c8f 	.word	0x08000c8f
 8000c20:	08000c8f 	.word	0x08000c8f
 8000c24:	08000c3d 	.word	0x08000c3d
 8000c28:	08000c51 	.word	0x08000c51
 8000c2c:	4a79      	ldr	r2, [pc, #484]	@ (8000e14 <HAL_GPIO_Init+0x2b4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d013      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c32:	e02c      	b.n	8000c8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	623b      	str	r3, [r7, #32]
          break;
 8000c3a:	e029      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	3304      	adds	r3, #4
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	e024      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	3308      	adds	r3, #8
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e01f      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	330c      	adds	r3, #12
 8000c56:	623b      	str	r3, [r7, #32]
          break;
 8000c58:	e01a      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d102      	bne.n	8000c68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c62:	2304      	movs	r3, #4
 8000c64:	623b      	str	r3, [r7, #32]
          break;
 8000c66:	e013      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d105      	bne.n	8000c7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c70:	2308      	movs	r3, #8
 8000c72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	611a      	str	r2, [r3, #16]
          break;
 8000c7a:	e009      	b.n	8000c90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69fa      	ldr	r2, [r7, #28]
 8000c84:	615a      	str	r2, [r3, #20]
          break;
 8000c86:	e003      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
          break;
 8000c8c:	e000      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          break;
 8000c8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2bff      	cmp	r3, #255	@ 0xff
 8000c94:	d801      	bhi.n	8000c9a <HAL_GPIO_Init+0x13a>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	e001      	b.n	8000c9e <HAL_GPIO_Init+0x13e>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2bff      	cmp	r3, #255	@ 0xff
 8000ca4:	d802      	bhi.n	8000cac <HAL_GPIO_Init+0x14c>
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	e002      	b.n	8000cb2 <HAL_GPIO_Init+0x152>
 8000cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cae:	3b08      	subs	r3, #8
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	210f      	movs	r1, #15
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	6a39      	ldr	r1, [r7, #32]
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a4c      	ldr	r2, [pc, #304]	@ (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b4a      	ldr	r3, [pc, #296]	@ (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cf8:	4a48      	ldr	r2, [pc, #288]	@ (8000e1c <HAL_GPIO_Init+0x2bc>)
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3302      	adds	r3, #2
 8000d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a40      	ldr	r2, [pc, #256]	@ (8000e20 <HAL_GPIO_Init+0x2c0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d013      	beq.n	8000d4c <HAL_GPIO_Init+0x1ec>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a3f      	ldr	r2, [pc, #252]	@ (8000e24 <HAL_GPIO_Init+0x2c4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d00d      	beq.n	8000d48 <HAL_GPIO_Init+0x1e8>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e28 <HAL_GPIO_Init+0x2c8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d007      	beq.n	8000d44 <HAL_GPIO_Init+0x1e4>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a3d      	ldr	r2, [pc, #244]	@ (8000e2c <HAL_GPIO_Init+0x2cc>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d101      	bne.n	8000d40 <HAL_GPIO_Init+0x1e0>
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e006      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d40:	2304      	movs	r3, #4
 8000d42:	e004      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d44:	2302      	movs	r3, #2
 8000d46:	e002      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e000      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d50:	f002 0203 	and.w	r2, r2, #3
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	4093      	lsls	r3, r2
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d5e:	492f      	ldr	r1, [pc, #188]	@ (8000e1c <HAL_GPIO_Init+0x2bc>)
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d006      	beq.n	8000d86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d78:	4b2d      	ldr	r3, [pc, #180]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	492c      	ldr	r1, [pc, #176]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	608b      	str	r3, [r1, #8]
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d86:	4b2a      	ldr	r3, [pc, #168]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4928      	ldr	r1, [pc, #160]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da0:	4b23      	ldr	r3, [pc, #140]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	4922      	ldr	r1, [pc, #136]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	60cb      	str	r3, [r1, #12]
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dae:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	491e      	ldr	r1, [pc, #120]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dc8:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	4918      	ldr	r1, [pc, #96]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	4914      	ldr	r1, [pc, #80]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d021      	beq.n	8000e34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	490e      	ldr	r1, [pc, #56]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	600b      	str	r3, [r1, #0]
 8000dfc:	e021      	b.n	8000e42 <HAL_GPIO_Init+0x2e2>
 8000dfe:	bf00      	nop
 8000e00:	10320000 	.word	0x10320000
 8000e04:	10310000 	.word	0x10310000
 8000e08:	10220000 	.word	0x10220000
 8000e0c:	10210000 	.word	0x10210000
 8000e10:	10120000 	.word	0x10120000
 8000e14:	10110000 	.word	0x10110000
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010000 	.word	0x40010000
 8000e20:	40010800 	.word	0x40010800
 8000e24:	40010c00 	.word	0x40010c00
 8000e28:	40011000 	.word	0x40011000
 8000e2c:	40011400 	.word	0x40011400
 8000e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e34:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_GPIO_Init+0x304>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	4909      	ldr	r1, [pc, #36]	@ (8000e64 <HAL_GPIO_Init+0x304>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e44:	3301      	adds	r3, #1
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f47f ae8e 	bne.w	8000b74 <HAL_GPIO_Init+0x14>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	372c      	adds	r7, #44	@ 0x2c
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
 8000e74:	4613      	mov	r3, r2
 8000e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e78:	787b      	ldrb	r3, [r7, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e84:	e003      	b.n	8000e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	041a      	lsls	r2, r3, #16
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	611a      	str	r2, [r3, #16]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d006      	beq.n	8000ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000eae:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fbbe 	bl	8000638 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40010400 	.word	0x40010400

08000ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e272      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8087 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee8:	4b92      	ldr	r3, [pc, #584]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d00c      	beq.n	8000f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 030c 	and.w	r3, r3, #12
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d112      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
 8000f00:	4b8c      	ldr	r3, [pc, #560]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f0c:	d10b      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0e:	4b89      	ldr	r3, [pc, #548]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d06c      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x12c>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d168      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e24c      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_OscConfig+0x76>
 8000f30:	4b80      	ldr	r3, [pc, #512]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a7f      	ldr	r2, [pc, #508]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	e02e      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x98>
 8000f46:	4b7b      	ldr	r3, [pc, #492]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a7a      	ldr	r2, [pc, #488]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b78      	ldr	r3, [pc, #480]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a77      	ldr	r2, [pc, #476]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e01d      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0xbc>
 8000f6a:	4b72      	ldr	r3, [pc, #456]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a71      	ldr	r2, [pc, #452]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b6f      	ldr	r3, [pc, #444]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a6e      	ldr	r2, [pc, #440]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e00b      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f84:	4b6b      	ldr	r3, [pc, #428]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a6a      	ldr	r2, [pc, #424]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b68      	ldr	r3, [pc, #416]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a67      	ldr	r2, [pc, #412]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d013      	beq.n	8000fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fcf2 	bl	800098c <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fcee 	bl	800098c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	@ 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e200      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f0      	beq.n	8000fac <HAL_RCC_OscConfig+0xe4>
 8000fca:	e014      	b.n	8000ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fcde 	bl	800098c <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd4:	f7ff fcda 	bl	800098c <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b64      	cmp	r3, #100	@ 0x64
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e1ec      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	4b53      	ldr	r3, [pc, #332]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x10c>
 8000ff2:	e000      	b.n	8000ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d063      	beq.n	80010ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001002:	4b4c      	ldr	r3, [pc, #304]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800100e:	4b49      	ldr	r3, [pc, #292]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b08      	cmp	r3, #8
 8001018:	d11c      	bne.n	8001054 <HAL_RCC_OscConfig+0x18c>
 800101a:	4b46      	ldr	r3, [pc, #280]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d116      	bne.n	8001054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001026:	4b43      	ldr	r3, [pc, #268]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <HAL_RCC_OscConfig+0x176>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d001      	beq.n	800103e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e1c0      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103e:	4b3d      	ldr	r3, [pc, #244]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4939      	ldr	r1, [pc, #228]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 800104e:	4313      	orrs	r3, r2
 8001050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	e03a      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d020      	beq.n	800109e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800105c:	4b36      	ldr	r3, [pc, #216]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001062:	f7ff fc93 	bl	800098c <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106a:	f7ff fc8f 	bl	800098c <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e1a1      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107c:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001088:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4927      	ldr	r1, [pc, #156]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001098:	4313      	orrs	r3, r2
 800109a:	600b      	str	r3, [r1, #0]
 800109c:	e015      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800109e:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc72 	bl	800098c <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ac:	f7ff fc6e 	bl	800098c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e180      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010be:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d03a      	beq.n	800114c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d019      	beq.n	8001112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010de:	4b17      	ldr	r3, [pc, #92]	@ (800113c <HAL_RCC_OscConfig+0x274>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e4:	f7ff fc52 	bl	800098c <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ec:	f7ff fc4e 	bl	800098c <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e160      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f000 faea 	bl	80016e4 <RCC_Delay>
 8001110:	e01c      	b.n	800114c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <HAL_RCC_OscConfig+0x274>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001118:	f7ff fc38 	bl	800098c <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111e:	e00f      	b.n	8001140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff fc34 	bl	800098c <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d908      	bls.n	8001140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e146      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	42420000 	.word	0x42420000
 800113c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001140:	4b92      	ldr	r3, [pc, #584]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e9      	bne.n	8001120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80a6 	beq.w	80012a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115e:	4b8b      	ldr	r3, [pc, #556]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10d      	bne.n	8001186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b88      	ldr	r3, [pc, #544]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a87      	ldr	r2, [pc, #540]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b85      	ldr	r3, [pc, #532]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001182:	2301      	movs	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001186:	4b82      	ldr	r3, [pc, #520]	@ (8001390 <HAL_RCC_OscConfig+0x4c8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800118e:	2b00      	cmp	r3, #0
 8001190:	d118      	bne.n	80011c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001192:	4b7f      	ldr	r3, [pc, #508]	@ (8001390 <HAL_RCC_OscConfig+0x4c8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a7e      	ldr	r2, [pc, #504]	@ (8001390 <HAL_RCC_OscConfig+0x4c8>)
 8001198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800119c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800119e:	f7ff fbf5 	bl	800098c <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a6:	f7ff fbf1 	bl	800098c <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b64      	cmp	r3, #100	@ 0x64
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e103      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b8:	4b75      	ldr	r3, [pc, #468]	@ (8001390 <HAL_RCC_OscConfig+0x4c8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x312>
 80011cc:	4b6f      	ldr	r3, [pc, #444]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4a6e      	ldr	r2, [pc, #440]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6213      	str	r3, [r2, #32]
 80011d8:	e02d      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x334>
 80011e2:	4b6a      	ldr	r3, [pc, #424]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a69      	ldr	r2, [pc, #420]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	4b67      	ldr	r3, [pc, #412]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a66      	ldr	r2, [pc, #408]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 0304 	bic.w	r3, r3, #4
 80011f8:	6213      	str	r3, [r2, #32]
 80011fa:	e01c      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d10c      	bne.n	800121e <HAL_RCC_OscConfig+0x356>
 8001204:	4b61      	ldr	r3, [pc, #388]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4a60      	ldr	r2, [pc, #384]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6213      	str	r3, [r2, #32]
 8001210:	4b5e      	ldr	r3, [pc, #376]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4a5d      	ldr	r2, [pc, #372]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6213      	str	r3, [r2, #32]
 800121c:	e00b      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 800121e:	4b5b      	ldr	r3, [pc, #364]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a5a      	ldr	r2, [pc, #360]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	4b58      	ldr	r3, [pc, #352]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a57      	ldr	r2, [pc, #348]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001230:	f023 0304 	bic.w	r3, r3, #4
 8001234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d015      	beq.n	800126a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff fba5 	bl	800098c <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001244:	e00a      	b.n	800125c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff fba1 	bl	800098c <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e0b1      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125c:	4b4b      	ldr	r3, [pc, #300]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0ee      	beq.n	8001246 <HAL_RCC_OscConfig+0x37e>
 8001268:	e014      	b.n	8001294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fb8f 	bl	800098c <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff fb8b 	bl	800098c <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e09b      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001288:	4b40      	ldr	r3, [pc, #256]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1ee      	bne.n	8001272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d105      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129a:	4b3c      	ldr	r3, [pc, #240]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a3b      	ldr	r2, [pc, #236]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8087 	beq.w	80013be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b0:	4b36      	ldr	r3, [pc, #216]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d061      	beq.n	8001380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d146      	bne.n	8001352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c4:	4b33      	ldr	r3, [pc, #204]	@ (8001394 <HAL_RCC_OscConfig+0x4cc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fb5f 	bl	800098c <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff fb5b 	bl	800098c <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e06d      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e4:	4b29      	ldr	r3, [pc, #164]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f8:	d108      	bne.n	800130c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012fa:	4b24      	ldr	r3, [pc, #144]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4921      	ldr	r1, [pc, #132]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a19      	ldr	r1, [r3, #32]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131c:	430b      	orrs	r3, r1
 800131e:	491b      	ldr	r1, [pc, #108]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001324:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <HAL_RCC_OscConfig+0x4cc>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fb2f 	bl	800098c <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001332:	f7ff fb2b 	bl	800098c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e03d      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x46a>
 8001350:	e035      	b.n	80013be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_RCC_OscConfig+0x4cc>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fb18 	bl	800098c <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fb14 	bl	800098c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e026      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x498>
 800137e:	e01e      	b.n	80013be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d107      	bne.n	8001398 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e019      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
 800138c:	40021000 	.word	0x40021000
 8001390:	40007000 	.word	0x40007000
 8001394:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001398:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <HAL_RCC_OscConfig+0x500>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0d0      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e0:	4b6a      	ldr	r3, [pc, #424]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d910      	bls.n	8001410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b67      	ldr	r3, [pc, #412]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 0207 	bic.w	r2, r3, #7
 80013f6:	4965      	ldr	r1, [pc, #404]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b63      	ldr	r3, [pc, #396]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b8      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	4b59      	ldr	r3, [pc, #356]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a58      	ldr	r2, [pc, #352]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001432:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001440:	4b53      	ldr	r3, [pc, #332]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4a52      	ldr	r2, [pc, #328]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800144a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b50      	ldr	r3, [pc, #320]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	494d      	ldr	r1, [pc, #308]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	4313      	orrs	r3, r2
 800145c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d040      	beq.n	80014ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b47      	ldr	r3, [pc, #284]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d115      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148a:	4b41      	ldr	r3, [pc, #260]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e073      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	4b3d      	ldr	r3, [pc, #244]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e06b      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014aa:	4b39      	ldr	r3, [pc, #228]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f023 0203 	bic.w	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4936      	ldr	r1, [pc, #216]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014bc:	f7ff fa66 	bl	800098c <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	e00a      	b.n	80014da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c4:	f7ff fa62 	bl	800098c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e053      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 020c 	and.w	r2, r3, #12
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d1eb      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014ec:	4b27      	ldr	r3, [pc, #156]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d210      	bcs.n	800151c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b24      	ldr	r3, [pc, #144]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 0207 	bic.w	r2, r3, #7
 8001502:	4922      	ldr	r1, [pc, #136]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b20      	ldr	r3, [pc, #128]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e032      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4916      	ldr	r1, [pc, #88]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	490e      	ldr	r1, [pc, #56]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800155a:	f000 f821 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	490a      	ldr	r1, [pc, #40]	@ (8001594 <HAL_RCC_ClockConfig+0x1c8>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <HAL_RCC_ClockConfig+0x1cc>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_RCC_ClockConfig+0x1d0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f8ca 	bl	8000714 <HAL_InitTick>

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000
 8001590:	40021000 	.word	0x40021000
 8001594:	0800531c 	.word	0x0800531c
 8001598:	20000004 	.word	0x20000004
 800159c:	20000008 	.word	0x20000008

080015a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x94>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d002      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x30>
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d003      	beq.n	80015d6 <HAL_RCC_GetSysClockFreq+0x36>
 80015ce:	e027      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x98>)
 80015d2:	613b      	str	r3, [r7, #16]
      break;
 80015d4:	e027      	b.n	8001626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	0c9b      	lsrs	r3, r3, #18
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	4a17      	ldr	r2, [pc, #92]	@ (800163c <HAL_RCC_GetSysClockFreq+0x9c>)
 80015e0:	5cd3      	ldrb	r3, [r2, r3]
 80015e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d010      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x94>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	0c5b      	lsrs	r3, r3, #17
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	4a11      	ldr	r2, [pc, #68]	@ (8001640 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x98>)
 8001602:	fb03 f202 	mul.w	r2, r3, r2
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	fbb2 f3f3 	udiv	r3, r2, r3
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e004      	b.n	800161a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a0c      	ldr	r2, [pc, #48]	@ (8001644 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	613b      	str	r3, [r7, #16]
      break;
 800161e:	e002      	b.n	8001626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x98>)
 8001622:	613b      	str	r3, [r7, #16]
      break;
 8001624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001626:	693b      	ldr	r3, [r7, #16]
}
 8001628:	4618      	mov	r0, r3
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	007a1200 	.word	0x007a1200
 800163c:	08005334 	.word	0x08005334
 8001640:	08005344 	.word	0x08005344
 8001644:	003d0900 	.word	0x003d0900

08001648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800164c:	4b02      	ldr	r3, [pc, #8]	@ (8001658 <HAL_RCC_GetHCLKFreq+0x10>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001660:	f7ff fff2 	bl	8001648 <HAL_RCC_GetHCLKFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	4903      	ldr	r1, [pc, #12]	@ (8001680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001672:	5ccb      	ldrb	r3, [r1, r3]
 8001674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001678:	4618      	mov	r0, r3
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	0800532c 	.word	0x0800532c

08001684 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	220f      	movs	r2, #15
 8001692:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_RCC_GetClockConfig+0x58>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0203 	and.w	r2, r3, #3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016a0:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <HAL_RCC_GetClockConfig+0x58>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <HAL_RCC_GetClockConfig+0x58>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_RCC_GetClockConfig+0x58>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_RCC_GetClockConfig+0x5c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0207 	and.w	r2, r3, #7
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40022000 	.word	0x40022000

080016e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <RCC_Delay+0x34>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <RCC_Delay+0x38>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0a5b      	lsrs	r3, r3, #9
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	fb02 f303 	mul.w	r3, r2, r3
 80016fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001700:	bf00      	nop
  }
  while (Delay --);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1e5a      	subs	r2, r3, #1
 8001706:	60fa      	str	r2, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f9      	bne.n	8001700 <RCC_Delay+0x1c>
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	20000004 	.word	0x20000004
 800171c:	10624dd3 	.word	0x10624dd3

08001720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e041      	b.n	80017b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d106      	bne.n	800174c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f839 	bl	80017be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2202      	movs	r2, #2
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3304      	adds	r3, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4610      	mov	r0, r2
 8001760:	f000 f99c 	bl	8001a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d001      	beq.n	80017e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e03a      	b.n	800185e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a18      	ldr	r2, [pc, #96]	@ (8001868 <HAL_TIM_Base_Start_IT+0x98>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00e      	beq.n	8001828 <HAL_TIM_Base_Start_IT+0x58>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001812:	d009      	beq.n	8001828 <HAL_TIM_Base_Start_IT+0x58>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a14      	ldr	r2, [pc, #80]	@ (800186c <HAL_TIM_Base_Start_IT+0x9c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d004      	beq.n	8001828 <HAL_TIM_Base_Start_IT+0x58>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a13      	ldr	r2, [pc, #76]	@ (8001870 <HAL_TIM_Base_Start_IT+0xa0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d111      	bne.n	800184c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b06      	cmp	r3, #6
 8001838:	d010      	beq.n	800185c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0201 	orr.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800184a:	e007      	b.n	800185c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40012c00 	.word	0x40012c00
 800186c:	40000400 	.word	0x40000400
 8001870:	40000800 	.word	0x40000800

08001874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d020      	beq.n	80018d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01b      	beq.n	80018d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f06f 0202 	mvn.w	r2, #2
 80018a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f8d1 	bl	8001a66 <HAL_TIM_IC_CaptureCallback>
 80018c4:	e005      	b.n	80018d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f8c4 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f8d3 	bl	8001a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d020      	beq.n	8001924 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d01b      	beq.n	8001924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0204 	mvn.w	r2, #4
 80018f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2202      	movs	r2, #2
 80018fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f8ab 	bl	8001a66 <HAL_TIM_IC_CaptureCallback>
 8001910:	e005      	b.n	800191e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f89e 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f8ad 	bl	8001a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d020      	beq.n	8001970 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01b      	beq.n	8001970 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f06f 0208 	mvn.w	r2, #8
 8001940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2204      	movs	r2, #4
 8001946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f885 	bl	8001a66 <HAL_TIM_IC_CaptureCallback>
 800195c:	e005      	b.n	800196a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f878 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f887 	bl	8001a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	d020      	beq.n	80019bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01b      	beq.n	80019bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f06f 0210 	mvn.w	r2, #16
 800198c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2208      	movs	r2, #8
 8001992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f85f 	bl	8001a66 <HAL_TIM_IC_CaptureCallback>
 80019a8:	e005      	b.n	80019b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f852 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f861 	bl	8001a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00c      	beq.n	80019e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d007      	beq.n	80019e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f06f 0201 	mvn.w	r2, #1
 80019d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7fe fe1a 	bl	8000614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00c      	beq.n	8001a04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d007      	beq.n	8001a04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80019fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f8c3 	bl	8001b8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00c      	beq.n	8001a28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d007      	beq.n	8001a28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f831 	bl	8001a8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f003 0320 	and.w	r3, r3, #32
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00c      	beq.n	8001a4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d007      	beq.n	8001a4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f06f 0220 	mvn.w	r2, #32
 8001a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f896 	bl	8001b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a2f      	ldr	r2, [pc, #188]	@ (8001b6c <TIM_Base_SetConfig+0xd0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00b      	beq.n	8001acc <TIM_Base_SetConfig+0x30>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aba:	d007      	beq.n	8001acc <TIM_Base_SetConfig+0x30>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a2c      	ldr	r2, [pc, #176]	@ (8001b70 <TIM_Base_SetConfig+0xd4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d003      	beq.n	8001acc <TIM_Base_SetConfig+0x30>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a2b      	ldr	r2, [pc, #172]	@ (8001b74 <TIM_Base_SetConfig+0xd8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d108      	bne.n	8001ade <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a22      	ldr	r2, [pc, #136]	@ (8001b6c <TIM_Base_SetConfig+0xd0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00b      	beq.n	8001afe <TIM_Base_SetConfig+0x62>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aec:	d007      	beq.n	8001afe <TIM_Base_SetConfig+0x62>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b70 <TIM_Base_SetConfig+0xd4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d003      	beq.n	8001afe <TIM_Base_SetConfig+0x62>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b74 <TIM_Base_SetConfig+0xd8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d108      	bne.n	8001b10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <TIM_Base_SetConfig+0xd0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d103      	bne.n	8001b44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f023 0201 	bic.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]
  }
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	40012c00 	.word	0x40012c00
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40000800 	.word	0x40000800

08001b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <__NVIC_SetPriority>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	@ (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	@ (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <SysTick_Handler+0x1c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001bf8:	f001 fe18 	bl	800382c <xTaskGetSchedulerState>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d001      	beq.n	8001c06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001c02:	f002 fbb9 	bl	8004378 <xPortSysTickHandler>
  }
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001c14:	2100      	movs	r1, #0
 8001c16:	f06f 0004 	mvn.w	r0, #4
 8001c1a:	f7ff ffbf 	bl	8001b9c <__NVIC_SetPriority>
#endif
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c2a:	f3ef 8305 	mrs	r3, IPSR
 8001c2e:	603b      	str	r3, [r7, #0]
  return(result);
 8001c30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001c36:	f06f 0305 	mvn.w	r3, #5
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	e00c      	b.n	8001c58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <osKernelInitialize+0x40>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d105      	bne.n	8001c52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001c46:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <osKernelInitialize+0x40>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	e002      	b.n	8001c58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001c58:	687b      	ldr	r3, [r7, #4]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	20000108 	.word	0x20000108

08001c68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c6e:	f3ef 8305 	mrs	r3, IPSR
 8001c72:	603b      	str	r3, [r7, #0]
  return(result);
 8001c74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001c7a:	f06f 0305 	mvn.w	r3, #5
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	e010      	b.n	8001ca4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001c82:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <osKernelStart+0x48>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d109      	bne.n	8001c9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001c8a:	f7ff ffc1 	bl	8001c10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <osKernelStart+0x48>)
 8001c90:	2202      	movs	r2, #2
 8001c92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001c94:	f001 f97e 	bl	8002f94 <vTaskStartScheduler>
      stat = osOK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	e002      	b.n	8001ca4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ca4:	687b      	ldr	r3, [r7, #4]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000108 	.word	0x20000108

08001cb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08e      	sub	sp, #56	@ 0x38
 8001cb8:	af04      	add	r7, sp, #16
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cc4:	f3ef 8305 	mrs	r3, IPSR
 8001cc8:	617b      	str	r3, [r7, #20]
  return(result);
 8001cca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d17f      	bne.n	8001dd0 <osThreadNew+0x11c>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d07c      	beq.n	8001dd0 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8001cd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cda:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001cdc:	2318      	movs	r3, #24
 8001cde:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d045      	beq.n	8001d7c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <osThreadNew+0x4a>
        name = attr->name;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d008      	beq.n	8001d24 <osThreadNew+0x70>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	2b38      	cmp	r3, #56	@ 0x38
 8001d16:	d805      	bhi.n	8001d24 <osThreadNew+0x70>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <osThreadNew+0x74>
        return (NULL);
 8001d24:	2300      	movs	r3, #0
 8001d26:	e054      	b.n	8001dd2 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00e      	beq.n	8001d5e <osThreadNew+0xaa>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b5b      	cmp	r3, #91	@ 0x5b
 8001d46:	d90a      	bls.n	8001d5e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <osThreadNew+0xaa>
        mem = 1;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	e010      	b.n	8001d80 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10c      	bne.n	8001d80 <osThreadNew+0xcc>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d108      	bne.n	8001d80 <osThreadNew+0xcc>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d104      	bne.n	8001d80 <osThreadNew+0xcc>
          mem = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	e001      	b.n	8001d80 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d110      	bne.n	8001da8 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d8e:	9202      	str	r2, [sp, #8]
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	6a3a      	ldr	r2, [r7, #32]
 8001d9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 fe41 	bl	8002a24 <xTaskCreateStatic>
 8001da2:	4603      	mov	r3, r0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	e013      	b.n	8001dd0 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d110      	bne.n	8001dd0 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fe8f 	bl	8002ae4 <xTaskCreate>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d001      	beq.n	8001dd0 <osThreadNew+0x11c>
            hTask = NULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001dd0:	693b      	ldr	r3, [r7, #16]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3728      	adds	r7, #40	@ 0x28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001de6:	f3ef 8305 	mrs	r3, IPSR
 8001dea:	60bb      	str	r3, [r7, #8]
  return(result);
 8001dec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <osThreadTerminate+0x20>
    stat = osErrorISR;
 8001df2:	f06f 0305 	mvn.w	r3, #5
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e017      	b.n	8001e2a <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d103      	bne.n	8001e08 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8001e00:	f06f 0303 	mvn.w	r3, #3
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e010      	b.n	8001e2a <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8001e08:	6938      	ldr	r0, [r7, #16]
 8001e0a:	f001 f85b 	bl	8002ec4 <eTaskGetState>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d005      	beq.n	8001e24 <osThreadTerminate+0x4a>
      stat = osOK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8001e1c:	6938      	ldr	r0, [r7, #16]
 8001e1e:	f000 ffa7 	bl	8002d70 <vTaskDelete>
 8001e22:	e002      	b.n	8001e2a <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8001e24:	f06f 0302 	mvn.w	r3, #2
 8001e28:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8001e2a:	697b      	ldr	r3, [r7, #20]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e3c:	f3ef 8305 	mrs	r3, IPSR
 8001e40:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <osDelay+0x1c>
    stat = osErrorISR;
 8001e48:	f06f 0305 	mvn.w	r3, #5
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e007      	b.n	8001e60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fffc 	bl	8002e58 <vTaskDelay>
    }
  }

  return (stat);
 8001e60:	68fb      	ldr	r3, [r7, #12]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a07      	ldr	r2, [pc, #28]	@ (8001e98 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4a06      	ldr	r2, [pc, #24]	@ (8001e9c <vApplicationGetIdleTaskMemory+0x30>)
 8001e82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	2000010c 	.word	0x2000010c
 8001e9c:	20000168 	.word	0x20000168

08001ea0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4a07      	ldr	r2, [pc, #28]	@ (8001ecc <vApplicationGetTimerTaskMemory+0x2c>)
 8001eb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4a06      	ldr	r2, [pc, #24]	@ (8001ed0 <vApplicationGetTimerTaskMemory+0x30>)
 8001eb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ebe:	601a      	str	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000968 	.word	0x20000968
 8001ed0:	200009c4 	.word	0x200009c4

08001ed4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f103 0208 	add.w	r2, r3, #8
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f103 0208 	add.w	r2, r3, #8
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f103 0208 	add.w	r2, r3, #8
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr

08001f12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b085      	sub	sp, #20
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	601a      	str	r2, [r3, #0]
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f86:	d103      	bne.n	8001f90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	e00c      	b.n	8001faa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3308      	adds	r3, #8
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	e002      	b.n	8001f9e <vListInsert+0x2e>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d2f6      	bcs.n	8001f98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	601a      	str	r2, [r3, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6892      	ldr	r2, [r2, #8]
 8001ff6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6852      	ldr	r2, [r2, #4]
 8002000:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	d103      	bne.n	8002014 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	1e5a      	subs	r2, r3, #1
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
	...

08002034 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800204c:	f383 8811 	msr	BASEPRI, r3
 8002050:	f3bf 8f6f 	isb	sy
 8002054:	f3bf 8f4f 	dsb	sy
 8002058:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800205a:	bf00      	nop
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002060:	f002 f90c 	bl	800427c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206c:	68f9      	ldr	r1, [r7, #12]
 800206e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	441a      	add	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002090:	3b01      	subs	r3, #1
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	441a      	add	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	22ff      	movs	r2, #255	@ 0xff
 80020a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	22ff      	movs	r2, #255	@ 0xff
 80020ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d114      	bne.n	80020e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d01a      	beq.n	80020f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3310      	adds	r3, #16
 80020c2:	4618      	mov	r0, r3
 80020c4:	f001 f9f2 	bl	80034ac <xTaskRemoveFromEventList>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d012      	beq.n	80020f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80020ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002104 <xQueueGenericReset+0xd0>)
 80020d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	f3bf 8f4f 	dsb	sy
 80020da:	f3bf 8f6f 	isb	sy
 80020de:	e009      	b.n	80020f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3310      	adds	r3, #16
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fef5 	bl	8001ed4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3324      	adds	r3, #36	@ 0x24
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fef0 	bl	8001ed4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80020f4:	f002 f8f2 	bl	80042dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80020f8:	2301      	movs	r3, #1
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	e000ed04 	.word	0xe000ed04

08002108 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08e      	sub	sp, #56	@ 0x38
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10b      	bne.n	8002134 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800211c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002120:	f383 8811 	msr	BASEPRI, r3
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	f3bf 8f4f 	dsb	sy
 800212c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800212e:	bf00      	nop
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10b      	bne.n	8002152 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800213a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800213e:	f383 8811 	msr	BASEPRI, r3
 8002142:	f3bf 8f6f 	isb	sy
 8002146:	f3bf 8f4f 	dsb	sy
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	e7fd      	b.n	800214e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <xQueueGenericCreateStatic+0x56>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <xQueueGenericCreateStatic+0x5a>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <xQueueGenericCreateStatic+0x5c>
 8002162:	2300      	movs	r3, #0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10b      	bne.n	8002180 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800216c:	f383 8811 	msr	BASEPRI, r3
 8002170:	f3bf 8f6f 	isb	sy
 8002174:	f3bf 8f4f 	dsb	sy
 8002178:	623b      	str	r3, [r7, #32]
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <xQueueGenericCreateStatic+0x84>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <xQueueGenericCreateStatic+0x88>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <xQueueGenericCreateStatic+0x8a>
 8002190:	2300      	movs	r3, #0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10b      	bne.n	80021ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800219a:	f383 8811 	msr	BASEPRI, r3
 800219e:	f3bf 8f6f 	isb	sy
 80021a2:	f3bf 8f4f 	dsb	sy
 80021a6:	61fb      	str	r3, [r7, #28]
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	e7fd      	b.n	80021aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80021ae:	2350      	movs	r3, #80	@ 0x50
 80021b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b50      	cmp	r3, #80	@ 0x50
 80021b6:	d00b      	beq.n	80021d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80021b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	61bb      	str	r3, [r7, #24]
}
 80021ca:	bf00      	nop
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80021d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80021d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00d      	beq.n	80021f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80021dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80021e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 f805 	bl	8002202 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80021f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3730      	adds	r7, #48	@ 0x30
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e002      	b.n	8002224 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002230:	2101      	movs	r1, #1
 8002232:	69b8      	ldr	r0, [r7, #24]
 8002234:	f7ff fefe 	bl	8002034 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08e      	sub	sp, #56	@ 0x38
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002256:	2300      	movs	r3, #0
 8002258:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800225e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10b      	bne.n	800227c <xQueueGenericSend+0x34>
	__asm volatile
 8002264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002268:	f383 8811 	msr	BASEPRI, r3
 800226c:	f3bf 8f6f 	isb	sy
 8002270:	f3bf 8f4f 	dsb	sy
 8002274:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002276:	bf00      	nop
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <xQueueGenericSend+0x42>
 8002282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <xQueueGenericSend+0x46>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <xQueueGenericSend+0x48>
 800228e:	2300      	movs	r3, #0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <xQueueGenericSend+0x64>
	__asm volatile
 8002294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002298:	f383 8811 	msr	BASEPRI, r3
 800229c:	f3bf 8f6f 	isb	sy
 80022a0:	f3bf 8f4f 	dsb	sy
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d103      	bne.n	80022ba <xQueueGenericSend+0x72>
 80022b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <xQueueGenericSend+0x76>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <xQueueGenericSend+0x78>
 80022be:	2300      	movs	r3, #0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <xQueueGenericSend+0x94>
	__asm volatile
 80022c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c8:	f383 8811 	msr	BASEPRI, r3
 80022cc:	f3bf 8f6f 	isb	sy
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	623b      	str	r3, [r7, #32]
}
 80022d6:	bf00      	nop
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022dc:	f001 faa6 	bl	800382c <xTaskGetSchedulerState>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d102      	bne.n	80022ec <xQueueGenericSend+0xa4>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <xQueueGenericSend+0xa8>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <xQueueGenericSend+0xaa>
 80022f0:	2300      	movs	r3, #0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10b      	bne.n	800230e <xQueueGenericSend+0xc6>
	__asm volatile
 80022f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022fa:	f383 8811 	msr	BASEPRI, r3
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	f3bf 8f4f 	dsb	sy
 8002306:	61fb      	str	r3, [r7, #28]
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	e7fd      	b.n	800230a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800230e:	f001 ffb5 	bl	800427c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231a:	429a      	cmp	r2, r3
 800231c:	d302      	bcc.n	8002324 <xQueueGenericSend+0xdc>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d129      	bne.n	8002378 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800232a:	f000 fa0f 	bl	800274c <prvCopyDataToQueue>
 800232e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	2b00      	cmp	r3, #0
 8002336:	d010      	beq.n	800235a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233a:	3324      	adds	r3, #36	@ 0x24
 800233c:	4618      	mov	r0, r3
 800233e:	f001 f8b5 	bl	80034ac <xTaskRemoveFromEventList>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002348:	4b3f      	ldr	r3, [pc, #252]	@ (8002448 <xQueueGenericSend+0x200>)
 800234a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	e00a      	b.n	8002370 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800235a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002360:	4b39      	ldr	r3, [pc, #228]	@ (8002448 <xQueueGenericSend+0x200>)
 8002362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002370:	f001 ffb4 	bl	80042dc <vPortExitCritical>
				return pdPASS;
 8002374:	2301      	movs	r3, #1
 8002376:	e063      	b.n	8002440 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800237e:	f001 ffad 	bl	80042dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002382:	2300      	movs	r3, #0
 8002384:	e05c      	b.n	8002440 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002388:	2b00      	cmp	r3, #0
 800238a:	d106      	bne.n	800239a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4618      	mov	r0, r3
 8002392:	f001 f8ef 	bl	8003574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002396:	2301      	movs	r3, #1
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800239a:	f001 ff9f 	bl	80042dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800239e:	f000 fe61 	bl	8003064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023a2:	f001 ff6b 	bl	800427c <vPortEnterCritical>
 80023a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b2:	d103      	bne.n	80023bc <xQueueGenericSend+0x174>
 80023b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023c2:	b25b      	sxtb	r3, r3
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d103      	bne.n	80023d2 <xQueueGenericSend+0x18a>
 80023ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023d2:	f001 ff83 	bl	80042dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023d6:	1d3a      	adds	r2, r7, #4
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f001 f8de 	bl	80035a0 <xTaskCheckForTimeOut>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d124      	bne.n	8002434 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80023ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023ec:	f000 faa6 	bl	800293c <prvIsQueueFull>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d018      	beq.n	8002428 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80023f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f8:	3310      	adds	r3, #16
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 f802 	bl	8003408 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002406:	f000 fa31 	bl	800286c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800240a:	f000 fe39 	bl	8003080 <xTaskResumeAll>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	f47f af7c 	bne.w	800230e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002416:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <xQueueGenericSend+0x200>)
 8002418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	f3bf 8f4f 	dsb	sy
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	e772      	b.n	800230e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002428:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800242a:	f000 fa1f 	bl	800286c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800242e:	f000 fe27 	bl	8003080 <xTaskResumeAll>
 8002432:	e76c      	b.n	800230e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002434:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002436:	f000 fa19 	bl	800286c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800243a:	f000 fe21 	bl	8003080 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800243e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002440:	4618      	mov	r0, r3
 8002442:	3738      	adds	r7, #56	@ 0x38
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	e000ed04 	.word	0xe000ed04

0800244c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b090      	sub	sp, #64	@ 0x40
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800245e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10b      	bne.n	800247c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002468:	f383 8811 	msr	BASEPRI, r3
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002476:	bf00      	nop
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <xQueueGenericSendFromISR+0x3e>
 8002482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <xQueueGenericSendFromISR+0x42>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <xQueueGenericSendFromISR+0x44>
 800248e:	2300      	movs	r3, #0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d103      	bne.n	80024ba <xQueueGenericSendFromISR+0x6e>
 80024b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <xQueueGenericSendFromISR+0x72>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <xQueueGenericSendFromISR+0x74>
 80024be:	2300      	movs	r3, #0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80024c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	623b      	str	r3, [r7, #32]
}
 80024d6:	bf00      	nop
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024dc:	f001 ff90 	bl	8004400 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80024e0:	f3ef 8211 	mrs	r2, BASEPRI
 80024e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	61fa      	str	r2, [r7, #28]
 80024f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80024f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002504:	429a      	cmp	r2, r3
 8002506:	d302      	bcc.n	800250e <xQueueGenericSendFromISR+0xc2>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d12f      	bne.n	800256e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800250e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002510:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002514:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002524:	f000 f912 	bl	800274c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002528:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d112      	bne.n	8002558 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	2b00      	cmp	r3, #0
 8002538:	d016      	beq.n	8002568 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800253a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253c:	3324      	adds	r3, #36	@ 0x24
 800253e:	4618      	mov	r0, r3
 8002540:	f000 ffb4 	bl	80034ac <xTaskRemoveFromEventList>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00e      	beq.n	8002568 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00b      	beq.n	8002568 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e007      	b.n	8002568 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002558:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800255c:	3301      	adds	r3, #1
 800255e:	b2db      	uxtb	r3, r3
 8002560:	b25a      	sxtb	r2, r3
 8002562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002568:	2301      	movs	r3, #1
 800256a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800256c:	e001      	b.n	8002572 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800256e:	2300      	movs	r3, #0
 8002570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002574:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800257c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800257e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002580:	4618      	mov	r0, r3
 8002582:	3740      	adds	r7, #64	@ 0x40
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	@ 0x30
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800259c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10b      	bne.n	80025ba <xQueueReceive+0x32>
	__asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	623b      	str	r3, [r7, #32]
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	e7fd      	b.n	80025b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d103      	bne.n	80025c8 <xQueueReceive+0x40>
 80025c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <xQueueReceive+0x44>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <xQueueReceive+0x46>
 80025cc:	2300      	movs	r3, #0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10b      	bne.n	80025ea <xQueueReceive+0x62>
	__asm volatile
 80025d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	61fb      	str	r3, [r7, #28]
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	e7fd      	b.n	80025e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025ea:	f001 f91f 	bl	800382c <xTaskGetSchedulerState>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <xQueueReceive+0x72>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <xQueueReceive+0x76>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <xQueueReceive+0x78>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <xQueueReceive+0x94>
	__asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	61bb      	str	r3, [r7, #24]
}
 8002616:	bf00      	nop
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800261c:	f001 fe2e 	bl	800427c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01f      	beq.n	800266c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002630:	f000 f8f6 	bl	8002820 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	1e5a      	subs	r2, r3, #1
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800263c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00f      	beq.n	8002664 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002646:	3310      	adds	r3, #16
 8002648:	4618      	mov	r0, r3
 800264a:	f000 ff2f 	bl	80034ac <xTaskRemoveFromEventList>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002654:	4b3c      	ldr	r3, [pc, #240]	@ (8002748 <xQueueReceive+0x1c0>)
 8002656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002664:	f001 fe3a 	bl	80042dc <vPortExitCritical>
				return pdPASS;
 8002668:	2301      	movs	r3, #1
 800266a:	e069      	b.n	8002740 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002672:	f001 fe33 	bl	80042dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002676:	2300      	movs	r3, #0
 8002678:	e062      	b.n	8002740 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800267a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d106      	bne.n	800268e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002680:	f107 0310 	add.w	r3, r7, #16
 8002684:	4618      	mov	r0, r3
 8002686:	f000 ff75 	bl	8003574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800268a:	2301      	movs	r3, #1
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800268e:	f001 fe25 	bl	80042dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002692:	f000 fce7 	bl	8003064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002696:	f001 fdf1 	bl	800427c <vPortEnterCritical>
 800269a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026a0:	b25b      	sxtb	r3, r3
 80026a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a6:	d103      	bne.n	80026b0 <xQueueReceive+0x128>
 80026a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026b6:	b25b      	sxtb	r3, r3
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d103      	bne.n	80026c6 <xQueueReceive+0x13e>
 80026be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026c6:	f001 fe09 	bl	80042dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026ca:	1d3a      	adds	r2, r7, #4
 80026cc:	f107 0310 	add.w	r3, r7, #16
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 ff64 	bl	80035a0 <xTaskCheckForTimeOut>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d123      	bne.n	8002726 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026e0:	f000 f916 	bl	8002910 <prvIsQueueEmpty>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d017      	beq.n	800271a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ec:	3324      	adds	r3, #36	@ 0x24
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fe88 	bl	8003408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026fa:	f000 f8b7 	bl	800286c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026fe:	f000 fcbf 	bl	8003080 <xTaskResumeAll>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d189      	bne.n	800261c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002708:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <xQueueReceive+0x1c0>)
 800270a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	e780      	b.n	800261c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800271a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800271c:	f000 f8a6 	bl	800286c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002720:	f000 fcae 	bl	8003080 <xTaskResumeAll>
 8002724:	e77a      	b.n	800261c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002728:	f000 f8a0 	bl	800286c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800272c:	f000 fca8 	bl	8003080 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002732:	f000 f8ed 	bl	8002910 <prvIsQueueEmpty>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	f43f af6f 	beq.w	800261c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800273e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002740:	4618      	mov	r0, r3
 8002742:	3730      	adds	r7, #48	@ 0x30
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	e000ed04 	.word	0xe000ed04

0800274c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002760:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10d      	bne.n	8002786 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d14d      	bne.n	800280e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4618      	mov	r0, r3
 8002778:	f001 f876 	bl	8003868 <xTaskPriorityDisinherit>
 800277c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	e043      	b.n	800280e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d119      	bne.n	80027c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6858      	ldr	r0, [r3, #4]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	461a      	mov	r2, r3
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	f002 f8b4 	bl	8004904 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	441a      	add	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d32b      	bcc.n	800280e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	e026      	b.n	800280e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	68d8      	ldr	r0, [r3, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	461a      	mov	r2, r3
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	f002 f89a 	bl	8004904 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	425b      	negs	r3, r3
 80027da:	441a      	add	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d207      	bcs.n	80027fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	425b      	negs	r3, r3
 80027f6:	441a      	add	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d105      	bne.n	800280e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	3b01      	subs	r3, #1
 800280c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002816:	697b      	ldr	r3, [r7, #20]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d018      	beq.n	8002864 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	441a      	add	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	429a      	cmp	r2, r3
 800284a:	d303      	bcc.n	8002854 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68d9      	ldr	r1, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	461a      	mov	r2, r3
 800285e:	6838      	ldr	r0, [r7, #0]
 8002860:	f002 f850 	bl	8004904 <memcpy>
	}
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002874:	f001 fd02 	bl	800427c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800287e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002880:	e011      	b.n	80028a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	2b00      	cmp	r3, #0
 8002888:	d012      	beq.n	80028b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3324      	adds	r3, #36	@ 0x24
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fe0c 	bl	80034ac <xTaskRemoveFromEventList>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800289a:	f000 fee5 	bl	8003668 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	dce9      	bgt.n	8002882 <prvUnlockQueue+0x16>
 80028ae:	e000      	b.n	80028b2 <prvUnlockQueue+0x46>
					break;
 80028b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	22ff      	movs	r2, #255	@ 0xff
 80028b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80028ba:	f001 fd0f 	bl	80042dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80028be:	f001 fcdd 	bl	800427c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028ca:	e011      	b.n	80028f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d012      	beq.n	80028fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3310      	adds	r3, #16
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fde7 	bl	80034ac <xTaskRemoveFromEventList>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80028e4:	f000 fec0 	bl	8003668 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80028e8:	7bbb      	ldrb	r3, [r7, #14]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	dce9      	bgt.n	80028cc <prvUnlockQueue+0x60>
 80028f8:	e000      	b.n	80028fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80028fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	22ff      	movs	r2, #255	@ 0xff
 8002900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002904:	f001 fcea 	bl	80042dc <vPortExitCritical>
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002918:	f001 fcb0 	bl	800427c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002924:	2301      	movs	r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	e001      	b.n	800292e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800292e:	f001 fcd5 	bl	80042dc <vPortExitCritical>

	return xReturn;
 8002932:	68fb      	ldr	r3, [r7, #12]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002944:	f001 fc9a 	bl	800427c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002950:	429a      	cmp	r2, r3
 8002952:	d102      	bne.n	800295a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002954:	2301      	movs	r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	e001      	b.n	800295e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800295e:	f001 fcbd 	bl	80042dc <vPortExitCritical>

	return xReturn;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	e014      	b.n	80029a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800297c:	4a0e      	ldr	r2, [pc, #56]	@ (80029b8 <vQueueAddToRegistry+0x4c>)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10b      	bne.n	80029a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002988:	490b      	ldr	r1, [pc, #44]	@ (80029b8 <vQueueAddToRegistry+0x4c>)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002992:	4a09      	ldr	r2, [pc, #36]	@ (80029b8 <vQueueAddToRegistry+0x4c>)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800299e:	e006      	b.n	80029ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3301      	adds	r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b07      	cmp	r3, #7
 80029aa:	d9e7      	bls.n	800297c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	200019c4 	.word	0x200019c4

080029bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80029cc:	f001 fc56 	bl	800427c <vPortEnterCritical>
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029d6:	b25b      	sxtb	r3, r3
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d103      	bne.n	80029e6 <vQueueWaitForMessageRestricted+0x2a>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f2:	d103      	bne.n	80029fc <vQueueWaitForMessageRestricted+0x40>
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029fc:	f001 fc6e 	bl	80042dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d106      	bne.n	8002a16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	3324      	adds	r3, #36	@ 0x24
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fd1f 	bl	8003454 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002a16:	6978      	ldr	r0, [r7, #20]
 8002a18:	f7ff ff28 	bl	800286c <prvUnlockQueue>
	}
 8002a1c:	bf00      	nop
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08e      	sub	sp, #56	@ 0x38
 8002a28:	af04      	add	r7, sp, #16
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a3c:	f383 8811 	msr	BASEPRI, r3
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	623b      	str	r3, [r7, #32]
}
 8002a4a:	bf00      	nop
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10b      	bne.n	8002a6e <xTaskCreateStatic+0x4a>
	__asm volatile
 8002a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	61fb      	str	r3, [r7, #28]
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	e7fd      	b.n	8002a6a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a6e:	235c      	movs	r3, #92	@ 0x5c
 8002a70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b5c      	cmp	r3, #92	@ 0x5c
 8002a76:	d00b      	beq.n	8002a90 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	61bb      	str	r3, [r7, #24]
}
 8002a8a:	bf00      	nop
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01e      	beq.n	8002ad6 <xTaskCreateStatic+0xb2>
 8002a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01b      	beq.n	8002ad6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9303      	str	r3, [sp, #12]
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	9302      	str	r3, [sp, #8]
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f850 	bl	8002b6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ace:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ad0:	f000 f8de 	bl	8002c90 <prvAddNewTaskToReadyList>
 8002ad4:	e001      	b.n	8002ada <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ada:	697b      	ldr	r3, [r7, #20]
	}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3728      	adds	r7, #40	@ 0x28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08c      	sub	sp, #48	@ 0x30
 8002ae8:	af04      	add	r7, sp, #16
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 fcc1 	bl	8004480 <pvPortMalloc>
 8002afe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00e      	beq.n	8002b24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b06:	205c      	movs	r0, #92	@ 0x5c
 8002b08:	f001 fcba 	bl	8004480 <pvPortMalloc>
 8002b0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b1a:	e005      	b.n	8002b28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b1c:	6978      	ldr	r0, [r7, #20]
 8002b1e:	f001 fd7d 	bl	800461c <vPortFree>
 8002b22:	e001      	b.n	8002b28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d017      	beq.n	8002b5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b36:	88fa      	ldrh	r2, [r7, #6]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9303      	str	r3, [sp, #12]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	9302      	str	r3, [sp, #8]
 8002b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f80e 	bl	8002b6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b52:	69f8      	ldr	r0, [r7, #28]
 8002b54:	f000 f89c 	bl	8002c90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	e002      	b.n	8002b64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b64:	69bb      	ldr	r3, [r7, #24]
	}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b088      	sub	sp, #32
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	461a      	mov	r2, r3
 8002b86:	21a5      	movs	r1, #165	@ 0xa5
 8002b88:	f001 fe88 	bl	800489c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b96:	3b01      	subs	r3, #1
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f023 0307 	bic.w	r3, r3, #7
 8002ba4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	617b      	str	r3, [r7, #20]
}
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01f      	beq.n	8002c0e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	e012      	b.n	8002bfa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	4413      	add	r3, r2
 8002bda:	7819      	ldrb	r1, [r3, #0]
 8002bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	3334      	adds	r3, #52	@ 0x34
 8002be4:	460a      	mov	r2, r1
 8002be6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d006      	beq.n	8002c02 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	2b0f      	cmp	r3, #15
 8002bfe:	d9e9      	bls.n	8002bd4 <prvInitialiseNewTask+0x66>
 8002c00:	e000      	b.n	8002c04 <prvInitialiseNewTask+0x96>
			{
				break;
 8002c02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c0c:	e003      	b.n	8002c16 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c18:	2b37      	cmp	r3, #55	@ 0x37
 8002c1a:	d901      	bls.n	8002c20 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c1c:	2337      	movs	r3, #55	@ 0x37
 8002c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c24:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c2a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2e:	2200      	movs	r2, #0
 8002c30:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c34:	3304      	adds	r3, #4
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff f96b 	bl	8001f12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3e:	3318      	adds	r3, #24
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff f966 	bl	8001f12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c5a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5e:	2200      	movs	r2, #0
 8002c60:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	68f9      	ldr	r1, [r7, #12]
 8002c6e:	69b8      	ldr	r0, [r7, #24]
 8002c70:	f001 fa16 	bl	80040a0 <pxPortInitialiseStack>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c86:	bf00      	nop
 8002c88:	3720      	adds	r7, #32
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c98:	f001 faf0 	bl	800427c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d54 <prvAddNewTaskToReadyList+0xc4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8002d54 <prvAddNewTaskToReadyList+0xc4>)
 8002ca4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8002d58 <prvAddNewTaskToReadyList+0xc8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002cae:	4a2a      	ldr	r2, [pc, #168]	@ (8002d58 <prvAddNewTaskToReadyList+0xc8>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cb4:	4b27      	ldr	r3, [pc, #156]	@ (8002d54 <prvAddNewTaskToReadyList+0xc4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d110      	bne.n	8002cde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002cbc:	f000 fcf8 	bl	80036b0 <prvInitialiseTaskLists>
 8002cc0:	e00d      	b.n	8002cde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002cc2:	4b26      	ldr	r3, [pc, #152]	@ (8002d5c <prvAddNewTaskToReadyList+0xcc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cca:	4b23      	ldr	r3, [pc, #140]	@ (8002d58 <prvAddNewTaskToReadyList+0xc8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d802      	bhi.n	8002cde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d58 <prvAddNewTaskToReadyList+0xc8>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cde:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <prvAddNewTaskToReadyList+0xd0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8002d60 <prvAddNewTaskToReadyList+0xd0>)
 8002ce6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d60 <prvAddNewTaskToReadyList+0xd0>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <prvAddNewTaskToReadyList+0xd4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d903      	bls.n	8002d04 <prvAddNewTaskToReadyList+0x74>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d00:	4a18      	ldr	r2, [pc, #96]	@ (8002d64 <prvAddNewTaskToReadyList+0xd4>)
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4a15      	ldr	r2, [pc, #84]	@ (8002d68 <prvAddNewTaskToReadyList+0xd8>)
 8002d12:	441a      	add	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f7ff f905 	bl	8001f2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d20:	f001 fadc 	bl	80042dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d24:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <prvAddNewTaskToReadyList+0xcc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00e      	beq.n	8002d4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <prvAddNewTaskToReadyList+0xc8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d207      	bcs.n	8002d4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d6c <prvAddNewTaskToReadyList+0xdc>)
 8002d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20001ed8 	.word	0x20001ed8
 8002d58:	20001a04 	.word	0x20001a04
 8002d5c:	20001ee4 	.word	0x20001ee4
 8002d60:	20001ef4 	.word	0x20001ef4
 8002d64:	20001ee0 	.word	0x20001ee0
 8002d68:	20001a08 	.word	0x20001a08
 8002d6c:	e000ed04 	.word	0xe000ed04

08002d70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002d78:	f001 fa80 	bl	800427c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d102      	bne.n	8002d88 <vTaskDelete+0x18>
 8002d82:	4b2d      	ldr	r3, [pc, #180]	@ (8002e38 <vTaskDelete+0xc8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	e000      	b.n	8002d8a <vTaskDelete+0x1a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff f925 	bl	8001fe0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d004      	beq.n	8002da8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3318      	adds	r3, #24
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff f91c 	bl	8001fe0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002da8:	4b24      	ldr	r3, [pc, #144]	@ (8002e3c <vTaskDelete+0xcc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	4a23      	ldr	r2, [pc, #140]	@ (8002e3c <vTaskDelete+0xcc>)
 8002db0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002db2:	4b21      	ldr	r3, [pc, #132]	@ (8002e38 <vTaskDelete+0xc8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d10b      	bne.n	8002dd4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	481f      	ldr	r0, [pc, #124]	@ (8002e40 <vTaskDelete+0xd0>)
 8002dc4:	f7ff f8b1 	bl	8001f2a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <vTaskDelete+0xd4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	4a1d      	ldr	r2, [pc, #116]	@ (8002e44 <vTaskDelete+0xd4>)
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e009      	b.n	8002de8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e48 <vTaskDelete+0xd8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	4a1b      	ldr	r2, [pc, #108]	@ (8002e48 <vTaskDelete+0xd8>)
 8002ddc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fcd4 	bl	800378c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002de4:	f000 fd02 	bl	80037ec <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8002de8:	f001 fa78 	bl	80042dc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002dec:	4b17      	ldr	r3, [pc, #92]	@ (8002e4c <vTaskDelete+0xdc>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01c      	beq.n	8002e2e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8002df4:	4b10      	ldr	r3, [pc, #64]	@ (8002e38 <vTaskDelete+0xc8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d117      	bne.n	8002e2e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002dfe:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <vTaskDelete+0xe0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <vTaskDelete+0xae>
	__asm volatile
 8002e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	60bb      	str	r3, [r7, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	e7fd      	b.n	8002e1a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e54 <vTaskDelete+0xe4>)
 8002e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20001a04 	.word	0x20001a04
 8002e3c:	20001ef4 	.word	0x20001ef4
 8002e40:	20001eac 	.word	0x20001eac
 8002e44:	20001ec0 	.word	0x20001ec0
 8002e48:	20001ed8 	.word	0x20001ed8
 8002e4c:	20001ee4 	.word	0x20001ee4
 8002e50:	20001f00 	.word	0x20001f00
 8002e54:	e000ed04 	.word	0xe000ed04

08002e58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d018      	beq.n	8002e9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e6a:	4b14      	ldr	r3, [pc, #80]	@ (8002ebc <vTaskDelay+0x64>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <vTaskDelay+0x32>
	__asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	60bb      	str	r3, [r7, #8]
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	e7fd      	b.n	8002e86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e8a:	f000 f8eb 	bl	8003064 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e8e:	2100      	movs	r1, #0
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fd59 	bl	8003948 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e96:	f000 f8f3 	bl	8003080 <xTaskResumeAll>
 8002e9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d107      	bne.n	8002eb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002ea2:	4b07      	ldr	r3, [pc, #28]	@ (8002ec0 <vTaskDelay+0x68>)
 8002ea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20001f00 	.word	0x20001f00
 8002ec0:	e000ed04 	.word	0xe000ed04

08002ec4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <eTaskGetState+0x2a>
	__asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	60bb      	str	r3, [r7, #8]
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	e7fd      	b.n	8002eea <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8002eee:	4b24      	ldr	r3, [pc, #144]	@ (8002f80 <eTaskGetState+0xbc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d102      	bne.n	8002efe <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	77fb      	strb	r3, [r7, #31]
 8002efc:	e03a      	b.n	8002f74 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8002efe:	f001 f9bd 	bl	800427c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8002f08:	4b1e      	ldr	r3, [pc, #120]	@ (8002f84 <eTaskGetState+0xc0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <eTaskGetState+0xc4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8002f14:	f001 f9e2 	bl	80042dc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d003      	beq.n	8002f28 <eTaskGetState+0x64>
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d102      	bne.n	8002f2e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	77fb      	strb	r3, [r7, #31]
 8002f2c:	e022      	b.n	8002f74 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	4a16      	ldr	r2, [pc, #88]	@ (8002f8c <eTaskGetState+0xc8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d112      	bne.n	8002f5c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10b      	bne.n	8002f56 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d102      	bne.n	8002f50 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	77fb      	strb	r3, [r7, #31]
 8002f4e:	e011      	b.n	8002f74 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8002f50:	2303      	movs	r3, #3
 8002f52:	77fb      	strb	r3, [r7, #31]
 8002f54:	e00e      	b.n	8002f74 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8002f56:	2302      	movs	r3, #2
 8002f58:	77fb      	strb	r3, [r7, #31]
 8002f5a:	e00b      	b.n	8002f74 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002f90 <eTaskGetState+0xcc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d002      	beq.n	8002f6a <eTaskGetState+0xa6>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d102      	bne.n	8002f70 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e001      	b.n	8002f74 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8002f70:	2301      	movs	r3, #1
 8002f72:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8002f74:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002f76:	4618      	mov	r0, r3
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20001a04 	.word	0x20001a04
 8002f84:	20001e90 	.word	0x20001e90
 8002f88:	20001e94 	.word	0x20001e94
 8002f8c:	20001ec4 	.word	0x20001ec4
 8002f90:	20001eac 	.word	0x20001eac

08002f94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	@ 0x28
 8002f98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002fa2:	463a      	mov	r2, r7
 8002fa4:	1d39      	adds	r1, r7, #4
 8002fa6:	f107 0308 	add.w	r3, r7, #8
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe ff5e 	bl	8001e6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fb0:	6839      	ldr	r1, [r7, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	9202      	str	r2, [sp, #8]
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	460a      	mov	r2, r1
 8002fc2:	4922      	ldr	r1, [pc, #136]	@ (800304c <vTaskStartScheduler+0xb8>)
 8002fc4:	4822      	ldr	r0, [pc, #136]	@ (8003050 <vTaskStartScheduler+0xbc>)
 8002fc6:	f7ff fd2d 	bl	8002a24 <xTaskCreateStatic>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4a21      	ldr	r2, [pc, #132]	@ (8003054 <vTaskStartScheduler+0xc0>)
 8002fce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fd0:	4b20      	ldr	r3, [pc, #128]	@ (8003054 <vTaskStartScheduler+0xc0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	e001      	b.n	8002fe2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d102      	bne.n	8002fee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002fe8:	f000 fd02 	bl	80039f0 <xTimerCreateTimerTask>
 8002fec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d116      	bne.n	8003022 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	613b      	str	r3, [r7, #16]
}
 8003006:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003008:	4b13      	ldr	r3, [pc, #76]	@ (8003058 <vTaskStartScheduler+0xc4>)
 800300a:	f04f 32ff 	mov.w	r2, #4294967295
 800300e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003010:	4b12      	ldr	r3, [pc, #72]	@ (800305c <vTaskStartScheduler+0xc8>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003016:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <vTaskStartScheduler+0xcc>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800301c:	f001 f8bc 	bl	8004198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003020:	e00f      	b.n	8003042 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d10b      	bne.n	8003042 <vTaskStartScheduler+0xae>
	__asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	60fb      	str	r3, [r7, #12]
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	e7fd      	b.n	800303e <vTaskStartScheduler+0xaa>
}
 8003042:	bf00      	nop
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	08005274 	.word	0x08005274
 8003050:	08003681 	.word	0x08003681
 8003054:	20001efc 	.word	0x20001efc
 8003058:	20001ef8 	.word	0x20001ef8
 800305c:	20001ee4 	.word	0x20001ee4
 8003060:	20001edc 	.word	0x20001edc

08003064 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003068:	4b04      	ldr	r3, [pc, #16]	@ (800307c <vTaskSuspendAll+0x18>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	4a03      	ldr	r2, [pc, #12]	@ (800307c <vTaskSuspendAll+0x18>)
 8003070:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003072:	bf00      	nop
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20001f00 	.word	0x20001f00

08003080 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800308e:	4b42      	ldr	r3, [pc, #264]	@ (8003198 <xTaskResumeAll+0x118>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <xTaskResumeAll+0x2e>
	__asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	603b      	str	r3, [r7, #0]
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	e7fd      	b.n	80030aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030ae:	f001 f8e5 	bl	800427c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030b2:	4b39      	ldr	r3, [pc, #228]	@ (8003198 <xTaskResumeAll+0x118>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	4a37      	ldr	r2, [pc, #220]	@ (8003198 <xTaskResumeAll+0x118>)
 80030ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030bc:	4b36      	ldr	r3, [pc, #216]	@ (8003198 <xTaskResumeAll+0x118>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d162      	bne.n	800318a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030c4:	4b35      	ldr	r3, [pc, #212]	@ (800319c <xTaskResumeAll+0x11c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d05e      	beq.n	800318a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030cc:	e02f      	b.n	800312e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ce:	4b34      	ldr	r3, [pc, #208]	@ (80031a0 <xTaskResumeAll+0x120>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3318      	adds	r3, #24
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe ff80 	bl	8001fe0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3304      	adds	r3, #4
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe ff7b 	bl	8001fe0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ee:	4b2d      	ldr	r3, [pc, #180]	@ (80031a4 <xTaskResumeAll+0x124>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d903      	bls.n	80030fe <xTaskResumeAll+0x7e>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fa:	4a2a      	ldr	r2, [pc, #168]	@ (80031a4 <xTaskResumeAll+0x124>)
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4a27      	ldr	r2, [pc, #156]	@ (80031a8 <xTaskResumeAll+0x128>)
 800310c:	441a      	add	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3304      	adds	r3, #4
 8003112:	4619      	mov	r1, r3
 8003114:	4610      	mov	r0, r2
 8003116:	f7fe ff08 	bl	8001f2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800311e:	4b23      	ldr	r3, [pc, #140]	@ (80031ac <xTaskResumeAll+0x12c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003124:	429a      	cmp	r2, r3
 8003126:	d302      	bcc.n	800312e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003128:	4b21      	ldr	r3, [pc, #132]	@ (80031b0 <xTaskResumeAll+0x130>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800312e:	4b1c      	ldr	r3, [pc, #112]	@ (80031a0 <xTaskResumeAll+0x120>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1cb      	bne.n	80030ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800313c:	f000 fb56 	bl	80037ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003140:	4b1c      	ldr	r3, [pc, #112]	@ (80031b4 <xTaskResumeAll+0x134>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d010      	beq.n	800316e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800314c:	f000 f844 	bl	80031d8 <xTaskIncrementTick>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003156:	4b16      	ldr	r3, [pc, #88]	@ (80031b0 <xTaskResumeAll+0x130>)
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f1      	bne.n	800314c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003168:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <xTaskResumeAll+0x134>)
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800316e:	4b10      	ldr	r3, [pc, #64]	@ (80031b0 <xTaskResumeAll+0x130>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003176:	2301      	movs	r3, #1
 8003178:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800317a:	4b0f      	ldr	r3, [pc, #60]	@ (80031b8 <xTaskResumeAll+0x138>)
 800317c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800318a:	f001 f8a7 	bl	80042dc <vPortExitCritical>

	return xAlreadyYielded;
 800318e:	68bb      	ldr	r3, [r7, #8]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20001f00 	.word	0x20001f00
 800319c:	20001ed8 	.word	0x20001ed8
 80031a0:	20001e98 	.word	0x20001e98
 80031a4:	20001ee0 	.word	0x20001ee0
 80031a8:	20001a08 	.word	0x20001a08
 80031ac:	20001a04 	.word	0x20001a04
 80031b0:	20001eec 	.word	0x20001eec
 80031b4:	20001ee8 	.word	0x20001ee8
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80031c2:	4b04      	ldr	r3, [pc, #16]	@ (80031d4 <xTaskGetTickCount+0x18>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80031c8:	687b      	ldr	r3, [r7, #4]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	20001edc 	.word	0x20001edc

080031d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031e2:	4b4f      	ldr	r3, [pc, #316]	@ (8003320 <xTaskIncrementTick+0x148>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 8090 	bne.w	800330c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003324 <xTaskIncrementTick+0x14c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003324 <xTaskIncrementTick+0x14c>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d121      	bne.n	8003244 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003200:	4b49      	ldr	r3, [pc, #292]	@ (8003328 <xTaskIncrementTick+0x150>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <xTaskIncrementTick+0x4a>
	__asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	603b      	str	r3, [r7, #0]
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	e7fd      	b.n	800321e <xTaskIncrementTick+0x46>
 8003222:	4b41      	ldr	r3, [pc, #260]	@ (8003328 <xTaskIncrementTick+0x150>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	4b40      	ldr	r3, [pc, #256]	@ (800332c <xTaskIncrementTick+0x154>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a3e      	ldr	r2, [pc, #248]	@ (8003328 <xTaskIncrementTick+0x150>)
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4a3e      	ldr	r2, [pc, #248]	@ (800332c <xTaskIncrementTick+0x154>)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b3e      	ldr	r3, [pc, #248]	@ (8003330 <xTaskIncrementTick+0x158>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3301      	adds	r3, #1
 800323c:	4a3c      	ldr	r2, [pc, #240]	@ (8003330 <xTaskIncrementTick+0x158>)
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	f000 fad4 	bl	80037ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003244:	4b3b      	ldr	r3, [pc, #236]	@ (8003334 <xTaskIncrementTick+0x15c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	429a      	cmp	r2, r3
 800324c:	d349      	bcc.n	80032e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800324e:	4b36      	ldr	r3, [pc, #216]	@ (8003328 <xTaskIncrementTick+0x150>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d104      	bne.n	8003262 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003258:	4b36      	ldr	r3, [pc, #216]	@ (8003334 <xTaskIncrementTick+0x15c>)
 800325a:	f04f 32ff 	mov.w	r2, #4294967295
 800325e:	601a      	str	r2, [r3, #0]
					break;
 8003260:	e03f      	b.n	80032e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003262:	4b31      	ldr	r3, [pc, #196]	@ (8003328 <xTaskIncrementTick+0x150>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	429a      	cmp	r2, r3
 8003278:	d203      	bcs.n	8003282 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800327a:	4a2e      	ldr	r2, [pc, #184]	@ (8003334 <xTaskIncrementTick+0x15c>)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003280:	e02f      	b.n	80032e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	3304      	adds	r3, #4
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe feaa 	bl	8001fe0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	d004      	beq.n	800329e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	3318      	adds	r3, #24
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe fea1 	bl	8001fe0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a2:	4b25      	ldr	r3, [pc, #148]	@ (8003338 <xTaskIncrementTick+0x160>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d903      	bls.n	80032b2 <xTaskIncrementTick+0xda>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ae:	4a22      	ldr	r2, [pc, #136]	@ (8003338 <xTaskIncrementTick+0x160>)
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4a1f      	ldr	r2, [pc, #124]	@ (800333c <xTaskIncrementTick+0x164>)
 80032c0:	441a      	add	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3304      	adds	r3, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4610      	mov	r0, r2
 80032ca:	f7fe fe2e 	bl	8001f2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <xTaskIncrementTick+0x168>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d8:	429a      	cmp	r2, r3
 80032da:	d3b8      	bcc.n	800324e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80032dc:	2301      	movs	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032e0:	e7b5      	b.n	800324e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032e2:	4b17      	ldr	r3, [pc, #92]	@ (8003340 <xTaskIncrementTick+0x168>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e8:	4914      	ldr	r1, [pc, #80]	@ (800333c <xTaskIncrementTick+0x164>)
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d901      	bls.n	80032fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80032fe:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <xTaskIncrementTick+0x16c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003306:	2301      	movs	r3, #1
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e004      	b.n	8003316 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800330c:	4b0e      	ldr	r3, [pc, #56]	@ (8003348 <xTaskIncrementTick+0x170>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	4a0d      	ldr	r2, [pc, #52]	@ (8003348 <xTaskIncrementTick+0x170>)
 8003314:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003316:	697b      	ldr	r3, [r7, #20]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20001f00 	.word	0x20001f00
 8003324:	20001edc 	.word	0x20001edc
 8003328:	20001e90 	.word	0x20001e90
 800332c:	20001e94 	.word	0x20001e94
 8003330:	20001ef0 	.word	0x20001ef0
 8003334:	20001ef8 	.word	0x20001ef8
 8003338:	20001ee0 	.word	0x20001ee0
 800333c:	20001a08 	.word	0x20001a08
 8003340:	20001a04 	.word	0x20001a04
 8003344:	20001eec 	.word	0x20001eec
 8003348:	20001ee8 	.word	0x20001ee8

0800334c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003352:	4b28      	ldr	r3, [pc, #160]	@ (80033f4 <vTaskSwitchContext+0xa8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800335a:	4b27      	ldr	r3, [pc, #156]	@ (80033f8 <vTaskSwitchContext+0xac>)
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003360:	e042      	b.n	80033e8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003362:	4b25      	ldr	r3, [pc, #148]	@ (80033f8 <vTaskSwitchContext+0xac>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003368:	4b24      	ldr	r3, [pc, #144]	@ (80033fc <vTaskSwitchContext+0xb0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	e011      	b.n	8003394 <vTaskSwitchContext+0x48>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10b      	bne.n	800338e <vTaskSwitchContext+0x42>
	__asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	607b      	str	r3, [r7, #4]
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	e7fd      	b.n	800338a <vTaskSwitchContext+0x3e>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3b01      	subs	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	491a      	ldr	r1, [pc, #104]	@ (8003400 <vTaskSwitchContext+0xb4>)
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0e3      	beq.n	8003370 <vTaskSwitchContext+0x24>
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4a13      	ldr	r2, [pc, #76]	@ (8003400 <vTaskSwitchContext+0xb4>)
 80033b4:	4413      	add	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	3308      	adds	r3, #8
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d104      	bne.n	80033d8 <vTaskSwitchContext+0x8c>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	4a09      	ldr	r2, [pc, #36]	@ (8003404 <vTaskSwitchContext+0xb8>)
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4a06      	ldr	r2, [pc, #24]	@ (80033fc <vTaskSwitchContext+0xb0>)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6013      	str	r3, [r2, #0]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20001f00 	.word	0x20001f00
 80033f8:	20001eec 	.word	0x20001eec
 80033fc:	20001ee0 	.word	0x20001ee0
 8003400:	20001a08 	.word	0x20001a08
 8003404:	20001a04 	.word	0x20001a04

08003408 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	60fb      	str	r3, [r7, #12]
}
 800342a:	bf00      	nop
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003430:	4b07      	ldr	r3, [pc, #28]	@ (8003450 <vTaskPlaceOnEventList+0x48>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3318      	adds	r3, #24
 8003436:	4619      	mov	r1, r3
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7fe fd99 	bl	8001f70 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800343e:	2101      	movs	r1, #1
 8003440:	6838      	ldr	r0, [r7, #0]
 8003442:	f000 fa81 	bl	8003948 <prvAddCurrentTaskToDelayedList>
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20001a04 	.word	0x20001a04

08003454 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	617b      	str	r3, [r7, #20]
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	e7fd      	b.n	800347a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800347e:	4b0a      	ldr	r3, [pc, #40]	@ (80034a8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3318      	adds	r3, #24
 8003484:	4619      	mov	r1, r3
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f7fe fd4f 	bl	8001f2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003492:	f04f 33ff 	mov.w	r3, #4294967295
 8003496:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	68b8      	ldr	r0, [r7, #8]
 800349c:	f000 fa54 	bl	8003948 <prvAddCurrentTaskToDelayedList>
	}
 80034a0:	bf00      	nop
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20001a04 	.word	0x20001a04

080034ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10b      	bne.n	80034da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80034c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	60fb      	str	r3, [r7, #12]
}
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop
 80034d8:	e7fd      	b.n	80034d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	3318      	adds	r3, #24
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe fd7e 	bl	8001fe0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034e4:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <xTaskRemoveFromEventList+0xb0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d11d      	bne.n	8003528 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	3304      	adds	r3, #4
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fe fd75 	bl	8001fe0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034fa:	4b19      	ldr	r3, [pc, #100]	@ (8003560 <xTaskRemoveFromEventList+0xb4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d903      	bls.n	800350a <xTaskRemoveFromEventList+0x5e>
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003506:	4a16      	ldr	r2, [pc, #88]	@ (8003560 <xTaskRemoveFromEventList+0xb4>)
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4a13      	ldr	r2, [pc, #76]	@ (8003564 <xTaskRemoveFromEventList+0xb8>)
 8003518:	441a      	add	r2, r3
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	3304      	adds	r3, #4
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f7fe fd02 	bl	8001f2a <vListInsertEnd>
 8003526:	e005      	b.n	8003534 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	3318      	adds	r3, #24
 800352c:	4619      	mov	r1, r3
 800352e:	480e      	ldr	r0, [pc, #56]	@ (8003568 <xTaskRemoveFromEventList+0xbc>)
 8003530:	f7fe fcfb 	bl	8001f2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003538:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <xTaskRemoveFromEventList+0xc0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353e:	429a      	cmp	r2, r3
 8003540:	d905      	bls.n	800354e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003542:	2301      	movs	r3, #1
 8003544:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003546:	4b0a      	ldr	r3, [pc, #40]	@ (8003570 <xTaskRemoveFromEventList+0xc4>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	e001      	b.n	8003552 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003552:	697b      	ldr	r3, [r7, #20]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20001f00 	.word	0x20001f00
 8003560:	20001ee0 	.word	0x20001ee0
 8003564:	20001a08 	.word	0x20001a08
 8003568:	20001e98 	.word	0x20001e98
 800356c:	20001a04 	.word	0x20001a04
 8003570:	20001eec 	.word	0x20001eec

08003574 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800357c:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <vTaskInternalSetTimeOutState+0x24>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003584:	4b05      	ldr	r3, [pc, #20]	@ (800359c <vTaskInternalSetTimeOutState+0x28>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	605a      	str	r2, [r3, #4]
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20001ef0 	.word	0x20001ef0
 800359c:	20001edc 	.word	0x20001edc

080035a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	613b      	str	r3, [r7, #16]
}
 80035c2:	bf00      	nop
 80035c4:	bf00      	nop
 80035c6:	e7fd      	b.n	80035c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80035ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	60fb      	str	r3, [r7, #12]
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	e7fd      	b.n	80035e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80035e6:	f000 fe49 	bl	800427c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003660 <xTaskCheckForTimeOut+0xc0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003602:	d102      	bne.n	800360a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	e023      	b.n	8003652 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <xTaskCheckForTimeOut+0xc4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d007      	beq.n	8003626 <xTaskCheckForTimeOut+0x86>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003620:	2301      	movs	r3, #1
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	e015      	b.n	8003652 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	429a      	cmp	r2, r3
 800362e:	d20b      	bcs.n	8003648 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	1ad2      	subs	r2, r2, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff99 	bl	8003574 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	e004      	b.n	8003652 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800364e:	2301      	movs	r3, #1
 8003650:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003652:	f000 fe43 	bl	80042dc <vPortExitCritical>

	return xReturn;
 8003656:	69fb      	ldr	r3, [r7, #28]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3720      	adds	r7, #32
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20001edc 	.word	0x20001edc
 8003664:	20001ef0 	.word	0x20001ef0

08003668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800366c:	4b03      	ldr	r3, [pc, #12]	@ (800367c <vTaskMissedYield+0x14>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]
}
 8003672:	bf00      	nop
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20001eec 	.word	0x20001eec

08003680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003688:	f000 f852 	bl	8003730 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800368c:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <prvIdleTask+0x28>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d9f9      	bls.n	8003688 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <prvIdleTask+0x2c>)
 8003696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80036a4:	e7f0      	b.n	8003688 <prvIdleTask+0x8>
 80036a6:	bf00      	nop
 80036a8:	20001a08 	.word	0x20001a08
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036b6:	2300      	movs	r3, #0
 80036b8:	607b      	str	r3, [r7, #4]
 80036ba:	e00c      	b.n	80036d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4a12      	ldr	r2, [pc, #72]	@ (8003710 <prvInitialiseTaskLists+0x60>)
 80036c8:	4413      	add	r3, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fc02 	bl	8001ed4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3301      	adds	r3, #1
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b37      	cmp	r3, #55	@ 0x37
 80036da:	d9ef      	bls.n	80036bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036dc:	480d      	ldr	r0, [pc, #52]	@ (8003714 <prvInitialiseTaskLists+0x64>)
 80036de:	f7fe fbf9 	bl	8001ed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036e2:	480d      	ldr	r0, [pc, #52]	@ (8003718 <prvInitialiseTaskLists+0x68>)
 80036e4:	f7fe fbf6 	bl	8001ed4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036e8:	480c      	ldr	r0, [pc, #48]	@ (800371c <prvInitialiseTaskLists+0x6c>)
 80036ea:	f7fe fbf3 	bl	8001ed4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036ee:	480c      	ldr	r0, [pc, #48]	@ (8003720 <prvInitialiseTaskLists+0x70>)
 80036f0:	f7fe fbf0 	bl	8001ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036f4:	480b      	ldr	r0, [pc, #44]	@ (8003724 <prvInitialiseTaskLists+0x74>)
 80036f6:	f7fe fbed 	bl	8001ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003728 <prvInitialiseTaskLists+0x78>)
 80036fc:	4a05      	ldr	r2, [pc, #20]	@ (8003714 <prvInitialiseTaskLists+0x64>)
 80036fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003700:	4b0a      	ldr	r3, [pc, #40]	@ (800372c <prvInitialiseTaskLists+0x7c>)
 8003702:	4a05      	ldr	r2, [pc, #20]	@ (8003718 <prvInitialiseTaskLists+0x68>)
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20001a08 	.word	0x20001a08
 8003714:	20001e68 	.word	0x20001e68
 8003718:	20001e7c 	.word	0x20001e7c
 800371c:	20001e98 	.word	0x20001e98
 8003720:	20001eac 	.word	0x20001eac
 8003724:	20001ec4 	.word	0x20001ec4
 8003728:	20001e90 	.word	0x20001e90
 800372c:	20001e94 	.word	0x20001e94

08003730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003736:	e019      	b.n	800376c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003738:	f000 fda0 	bl	800427c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800373c:	4b10      	ldr	r3, [pc, #64]	@ (8003780 <prvCheckTasksWaitingTermination+0x50>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3304      	adds	r3, #4
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe fc49 	bl	8001fe0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800374e:	4b0d      	ldr	r3, [pc, #52]	@ (8003784 <prvCheckTasksWaitingTermination+0x54>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3b01      	subs	r3, #1
 8003754:	4a0b      	ldr	r2, [pc, #44]	@ (8003784 <prvCheckTasksWaitingTermination+0x54>)
 8003756:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003758:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <prvCheckTasksWaitingTermination+0x58>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3b01      	subs	r3, #1
 800375e:	4a0a      	ldr	r2, [pc, #40]	@ (8003788 <prvCheckTasksWaitingTermination+0x58>)
 8003760:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003762:	f000 fdbb 	bl	80042dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f810 	bl	800378c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800376c:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <prvCheckTasksWaitingTermination+0x58>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e1      	bne.n	8003738 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20001eac 	.word	0x20001eac
 8003784:	20001ed8 	.word	0x20001ed8
 8003788:	20001ec0 	.word	0x20001ec0

0800378c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800379a:	2b00      	cmp	r3, #0
 800379c:	d108      	bne.n	80037b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 ff3a 	bl	800461c <vPortFree>
				vPortFree( pxTCB );
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 ff37 	bl	800461c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80037ae:	e019      	b.n	80037e4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d103      	bne.n	80037c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 ff2e 	bl	800461c <vPortFree>
	}
 80037c0:	e010      	b.n	80037e4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d00b      	beq.n	80037e4 <prvDeleteTCB+0x58>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	60fb      	str	r3, [r7, #12]
}
 80037de:	bf00      	nop
 80037e0:	bf00      	nop
 80037e2:	e7fd      	b.n	80037e0 <prvDeleteTCB+0x54>
	}
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003824 <prvResetNextTaskUnblockTime+0x38>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d104      	bne.n	8003806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003828 <prvResetNextTaskUnblockTime+0x3c>)
 80037fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003804:	e008      	b.n	8003818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003806:	4b07      	ldr	r3, [pc, #28]	@ (8003824 <prvResetNextTaskUnblockTime+0x38>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a04      	ldr	r2, [pc, #16]	@ (8003828 <prvResetNextTaskUnblockTime+0x3c>)
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20001e90 	.word	0x20001e90
 8003828:	20001ef8 	.word	0x20001ef8

0800382c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003832:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <xTaskGetSchedulerState+0x34>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800383a:	2301      	movs	r3, #1
 800383c:	607b      	str	r3, [r7, #4]
 800383e:	e008      	b.n	8003852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003840:	4b08      	ldr	r3, [pc, #32]	@ (8003864 <xTaskGetSchedulerState+0x38>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003848:	2302      	movs	r3, #2
 800384a:	607b      	str	r3, [r7, #4]
 800384c:	e001      	b.n	8003852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003852:	687b      	ldr	r3, [r7, #4]
	}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20001ee4 	.word	0x20001ee4
 8003864:	20001f00 	.word	0x20001f00

08003868 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d058      	beq.n	8003930 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800387e:	4b2f      	ldr	r3, [pc, #188]	@ (800393c <xTaskPriorityDisinherit+0xd4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	429a      	cmp	r2, r3
 8003886:	d00b      	beq.n	80038a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	60fb      	str	r3, [r7, #12]
}
 800389a:	bf00      	nop
 800389c:	bf00      	nop
 800389e:	e7fd      	b.n	800389c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	60bb      	str	r3, [r7, #8]
}
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c4:	1e5a      	subs	r2, r3, #1
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d02c      	beq.n	8003930 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d128      	bne.n	8003930 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	3304      	adds	r3, #4
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fb7c 	bl	8001fe0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003900:	4b0f      	ldr	r3, [pc, #60]	@ (8003940 <xTaskPriorityDisinherit+0xd8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d903      	bls.n	8003910 <xTaskPriorityDisinherit+0xa8>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390c:	4a0c      	ldr	r2, [pc, #48]	@ (8003940 <xTaskPriorityDisinherit+0xd8>)
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4a09      	ldr	r2, [pc, #36]	@ (8003944 <xTaskPriorityDisinherit+0xdc>)
 800391e:	441a      	add	r2, r3
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f7fe faff 	bl	8001f2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800392c:	2301      	movs	r3, #1
 800392e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003930:	697b      	ldr	r3, [r7, #20]
	}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20001a04 	.word	0x20001a04
 8003940:	20001ee0 	.word	0x20001ee0
 8003944:	20001a08 	.word	0x20001a08

08003948 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003952:	4b21      	ldr	r3, [pc, #132]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003958:	4b20      	ldr	r3, [pc, #128]	@ (80039dc <prvAddCurrentTaskToDelayedList+0x94>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3304      	adds	r3, #4
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fb3e 	bl	8001fe0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396a:	d10a      	bne.n	8003982 <prvAddCurrentTaskToDelayedList+0x3a>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003972:	4b1a      	ldr	r3, [pc, #104]	@ (80039dc <prvAddCurrentTaskToDelayedList+0x94>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3304      	adds	r3, #4
 8003978:	4619      	mov	r1, r3
 800397a:	4819      	ldr	r0, [pc, #100]	@ (80039e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800397c:	f7fe fad5 	bl	8001f2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003980:	e026      	b.n	80039d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4413      	add	r3, r2
 8003988:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800398a:	4b14      	ldr	r3, [pc, #80]	@ (80039dc <prvAddCurrentTaskToDelayedList+0x94>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	429a      	cmp	r2, r3
 8003998:	d209      	bcs.n	80039ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800399a:	4b12      	ldr	r3, [pc, #72]	@ (80039e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4b0f      	ldr	r3, [pc, #60]	@ (80039dc <prvAddCurrentTaskToDelayedList+0x94>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f7fe fae2 	bl	8001f70 <vListInsert>
}
 80039ac:	e010      	b.n	80039d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039ae:	4b0e      	ldr	r3, [pc, #56]	@ (80039e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4b0a      	ldr	r3, [pc, #40]	@ (80039dc <prvAddCurrentTaskToDelayedList+0x94>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4619      	mov	r1, r3
 80039ba:	4610      	mov	r0, r2
 80039bc:	f7fe fad8 	bl	8001f70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039c0:	4b0a      	ldr	r3, [pc, #40]	@ (80039ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d202      	bcs.n	80039d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80039ca:	4a08      	ldr	r2, [pc, #32]	@ (80039ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	6013      	str	r3, [r2, #0]
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20001edc 	.word	0x20001edc
 80039dc:	20001a04 	.word	0x20001a04
 80039e0:	20001ec4 	.word	0x20001ec4
 80039e4:	20001e94 	.word	0x20001e94
 80039e8:	20001e90 	.word	0x20001e90
 80039ec:	20001ef8 	.word	0x20001ef8

080039f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	@ 0x28
 80039f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80039fa:	f000 fb11 	bl	8004020 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80039fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003a74 <xTimerCreateTimerTask+0x84>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d021      	beq.n	8003a4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a0e:	1d3a      	adds	r2, r7, #4
 8003a10:	f107 0108 	add.w	r1, r7, #8
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fe fa41 	bl	8001ea0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	9202      	str	r2, [sp, #8]
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	2302      	movs	r3, #2
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	460a      	mov	r2, r1
 8003a30:	4911      	ldr	r1, [pc, #68]	@ (8003a78 <xTimerCreateTimerTask+0x88>)
 8003a32:	4812      	ldr	r0, [pc, #72]	@ (8003a7c <xTimerCreateTimerTask+0x8c>)
 8003a34:	f7fe fff6 	bl	8002a24 <xTaskCreateStatic>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4a11      	ldr	r2, [pc, #68]	@ (8003a80 <xTimerCreateTimerTask+0x90>)
 8003a3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a3e:	4b10      	ldr	r3, [pc, #64]	@ (8003a80 <xTimerCreateTimerTask+0x90>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a46:	2301      	movs	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	613b      	str	r3, [r7, #16]
}
 8003a62:	bf00      	nop
 8003a64:	bf00      	nop
 8003a66:	e7fd      	b.n	8003a64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a68:	697b      	ldr	r3, [r7, #20]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20001f34 	.word	0x20001f34
 8003a78:	0800527c 	.word	0x0800527c
 8003a7c:	08003bbd 	.word	0x08003bbd
 8003a80:	20001f38 	.word	0x20001f38

08003a84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	@ 0x28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10b      	bne.n	8003ab4 <xTimerGenericCommand+0x30>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	623b      	str	r3, [r7, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	bf00      	nop
 8003ab2:	e7fd      	b.n	8003ab0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ab4:	4b19      	ldr	r3, [pc, #100]	@ (8003b1c <xTimerGenericCommand+0x98>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d02a      	beq.n	8003b12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b05      	cmp	r3, #5
 8003acc:	dc18      	bgt.n	8003b00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ace:	f7ff fead 	bl	800382c <xTaskGetSchedulerState>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d109      	bne.n	8003aec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ad8:	4b10      	ldr	r3, [pc, #64]	@ (8003b1c <xTimerGenericCommand+0x98>)
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	f107 0110 	add.w	r1, r7, #16
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae4:	f7fe fbb0 	bl	8002248 <xQueueGenericSend>
 8003ae8:	6278      	str	r0, [r7, #36]	@ 0x24
 8003aea:	e012      	b.n	8003b12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003aec:	4b0b      	ldr	r3, [pc, #44]	@ (8003b1c <xTimerGenericCommand+0x98>)
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	f107 0110 	add.w	r1, r7, #16
 8003af4:	2300      	movs	r3, #0
 8003af6:	2200      	movs	r2, #0
 8003af8:	f7fe fba6 	bl	8002248 <xQueueGenericSend>
 8003afc:	6278      	str	r0, [r7, #36]	@ 0x24
 8003afe:	e008      	b.n	8003b12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b00:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <xTimerGenericCommand+0x98>)
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	f107 0110 	add.w	r1, r7, #16
 8003b08:	2300      	movs	r3, #0
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	f7fe fc9e 	bl	800244c <xQueueGenericSendFromISR>
 8003b10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3728      	adds	r7, #40	@ 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20001f34 	.word	0x20001f34

08003b20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b2a:	4b23      	ldr	r3, [pc, #140]	@ (8003bb8 <prvProcessExpiredTimer+0x98>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe fa51 	bl	8001fe0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d023      	beq.n	8003b94 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	699a      	ldr	r2, [r3, #24]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	18d1      	adds	r1, r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	6978      	ldr	r0, [r7, #20]
 8003b5a:	f000 f8d3 	bl	8003d04 <prvInsertTimerInActiveList>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b64:	2300      	movs	r3, #0
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	6978      	ldr	r0, [r7, #20]
 8003b70:	f7ff ff88 	bl	8003a84 <xTimerGenericCommand>
 8003b74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d114      	bne.n	8003ba6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	60fb      	str	r3, [r7, #12]
}
 8003b8e:	bf00      	nop
 8003b90:	bf00      	nop
 8003b92:	e7fd      	b.n	8003b90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	6978      	ldr	r0, [r7, #20]
 8003bac:	4798      	blx	r3
}
 8003bae:	bf00      	nop
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20001f2c 	.word	0x20001f2c

08003bbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bc4:	f107 0308 	add.w	r3, r7, #8
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 f859 	bl	8003c80 <prvGetNextExpireTime>
 8003bce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f805 	bl	8003be4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003bda:	f000 f8d5 	bl	8003d88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bde:	bf00      	nop
 8003be0:	e7f0      	b.n	8003bc4 <prvTimerTask+0x8>
	...

08003be4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003bee:	f7ff fa39 	bl	8003064 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bf2:	f107 0308 	add.w	r3, r7, #8
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 f864 	bl	8003cc4 <prvSampleTimeNow>
 8003bfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d130      	bne.n	8003c66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <prvProcessTimerOrBlockTask+0x3c>
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d806      	bhi.n	8003c20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c12:	f7ff fa35 	bl	8003080 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c16:	68f9      	ldr	r1, [r7, #12]
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ff81 	bl	8003b20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c1e:	e024      	b.n	8003c6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c26:	4b13      	ldr	r3, [pc, #76]	@ (8003c74 <prvProcessTimerOrBlockTask+0x90>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <prvProcessTimerOrBlockTask+0x50>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <prvProcessTimerOrBlockTask+0x52>
 8003c34:	2300      	movs	r3, #0
 8003c36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c38:	4b0f      	ldr	r3, [pc, #60]	@ (8003c78 <prvProcessTimerOrBlockTask+0x94>)
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	f7fe feb9 	bl	80029bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c4a:	f7ff fa19 	bl	8003080 <xTaskResumeAll>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c54:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <prvProcessTimerOrBlockTask+0x98>)
 8003c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	f3bf 8f6f 	isb	sy
}
 8003c64:	e001      	b.n	8003c6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c66:	f7ff fa0b 	bl	8003080 <xTaskResumeAll>
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20001f30 	.word	0x20001f30
 8003c78:	20001f34 	.word	0x20001f34
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c88:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc0 <prvGetNextExpireTime+0x40>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <prvGetNextExpireTime+0x16>
 8003c92:	2201      	movs	r2, #1
 8003c94:	e000      	b.n	8003c98 <prvGetNextExpireTime+0x18>
 8003c96:	2200      	movs	r2, #0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ca4:	4b06      	ldr	r3, [pc, #24]	@ (8003cc0 <prvGetNextExpireTime+0x40>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	e001      	b.n	8003cb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	20001f2c 	.word	0x20001f2c

08003cc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ccc:	f7ff fa76 	bl	80031bc <xTaskGetTickCount>
 8003cd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d00 <prvSampleTimeNow+0x3c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d205      	bcs.n	8003ce8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003cdc:	f000 f93a 	bl	8003f54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e002      	b.n	8003cee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003cee:	4a04      	ldr	r2, [pc, #16]	@ (8003d00 <prvSampleTimeNow+0x3c>)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20001f3c 	.word	0x20001f3c

08003d04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d812      	bhi.n	8003d50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	1ad2      	subs	r2, r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d302      	bcc.n	8003d3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e01b      	b.n	8003d76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d3e:	4b10      	ldr	r3, [pc, #64]	@ (8003d80 <prvInsertTimerInActiveList+0x7c>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3304      	adds	r3, #4
 8003d46:	4619      	mov	r1, r3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	f7fe f911 	bl	8001f70 <vListInsert>
 8003d4e:	e012      	b.n	8003d76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d206      	bcs.n	8003d66 <prvInsertTimerInActiveList+0x62>
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d302      	bcc.n	8003d66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e007      	b.n	8003d76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d66:	4b07      	ldr	r3, [pc, #28]	@ (8003d84 <prvInsertTimerInActiveList+0x80>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f7fe f8fd 	bl	8001f70 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d76:	697b      	ldr	r3, [r7, #20]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20001f30 	.word	0x20001f30
 8003d84:	20001f2c 	.word	0x20001f2c

08003d88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08e      	sub	sp, #56	@ 0x38
 8003d8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d8e:	e0ce      	b.n	8003f2e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da19      	bge.n	8003dca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d96:	1d3b      	adds	r3, r7, #4
 8003d98:	3304      	adds	r3, #4
 8003d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10b      	bne.n	8003dba <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	61fb      	str	r3, [r7, #28]
}
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
 8003db8:	e7fd      	b.n	8003db6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc0:	6850      	ldr	r0, [r2, #4]
 8003dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc4:	6892      	ldr	r2, [r2, #8]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f2c0 80ae 	blt.w	8003f2e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d004      	beq.n	8003de8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de0:	3304      	adds	r3, #4
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe f8fc 	bl	8001fe0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003de8:	463b      	mov	r3, r7
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ff6a 	bl	8003cc4 <prvSampleTimeNow>
 8003df0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b09      	cmp	r3, #9
 8003df6:	f200 8097 	bhi.w	8003f28 <prvProcessReceivedCommands+0x1a0>
 8003dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003e00 <prvProcessReceivedCommands+0x78>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e29 	.word	0x08003e29
 8003e04:	08003e29 	.word	0x08003e29
 8003e08:	08003e29 	.word	0x08003e29
 8003e0c:	08003e9f 	.word	0x08003e9f
 8003e10:	08003eb3 	.word	0x08003eb3
 8003e14:	08003eff 	.word	0x08003eff
 8003e18:	08003e29 	.word	0x08003e29
 8003e1c:	08003e29 	.word	0x08003e29
 8003e20:	08003e9f 	.word	0x08003e9f
 8003e24:	08003eb3 	.word	0x08003eb3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	18d1      	adds	r1, r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e48:	f7ff ff5c 	bl	8003d04 <prvInsertTimerInActiveList>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d06c      	beq.n	8003f2c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d061      	beq.n	8003f2c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	441a      	add	r2, r3
 8003e70:	2300      	movs	r3, #0
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	2300      	movs	r3, #0
 8003e76:	2100      	movs	r1, #0
 8003e78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e7a:	f7ff fe03 	bl	8003a84 <xTimerGenericCommand>
 8003e7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d152      	bne.n	8003f2c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	61bb      	str	r3, [r7, #24]
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	e7fd      	b.n	8003e9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003eb0:	e03d      	b.n	8003f2e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	617b      	str	r3, [r7, #20]
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	e7fd      	b.n	8003ee6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	18d1      	adds	r1, r2, r3
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ef8:	f7ff ff04 	bl	8003d04 <prvInsertTimerInActiveList>
					break;
 8003efc:	e017      	b.n	8003f2e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d103      	bne.n	8003f14 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003f0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f0e:	f000 fb85 	bl	800461c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f12:	e00c      	b.n	8003f2e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003f26:	e002      	b.n	8003f2e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003f28:	bf00      	nop
 8003f2a:	e000      	b.n	8003f2e <prvProcessReceivedCommands+0x1a6>
					break;
 8003f2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f2e:	4b08      	ldr	r3, [pc, #32]	@ (8003f50 <prvProcessReceivedCommands+0x1c8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	1d39      	adds	r1, r7, #4
 8003f34:	2200      	movs	r2, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fb26 	bl	8002588 <xQueueReceive>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f47f af26 	bne.w	8003d90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	3730      	adds	r7, #48	@ 0x30
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20001f34 	.word	0x20001f34

08003f54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f5a:	e049      	b.n	8003ff0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8004018 <prvSwitchTimerLists+0xc4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f66:	4b2c      	ldr	r3, [pc, #176]	@ (8004018 <prvSwitchTimerLists+0xc4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fe f833 	bl	8001fe0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d02f      	beq.n	8003ff0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4413      	add	r3, r2
 8003f98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d90e      	bls.n	8003fc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fae:	4b1a      	ldr	r3, [pc, #104]	@ (8004018 <prvSwitchTimerLists+0xc4>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f7fd ffd9 	bl	8001f70 <vListInsert>
 8003fbe:	e017      	b.n	8003ff0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	2100      	movs	r1, #0
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff fd5a 	bl	8003a84 <xTimerGenericCommand>
 8003fd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	603b      	str	r3, [r7, #0]
}
 8003fea:	bf00      	nop
 8003fec:	bf00      	nop
 8003fee:	e7fd      	b.n	8003fec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ff0:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <prvSwitchTimerLists+0xc4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1b0      	bne.n	8003f5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ffa:	4b07      	ldr	r3, [pc, #28]	@ (8004018 <prvSwitchTimerLists+0xc4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004000:	4b06      	ldr	r3, [pc, #24]	@ (800401c <prvSwitchTimerLists+0xc8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <prvSwitchTimerLists+0xc4>)
 8004006:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004008:	4a04      	ldr	r2, [pc, #16]	@ (800401c <prvSwitchTimerLists+0xc8>)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	6013      	str	r3, [r2, #0]
}
 800400e:	bf00      	nop
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20001f2c 	.word	0x20001f2c
 800401c:	20001f30 	.word	0x20001f30

08004020 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004026:	f000 f929 	bl	800427c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800402a:	4b15      	ldr	r3, [pc, #84]	@ (8004080 <prvCheckForValidListAndQueue+0x60>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d120      	bne.n	8004074 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004032:	4814      	ldr	r0, [pc, #80]	@ (8004084 <prvCheckForValidListAndQueue+0x64>)
 8004034:	f7fd ff4e 	bl	8001ed4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004038:	4813      	ldr	r0, [pc, #76]	@ (8004088 <prvCheckForValidListAndQueue+0x68>)
 800403a:	f7fd ff4b 	bl	8001ed4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800403e:	4b13      	ldr	r3, [pc, #76]	@ (800408c <prvCheckForValidListAndQueue+0x6c>)
 8004040:	4a10      	ldr	r2, [pc, #64]	@ (8004084 <prvCheckForValidListAndQueue+0x64>)
 8004042:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004044:	4b12      	ldr	r3, [pc, #72]	@ (8004090 <prvCheckForValidListAndQueue+0x70>)
 8004046:	4a10      	ldr	r2, [pc, #64]	@ (8004088 <prvCheckForValidListAndQueue+0x68>)
 8004048:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800404a:	2300      	movs	r3, #0
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	4b11      	ldr	r3, [pc, #68]	@ (8004094 <prvCheckForValidListAndQueue+0x74>)
 8004050:	4a11      	ldr	r2, [pc, #68]	@ (8004098 <prvCheckForValidListAndQueue+0x78>)
 8004052:	2110      	movs	r1, #16
 8004054:	200a      	movs	r0, #10
 8004056:	f7fe f857 	bl	8002108 <xQueueGenericCreateStatic>
 800405a:	4603      	mov	r3, r0
 800405c:	4a08      	ldr	r2, [pc, #32]	@ (8004080 <prvCheckForValidListAndQueue+0x60>)
 800405e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004060:	4b07      	ldr	r3, [pc, #28]	@ (8004080 <prvCheckForValidListAndQueue+0x60>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004068:	4b05      	ldr	r3, [pc, #20]	@ (8004080 <prvCheckForValidListAndQueue+0x60>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	490b      	ldr	r1, [pc, #44]	@ (800409c <prvCheckForValidListAndQueue+0x7c>)
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fc7c 	bl	800296c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004074:	f000 f932 	bl	80042dc <vPortExitCritical>
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20001f34 	.word	0x20001f34
 8004084:	20001f04 	.word	0x20001f04
 8004088:	20001f18 	.word	0x20001f18
 800408c:	20001f2c 	.word	0x20001f2c
 8004090:	20001f30 	.word	0x20001f30
 8004094:	20001fe0 	.word	0x20001fe0
 8004098:	20001f40 	.word	0x20001f40
 800409c:	08005284 	.word	0x08005284

080040a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b04      	subs	r3, #4
 80040b0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3b04      	subs	r3, #4
 80040be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f023 0201 	bic.w	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b04      	subs	r3, #4
 80040ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040d0:	4a08      	ldr	r2, [pc, #32]	@ (80040f4 <pxPortInitialiseStack+0x54>)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b14      	subs	r3, #20
 80040da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3b20      	subs	r3, #32
 80040e6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040e8:	68fb      	ldr	r3, [r7, #12]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	080040f9 	.word	0x080040f9

080040f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004102:	4b12      	ldr	r3, [pc, #72]	@ (800414c <prvTaskExitError+0x54>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	d00b      	beq.n	8004124 <prvTaskExitError+0x2c>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	60fb      	str	r3, [r7, #12]
}
 800411e:	bf00      	nop
 8004120:	bf00      	nop
 8004122:	e7fd      	b.n	8004120 <prvTaskExitError+0x28>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	60bb      	str	r3, [r7, #8]
}
 8004136:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004138:	bf00      	nop
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0fc      	beq.n	800413a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	20000010 	.word	0x20000010

08004150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004150:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <pxCurrentTCBConst2>)
 8004152:	6819      	ldr	r1, [r3, #0]
 8004154:	6808      	ldr	r0, [r1, #0]
 8004156:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800415a:	f380 8809 	msr	PSP, r0
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8811 	msr	BASEPRI, r0
 800416a:	f04e 0e0d 	orr.w	lr, lr, #13
 800416e:	4770      	bx	lr

08004170 <pxCurrentTCBConst2>:
 8004170:	20001a04 	.word	0x20001a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop

08004178 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004178:	4806      	ldr	r0, [pc, #24]	@ (8004194 <prvPortStartFirstTask+0x1c>)
 800417a:	6800      	ldr	r0, [r0, #0]
 800417c:	6800      	ldr	r0, [r0, #0]
 800417e:	f380 8808 	msr	MSP, r0
 8004182:	b662      	cpsie	i
 8004184:	b661      	cpsie	f
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	df00      	svc	0
 8004190:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004192:	bf00      	nop
 8004194:	e000ed08 	.word	0xe000ed08

08004198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800419e:	4b32      	ldr	r3, [pc, #200]	@ (8004268 <xPortStartScheduler+0xd0>)
 80041a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	22ff      	movs	r2, #255	@ 0xff
 80041ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4b2a      	ldr	r3, [pc, #168]	@ (800426c <xPortStartScheduler+0xd4>)
 80041c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041cc:	e009      	b.n	80041e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80041ce:	4b28      	ldr	r3, [pc, #160]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	4a26      	ldr	r2, [pc, #152]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ea:	2b80      	cmp	r3, #128	@ 0x80
 80041ec:	d0ef      	beq.n	80041ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041ee:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1c3 0307 	rsb	r3, r3, #7
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d00b      	beq.n	8004212 <xPortStartScheduler+0x7a>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60bb      	str	r3, [r7, #8]
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004212:	4b17      	ldr	r3, [pc, #92]	@ (8004270 <xPortStartScheduler+0xd8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	4a15      	ldr	r2, [pc, #84]	@ (8004270 <xPortStartScheduler+0xd8>)
 800421a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800421c:	4b14      	ldr	r3, [pc, #80]	@ (8004270 <xPortStartScheduler+0xd8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004224:	4a12      	ldr	r2, [pc, #72]	@ (8004270 <xPortStartScheduler+0xd8>)
 8004226:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004230:	4b10      	ldr	r3, [pc, #64]	@ (8004274 <xPortStartScheduler+0xdc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0f      	ldr	r2, [pc, #60]	@ (8004274 <xPortStartScheduler+0xdc>)
 8004236:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800423a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800423c:	4b0d      	ldr	r3, [pc, #52]	@ (8004274 <xPortStartScheduler+0xdc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a0c      	ldr	r2, [pc, #48]	@ (8004274 <xPortStartScheduler+0xdc>)
 8004242:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004246:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004248:	f000 f8b8 	bl	80043bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800424c:	4b0a      	ldr	r3, [pc, #40]	@ (8004278 <xPortStartScheduler+0xe0>)
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004252:	f7ff ff91 	bl	8004178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004256:	f7ff f879 	bl	800334c <vTaskSwitchContext>
	prvTaskExitError();
 800425a:	f7ff ff4d 	bl	80040f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	e000e400 	.word	0xe000e400
 800426c:	20002030 	.word	0x20002030
 8004270:	20002034 	.word	0x20002034
 8004274:	e000ed20 	.word	0xe000ed20
 8004278:	20000010 	.word	0x20000010

0800427c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	607b      	str	r3, [r7, #4]
}
 8004294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004296:	4b0f      	ldr	r3, [pc, #60]	@ (80042d4 <vPortEnterCritical+0x58>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3301      	adds	r3, #1
 800429c:	4a0d      	ldr	r2, [pc, #52]	@ (80042d4 <vPortEnterCritical+0x58>)
 800429e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042a0:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <vPortEnterCritical+0x58>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d110      	bne.n	80042ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042a8:	4b0b      	ldr	r3, [pc, #44]	@ (80042d8 <vPortEnterCritical+0x5c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <vPortEnterCritical+0x4e>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	603b      	str	r3, [r7, #0]
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	e7fd      	b.n	80042c6 <vPortEnterCritical+0x4a>
	}
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr
 80042d4:	20000010 	.word	0x20000010
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042e2:	4b12      	ldr	r3, [pc, #72]	@ (800432c <vPortExitCritical+0x50>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <vPortExitCritical+0x26>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	607b      	str	r3, [r7, #4]
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	e7fd      	b.n	80042fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004302:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <vPortExitCritical+0x50>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3b01      	subs	r3, #1
 8004308:	4a08      	ldr	r2, [pc, #32]	@ (800432c <vPortExitCritical+0x50>)
 800430a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800430c:	4b07      	ldr	r3, [pc, #28]	@ (800432c <vPortExitCritical+0x50>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <vPortExitCritical+0x44>
 8004314:	2300      	movs	r3, #0
 8004316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f383 8811 	msr	BASEPRI, r3
}
 800431e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000010 	.word	0x20000010

08004330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004330:	f3ef 8009 	mrs	r0, PSP
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <pxCurrentTCBConst>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004340:	6010      	str	r0, [r2, #0]
 8004342:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004346:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800434a:	f380 8811 	msr	BASEPRI, r0
 800434e:	f7fe fffd 	bl	800334c <vTaskSwitchContext>
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f380 8811 	msr	BASEPRI, r0
 800435a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	6808      	ldr	r0, [r1, #0]
 8004362:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004366:	f380 8809 	msr	PSP, r0
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	4770      	bx	lr

08004370 <pxCurrentTCBConst>:
 8004370:	20001a04 	.word	0x20001a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	607b      	str	r3, [r7, #4]
}
 8004390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004392:	f7fe ff21 	bl	80031d8 <xTaskIncrementTick>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800439c:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <xPortSysTickHandler+0x40>)
 800439e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f383 8811 	msr	BASEPRI, r3
}
 80043ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043c0:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <vPortSetupTimerInterrupt+0x30>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043c6:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <vPortSetupTimerInterrupt+0x34>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043cc:	4b09      	ldr	r3, [pc, #36]	@ (80043f4 <vPortSetupTimerInterrupt+0x38>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a09      	ldr	r2, [pc, #36]	@ (80043f8 <vPortSetupTimerInterrupt+0x3c>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	4a08      	ldr	r2, [pc, #32]	@ (80043fc <vPortSetupTimerInterrupt+0x40>)
 80043da:	3b01      	subs	r3, #1
 80043dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043de:	4b03      	ldr	r3, [pc, #12]	@ (80043ec <vPortSetupTimerInterrupt+0x30>)
 80043e0:	2207      	movs	r2, #7
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	e000e010 	.word	0xe000e010
 80043f0:	e000e018 	.word	0xe000e018
 80043f4:	20000004 	.word	0x20000004
 80043f8:	10624dd3 	.word	0x10624dd3
 80043fc:	e000e014 	.word	0xe000e014

08004400 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004406:	f3ef 8305 	mrs	r3, IPSR
 800440a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b0f      	cmp	r3, #15
 8004410:	d915      	bls.n	800443e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004412:	4a17      	ldr	r2, [pc, #92]	@ (8004470 <vPortValidateInterruptPriority+0x70>)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800441c:	4b15      	ldr	r3, [pc, #84]	@ (8004474 <vPortValidateInterruptPriority+0x74>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	7afa      	ldrb	r2, [r7, #11]
 8004422:	429a      	cmp	r2, r3
 8004424:	d20b      	bcs.n	800443e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	607b      	str	r3, [r7, #4]
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	e7fd      	b.n	800443a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800443e:	4b0e      	ldr	r3, [pc, #56]	@ (8004478 <vPortValidateInterruptPriority+0x78>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004446:	4b0d      	ldr	r3, [pc, #52]	@ (800447c <vPortValidateInterruptPriority+0x7c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d90b      	bls.n	8004466 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	603b      	str	r3, [r7, #0]
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	e7fd      	b.n	8004462 <vPortValidateInterruptPriority+0x62>
	}
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	e000e3f0 	.word	0xe000e3f0
 8004474:	20002030 	.word	0x20002030
 8004478:	e000ed0c 	.word	0xe000ed0c
 800447c:	20002034 	.word	0x20002034

08004480 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	@ 0x28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800448c:	f7fe fdea 	bl	8003064 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004490:	4b5c      	ldr	r3, [pc, #368]	@ (8004604 <pvPortMalloc+0x184>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004498:	f000 f924 	bl	80046e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800449c:	4b5a      	ldr	r3, [pc, #360]	@ (8004608 <pvPortMalloc+0x188>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 8095 	bne.w	80045d4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01e      	beq.n	80044ee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80044b0:	2208      	movs	r2, #8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d015      	beq.n	80044ee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f023 0307 	bic.w	r3, r3, #7
 80044c8:	3308      	adds	r3, #8
 80044ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <pvPortMalloc+0x6e>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	617b      	str	r3, [r7, #20]
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	e7fd      	b.n	80044ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d06f      	beq.n	80045d4 <pvPortMalloc+0x154>
 80044f4:	4b45      	ldr	r3, [pc, #276]	@ (800460c <pvPortMalloc+0x18c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d86a      	bhi.n	80045d4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044fe:	4b44      	ldr	r3, [pc, #272]	@ (8004610 <pvPortMalloc+0x190>)
 8004500:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004502:	4b43      	ldr	r3, [pc, #268]	@ (8004610 <pvPortMalloc+0x190>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004508:	e004      	b.n	8004514 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	429a      	cmp	r2, r3
 800451c:	d903      	bls.n	8004526 <pvPortMalloc+0xa6>
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f1      	bne.n	800450a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004526:	4b37      	ldr	r3, [pc, #220]	@ (8004604 <pvPortMalloc+0x184>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452c:	429a      	cmp	r2, r3
 800452e:	d051      	beq.n	80045d4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2208      	movs	r2, #8
 8004536:	4413      	add	r3, r2
 8004538:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	1ad2      	subs	r2, r2, r3
 800454a:	2308      	movs	r3, #8
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	429a      	cmp	r2, r3
 8004550:	d920      	bls.n	8004594 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4413      	add	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <pvPortMalloc+0xfc>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	613b      	str	r3, [r7, #16]
}
 8004576:	bf00      	nop
 8004578:	bf00      	nop
 800457a:	e7fd      	b.n	8004578 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	1ad2      	subs	r2, r2, r3
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800458e:	69b8      	ldr	r0, [r7, #24]
 8004590:	f000 f90a 	bl	80047a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004594:	4b1d      	ldr	r3, [pc, #116]	@ (800460c <pvPortMalloc+0x18c>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	4a1b      	ldr	r2, [pc, #108]	@ (800460c <pvPortMalloc+0x18c>)
 80045a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045a2:	4b1a      	ldr	r3, [pc, #104]	@ (800460c <pvPortMalloc+0x18c>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004614 <pvPortMalloc+0x194>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d203      	bcs.n	80045b6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045ae:	4b17      	ldr	r3, [pc, #92]	@ (800460c <pvPortMalloc+0x18c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a18      	ldr	r2, [pc, #96]	@ (8004614 <pvPortMalloc+0x194>)
 80045b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	4b13      	ldr	r3, [pc, #76]	@ (8004608 <pvPortMalloc+0x188>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	431a      	orrs	r2, r3
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80045ca:	4b13      	ldr	r3, [pc, #76]	@ (8004618 <pvPortMalloc+0x198>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3301      	adds	r3, #1
 80045d0:	4a11      	ldr	r2, [pc, #68]	@ (8004618 <pvPortMalloc+0x198>)
 80045d2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045d4:	f7fe fd54 	bl	8003080 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <pvPortMalloc+0x17a>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	60fb      	str	r3, [r7, #12]
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	e7fd      	b.n	80045f6 <pvPortMalloc+0x176>
	return pvReturn;
 80045fa:	69fb      	ldr	r3, [r7, #28]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3728      	adds	r7, #40	@ 0x28
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20004750 	.word	0x20004750
 8004608:	20004764 	.word	0x20004764
 800460c:	20004754 	.word	0x20004754
 8004610:	20004748 	.word	0x20004748
 8004614:	20004758 	.word	0x20004758
 8004618:	2000475c 	.word	0x2000475c

0800461c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d04f      	beq.n	80046ce <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800462e:	2308      	movs	r3, #8
 8004630:	425b      	negs	r3, r3
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4413      	add	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	4b25      	ldr	r3, [pc, #148]	@ (80046d8 <vPortFree+0xbc>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4013      	ands	r3, r2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <vPortFree+0x46>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	60fb      	str	r3, [r7, #12]
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <vPortFree+0x66>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	60bb      	str	r3, [r7, #8]
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	e7fd      	b.n	800467e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	4b14      	ldr	r3, [pc, #80]	@ (80046d8 <vPortFree+0xbc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01e      	beq.n	80046ce <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d11a      	bne.n	80046ce <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	4b0e      	ldr	r3, [pc, #56]	@ (80046d8 <vPortFree+0xbc>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	43db      	mvns	r3, r3
 80046a2:	401a      	ands	r2, r3
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046a8:	f7fe fcdc 	bl	8003064 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <vPortFree+0xc0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4413      	add	r3, r2
 80046b6:	4a09      	ldr	r2, [pc, #36]	@ (80046dc <vPortFree+0xc0>)
 80046b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046ba:	6938      	ldr	r0, [r7, #16]
 80046bc:	f000 f874 	bl	80047a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046c0:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <vPortFree+0xc4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	4a06      	ldr	r2, [pc, #24]	@ (80046e0 <vPortFree+0xc4>)
 80046c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80046ca:	f7fe fcd9 	bl	8003080 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046ce:	bf00      	nop
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20004764 	.word	0x20004764
 80046dc:	20004754 	.word	0x20004754
 80046e0:	20004760 	.word	0x20004760

080046e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046ea:	f242 7310 	movw	r3, #10000	@ 0x2710
 80046ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046f0:	4b27      	ldr	r3, [pc, #156]	@ (8004790 <prvHeapInit+0xac>)
 80046f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	3307      	adds	r3, #7
 8004702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0307 	bic.w	r3, r3, #7
 800470a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	4a1f      	ldr	r2, [pc, #124]	@ (8004790 <prvHeapInit+0xac>)
 8004714:	4413      	add	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800471c:	4a1d      	ldr	r2, [pc, #116]	@ (8004794 <prvHeapInit+0xb0>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004722:	4b1c      	ldr	r3, [pc, #112]	@ (8004794 <prvHeapInit+0xb0>)
 8004724:	2200      	movs	r2, #0
 8004726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	4413      	add	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004730:	2208      	movs	r2, #8
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0307 	bic.w	r3, r3, #7
 800473e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4a15      	ldr	r2, [pc, #84]	@ (8004798 <prvHeapInit+0xb4>)
 8004744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004746:	4b14      	ldr	r3, [pc, #80]	@ (8004798 <prvHeapInit+0xb4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2200      	movs	r2, #0
 800474c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800474e:	4b12      	ldr	r3, [pc, #72]	@ (8004798 <prvHeapInit+0xb4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	1ad2      	subs	r2, r2, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004764:	4b0c      	ldr	r3, [pc, #48]	@ (8004798 <prvHeapInit+0xb4>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	4a0a      	ldr	r2, [pc, #40]	@ (800479c <prvHeapInit+0xb8>)
 8004772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a09      	ldr	r2, [pc, #36]	@ (80047a0 <prvHeapInit+0xbc>)
 800477a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800477c:	4b09      	ldr	r3, [pc, #36]	@ (80047a4 <prvHeapInit+0xc0>)
 800477e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004782:	601a      	str	r2, [r3, #0]
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20002038 	.word	0x20002038
 8004794:	20004748 	.word	0x20004748
 8004798:	20004750 	.word	0x20004750
 800479c:	20004758 	.word	0x20004758
 80047a0:	20004754 	.word	0x20004754
 80047a4:	20004764 	.word	0x20004764

080047a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047b0:	4b27      	ldr	r3, [pc, #156]	@ (8004850 <prvInsertBlockIntoFreeList+0xa8>)
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e002      	b.n	80047bc <prvInsertBlockIntoFreeList+0x14>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d8f7      	bhi.n	80047b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	4413      	add	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d108      	bne.n	80047ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	441a      	add	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	441a      	add	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d118      	bne.n	8004830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b14      	ldr	r3, [pc, #80]	@ (8004854 <prvInsertBlockIntoFreeList+0xac>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d00d      	beq.n	8004826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	441a      	add	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e008      	b.n	8004838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004826:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <prvInsertBlockIntoFreeList+0xac>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	e003      	b.n	8004838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	429a      	cmp	r2, r3
 800483e:	d002      	beq.n	8004846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004846:	bf00      	nop
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr
 8004850:	20004748 	.word	0x20004748
 8004854:	20004750 	.word	0x20004750

08004858 <siprintf>:
 8004858:	b40e      	push	{r1, r2, r3}
 800485a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800485e:	b510      	push	{r4, lr}
 8004860:	2400      	movs	r4, #0
 8004862:	b09d      	sub	sp, #116	@ 0x74
 8004864:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004866:	9002      	str	r0, [sp, #8]
 8004868:	9006      	str	r0, [sp, #24]
 800486a:	9107      	str	r1, [sp, #28]
 800486c:	9104      	str	r1, [sp, #16]
 800486e:	4809      	ldr	r0, [pc, #36]	@ (8004894 <siprintf+0x3c>)
 8004870:	4909      	ldr	r1, [pc, #36]	@ (8004898 <siprintf+0x40>)
 8004872:	f853 2b04 	ldr.w	r2, [r3], #4
 8004876:	9105      	str	r1, [sp, #20]
 8004878:	6800      	ldr	r0, [r0, #0]
 800487a:	a902      	add	r1, sp, #8
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004880:	f000 f9a0 	bl	8004bc4 <_svfiprintf_r>
 8004884:	9b02      	ldr	r3, [sp, #8]
 8004886:	701c      	strb	r4, [r3, #0]
 8004888:	b01d      	add	sp, #116	@ 0x74
 800488a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800488e:	b003      	add	sp, #12
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000014 	.word	0x20000014
 8004898:	ffff0208 	.word	0xffff0208

0800489c <memset>:
 800489c:	4603      	mov	r3, r0
 800489e:	4402      	add	r2, r0
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d100      	bne.n	80048a6 <memset+0xa>
 80048a4:	4770      	bx	lr
 80048a6:	f803 1b01 	strb.w	r1, [r3], #1
 80048aa:	e7f9      	b.n	80048a0 <memset+0x4>

080048ac <__errno>:
 80048ac:	4b01      	ldr	r3, [pc, #4]	@ (80048b4 <__errno+0x8>)
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000014 	.word	0x20000014

080048b8 <__libc_init_array>:
 80048b8:	b570      	push	{r4, r5, r6, lr}
 80048ba:	2600      	movs	r6, #0
 80048bc:	4d0c      	ldr	r5, [pc, #48]	@ (80048f0 <__libc_init_array+0x38>)
 80048be:	4c0d      	ldr	r4, [pc, #52]	@ (80048f4 <__libc_init_array+0x3c>)
 80048c0:	1b64      	subs	r4, r4, r5
 80048c2:	10a4      	asrs	r4, r4, #2
 80048c4:	42a6      	cmp	r6, r4
 80048c6:	d109      	bne.n	80048dc <__libc_init_array+0x24>
 80048c8:	f000 fc76 	bl	80051b8 <_init>
 80048cc:	2600      	movs	r6, #0
 80048ce:	4d0a      	ldr	r5, [pc, #40]	@ (80048f8 <__libc_init_array+0x40>)
 80048d0:	4c0a      	ldr	r4, [pc, #40]	@ (80048fc <__libc_init_array+0x44>)
 80048d2:	1b64      	subs	r4, r4, r5
 80048d4:	10a4      	asrs	r4, r4, #2
 80048d6:	42a6      	cmp	r6, r4
 80048d8:	d105      	bne.n	80048e6 <__libc_init_array+0x2e>
 80048da:	bd70      	pop	{r4, r5, r6, pc}
 80048dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e0:	4798      	blx	r3
 80048e2:	3601      	adds	r6, #1
 80048e4:	e7ee      	b.n	80048c4 <__libc_init_array+0xc>
 80048e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ea:	4798      	blx	r3
 80048ec:	3601      	adds	r6, #1
 80048ee:	e7f2      	b.n	80048d6 <__libc_init_array+0x1e>
 80048f0:	0800537c 	.word	0x0800537c
 80048f4:	0800537c 	.word	0x0800537c
 80048f8:	0800537c 	.word	0x0800537c
 80048fc:	08005380 	.word	0x08005380

08004900 <__retarget_lock_acquire_recursive>:
 8004900:	4770      	bx	lr

08004902 <__retarget_lock_release_recursive>:
 8004902:	4770      	bx	lr

08004904 <memcpy>:
 8004904:	440a      	add	r2, r1
 8004906:	4291      	cmp	r1, r2
 8004908:	f100 33ff 	add.w	r3, r0, #4294967295
 800490c:	d100      	bne.n	8004910 <memcpy+0xc>
 800490e:	4770      	bx	lr
 8004910:	b510      	push	{r4, lr}
 8004912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004916:	4291      	cmp	r1, r2
 8004918:	f803 4f01 	strb.w	r4, [r3, #1]!
 800491c:	d1f9      	bne.n	8004912 <memcpy+0xe>
 800491e:	bd10      	pop	{r4, pc}

08004920 <_free_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4605      	mov	r5, r0
 8004924:	2900      	cmp	r1, #0
 8004926:	d040      	beq.n	80049aa <_free_r+0x8a>
 8004928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800492c:	1f0c      	subs	r4, r1, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	bfb8      	it	lt
 8004932:	18e4      	addlt	r4, r4, r3
 8004934:	f000 f8de 	bl	8004af4 <__malloc_lock>
 8004938:	4a1c      	ldr	r2, [pc, #112]	@ (80049ac <_free_r+0x8c>)
 800493a:	6813      	ldr	r3, [r2, #0]
 800493c:	b933      	cbnz	r3, 800494c <_free_r+0x2c>
 800493e:	6063      	str	r3, [r4, #4]
 8004940:	6014      	str	r4, [r2, #0]
 8004942:	4628      	mov	r0, r5
 8004944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004948:	f000 b8da 	b.w	8004b00 <__malloc_unlock>
 800494c:	42a3      	cmp	r3, r4
 800494e:	d908      	bls.n	8004962 <_free_r+0x42>
 8004950:	6820      	ldr	r0, [r4, #0]
 8004952:	1821      	adds	r1, r4, r0
 8004954:	428b      	cmp	r3, r1
 8004956:	bf01      	itttt	eq
 8004958:	6819      	ldreq	r1, [r3, #0]
 800495a:	685b      	ldreq	r3, [r3, #4]
 800495c:	1809      	addeq	r1, r1, r0
 800495e:	6021      	streq	r1, [r4, #0]
 8004960:	e7ed      	b.n	800493e <_free_r+0x1e>
 8004962:	461a      	mov	r2, r3
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	b10b      	cbz	r3, 800496c <_free_r+0x4c>
 8004968:	42a3      	cmp	r3, r4
 800496a:	d9fa      	bls.n	8004962 <_free_r+0x42>
 800496c:	6811      	ldr	r1, [r2, #0]
 800496e:	1850      	adds	r0, r2, r1
 8004970:	42a0      	cmp	r0, r4
 8004972:	d10b      	bne.n	800498c <_free_r+0x6c>
 8004974:	6820      	ldr	r0, [r4, #0]
 8004976:	4401      	add	r1, r0
 8004978:	1850      	adds	r0, r2, r1
 800497a:	4283      	cmp	r3, r0
 800497c:	6011      	str	r1, [r2, #0]
 800497e:	d1e0      	bne.n	8004942 <_free_r+0x22>
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4408      	add	r0, r1
 8004986:	6010      	str	r0, [r2, #0]
 8004988:	6053      	str	r3, [r2, #4]
 800498a:	e7da      	b.n	8004942 <_free_r+0x22>
 800498c:	d902      	bls.n	8004994 <_free_r+0x74>
 800498e:	230c      	movs	r3, #12
 8004990:	602b      	str	r3, [r5, #0]
 8004992:	e7d6      	b.n	8004942 <_free_r+0x22>
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	1821      	adds	r1, r4, r0
 8004998:	428b      	cmp	r3, r1
 800499a:	bf01      	itttt	eq
 800499c:	6819      	ldreq	r1, [r3, #0]
 800499e:	685b      	ldreq	r3, [r3, #4]
 80049a0:	1809      	addeq	r1, r1, r0
 80049a2:	6021      	streq	r1, [r4, #0]
 80049a4:	6063      	str	r3, [r4, #4]
 80049a6:	6054      	str	r4, [r2, #4]
 80049a8:	e7cb      	b.n	8004942 <_free_r+0x22>
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	200048ac 	.word	0x200048ac

080049b0 <sbrk_aligned>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	4e0f      	ldr	r6, [pc, #60]	@ (80049f0 <sbrk_aligned+0x40>)
 80049b4:	460c      	mov	r4, r1
 80049b6:	6831      	ldr	r1, [r6, #0]
 80049b8:	4605      	mov	r5, r0
 80049ba:	b911      	cbnz	r1, 80049c2 <sbrk_aligned+0x12>
 80049bc:	f000 fba8 	bl	8005110 <_sbrk_r>
 80049c0:	6030      	str	r0, [r6, #0]
 80049c2:	4621      	mov	r1, r4
 80049c4:	4628      	mov	r0, r5
 80049c6:	f000 fba3 	bl	8005110 <_sbrk_r>
 80049ca:	1c43      	adds	r3, r0, #1
 80049cc:	d103      	bne.n	80049d6 <sbrk_aligned+0x26>
 80049ce:	f04f 34ff 	mov.w	r4, #4294967295
 80049d2:	4620      	mov	r0, r4
 80049d4:	bd70      	pop	{r4, r5, r6, pc}
 80049d6:	1cc4      	adds	r4, r0, #3
 80049d8:	f024 0403 	bic.w	r4, r4, #3
 80049dc:	42a0      	cmp	r0, r4
 80049de:	d0f8      	beq.n	80049d2 <sbrk_aligned+0x22>
 80049e0:	1a21      	subs	r1, r4, r0
 80049e2:	4628      	mov	r0, r5
 80049e4:	f000 fb94 	bl	8005110 <_sbrk_r>
 80049e8:	3001      	adds	r0, #1
 80049ea:	d1f2      	bne.n	80049d2 <sbrk_aligned+0x22>
 80049ec:	e7ef      	b.n	80049ce <sbrk_aligned+0x1e>
 80049ee:	bf00      	nop
 80049f0:	200048a8 	.word	0x200048a8

080049f4 <_malloc_r>:
 80049f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f8:	1ccd      	adds	r5, r1, #3
 80049fa:	f025 0503 	bic.w	r5, r5, #3
 80049fe:	3508      	adds	r5, #8
 8004a00:	2d0c      	cmp	r5, #12
 8004a02:	bf38      	it	cc
 8004a04:	250c      	movcc	r5, #12
 8004a06:	2d00      	cmp	r5, #0
 8004a08:	4606      	mov	r6, r0
 8004a0a:	db01      	blt.n	8004a10 <_malloc_r+0x1c>
 8004a0c:	42a9      	cmp	r1, r5
 8004a0e:	d904      	bls.n	8004a1a <_malloc_r+0x26>
 8004a10:	230c      	movs	r3, #12
 8004a12:	6033      	str	r3, [r6, #0]
 8004a14:	2000      	movs	r0, #0
 8004a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004af0 <_malloc_r+0xfc>
 8004a1e:	f000 f869 	bl	8004af4 <__malloc_lock>
 8004a22:	f8d8 3000 	ldr.w	r3, [r8]
 8004a26:	461c      	mov	r4, r3
 8004a28:	bb44      	cbnz	r4, 8004a7c <_malloc_r+0x88>
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	f7ff ffbf 	bl	80049b0 <sbrk_aligned>
 8004a32:	1c43      	adds	r3, r0, #1
 8004a34:	4604      	mov	r4, r0
 8004a36:	d158      	bne.n	8004aea <_malloc_r+0xf6>
 8004a38:	f8d8 4000 	ldr.w	r4, [r8]
 8004a3c:	4627      	mov	r7, r4
 8004a3e:	2f00      	cmp	r7, #0
 8004a40:	d143      	bne.n	8004aca <_malloc_r+0xd6>
 8004a42:	2c00      	cmp	r4, #0
 8004a44:	d04b      	beq.n	8004ade <_malloc_r+0xea>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	4639      	mov	r1, r7
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	eb04 0903 	add.w	r9, r4, r3
 8004a50:	f000 fb5e 	bl	8005110 <_sbrk_r>
 8004a54:	4581      	cmp	r9, r0
 8004a56:	d142      	bne.n	8004ade <_malloc_r+0xea>
 8004a58:	6821      	ldr	r1, [r4, #0]
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	1a6d      	subs	r5, r5, r1
 8004a5e:	4629      	mov	r1, r5
 8004a60:	f7ff ffa6 	bl	80049b0 <sbrk_aligned>
 8004a64:	3001      	adds	r0, #1
 8004a66:	d03a      	beq.n	8004ade <_malloc_r+0xea>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	442b      	add	r3, r5
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	bb62      	cbnz	r2, 8004ad0 <_malloc_r+0xdc>
 8004a76:	f8c8 7000 	str.w	r7, [r8]
 8004a7a:	e00f      	b.n	8004a9c <_malloc_r+0xa8>
 8004a7c:	6822      	ldr	r2, [r4, #0]
 8004a7e:	1b52      	subs	r2, r2, r5
 8004a80:	d420      	bmi.n	8004ac4 <_malloc_r+0xd0>
 8004a82:	2a0b      	cmp	r2, #11
 8004a84:	d917      	bls.n	8004ab6 <_malloc_r+0xc2>
 8004a86:	1961      	adds	r1, r4, r5
 8004a88:	42a3      	cmp	r3, r4
 8004a8a:	6025      	str	r5, [r4, #0]
 8004a8c:	bf18      	it	ne
 8004a8e:	6059      	strne	r1, [r3, #4]
 8004a90:	6863      	ldr	r3, [r4, #4]
 8004a92:	bf08      	it	eq
 8004a94:	f8c8 1000 	streq.w	r1, [r8]
 8004a98:	5162      	str	r2, [r4, r5]
 8004a9a:	604b      	str	r3, [r1, #4]
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	f000 f82f 	bl	8004b00 <__malloc_unlock>
 8004aa2:	f104 000b 	add.w	r0, r4, #11
 8004aa6:	1d23      	adds	r3, r4, #4
 8004aa8:	f020 0007 	bic.w	r0, r0, #7
 8004aac:	1ac2      	subs	r2, r0, r3
 8004aae:	bf1c      	itt	ne
 8004ab0:	1a1b      	subne	r3, r3, r0
 8004ab2:	50a3      	strne	r3, [r4, r2]
 8004ab4:	e7af      	b.n	8004a16 <_malloc_r+0x22>
 8004ab6:	6862      	ldr	r2, [r4, #4]
 8004ab8:	42a3      	cmp	r3, r4
 8004aba:	bf0c      	ite	eq
 8004abc:	f8c8 2000 	streq.w	r2, [r8]
 8004ac0:	605a      	strne	r2, [r3, #4]
 8004ac2:	e7eb      	b.n	8004a9c <_malloc_r+0xa8>
 8004ac4:	4623      	mov	r3, r4
 8004ac6:	6864      	ldr	r4, [r4, #4]
 8004ac8:	e7ae      	b.n	8004a28 <_malloc_r+0x34>
 8004aca:	463c      	mov	r4, r7
 8004acc:	687f      	ldr	r7, [r7, #4]
 8004ace:	e7b6      	b.n	8004a3e <_malloc_r+0x4a>
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	42a3      	cmp	r3, r4
 8004ad6:	d1fb      	bne.n	8004ad0 <_malloc_r+0xdc>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	6053      	str	r3, [r2, #4]
 8004adc:	e7de      	b.n	8004a9c <_malloc_r+0xa8>
 8004ade:	230c      	movs	r3, #12
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	6033      	str	r3, [r6, #0]
 8004ae4:	f000 f80c 	bl	8004b00 <__malloc_unlock>
 8004ae8:	e794      	b.n	8004a14 <_malloc_r+0x20>
 8004aea:	6005      	str	r5, [r0, #0]
 8004aec:	e7d6      	b.n	8004a9c <_malloc_r+0xa8>
 8004aee:	bf00      	nop
 8004af0:	200048ac 	.word	0x200048ac

08004af4 <__malloc_lock>:
 8004af4:	4801      	ldr	r0, [pc, #4]	@ (8004afc <__malloc_lock+0x8>)
 8004af6:	f7ff bf03 	b.w	8004900 <__retarget_lock_acquire_recursive>
 8004afa:	bf00      	nop
 8004afc:	200048a4 	.word	0x200048a4

08004b00 <__malloc_unlock>:
 8004b00:	4801      	ldr	r0, [pc, #4]	@ (8004b08 <__malloc_unlock+0x8>)
 8004b02:	f7ff befe 	b.w	8004902 <__retarget_lock_release_recursive>
 8004b06:	bf00      	nop
 8004b08:	200048a4 	.word	0x200048a4

08004b0c <__ssputs_r>:
 8004b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	461f      	mov	r7, r3
 8004b12:	688e      	ldr	r6, [r1, #8]
 8004b14:	4682      	mov	sl, r0
 8004b16:	42be      	cmp	r6, r7
 8004b18:	460c      	mov	r4, r1
 8004b1a:	4690      	mov	r8, r2
 8004b1c:	680b      	ldr	r3, [r1, #0]
 8004b1e:	d82d      	bhi.n	8004b7c <__ssputs_r+0x70>
 8004b20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b28:	d026      	beq.n	8004b78 <__ssputs_r+0x6c>
 8004b2a:	6965      	ldr	r5, [r4, #20]
 8004b2c:	6909      	ldr	r1, [r1, #16]
 8004b2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b32:	eba3 0901 	sub.w	r9, r3, r1
 8004b36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b3a:	1c7b      	adds	r3, r7, #1
 8004b3c:	444b      	add	r3, r9
 8004b3e:	106d      	asrs	r5, r5, #1
 8004b40:	429d      	cmp	r5, r3
 8004b42:	bf38      	it	cc
 8004b44:	461d      	movcc	r5, r3
 8004b46:	0553      	lsls	r3, r2, #21
 8004b48:	d527      	bpl.n	8004b9a <__ssputs_r+0x8e>
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	f7ff ff52 	bl	80049f4 <_malloc_r>
 8004b50:	4606      	mov	r6, r0
 8004b52:	b360      	cbz	r0, 8004bae <__ssputs_r+0xa2>
 8004b54:	464a      	mov	r2, r9
 8004b56:	6921      	ldr	r1, [r4, #16]
 8004b58:	f7ff fed4 	bl	8004904 <memcpy>
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b66:	81a3      	strh	r3, [r4, #12]
 8004b68:	6126      	str	r6, [r4, #16]
 8004b6a:	444e      	add	r6, r9
 8004b6c:	6026      	str	r6, [r4, #0]
 8004b6e:	463e      	mov	r6, r7
 8004b70:	6165      	str	r5, [r4, #20]
 8004b72:	eba5 0509 	sub.w	r5, r5, r9
 8004b76:	60a5      	str	r5, [r4, #8]
 8004b78:	42be      	cmp	r6, r7
 8004b7a:	d900      	bls.n	8004b7e <__ssputs_r+0x72>
 8004b7c:	463e      	mov	r6, r7
 8004b7e:	4632      	mov	r2, r6
 8004b80:	4641      	mov	r1, r8
 8004b82:	6820      	ldr	r0, [r4, #0]
 8004b84:	f000 faaa 	bl	80050dc <memmove>
 8004b88:	2000      	movs	r0, #0
 8004b8a:	68a3      	ldr	r3, [r4, #8]
 8004b8c:	1b9b      	subs	r3, r3, r6
 8004b8e:	60a3      	str	r3, [r4, #8]
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	4433      	add	r3, r6
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b9a:	462a      	mov	r2, r5
 8004b9c:	f000 fad6 	bl	800514c <_realloc_r>
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	d1e0      	bne.n	8004b68 <__ssputs_r+0x5c>
 8004ba6:	4650      	mov	r0, sl
 8004ba8:	6921      	ldr	r1, [r4, #16]
 8004baa:	f7ff feb9 	bl	8004920 <_free_r>
 8004bae:	230c      	movs	r3, #12
 8004bb0:	f8ca 3000 	str.w	r3, [sl]
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bbe:	81a3      	strh	r3, [r4, #12]
 8004bc0:	e7e9      	b.n	8004b96 <__ssputs_r+0x8a>
	...

08004bc4 <_svfiprintf_r>:
 8004bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc8:	4698      	mov	r8, r3
 8004bca:	898b      	ldrh	r3, [r1, #12]
 8004bcc:	4607      	mov	r7, r0
 8004bce:	061b      	lsls	r3, r3, #24
 8004bd0:	460d      	mov	r5, r1
 8004bd2:	4614      	mov	r4, r2
 8004bd4:	b09d      	sub	sp, #116	@ 0x74
 8004bd6:	d510      	bpl.n	8004bfa <_svfiprintf_r+0x36>
 8004bd8:	690b      	ldr	r3, [r1, #16]
 8004bda:	b973      	cbnz	r3, 8004bfa <_svfiprintf_r+0x36>
 8004bdc:	2140      	movs	r1, #64	@ 0x40
 8004bde:	f7ff ff09 	bl	80049f4 <_malloc_r>
 8004be2:	6028      	str	r0, [r5, #0]
 8004be4:	6128      	str	r0, [r5, #16]
 8004be6:	b930      	cbnz	r0, 8004bf6 <_svfiprintf_r+0x32>
 8004be8:	230c      	movs	r3, #12
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf0:	b01d      	add	sp, #116	@ 0x74
 8004bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf6:	2340      	movs	r3, #64	@ 0x40
 8004bf8:	616b      	str	r3, [r5, #20]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bfe:	2320      	movs	r3, #32
 8004c00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c04:	2330      	movs	r3, #48	@ 0x30
 8004c06:	f04f 0901 	mov.w	r9, #1
 8004c0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c0e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004da8 <_svfiprintf_r+0x1e4>
 8004c12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c16:	4623      	mov	r3, r4
 8004c18:	469a      	mov	sl, r3
 8004c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c1e:	b10a      	cbz	r2, 8004c24 <_svfiprintf_r+0x60>
 8004c20:	2a25      	cmp	r2, #37	@ 0x25
 8004c22:	d1f9      	bne.n	8004c18 <_svfiprintf_r+0x54>
 8004c24:	ebba 0b04 	subs.w	fp, sl, r4
 8004c28:	d00b      	beq.n	8004c42 <_svfiprintf_r+0x7e>
 8004c2a:	465b      	mov	r3, fp
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	4629      	mov	r1, r5
 8004c30:	4638      	mov	r0, r7
 8004c32:	f7ff ff6b 	bl	8004b0c <__ssputs_r>
 8004c36:	3001      	adds	r0, #1
 8004c38:	f000 80a7 	beq.w	8004d8a <_svfiprintf_r+0x1c6>
 8004c3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c3e:	445a      	add	r2, fp
 8004c40:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c42:	f89a 3000 	ldrb.w	r3, [sl]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 809f 	beq.w	8004d8a <_svfiprintf_r+0x1c6>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c56:	f10a 0a01 	add.w	sl, sl, #1
 8004c5a:	9304      	str	r3, [sp, #16]
 8004c5c:	9307      	str	r3, [sp, #28]
 8004c5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c62:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c64:	4654      	mov	r4, sl
 8004c66:	2205      	movs	r2, #5
 8004c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c6c:	484e      	ldr	r0, [pc, #312]	@ (8004da8 <_svfiprintf_r+0x1e4>)
 8004c6e:	f000 fa5f 	bl	8005130 <memchr>
 8004c72:	9a04      	ldr	r2, [sp, #16]
 8004c74:	b9d8      	cbnz	r0, 8004cae <_svfiprintf_r+0xea>
 8004c76:	06d0      	lsls	r0, r2, #27
 8004c78:	bf44      	itt	mi
 8004c7a:	2320      	movmi	r3, #32
 8004c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c80:	0711      	lsls	r1, r2, #28
 8004c82:	bf44      	itt	mi
 8004c84:	232b      	movmi	r3, #43	@ 0x2b
 8004c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c90:	d015      	beq.n	8004cbe <_svfiprintf_r+0xfa>
 8004c92:	4654      	mov	r4, sl
 8004c94:	2000      	movs	r0, #0
 8004c96:	f04f 0c0a 	mov.w	ip, #10
 8004c9a:	9a07      	ldr	r2, [sp, #28]
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ca2:	3b30      	subs	r3, #48	@ 0x30
 8004ca4:	2b09      	cmp	r3, #9
 8004ca6:	d94b      	bls.n	8004d40 <_svfiprintf_r+0x17c>
 8004ca8:	b1b0      	cbz	r0, 8004cd8 <_svfiprintf_r+0x114>
 8004caa:	9207      	str	r2, [sp, #28]
 8004cac:	e014      	b.n	8004cd8 <_svfiprintf_r+0x114>
 8004cae:	eba0 0308 	sub.w	r3, r0, r8
 8004cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	46a2      	mov	sl, r4
 8004cba:	9304      	str	r3, [sp, #16]
 8004cbc:	e7d2      	b.n	8004c64 <_svfiprintf_r+0xa0>
 8004cbe:	9b03      	ldr	r3, [sp, #12]
 8004cc0:	1d19      	adds	r1, r3, #4
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	9103      	str	r1, [sp, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bfbb      	ittet	lt
 8004cca:	425b      	neglt	r3, r3
 8004ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8004cd0:	9307      	strge	r3, [sp, #28]
 8004cd2:	9307      	strlt	r3, [sp, #28]
 8004cd4:	bfb8      	it	lt
 8004cd6:	9204      	strlt	r2, [sp, #16]
 8004cd8:	7823      	ldrb	r3, [r4, #0]
 8004cda:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cdc:	d10a      	bne.n	8004cf4 <_svfiprintf_r+0x130>
 8004cde:	7863      	ldrb	r3, [r4, #1]
 8004ce0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ce2:	d132      	bne.n	8004d4a <_svfiprintf_r+0x186>
 8004ce4:	9b03      	ldr	r3, [sp, #12]
 8004ce6:	3402      	adds	r4, #2
 8004ce8:	1d1a      	adds	r2, r3, #4
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	9203      	str	r2, [sp, #12]
 8004cee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cf2:	9305      	str	r3, [sp, #20]
 8004cf4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004dac <_svfiprintf_r+0x1e8>
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	4650      	mov	r0, sl
 8004cfc:	7821      	ldrb	r1, [r4, #0]
 8004cfe:	f000 fa17 	bl	8005130 <memchr>
 8004d02:	b138      	cbz	r0, 8004d14 <_svfiprintf_r+0x150>
 8004d04:	2240      	movs	r2, #64	@ 0x40
 8004d06:	9b04      	ldr	r3, [sp, #16]
 8004d08:	eba0 000a 	sub.w	r0, r0, sl
 8004d0c:	4082      	lsls	r2, r0
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	3401      	adds	r4, #1
 8004d12:	9304      	str	r3, [sp, #16]
 8004d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d18:	2206      	movs	r2, #6
 8004d1a:	4825      	ldr	r0, [pc, #148]	@ (8004db0 <_svfiprintf_r+0x1ec>)
 8004d1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d20:	f000 fa06 	bl	8005130 <memchr>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d036      	beq.n	8004d96 <_svfiprintf_r+0x1d2>
 8004d28:	4b22      	ldr	r3, [pc, #136]	@ (8004db4 <_svfiprintf_r+0x1f0>)
 8004d2a:	bb1b      	cbnz	r3, 8004d74 <_svfiprintf_r+0x1b0>
 8004d2c:	9b03      	ldr	r3, [sp, #12]
 8004d2e:	3307      	adds	r3, #7
 8004d30:	f023 0307 	bic.w	r3, r3, #7
 8004d34:	3308      	adds	r3, #8
 8004d36:	9303      	str	r3, [sp, #12]
 8004d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d3a:	4433      	add	r3, r6
 8004d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d3e:	e76a      	b.n	8004c16 <_svfiprintf_r+0x52>
 8004d40:	460c      	mov	r4, r1
 8004d42:	2001      	movs	r0, #1
 8004d44:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d48:	e7a8      	b.n	8004c9c <_svfiprintf_r+0xd8>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f04f 0c0a 	mov.w	ip, #10
 8004d50:	4619      	mov	r1, r3
 8004d52:	3401      	adds	r4, #1
 8004d54:	9305      	str	r3, [sp, #20]
 8004d56:	4620      	mov	r0, r4
 8004d58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d5c:	3a30      	subs	r2, #48	@ 0x30
 8004d5e:	2a09      	cmp	r2, #9
 8004d60:	d903      	bls.n	8004d6a <_svfiprintf_r+0x1a6>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0c6      	beq.n	8004cf4 <_svfiprintf_r+0x130>
 8004d66:	9105      	str	r1, [sp, #20]
 8004d68:	e7c4      	b.n	8004cf4 <_svfiprintf_r+0x130>
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d72:	e7f0      	b.n	8004d56 <_svfiprintf_r+0x192>
 8004d74:	ab03      	add	r3, sp, #12
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	462a      	mov	r2, r5
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004db8 <_svfiprintf_r+0x1f4>)
 8004d7e:	a904      	add	r1, sp, #16
 8004d80:	f3af 8000 	nop.w
 8004d84:	1c42      	adds	r2, r0, #1
 8004d86:	4606      	mov	r6, r0
 8004d88:	d1d6      	bne.n	8004d38 <_svfiprintf_r+0x174>
 8004d8a:	89ab      	ldrh	r3, [r5, #12]
 8004d8c:	065b      	lsls	r3, r3, #25
 8004d8e:	f53f af2d 	bmi.w	8004bec <_svfiprintf_r+0x28>
 8004d92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d94:	e72c      	b.n	8004bf0 <_svfiprintf_r+0x2c>
 8004d96:	ab03      	add	r3, sp, #12
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	462a      	mov	r2, r5
 8004d9c:	4638      	mov	r0, r7
 8004d9e:	4b06      	ldr	r3, [pc, #24]	@ (8004db8 <_svfiprintf_r+0x1f4>)
 8004da0:	a904      	add	r1, sp, #16
 8004da2:	f000 f87d 	bl	8004ea0 <_printf_i>
 8004da6:	e7ed      	b.n	8004d84 <_svfiprintf_r+0x1c0>
 8004da8:	08005346 	.word	0x08005346
 8004dac:	0800534c 	.word	0x0800534c
 8004db0:	08005350 	.word	0x08005350
 8004db4:	00000000 	.word	0x00000000
 8004db8:	08004b0d 	.word	0x08004b0d

08004dbc <_printf_common>:
 8004dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc0:	4616      	mov	r6, r2
 8004dc2:	4698      	mov	r8, r3
 8004dc4:	688a      	ldr	r2, [r1, #8]
 8004dc6:	690b      	ldr	r3, [r1, #16]
 8004dc8:	4607      	mov	r7, r0
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	bfb8      	it	lt
 8004dce:	4613      	movlt	r3, r2
 8004dd0:	6033      	str	r3, [r6, #0]
 8004dd2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ddc:	b10a      	cbz	r2, 8004de2 <_printf_common+0x26>
 8004dde:	3301      	adds	r3, #1
 8004de0:	6033      	str	r3, [r6, #0]
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	0699      	lsls	r1, r3, #26
 8004de6:	bf42      	ittt	mi
 8004de8:	6833      	ldrmi	r3, [r6, #0]
 8004dea:	3302      	addmi	r3, #2
 8004dec:	6033      	strmi	r3, [r6, #0]
 8004dee:	6825      	ldr	r5, [r4, #0]
 8004df0:	f015 0506 	ands.w	r5, r5, #6
 8004df4:	d106      	bne.n	8004e04 <_printf_common+0x48>
 8004df6:	f104 0a19 	add.w	sl, r4, #25
 8004dfa:	68e3      	ldr	r3, [r4, #12]
 8004dfc:	6832      	ldr	r2, [r6, #0]
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	42ab      	cmp	r3, r5
 8004e02:	dc2b      	bgt.n	8004e5c <_printf_common+0xa0>
 8004e04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e08:	6822      	ldr	r2, [r4, #0]
 8004e0a:	3b00      	subs	r3, #0
 8004e0c:	bf18      	it	ne
 8004e0e:	2301      	movne	r3, #1
 8004e10:	0692      	lsls	r2, r2, #26
 8004e12:	d430      	bmi.n	8004e76 <_printf_common+0xba>
 8004e14:	4641      	mov	r1, r8
 8004e16:	4638      	mov	r0, r7
 8004e18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e1c:	47c8      	blx	r9
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d023      	beq.n	8004e6a <_printf_common+0xae>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	6922      	ldr	r2, [r4, #16]
 8004e26:	f003 0306 	and.w	r3, r3, #6
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	bf14      	ite	ne
 8004e2e:	2500      	movne	r5, #0
 8004e30:	6833      	ldreq	r3, [r6, #0]
 8004e32:	f04f 0600 	mov.w	r6, #0
 8004e36:	bf08      	it	eq
 8004e38:	68e5      	ldreq	r5, [r4, #12]
 8004e3a:	f104 041a 	add.w	r4, r4, #26
 8004e3e:	bf08      	it	eq
 8004e40:	1aed      	subeq	r5, r5, r3
 8004e42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e46:	bf08      	it	eq
 8004e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	bfc4      	itt	gt
 8004e50:	1a9b      	subgt	r3, r3, r2
 8004e52:	18ed      	addgt	r5, r5, r3
 8004e54:	42b5      	cmp	r5, r6
 8004e56:	d11a      	bne.n	8004e8e <_printf_common+0xd2>
 8004e58:	2000      	movs	r0, #0
 8004e5a:	e008      	b.n	8004e6e <_printf_common+0xb2>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	4652      	mov	r2, sl
 8004e60:	4641      	mov	r1, r8
 8004e62:	4638      	mov	r0, r7
 8004e64:	47c8      	blx	r9
 8004e66:	3001      	adds	r0, #1
 8004e68:	d103      	bne.n	8004e72 <_printf_common+0xb6>
 8004e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e72:	3501      	adds	r5, #1
 8004e74:	e7c1      	b.n	8004dfa <_printf_common+0x3e>
 8004e76:	2030      	movs	r0, #48	@ 0x30
 8004e78:	18e1      	adds	r1, r4, r3
 8004e7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e84:	4422      	add	r2, r4
 8004e86:	3302      	adds	r3, #2
 8004e88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e8c:	e7c2      	b.n	8004e14 <_printf_common+0x58>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	4622      	mov	r2, r4
 8004e92:	4641      	mov	r1, r8
 8004e94:	4638      	mov	r0, r7
 8004e96:	47c8      	blx	r9
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d0e6      	beq.n	8004e6a <_printf_common+0xae>
 8004e9c:	3601      	adds	r6, #1
 8004e9e:	e7d9      	b.n	8004e54 <_printf_common+0x98>

08004ea0 <_printf_i>:
 8004ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea4:	7e0f      	ldrb	r7, [r1, #24]
 8004ea6:	4691      	mov	r9, r2
 8004ea8:	2f78      	cmp	r7, #120	@ 0x78
 8004eaa:	4680      	mov	r8, r0
 8004eac:	460c      	mov	r4, r1
 8004eae:	469a      	mov	sl, r3
 8004eb0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004eb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004eb6:	d807      	bhi.n	8004ec8 <_printf_i+0x28>
 8004eb8:	2f62      	cmp	r7, #98	@ 0x62
 8004eba:	d80a      	bhi.n	8004ed2 <_printf_i+0x32>
 8004ebc:	2f00      	cmp	r7, #0
 8004ebe:	f000 80d1 	beq.w	8005064 <_printf_i+0x1c4>
 8004ec2:	2f58      	cmp	r7, #88	@ 0x58
 8004ec4:	f000 80b8 	beq.w	8005038 <_printf_i+0x198>
 8004ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ecc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ed0:	e03a      	b.n	8004f48 <_printf_i+0xa8>
 8004ed2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ed6:	2b15      	cmp	r3, #21
 8004ed8:	d8f6      	bhi.n	8004ec8 <_printf_i+0x28>
 8004eda:	a101      	add	r1, pc, #4	@ (adr r1, 8004ee0 <_printf_i+0x40>)
 8004edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ee0:	08004f39 	.word	0x08004f39
 8004ee4:	08004f4d 	.word	0x08004f4d
 8004ee8:	08004ec9 	.word	0x08004ec9
 8004eec:	08004ec9 	.word	0x08004ec9
 8004ef0:	08004ec9 	.word	0x08004ec9
 8004ef4:	08004ec9 	.word	0x08004ec9
 8004ef8:	08004f4d 	.word	0x08004f4d
 8004efc:	08004ec9 	.word	0x08004ec9
 8004f00:	08004ec9 	.word	0x08004ec9
 8004f04:	08004ec9 	.word	0x08004ec9
 8004f08:	08004ec9 	.word	0x08004ec9
 8004f0c:	0800504b 	.word	0x0800504b
 8004f10:	08004f77 	.word	0x08004f77
 8004f14:	08005005 	.word	0x08005005
 8004f18:	08004ec9 	.word	0x08004ec9
 8004f1c:	08004ec9 	.word	0x08004ec9
 8004f20:	0800506d 	.word	0x0800506d
 8004f24:	08004ec9 	.word	0x08004ec9
 8004f28:	08004f77 	.word	0x08004f77
 8004f2c:	08004ec9 	.word	0x08004ec9
 8004f30:	08004ec9 	.word	0x08004ec9
 8004f34:	0800500d 	.word	0x0800500d
 8004f38:	6833      	ldr	r3, [r6, #0]
 8004f3a:	1d1a      	adds	r2, r3, #4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6032      	str	r2, [r6, #0]
 8004f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e09c      	b.n	8005086 <_printf_i+0x1e6>
 8004f4c:	6833      	ldr	r3, [r6, #0]
 8004f4e:	6820      	ldr	r0, [r4, #0]
 8004f50:	1d19      	adds	r1, r3, #4
 8004f52:	6031      	str	r1, [r6, #0]
 8004f54:	0606      	lsls	r6, r0, #24
 8004f56:	d501      	bpl.n	8004f5c <_printf_i+0xbc>
 8004f58:	681d      	ldr	r5, [r3, #0]
 8004f5a:	e003      	b.n	8004f64 <_printf_i+0xc4>
 8004f5c:	0645      	lsls	r5, r0, #25
 8004f5e:	d5fb      	bpl.n	8004f58 <_printf_i+0xb8>
 8004f60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f64:	2d00      	cmp	r5, #0
 8004f66:	da03      	bge.n	8004f70 <_printf_i+0xd0>
 8004f68:	232d      	movs	r3, #45	@ 0x2d
 8004f6a:	426d      	negs	r5, r5
 8004f6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f70:	230a      	movs	r3, #10
 8004f72:	4858      	ldr	r0, [pc, #352]	@ (80050d4 <_printf_i+0x234>)
 8004f74:	e011      	b.n	8004f9a <_printf_i+0xfa>
 8004f76:	6821      	ldr	r1, [r4, #0]
 8004f78:	6833      	ldr	r3, [r6, #0]
 8004f7a:	0608      	lsls	r0, r1, #24
 8004f7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f80:	d402      	bmi.n	8004f88 <_printf_i+0xe8>
 8004f82:	0649      	lsls	r1, r1, #25
 8004f84:	bf48      	it	mi
 8004f86:	b2ad      	uxthmi	r5, r5
 8004f88:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f8a:	6033      	str	r3, [r6, #0]
 8004f8c:	bf14      	ite	ne
 8004f8e:	230a      	movne	r3, #10
 8004f90:	2308      	moveq	r3, #8
 8004f92:	4850      	ldr	r0, [pc, #320]	@ (80050d4 <_printf_i+0x234>)
 8004f94:	2100      	movs	r1, #0
 8004f96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f9a:	6866      	ldr	r6, [r4, #4]
 8004f9c:	2e00      	cmp	r6, #0
 8004f9e:	60a6      	str	r6, [r4, #8]
 8004fa0:	db05      	blt.n	8004fae <_printf_i+0x10e>
 8004fa2:	6821      	ldr	r1, [r4, #0]
 8004fa4:	432e      	orrs	r6, r5
 8004fa6:	f021 0104 	bic.w	r1, r1, #4
 8004faa:	6021      	str	r1, [r4, #0]
 8004fac:	d04b      	beq.n	8005046 <_printf_i+0x1a6>
 8004fae:	4616      	mov	r6, r2
 8004fb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fb4:	fb03 5711 	mls	r7, r3, r1, r5
 8004fb8:	5dc7      	ldrb	r7, [r0, r7]
 8004fba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fbe:	462f      	mov	r7, r5
 8004fc0:	42bb      	cmp	r3, r7
 8004fc2:	460d      	mov	r5, r1
 8004fc4:	d9f4      	bls.n	8004fb0 <_printf_i+0x110>
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d10b      	bne.n	8004fe2 <_printf_i+0x142>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	07df      	lsls	r7, r3, #31
 8004fce:	d508      	bpl.n	8004fe2 <_printf_i+0x142>
 8004fd0:	6923      	ldr	r3, [r4, #16]
 8004fd2:	6861      	ldr	r1, [r4, #4]
 8004fd4:	4299      	cmp	r1, r3
 8004fd6:	bfde      	ittt	le
 8004fd8:	2330      	movle	r3, #48	@ 0x30
 8004fda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fe2:	1b92      	subs	r2, r2, r6
 8004fe4:	6122      	str	r2, [r4, #16]
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	4621      	mov	r1, r4
 8004fea:	4640      	mov	r0, r8
 8004fec:	f8cd a000 	str.w	sl, [sp]
 8004ff0:	aa03      	add	r2, sp, #12
 8004ff2:	f7ff fee3 	bl	8004dbc <_printf_common>
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d14a      	bne.n	8005090 <_printf_i+0x1f0>
 8004ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffe:	b004      	add	sp, #16
 8005000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	f043 0320 	orr.w	r3, r3, #32
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	2778      	movs	r7, #120	@ 0x78
 800500e:	4832      	ldr	r0, [pc, #200]	@ (80050d8 <_printf_i+0x238>)
 8005010:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	6831      	ldr	r1, [r6, #0]
 8005018:	061f      	lsls	r7, r3, #24
 800501a:	f851 5b04 	ldr.w	r5, [r1], #4
 800501e:	d402      	bmi.n	8005026 <_printf_i+0x186>
 8005020:	065f      	lsls	r7, r3, #25
 8005022:	bf48      	it	mi
 8005024:	b2ad      	uxthmi	r5, r5
 8005026:	6031      	str	r1, [r6, #0]
 8005028:	07d9      	lsls	r1, r3, #31
 800502a:	bf44      	itt	mi
 800502c:	f043 0320 	orrmi.w	r3, r3, #32
 8005030:	6023      	strmi	r3, [r4, #0]
 8005032:	b11d      	cbz	r5, 800503c <_printf_i+0x19c>
 8005034:	2310      	movs	r3, #16
 8005036:	e7ad      	b.n	8004f94 <_printf_i+0xf4>
 8005038:	4826      	ldr	r0, [pc, #152]	@ (80050d4 <_printf_i+0x234>)
 800503a:	e7e9      	b.n	8005010 <_printf_i+0x170>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	f023 0320 	bic.w	r3, r3, #32
 8005042:	6023      	str	r3, [r4, #0]
 8005044:	e7f6      	b.n	8005034 <_printf_i+0x194>
 8005046:	4616      	mov	r6, r2
 8005048:	e7bd      	b.n	8004fc6 <_printf_i+0x126>
 800504a:	6833      	ldr	r3, [r6, #0]
 800504c:	6825      	ldr	r5, [r4, #0]
 800504e:	1d18      	adds	r0, r3, #4
 8005050:	6961      	ldr	r1, [r4, #20]
 8005052:	6030      	str	r0, [r6, #0]
 8005054:	062e      	lsls	r6, r5, #24
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	d501      	bpl.n	800505e <_printf_i+0x1be>
 800505a:	6019      	str	r1, [r3, #0]
 800505c:	e002      	b.n	8005064 <_printf_i+0x1c4>
 800505e:	0668      	lsls	r0, r5, #25
 8005060:	d5fb      	bpl.n	800505a <_printf_i+0x1ba>
 8005062:	8019      	strh	r1, [r3, #0]
 8005064:	2300      	movs	r3, #0
 8005066:	4616      	mov	r6, r2
 8005068:	6123      	str	r3, [r4, #16]
 800506a:	e7bc      	b.n	8004fe6 <_printf_i+0x146>
 800506c:	6833      	ldr	r3, [r6, #0]
 800506e:	2100      	movs	r1, #0
 8005070:	1d1a      	adds	r2, r3, #4
 8005072:	6032      	str	r2, [r6, #0]
 8005074:	681e      	ldr	r6, [r3, #0]
 8005076:	6862      	ldr	r2, [r4, #4]
 8005078:	4630      	mov	r0, r6
 800507a:	f000 f859 	bl	8005130 <memchr>
 800507e:	b108      	cbz	r0, 8005084 <_printf_i+0x1e4>
 8005080:	1b80      	subs	r0, r0, r6
 8005082:	6060      	str	r0, [r4, #4]
 8005084:	6863      	ldr	r3, [r4, #4]
 8005086:	6123      	str	r3, [r4, #16]
 8005088:	2300      	movs	r3, #0
 800508a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800508e:	e7aa      	b.n	8004fe6 <_printf_i+0x146>
 8005090:	4632      	mov	r2, r6
 8005092:	4649      	mov	r1, r9
 8005094:	4640      	mov	r0, r8
 8005096:	6923      	ldr	r3, [r4, #16]
 8005098:	47d0      	blx	sl
 800509a:	3001      	adds	r0, #1
 800509c:	d0ad      	beq.n	8004ffa <_printf_i+0x15a>
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	079b      	lsls	r3, r3, #30
 80050a2:	d413      	bmi.n	80050cc <_printf_i+0x22c>
 80050a4:	68e0      	ldr	r0, [r4, #12]
 80050a6:	9b03      	ldr	r3, [sp, #12]
 80050a8:	4298      	cmp	r0, r3
 80050aa:	bfb8      	it	lt
 80050ac:	4618      	movlt	r0, r3
 80050ae:	e7a6      	b.n	8004ffe <_printf_i+0x15e>
 80050b0:	2301      	movs	r3, #1
 80050b2:	4632      	mov	r2, r6
 80050b4:	4649      	mov	r1, r9
 80050b6:	4640      	mov	r0, r8
 80050b8:	47d0      	blx	sl
 80050ba:	3001      	adds	r0, #1
 80050bc:	d09d      	beq.n	8004ffa <_printf_i+0x15a>
 80050be:	3501      	adds	r5, #1
 80050c0:	68e3      	ldr	r3, [r4, #12]
 80050c2:	9903      	ldr	r1, [sp, #12]
 80050c4:	1a5b      	subs	r3, r3, r1
 80050c6:	42ab      	cmp	r3, r5
 80050c8:	dcf2      	bgt.n	80050b0 <_printf_i+0x210>
 80050ca:	e7eb      	b.n	80050a4 <_printf_i+0x204>
 80050cc:	2500      	movs	r5, #0
 80050ce:	f104 0619 	add.w	r6, r4, #25
 80050d2:	e7f5      	b.n	80050c0 <_printf_i+0x220>
 80050d4:	08005357 	.word	0x08005357
 80050d8:	08005368 	.word	0x08005368

080050dc <memmove>:
 80050dc:	4288      	cmp	r0, r1
 80050de:	b510      	push	{r4, lr}
 80050e0:	eb01 0402 	add.w	r4, r1, r2
 80050e4:	d902      	bls.n	80050ec <memmove+0x10>
 80050e6:	4284      	cmp	r4, r0
 80050e8:	4623      	mov	r3, r4
 80050ea:	d807      	bhi.n	80050fc <memmove+0x20>
 80050ec:	1e43      	subs	r3, r0, #1
 80050ee:	42a1      	cmp	r1, r4
 80050f0:	d008      	beq.n	8005104 <memmove+0x28>
 80050f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050fa:	e7f8      	b.n	80050ee <memmove+0x12>
 80050fc:	4601      	mov	r1, r0
 80050fe:	4402      	add	r2, r0
 8005100:	428a      	cmp	r2, r1
 8005102:	d100      	bne.n	8005106 <memmove+0x2a>
 8005104:	bd10      	pop	{r4, pc}
 8005106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800510a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800510e:	e7f7      	b.n	8005100 <memmove+0x24>

08005110 <_sbrk_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	2300      	movs	r3, #0
 8005114:	4d05      	ldr	r5, [pc, #20]	@ (800512c <_sbrk_r+0x1c>)
 8005116:	4604      	mov	r4, r0
 8005118:	4608      	mov	r0, r1
 800511a:	602b      	str	r3, [r5, #0]
 800511c:	f7fb fbac 	bl	8000878 <_sbrk>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_sbrk_r+0x1a>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	b103      	cbz	r3, 800512a <_sbrk_r+0x1a>
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	200048a0 	.word	0x200048a0

08005130 <memchr>:
 8005130:	4603      	mov	r3, r0
 8005132:	b510      	push	{r4, lr}
 8005134:	b2c9      	uxtb	r1, r1
 8005136:	4402      	add	r2, r0
 8005138:	4293      	cmp	r3, r2
 800513a:	4618      	mov	r0, r3
 800513c:	d101      	bne.n	8005142 <memchr+0x12>
 800513e:	2000      	movs	r0, #0
 8005140:	e003      	b.n	800514a <memchr+0x1a>
 8005142:	7804      	ldrb	r4, [r0, #0]
 8005144:	3301      	adds	r3, #1
 8005146:	428c      	cmp	r4, r1
 8005148:	d1f6      	bne.n	8005138 <memchr+0x8>
 800514a:	bd10      	pop	{r4, pc}

0800514c <_realloc_r>:
 800514c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005150:	4607      	mov	r7, r0
 8005152:	4614      	mov	r4, r2
 8005154:	460d      	mov	r5, r1
 8005156:	b921      	cbnz	r1, 8005162 <_realloc_r+0x16>
 8005158:	4611      	mov	r1, r2
 800515a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800515e:	f7ff bc49 	b.w	80049f4 <_malloc_r>
 8005162:	b92a      	cbnz	r2, 8005170 <_realloc_r+0x24>
 8005164:	f7ff fbdc 	bl	8004920 <_free_r>
 8005168:	4625      	mov	r5, r4
 800516a:	4628      	mov	r0, r5
 800516c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005170:	f000 f81a 	bl	80051a8 <_malloc_usable_size_r>
 8005174:	4284      	cmp	r4, r0
 8005176:	4606      	mov	r6, r0
 8005178:	d802      	bhi.n	8005180 <_realloc_r+0x34>
 800517a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800517e:	d8f4      	bhi.n	800516a <_realloc_r+0x1e>
 8005180:	4621      	mov	r1, r4
 8005182:	4638      	mov	r0, r7
 8005184:	f7ff fc36 	bl	80049f4 <_malloc_r>
 8005188:	4680      	mov	r8, r0
 800518a:	b908      	cbnz	r0, 8005190 <_realloc_r+0x44>
 800518c:	4645      	mov	r5, r8
 800518e:	e7ec      	b.n	800516a <_realloc_r+0x1e>
 8005190:	42b4      	cmp	r4, r6
 8005192:	4622      	mov	r2, r4
 8005194:	4629      	mov	r1, r5
 8005196:	bf28      	it	cs
 8005198:	4632      	movcs	r2, r6
 800519a:	f7ff fbb3 	bl	8004904 <memcpy>
 800519e:	4629      	mov	r1, r5
 80051a0:	4638      	mov	r0, r7
 80051a2:	f7ff fbbd 	bl	8004920 <_free_r>
 80051a6:	e7f1      	b.n	800518c <_realloc_r+0x40>

080051a8 <_malloc_usable_size_r>:
 80051a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ac:	1f18      	subs	r0, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfbc      	itt	lt
 80051b2:	580b      	ldrlt	r3, [r1, r0]
 80051b4:	18c0      	addlt	r0, r0, r3
 80051b6:	4770      	bx	lr

080051b8 <_init>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	bf00      	nop
 80051bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051be:	bc08      	pop	{r3}
 80051c0:	469e      	mov	lr, r3
 80051c2:	4770      	bx	lr

080051c4 <_fini>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr
