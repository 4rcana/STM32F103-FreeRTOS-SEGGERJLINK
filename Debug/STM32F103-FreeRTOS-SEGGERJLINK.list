
STM32F103-FreeRTOS-SEGGERJLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aab8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800abc8  0800abc8  0000bbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adc8  0800adc8  0000c060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800adc8  0800adc8  0000c060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800adc8  0800adc8  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adc8  0800adc8  0000bdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800adcc  0800adcc  0000bdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800add0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048fc  20000060  0800ae30  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000495c  0800ae30  0000c95c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d13f  00000000  00000000  0000c089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ec2  00000000  00000000  000291c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  0002d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b8  00000000  00000000  0002eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a74d  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da87  00000000  00000000  0004a74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae366  00000000  00000000  000681d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011653a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007674  00000000  00000000  00116580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b6  00000000  00000000  0011dbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	0800abb0 	.word	0x0800abb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	0800abb0 	.word	0x0800abb0

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	@ 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20003c64 	.word	0x20003c64

080001dc <__aeabi_frsub>:
 80001dc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80001e0:	e002      	b.n	80001e8 <__addsf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_fsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080001e8 <__addsf3>:
 80001e8:	0042      	lsls	r2, r0, #1
 80001ea:	bf1f      	itttt	ne
 80001ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001f0:	ea92 0f03 	teqne	r2, r3
 80001f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001fc:	d06a      	beq.n	80002d4 <__addsf3+0xec>
 80001fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000202:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000206:	bfc1      	itttt	gt
 8000208:	18d2      	addgt	r2, r2, r3
 800020a:	4041      	eorgt	r1, r0
 800020c:	4048      	eorgt	r0, r1
 800020e:	4041      	eorgt	r1, r0
 8000210:	bfb8      	it	lt
 8000212:	425b      	neglt	r3, r3
 8000214:	2b19      	cmp	r3, #25
 8000216:	bf88      	it	hi
 8000218:	4770      	bxhi	lr
 800021a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800021e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000222:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000226:	bf18      	it	ne
 8000228:	4240      	negne	r0, r0
 800022a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800022e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000232:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000236:	bf18      	it	ne
 8000238:	4249      	negne	r1, r1
 800023a:	ea92 0f03 	teq	r2, r3
 800023e:	d03f      	beq.n	80002c0 <__addsf3+0xd8>
 8000240:	f1a2 0201 	sub.w	r2, r2, #1
 8000244:	fa41 fc03 	asr.w	ip, r1, r3
 8000248:	eb10 000c 	adds.w	r0, r0, ip
 800024c:	f1c3 0320 	rsb	r3, r3, #32
 8000250:	fa01 f103 	lsl.w	r1, r1, r3
 8000254:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000258:	d502      	bpl.n	8000260 <__addsf3+0x78>
 800025a:	4249      	negs	r1, r1
 800025c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000260:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000264:	d313      	bcc.n	800028e <__addsf3+0xa6>
 8000266:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800026a:	d306      	bcc.n	800027a <__addsf3+0x92>
 800026c:	0840      	lsrs	r0, r0, #1
 800026e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000272:	f102 0201 	add.w	r2, r2, #1
 8000276:	2afe      	cmp	r2, #254	@ 0xfe
 8000278:	d251      	bcs.n	800031e <__addsf3+0x136>
 800027a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	ea40 0003 	orr.w	r0, r0, r3
 800028c:	4770      	bx	lr
 800028e:	0049      	lsls	r1, r1, #1
 8000290:	eb40 0000 	adc.w	r0, r0, r0
 8000294:	3a01      	subs	r2, #1
 8000296:	bf28      	it	cs
 8000298:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800029c:	d2ed      	bcs.n	800027a <__addsf3+0x92>
 800029e:	fab0 fc80 	clz	ip, r0
 80002a2:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a6:	ebb2 020c 	subs.w	r2, r2, ip
 80002aa:	fa00 f00c 	lsl.w	r0, r0, ip
 80002ae:	bfaa      	itet	ge
 80002b0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b4:	4252      	neglt	r2, r2
 80002b6:	4318      	orrge	r0, r3
 80002b8:	bfbc      	itt	lt
 80002ba:	40d0      	lsrlt	r0, r2
 80002bc:	4318      	orrlt	r0, r3
 80002be:	4770      	bx	lr
 80002c0:	f092 0f00 	teq	r2, #0
 80002c4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80002c8:	bf06      	itte	eq
 80002ca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80002ce:	3201      	addeq	r2, #1
 80002d0:	3b01      	subne	r3, #1
 80002d2:	e7b5      	b.n	8000240 <__addsf3+0x58>
 80002d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002dc:	bf18      	it	ne
 80002de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e2:	d021      	beq.n	8000328 <__addsf3+0x140>
 80002e4:	ea92 0f03 	teq	r2, r3
 80002e8:	d004      	beq.n	80002f4 <__addsf3+0x10c>
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	bf08      	it	eq
 80002f0:	4608      	moveq	r0, r1
 80002f2:	4770      	bx	lr
 80002f4:	ea90 0f01 	teq	r0, r1
 80002f8:	bf1c      	itt	ne
 80002fa:	2000      	movne	r0, #0
 80002fc:	4770      	bxne	lr
 80002fe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000302:	d104      	bne.n	800030e <__addsf3+0x126>
 8000304:	0040      	lsls	r0, r0, #1
 8000306:	bf28      	it	cs
 8000308:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800030c:	4770      	bx	lr
 800030e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000312:	bf3c      	itt	cc
 8000314:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000318:	4770      	bxcc	lr
 800031a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800031e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000322:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000326:	4770      	bx	lr
 8000328:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800032c:	bf16      	itet	ne
 800032e:	4608      	movne	r0, r1
 8000330:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000334:	4601      	movne	r1, r0
 8000336:	0242      	lsls	r2, r0, #9
 8000338:	bf06      	itte	eq
 800033a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033e:	ea90 0f01 	teqeq	r0, r1
 8000342:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000346:	4770      	bx	lr

08000348 <__aeabi_ui2f>:
 8000348:	f04f 0300 	mov.w	r3, #0
 800034c:	e004      	b.n	8000358 <__aeabi_i2f+0x8>
 800034e:	bf00      	nop

08000350 <__aeabi_i2f>:
 8000350:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000354:	bf48      	it	mi
 8000356:	4240      	negmi	r0, r0
 8000358:	ea5f 0c00 	movs.w	ip, r0
 800035c:	bf08      	it	eq
 800035e:	4770      	bxeq	lr
 8000360:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000364:	4601      	mov	r1, r0
 8000366:	f04f 0000 	mov.w	r0, #0
 800036a:	e01c      	b.n	80003a6 <__aeabi_l2f+0x2a>

0800036c <__aeabi_ul2f>:
 800036c:	ea50 0201 	orrs.w	r2, r0, r1
 8000370:	bf08      	it	eq
 8000372:	4770      	bxeq	lr
 8000374:	f04f 0300 	mov.w	r3, #0
 8000378:	e00a      	b.n	8000390 <__aeabi_l2f+0x14>
 800037a:	bf00      	nop

0800037c <__aeabi_l2f>:
 800037c:	ea50 0201 	orrs.w	r2, r0, r1
 8000380:	bf08      	it	eq
 8000382:	4770      	bxeq	lr
 8000384:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000388:	d502      	bpl.n	8000390 <__aeabi_l2f+0x14>
 800038a:	4240      	negs	r0, r0
 800038c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000390:	ea5f 0c01 	movs.w	ip, r1
 8000394:	bf02      	ittt	eq
 8000396:	4684      	moveq	ip, r0
 8000398:	4601      	moveq	r1, r0
 800039a:	2000      	moveq	r0, #0
 800039c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80003a0:	bf08      	it	eq
 80003a2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80003a6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80003aa:	fabc f28c 	clz	r2, ip
 80003ae:	3a08      	subs	r2, #8
 80003b0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b4:	db10      	blt.n	80003d8 <__aeabi_l2f+0x5c>
 80003b6:	fa01 fc02 	lsl.w	ip, r1, r2
 80003ba:	4463      	add	r3, ip
 80003bc:	fa00 fc02 	lsl.w	ip, r0, r2
 80003c0:	f1c2 0220 	rsb	r2, r2, #32
 80003c4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c8:	fa20 f202 	lsr.w	r2, r0, r2
 80003cc:	eb43 0002 	adc.w	r0, r3, r2
 80003d0:	bf08      	it	eq
 80003d2:	f020 0001 	biceq.w	r0, r0, #1
 80003d6:	4770      	bx	lr
 80003d8:	f102 0220 	add.w	r2, r2, #32
 80003dc:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e0:	f1c2 0220 	rsb	r2, r2, #32
 80003e4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e8:	fa21 f202 	lsr.w	r2, r1, r2
 80003ec:	eb43 0002 	adc.w	r0, r3, r2
 80003f0:	bf08      	it	eq
 80003f2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_fmul>:
 80003f8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000400:	bf1e      	ittt	ne
 8000402:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000406:	ea92 0f0c 	teqne	r2, ip
 800040a:	ea93 0f0c 	teqne	r3, ip
 800040e:	d06f      	beq.n	80004f0 <__aeabi_fmul+0xf8>
 8000410:	441a      	add	r2, r3
 8000412:	ea80 0c01 	eor.w	ip, r0, r1
 8000416:	0240      	lsls	r0, r0, #9
 8000418:	bf18      	it	ne
 800041a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800041e:	d01e      	beq.n	800045e <__aeabi_fmul+0x66>
 8000420:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000424:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000428:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800042c:	fba0 3101 	umull	r3, r1, r0, r1
 8000430:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000434:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000438:	bf3e      	ittt	cc
 800043a:	0049      	lslcc	r1, r1, #1
 800043c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000440:	005b      	lslcc	r3, r3, #1
 8000442:	ea40 0001 	orr.w	r0, r0, r1
 8000446:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800044a:	2afd      	cmp	r2, #253	@ 0xfd
 800044c:	d81d      	bhi.n	800048a <__aeabi_fmul+0x92>
 800044e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000452:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000456:	bf08      	it	eq
 8000458:	f020 0001 	biceq.w	r0, r0, #1
 800045c:	4770      	bx	lr
 800045e:	f090 0f00 	teq	r0, #0
 8000462:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000466:	bf08      	it	eq
 8000468:	0249      	lsleq	r1, r1, #9
 800046a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800046e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000472:	3a7f      	subs	r2, #127	@ 0x7f
 8000474:	bfc2      	ittt	gt
 8000476:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800047a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800047e:	4770      	bxgt	lr
 8000480:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000484:	f04f 0300 	mov.w	r3, #0
 8000488:	3a01      	subs	r2, #1
 800048a:	dc5d      	bgt.n	8000548 <__aeabi_fmul+0x150>
 800048c:	f112 0f19 	cmn.w	r2, #25
 8000490:	bfdc      	itt	le
 8000492:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000496:	4770      	bxle	lr
 8000498:	f1c2 0200 	rsb	r2, r2, #0
 800049c:	0041      	lsls	r1, r0, #1
 800049e:	fa21 f102 	lsr.w	r1, r1, r2
 80004a2:	f1c2 0220 	rsb	r2, r2, #32
 80004a6:	fa00 fc02 	lsl.w	ip, r0, r2
 80004aa:	ea5f 0031 	movs.w	r0, r1, rrx
 80004ae:	f140 0000 	adc.w	r0, r0, #0
 80004b2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004b6:	bf08      	it	eq
 80004b8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004bc:	4770      	bx	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80004c6:	bf02      	ittt	eq
 80004c8:	0040      	lsleq	r0, r0, #1
 80004ca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80004ce:	3a01      	subeq	r2, #1
 80004d0:	d0f9      	beq.n	80004c6 <__aeabi_fmul+0xce>
 80004d2:	ea40 000c 	orr.w	r0, r0, ip
 80004d6:	f093 0f00 	teq	r3, #0
 80004da:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004de:	bf02      	ittt	eq
 80004e0:	0049      	lsleq	r1, r1, #1
 80004e2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80004e6:	3b01      	subeq	r3, #1
 80004e8:	d0f9      	beq.n	80004de <__aeabi_fmul+0xe6>
 80004ea:	ea41 010c 	orr.w	r1, r1, ip
 80004ee:	e78f      	b.n	8000410 <__aeabi_fmul+0x18>
 80004f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004f4:	ea92 0f0c 	teq	r2, ip
 80004f8:	bf18      	it	ne
 80004fa:	ea93 0f0c 	teqne	r3, ip
 80004fe:	d00a      	beq.n	8000516 <__aeabi_fmul+0x11e>
 8000500:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000504:	bf18      	it	ne
 8000506:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800050a:	d1d8      	bne.n	80004be <__aeabi_fmul+0xc6>
 800050c:	ea80 0001 	eor.w	r0, r0, r1
 8000510:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f090 0f00 	teq	r0, #0
 800051a:	bf17      	itett	ne
 800051c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000520:	4608      	moveq	r0, r1
 8000522:	f091 0f00 	teqne	r1, #0
 8000526:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800052a:	d014      	beq.n	8000556 <__aeabi_fmul+0x15e>
 800052c:	ea92 0f0c 	teq	r2, ip
 8000530:	d101      	bne.n	8000536 <__aeabi_fmul+0x13e>
 8000532:	0242      	lsls	r2, r0, #9
 8000534:	d10f      	bne.n	8000556 <__aeabi_fmul+0x15e>
 8000536:	ea93 0f0c 	teq	r3, ip
 800053a:	d103      	bne.n	8000544 <__aeabi_fmul+0x14c>
 800053c:	024b      	lsls	r3, r1, #9
 800053e:	bf18      	it	ne
 8000540:	4608      	movne	r0, r1
 8000542:	d108      	bne.n	8000556 <__aeabi_fmul+0x15e>
 8000544:	ea80 0001 	eor.w	r0, r0, r1
 8000548:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800054c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000550:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000554:	4770      	bx	lr
 8000556:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800055a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800055e:	4770      	bx	lr

08000560 <__aeabi_fdiv>:
 8000560:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000564:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000568:	bf1e      	ittt	ne
 800056a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800056e:	ea92 0f0c 	teqne	r2, ip
 8000572:	ea93 0f0c 	teqne	r3, ip
 8000576:	d069      	beq.n	800064c <__aeabi_fdiv+0xec>
 8000578:	eba2 0203 	sub.w	r2, r2, r3
 800057c:	ea80 0c01 	eor.w	ip, r0, r1
 8000580:	0249      	lsls	r1, r1, #9
 8000582:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000586:	d037      	beq.n	80005f8 <__aeabi_fdiv+0x98>
 8000588:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800058c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000590:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000594:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000598:	428b      	cmp	r3, r1
 800059a:	bf38      	it	cc
 800059c:	005b      	lslcc	r3, r3, #1
 800059e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80005a2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80005a6:	428b      	cmp	r3, r1
 80005a8:	bf24      	itt	cs
 80005aa:	1a5b      	subcs	r3, r3, r1
 80005ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80005b0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005b4:	bf24      	itt	cs
 80005b6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005ba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005be:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005c2:	bf24      	itt	cs
 80005c4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005cc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005d0:	bf24      	itt	cs
 80005d2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005d6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	bf18      	it	ne
 80005de:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005e2:	d1e0      	bne.n	80005a6 <__aeabi_fdiv+0x46>
 80005e4:	2afd      	cmp	r2, #253	@ 0xfd
 80005e6:	f63f af50 	bhi.w	800048a <__aeabi_fmul+0x92>
 80005ea:	428b      	cmp	r3, r1
 80005ec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005f0:	bf08      	it	eq
 80005f2:	f020 0001 	biceq.w	r0, r0, #1
 80005f6:	4770      	bx	lr
 80005f8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80005fc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000600:	327f      	adds	r2, #127	@ 0x7f
 8000602:	bfc2      	ittt	gt
 8000604:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000608:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800060c:	4770      	bxgt	lr
 800060e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000612:	f04f 0300 	mov.w	r3, #0
 8000616:	3a01      	subs	r2, #1
 8000618:	e737      	b.n	800048a <__aeabi_fmul+0x92>
 800061a:	f092 0f00 	teq	r2, #0
 800061e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000622:	bf02      	ittt	eq
 8000624:	0040      	lsleq	r0, r0, #1
 8000626:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800062a:	3a01      	subeq	r2, #1
 800062c:	d0f9      	beq.n	8000622 <__aeabi_fdiv+0xc2>
 800062e:	ea40 000c 	orr.w	r0, r0, ip
 8000632:	f093 0f00 	teq	r3, #0
 8000636:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800063a:	bf02      	ittt	eq
 800063c:	0049      	lsleq	r1, r1, #1
 800063e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000642:	3b01      	subeq	r3, #1
 8000644:	d0f9      	beq.n	800063a <__aeabi_fdiv+0xda>
 8000646:	ea41 010c 	orr.w	r1, r1, ip
 800064a:	e795      	b.n	8000578 <__aeabi_fdiv+0x18>
 800064c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000650:	ea92 0f0c 	teq	r2, ip
 8000654:	d108      	bne.n	8000668 <__aeabi_fdiv+0x108>
 8000656:	0242      	lsls	r2, r0, #9
 8000658:	f47f af7d 	bne.w	8000556 <__aeabi_fmul+0x15e>
 800065c:	ea93 0f0c 	teq	r3, ip
 8000660:	f47f af70 	bne.w	8000544 <__aeabi_fmul+0x14c>
 8000664:	4608      	mov	r0, r1
 8000666:	e776      	b.n	8000556 <__aeabi_fmul+0x15e>
 8000668:	ea93 0f0c 	teq	r3, ip
 800066c:	d104      	bne.n	8000678 <__aeabi_fdiv+0x118>
 800066e:	024b      	lsls	r3, r1, #9
 8000670:	f43f af4c 	beq.w	800050c <__aeabi_fmul+0x114>
 8000674:	4608      	mov	r0, r1
 8000676:	e76e      	b.n	8000556 <__aeabi_fmul+0x15e>
 8000678:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800067c:	bf18      	it	ne
 800067e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000682:	d1ca      	bne.n	800061a <__aeabi_fdiv+0xba>
 8000684:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000688:	f47f af5c 	bne.w	8000544 <__aeabi_fmul+0x14c>
 800068c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000690:	f47f af3c 	bne.w	800050c <__aeabi_fmul+0x114>
 8000694:	e75f      	b.n	8000556 <__aeabi_fmul+0x15e>
 8000696:	bf00      	nop

08000698 <__aeabi_f2iz>:
 8000698:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800069c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006a0:	d30f      	bcc.n	80006c2 <__aeabi_f2iz+0x2a>
 80006a2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80006a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006aa:	d90d      	bls.n	80006c8 <__aeabi_f2iz+0x30>
 80006ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006b4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006b8:	fa23 f002 	lsr.w	r0, r3, r2
 80006bc:	bf18      	it	ne
 80006be:	4240      	negne	r0, r0
 80006c0:	4770      	bx	lr
 80006c2:	f04f 0000 	mov.w	r0, #0
 80006c6:	4770      	bx	lr
 80006c8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80006cc:	d101      	bne.n	80006d2 <__aeabi_f2iz+0x3a>
 80006ce:	0242      	lsls	r2, r0, #9
 80006d0:	d105      	bne.n	80006de <__aeabi_f2iz+0x46>
 80006d2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80006d6:	bf08      	it	eq
 80006d8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80006dc:	4770      	bx	lr
 80006de:	f04f 0000 	mov.w	r0, #0
 80006e2:	4770      	bx	lr

080006e4 <LEDGreen>:
 */

#include "LEDS.h"
#include "main.h"

void LEDGreen(){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin;
 80006f6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80006fa:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2302      	movs	r3, #2
 8000706:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	480f      	ldr	r0, [pc, #60]	@ (800074c <LEDGreen+0x68>)
 800070e:	f000 fe1d 	bl	800134c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED4_Pin|LED2_Pin;
 8000712:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000716:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2302      	movs	r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	4808      	ldr	r0, [pc, #32]	@ (800074c <LEDGreen+0x68>)
 800072a:	f000 fe0f 	bl	800134c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2180      	movs	r1, #128	@ 0x80
 8000732:	4806      	ldr	r0, [pc, #24]	@ (800074c <LEDGreen+0x68>)
 8000734:	f000 ff8e 	bl	8001654 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073e:	4803      	ldr	r0, [pc, #12]	@ (800074c <LEDGreen+0x68>)
 8000740:	f000 ff88 	bl	8001654 <HAL_GPIO_WritePin>
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40010c00 	.word	0x40010c00

08000750 <LEDRed>:

	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
}

void LEDRed(){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8000762:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000766:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2302      	movs	r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	463b      	mov	r3, r7
 8000776:	4619      	mov	r1, r3
 8000778:	480f      	ldr	r0, [pc, #60]	@ (80007b8 <LEDRed+0x68>)
 800077a:	f000 fde7 	bl	800134c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin;
 800077e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000782:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2302      	movs	r3, #2
 800078e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	463b      	mov	r3, r7
 8000792:	4619      	mov	r1, r3
 8000794:	4808      	ldr	r0, [pc, #32]	@ (80007b8 <LEDRed+0x68>)
 8000796:	f000 fdd9 	bl	800134c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	4806      	ldr	r0, [pc, #24]	@ (80007b8 <LEDRed+0x68>)
 80007a0:	f000 ff58 	bl	8001654 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007aa:	4803      	ldr	r0, [pc, #12]	@ (80007b8 <LEDRed+0x68>)
 80007ac:	f000 ff52 	bl	8001654 <HAL_GPIO_WritePin>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40010c00 	.word	0x40010c00

080007bc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007c8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d013      	beq.n	80007fc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007d8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80007dc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d00b      	beq.n	80007fc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007e4:	e000      	b.n	80007e8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80007e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f9      	beq.n	80007e6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007f2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007fc:	687b      	ldr	r3, [r7, #4]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fc06 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f83c 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f000 f8b2 	bl	800097c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000818:	f000 f87a 	bl	8000910 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  LPS25HB_Initialise(&hi2c2);
 800081c:	4812      	ldr	r0, [pc, #72]	@ (8000868 <main+0x60>)
 800081e:	f004 fbd7 	bl	8004fd0 <LPS25HB_Initialise>
  /* USER CODE END 2 */

  /* Init scheduler */
  SEGGER_SYSVIEW_Conf();
 8000822:	f008 f817 	bl	8008854 <SEGGER_SYSVIEW_Conf>
  osKernelInitialize();
 8000826:	f004 fca3 	bl	8005170 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SensorRAWQueue */
  SensorRAWQueueHandle = osMessageQueueNew(3, sizeof(uint8_t), &SensorRAWQueue_attributes);
 800082a:	4a10      	ldr	r2, [pc, #64]	@ (800086c <main+0x64>)
 800082c:	2101      	movs	r1, #1
 800082e:	2003      	movs	r0, #3
 8000830:	f004 fd96 	bl	8005360 <osMessageQueueNew>
 8000834:	4603      	mov	r3, r0
 8000836:	4a0e      	ldr	r2, [pc, #56]	@ (8000870 <main+0x68>)
 8000838:	6013      	str	r3, [r2, #0]

  /* creation of LedMUX
  LedMUXHandle = osThreadNew(StartLedMUX, NULL, &LedMUX_attributes);

   /* creation of SensorReadTask */
  SensorReadTaskHandle = osThreadNew(SensorRead, NULL, &SensorReadTask_attributes);
 800083a:	4a0e      	ldr	r2, [pc, #56]	@ (8000874 <main+0x6c>)
 800083c:	2100      	movs	r1, #0
 800083e:	480e      	ldr	r0, [pc, #56]	@ (8000878 <main+0x70>)
 8000840:	f004 fcde 	bl	8005200 <osThreadNew>
 8000844:	4603      	mov	r3, r0
 8000846:	4a0d      	ldr	r2, [pc, #52]	@ (800087c <main+0x74>)
 8000848:	6013      	str	r3, [r2, #0]

  /* creation of DataTransferTask */
  DataTransferTaskHandle = osThreadNew(DataTransfer, NULL, &DataTransferTask_attributes);
 800084a:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <main+0x78>)
 800084c:	2100      	movs	r1, #0
 800084e:	480d      	ldr	r0, [pc, #52]	@ (8000884 <main+0x7c>)
 8000850:	f004 fcd6 	bl	8005200 <osThreadNew>
 8000854:	4603      	mov	r3, r0
 8000856:	4a0c      	ldr	r2, [pc, #48]	@ (8000888 <main+0x80>)
 8000858:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  SEGGER_SYSVIEW_Conf();
 800085a:	f007 fffb 	bl	8008854 <SEGGER_SYSVIEW_Conf>
  osKernelStart();
 800085e:	f004 fca9 	bl	80051b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000862:	bf00      	nop
 8000864:	e7fd      	b.n	8000862 <main+0x5a>
 8000866:	bf00      	nop
 8000868:	2000007c 	.word	0x2000007c
 800086c:	0800ad24 	.word	0x0800ad24
 8000870:	200000d8 	.word	0x200000d8
 8000874:	0800acdc 	.word	0x0800acdc
 8000878:	08000ab1 	.word	0x08000ab1
 800087c:	200000d0 	.word	0x200000d0
 8000880:	0800ad00 	.word	0x0800ad00
 8000884:	08000ae9 	.word	0x08000ae9
 8000888:	200000d4 	.word	0x200000d4

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b090      	sub	sp, #64	@ 0x40
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0318 	add.w	r3, r7, #24
 8000896:	2228      	movs	r2, #40	@ 0x28
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f009 fcfa 	bl	800a294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b2:	2301      	movs	r3, #1
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b6:	2310      	movs	r3, #16
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ba:	2302      	movs	r3, #2
 80008bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008be:	2300      	movs	r3, #0
 80008c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80008c2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80008c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0318 	add.w	r3, r7, #24
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 fd15 	bl	80042fc <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008d8:	f000 f9f9 	bl	8000cce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2102      	movs	r1, #2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f003 ff82 	bl	8004800 <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000902:	f000 f9e4 	bl	8000cce <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	3740      	adds	r7, #64	@ 0x40
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000914:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_I2C2_Init+0x60>)
 8000916:	4a17      	ldr	r2, [pc, #92]	@ (8000974 <MX_I2C2_Init+0x64>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_I2C2_Init+0x60>)
 800091c:	4a16      	ldr	r2, [pc, #88]	@ (8000978 <MX_I2C2_Init+0x68>)
 800091e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000920:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <MX_I2C2_Init+0x60>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_I2C2_Init+0x60>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092c:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <MX_I2C2_Init+0x60>)
 800092e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000932:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000934:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_I2C2_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <MX_I2C2_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000940:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <MX_I2C2_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <MX_I2C2_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800094c:	4808      	ldr	r0, [pc, #32]	@ (8000970 <MX_I2C2_Init+0x60>)
 800094e:	f000 feb1 	bl	80016b4 <HAL_I2C_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000958:	f000 f9b9 	bl	8000cce <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 40, 0); // Set priority
 800095c:	2200      	movs	r2, #0
 800095e:	2128      	movs	r1, #40	@ 0x28
 8000960:	2021      	movs	r0, #33	@ 0x21
 8000962:	f000 fc42 	bl	80011ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn); // Enable interrupt
 8000966:	2021      	movs	r0, #33	@ 0x21
 8000968:	f000 fc5b 	bl	8001222 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2000007c 	.word	0x2000007c
 8000974:	40005800 	.word	0x40005800
 8000978:	000186a0 	.word	0x000186a0

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000990:	4b42      	ldr	r3, [pc, #264]	@ (8000a9c <MX_GPIO_Init+0x120>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a41      	ldr	r2, [pc, #260]	@ (8000a9c <MX_GPIO_Init+0x120>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a9c <MX_GPIO_Init+0x120>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b3c      	ldr	r3, [pc, #240]	@ (8000a9c <MX_GPIO_Init+0x120>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a3b      	ldr	r2, [pc, #236]	@ (8000a9c <MX_GPIO_Init+0x120>)
 80009ae:	f043 0304 	orr.w	r3, r3, #4
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b39      	ldr	r3, [pc, #228]	@ (8000a9c <MX_GPIO_Init+0x120>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c0:	4b36      	ldr	r3, [pc, #216]	@ (8000a9c <MX_GPIO_Init+0x120>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a35      	ldr	r2, [pc, #212]	@ (8000a9c <MX_GPIO_Init+0x120>)
 80009c6:	f043 0308 	orr.w	r3, r3, #8
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b33      	ldr	r3, [pc, #204]	@ (8000a9c <MX_GPIO_Init+0x120>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 0308 	and.w	r3, r3, #8
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2120      	movs	r1, #32
 80009dc:	4830      	ldr	r0, [pc, #192]	@ (8000aa0 <MX_GPIO_Init+0x124>)
 80009de:	f000 fe39 	bl	8001654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80009e8:	482e      	ldr	r0, [pc, #184]	@ (8000aa4 <MX_GPIO_Init+0x128>)
 80009ea:	f000 fe33 	bl	8001654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f4:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa8 <MX_GPIO_Init+0x12c>)
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	482a      	ldr	r0, [pc, #168]	@ (8000aac <MX_GPIO_Init+0x130>)
 8000a04:	f000 fca2 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a08:	2320      	movs	r3, #32
 8000a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4820      	ldr	r0, [pc, #128]	@ (8000aa0 <MX_GPIO_Init+0x124>)
 8000a20:	f000 fc94 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pin : Left_Button_Pin */
  GPIO_InitStruct.Pin = Left_Button_Pin;
 8000a24:	2301      	movs	r3, #1
 8000a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <MX_GPIO_Init+0x12c>)
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Left_Button_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	481b      	ldr	r0, [pc, #108]	@ (8000aa4 <MX_GPIO_Init+0x128>)
 8000a38:	f000 fc88 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin;
 8000a3c:	23c0      	movs	r3, #192	@ 0xc0
 8000a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4815      	ldr	r0, [pc, #84]	@ (8000aa4 <MX_GPIO_Init+0x128>)
 8000a50:	f000 fc7c 	bl	800134c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000a54:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <MX_GPIO_Init+0x128>)
 8000a6e:	f000 fc6d 	bl	800134c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 13, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	210d      	movs	r1, #13
 8000a76:	2006      	movs	r0, #6
 8000a78:	f000 fbb7 	bl	80011ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a7c:	2006      	movs	r0, #6
 8000a7e:	f000 fbd0 	bl	8001222 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 47, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	212f      	movs	r1, #47	@ 0x2f
 8000a86:	2028      	movs	r0, #40	@ 0x28
 8000a88:	f000 fbaf 	bl	80011ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a8c:	2028      	movs	r0, #40	@ 0x28
 8000a8e:	f000 fbc8 	bl	8001222 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a92:	bf00      	nop
 8000a94:	3720      	adds	r7, #32
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40010800 	.word	0x40010800
 8000aa4:	40010c00 	.word	0x40010c00
 8000aa8:	10210000 	.word	0x10210000
 8000aac:	40011000 	.word	0x40011000

08000ab0 <SensorRead>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void SensorRead(void *argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
    for(;;)
    {
	if(Left_Button_State == TEMP)
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <SensorRead+0x30>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d103      	bne.n	8000ac8 <SensorRead+0x18>
	{
	    LPS25HB_Measure_Temperature_IT(&hi2c2);
 8000ac0:	4808      	ldr	r0, [pc, #32]	@ (8000ae4 <SensorRead+0x34>)
 8000ac2:	f004 fab9 	bl	8005038 <LPS25HB_Measure_Temperature_IT>
 8000ac6:	e006      	b.n	8000ad6 <SensorRead+0x26>
	}
	else if(Left_Button_State == PRESS)
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <SensorRead+0x30>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d102      	bne.n	8000ad6 <SensorRead+0x26>
	{
	    LPS25HB_Measure_Pressure_IT(&hi2c2);
 8000ad0:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <SensorRead+0x34>)
 8000ad2:	f004 fadd 	bl	8005090 <LPS25HB_Measure_Pressure_IT>
	}
	osDelay(1000);
 8000ad6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ada:	f004 fc26 	bl	800532a <osDelay>
	if(Left_Button_State == TEMP)
 8000ade:	e7eb      	b.n	8000ab8 <SensorRead+0x8>
 8000ae0:	200000dc 	.word	0x200000dc
 8000ae4:	2000007c 	.word	0x2000007c

08000ae8 <DataTransfer>:
    }
}

void DataTransfer(void *argument)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
    uint8_t ReceivedMSG = 0, counter = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	2300      	movs	r3, #0
 8000af6:	77fb      	strb	r3, [r7, #31]
    uint32_t temp = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
    float temperature = 0, pressure = 0;
 8000afc:	f04f 0300 	mov.w	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	f04f 0300 	mov.w	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
    for(;;)
    {
	if(osMessageQueueGet(SensorRAWQueueHandle, &ReceivedMSG, NULL, osWaitForever) == osOK){
 8000b08:	4b32      	ldr	r3, [pc, #200]	@ (8000bd4 <DataTransfer+0xec>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	f107 010f 	add.w	r1, r7, #15
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	2200      	movs	r2, #0
 8000b16:	f004 fcfb 	bl	8005510 <osMessageQueueGet>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1f3      	bne.n	8000b08 <DataTransfer+0x20>
	    LEDGreen();
 8000b20:	f7ff fde0 	bl	80006e4 <LEDGreen>
	    counter++;
 8000b24:	7ffb      	ldrb	r3, [r7, #31]
 8000b26:	3301      	adds	r3, #1
 8000b28:	77fb      	strb	r3, [r7, #31]
	    temp |= ReceivedMSG << (counter * 8);
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	7ffb      	ldrb	r3, [r7, #31]
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	461a      	mov	r2, r3
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
	    if(Left_Button_State == TEMP && counter == 2){
 8000b3e:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <DataTransfer+0xf0>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d124      	bne.n	8000b90 <DataTransfer+0xa8>
 8000b46:	7ffb      	ldrb	r3, [r7, #31]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d121      	bne.n	8000b90 <DataTransfer+0xa8>
		LEDRed();
 8000b4c:	f7ff fe00 	bl	8000750 <LEDRed>
		temperature = 42.5f + temp / 480.0f;
 8000b50:	69b8      	ldr	r0, [r7, #24]
 8000b52:	f7ff fbf9 	bl	8000348 <__aeabi_ui2f>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4920      	ldr	r1, [pc, #128]	@ (8000bdc <DataTransfer+0xf4>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fd00 	bl	8000560 <__aeabi_fdiv>
 8000b60:	4603      	mov	r3, r0
 8000b62:	491f      	ldr	r1, [pc, #124]	@ (8000be0 <DataTransfer+0xf8>)
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fb3f 	bl	80001e8 <__addsf3>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	617b      	str	r3, [r7, #20]
		sprintf(message_buffer,"Pressure = %ld\n",(int32_t)temperature);
 8000b6e:	6978      	ldr	r0, [r7, #20]
 8000b70:	f7ff fd92 	bl	8000698 <__aeabi_f2iz>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	491a      	ldr	r1, [pc, #104]	@ (8000be4 <DataTransfer+0xfc>)
 8000b7a:	481b      	ldr	r0, [pc, #108]	@ (8000be8 <DataTransfer+0x100>)
 8000b7c:	f009 fb58 	bl	800a230 <siprintf>
		ITM_Print(message_buffer);
 8000b80:	4819      	ldr	r0, [pc, #100]	@ (8000be8 <DataTransfer+0x100>)
 8000b82:	f000 f88f 	bl	8000ca4 <ITM_Print>
		temp = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
		counter = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	77fb      	strb	r3, [r7, #31]
 8000b8e:	e020      	b.n	8000bd2 <DataTransfer+0xea>
	    }
	    else if(Left_Button_State == PRESS && counter == 3){
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <DataTransfer+0xf0>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d1b7      	bne.n	8000b08 <DataTransfer+0x20>
 8000b98:	7ffb      	ldrb	r3, [r7, #31]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d1b4      	bne.n	8000b08 <DataTransfer+0x20>
		pressure =  temp / 40960.0f;
 8000b9e:	69b8      	ldr	r0, [r7, #24]
 8000ba0:	f7ff fbd2 	bl	8000348 <__aeabi_ui2f>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	4911      	ldr	r1, [pc, #68]	@ (8000bec <DataTransfer+0x104>)
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fcd9 	bl	8000560 <__aeabi_fdiv>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	613b      	str	r3, [r7, #16]
		sprintf(message_buffer,"Pressure = %ld\n",(int32_t)pressure);
 8000bb2:	6938      	ldr	r0, [r7, #16]
 8000bb4:	f7ff fd70 	bl	8000698 <__aeabi_f2iz>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4909      	ldr	r1, [pc, #36]	@ (8000be4 <DataTransfer+0xfc>)
 8000bbe:	480a      	ldr	r0, [pc, #40]	@ (8000be8 <DataTransfer+0x100>)
 8000bc0:	f009 fb36 	bl	800a230 <siprintf>
		ITM_Print(message_buffer);
 8000bc4:	4808      	ldr	r0, [pc, #32]	@ (8000be8 <DataTransfer+0x100>)
 8000bc6:	f000 f86d 	bl	8000ca4 <ITM_Print>
		temp = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
		counter = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	77fb      	strb	r3, [r7, #31]
	if(osMessageQueueGet(SensorRAWQueueHandle, &ReceivedMSG, NULL, osWaitForever) == osOK){
 8000bd2:	e799      	b.n	8000b08 <DataTransfer+0x20>
 8000bd4:	200000d8 	.word	0x200000d8
 8000bd8:	200000dc 	.word	0x200000dc
 8000bdc:	43f00000 	.word	0x43f00000
 8000be0:	422a0000 	.word	0x422a0000
 8000be4:	0800abfc 	.word	0x0800abfc
 8000be8:	200000e0 	.word	0x200000e0
 8000bec:	47200000 	.word	0x47200000

08000bf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c02:	f000 fa21 	bl	8001048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40000800 	.word	0x40000800

08000c14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);

	if(GPIO_Pin == Left_Button_Pin){
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d10a      	bne.n	8000c3a <HAL_GPIO_EXTI_Callback+0x26>
		}
		else{
		    Left_Button_State = WAIT;
		}
		*/
		if(Left_Button_State == TEMP){
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d103      	bne.n	8000c34 <HAL_GPIO_EXTI_Callback+0x20>
		    Left_Button_State = PRESS;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
		}
		else{
		    Left_Button_State = TEMP;
		}
	}
}
 8000c32:	e002      	b.n	8000c3a <HAL_GPIO_EXTI_Callback+0x26>
		    Left_Button_State = TEMP;
 8000c34:	4b03      	ldr	r3, [pc, #12]	@ (8000c44 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	200000dc 	.word	0x200000dc

08000c48 <HAL_I2C_MemRxCpltCallback>:

/**
 * @brief This function is called when the I2C read operation is complete.
 * @param hi2c The I2C handle.
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C2) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0e      	ldr	r2, [pc, #56]	@ (8000c90 <HAL_I2C_MemRxCpltCallback+0x48>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d116      	bne.n	8000c88 <HAL_I2C_MemRxCpltCallback+0x40>
    // The read operation for I2C2 is complete.
	if (Left_Button_State == TEMP){
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d107      	bne.n	8000c72 <HAL_I2C_MemRxCpltCallback+0x2a>
	    osMessageQueuePut(SensorRAWQueueHandle, &Temp_RAW, 0, 0);
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <HAL_I2C_MemRxCpltCallback+0x50>)
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	2300      	movs	r3, #0
 8000c68:	2200      	movs	r2, #0
 8000c6a:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <HAL_I2C_MemRxCpltCallback+0x54>)
 8000c6c:	f004 fbec 	bl	8005448 <osMessageQueuePut>
	}
	else if(Left_Button_State == PRESS){
	    osMessageQueuePut(SensorRAWQueueHandle, &Press_RAW, 0, 0);
	}
  }
}
 8000c70:	e00a      	b.n	8000c88 <HAL_I2C_MemRxCpltCallback+0x40>
	else if(Left_Button_State == PRESS){
 8000c72:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d106      	bne.n	8000c88 <HAL_I2C_MemRxCpltCallback+0x40>
	    osMessageQueuePut(SensorRAWQueueHandle, &Press_RAW, 0, 0);
 8000c7a:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <HAL_I2C_MemRxCpltCallback+0x50>)
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	2200      	movs	r2, #0
 8000c82:	4907      	ldr	r1, [pc, #28]	@ (8000ca0 <HAL_I2C_MemRxCpltCallback+0x58>)
 8000c84:	f004 fbe0 	bl	8005448 <osMessageQueuePut>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40005800 	.word	0x40005800
 8000c94:	200000dc 	.word	0x200000dc
 8000c98:	200000d8 	.word	0x200000d8
 8000c9c:	2000015c 	.word	0x2000015c
 8000ca0:	20000160 	.word	0x20000160

08000ca4 <ITM_Print>:


void ITM_Print(const char *message_buffer){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	while(*message_buffer){
 8000cac:	e006      	b.n	8000cbc <ITM_Print+0x18>
		ITM_SendChar(*message_buffer++);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fd80 	bl	80007bc <ITM_SendChar>
	while(*message_buffer){
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1f4      	bne.n	8000cae <ITM_Print+0xa>
	}
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd2:	b672      	cpsid	i
}
 8000cd4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd6:	bf00      	nop
 8000cd8:	e7fd      	b.n	8000cd6 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <HAL_MspInit+0x68>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	4a17      	ldr	r2, [pc, #92]	@ (8000d44 <HAL_MspInit+0x68>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6193      	str	r3, [r2, #24]
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_MspInit+0x68>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_MspInit+0x68>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a11      	ldr	r2, [pc, #68]	@ (8000d44 <HAL_MspInit+0x68>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <HAL_MspInit+0x68>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	210f      	movs	r1, #15
 8000d16:	f06f 0001 	mvn.w	r0, #1
 8000d1a:	f000 fa66 	bl	80011ea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_MspInit+0x6c>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <HAL_MspInit+0x6c>)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40010000 	.word	0x40010000

08000d4c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a16      	ldr	r2, [pc, #88]	@ (8000dc0 <HAL_I2C_MspInit+0x74>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d124      	bne.n	8000db6 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_I2C_MspInit+0x78>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <HAL_I2C_MspInit+0x78>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_I2C_MspInit+0x78>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_LPS25HB_Pin|SDA_LPS25HB_Pin;
 8000d84:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8a:	2312      	movs	r3, #18
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4619      	mov	r1, r3
 8000d98:	480b      	ldr	r0, [pc, #44]	@ (8000dc8 <HAL_I2C_MspInit+0x7c>)
 8000d9a:	f000 fad7 	bl	800134c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <HAL_I2C_MspInit+0x78>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <HAL_I2C_MspInit+0x78>)
 8000da4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_I2C_MspInit+0x78>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000db6:	bf00      	nop
 8000db8:	3720      	adds	r7, #32
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40005800 	.word	0x40005800
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010c00 	.word	0x40010c00

08000dcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	@ 0x38
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000de2:	4b34      	ldr	r3, [pc, #208]	@ (8000eb4 <HAL_InitTick+0xe8>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	4a33      	ldr	r2, [pc, #204]	@ (8000eb4 <HAL_InitTick+0xe8>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	61d3      	str	r3, [r2, #28]
 8000dee:	4b31      	ldr	r3, [pc, #196]	@ (8000eb4 <HAL_InitTick+0xe8>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dfa:	f107 0210 	add.w	r2, r7, #16
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 fe57 	bl	8004ab8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d103      	bne.n	8000e1c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e14:	f003 fe3c 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8000e18:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e1a:	e004      	b.n	8000e26 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e1c:	f003 fe38 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8000e20:	4603      	mov	r3, r0
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e28:	4a23      	ldr	r2, [pc, #140]	@ (8000eb8 <HAL_InitTick+0xec>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	0c9b      	lsrs	r3, r3, #18
 8000e30:	3b01      	subs	r3, #1
 8000e32:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000e34:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <HAL_InitTick+0xf0>)
 8000e36:	4a22      	ldr	r2, [pc, #136]	@ (8000ec0 <HAL_InitTick+0xf4>)
 8000e38:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <HAL_InitTick+0xf0>)
 8000e3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e40:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000e42:	4a1e      	ldr	r2, [pc, #120]	@ (8000ebc <HAL_InitTick+0xf0>)
 8000e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e46:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000e48:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <HAL_InitTick+0xf0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <HAL_InitTick+0xf0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e54:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <HAL_InitTick+0xf0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000e5a:	4818      	ldr	r0, [pc, #96]	@ (8000ebc <HAL_InitTick+0xf0>)
 8000e5c:	f003 fe7a 	bl	8004b54 <HAL_TIM_Base_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e66:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d11b      	bne.n	8000ea6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000e6e:	4813      	ldr	r0, [pc, #76]	@ (8000ebc <HAL_InitTick+0xf0>)
 8000e70:	f003 fec8 	bl	8004c04 <HAL_TIM_Base_Start_IT>
 8000e74:	4603      	mov	r3, r0
 8000e76:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d111      	bne.n	8000ea6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e82:	201e      	movs	r0, #30
 8000e84:	f000 f9cd 	bl	8001222 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	d808      	bhi.n	8000ea0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	201e      	movs	r0, #30
 8000e94:	f000 f9a9 	bl	80011ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_InitTick+0xf8>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e002      	b.n	8000ea6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ea6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3738      	adds	r7, #56	@ 0x38
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	431bde83 	.word	0x431bde83
 8000ebc:	20000108 	.word	0x20000108
 8000ec0:	40000800 	.word	0x40000800
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <NMI_Handler+0x4>

08000ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <MemManage_Handler+0x4>

08000ee0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <UsageFault_Handler+0x4>

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_Button_Pin);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f000 fbbf 	bl	8001684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <TIM4_IRQHandler+0x10>)
 8000f12:	f003 fec9 	bl	8004ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000108 	.word	0x20000108

08000f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f28:	f000 fbac 	bl	8001684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <I2C2_EV_IRQHandler+0x10>)
 8000f36:	f001 f93b 	bl	80021b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000007c 	.word	0x2000007c

08000f44 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <I2C2_ER_IRQHandler+0x10>)
 8000f4a:	f001 faa2 	bl	8002492 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000007c 	.word	0x2000007c

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f009 f98c 	bl	800a2a4 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20005000 	.word	0x20005000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	20000150 	.word	0x20000150
 8000fc0:	20004960 	.word	0x20004960

08000fc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd0:	f7ff fff8 	bl	8000fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd4:	480b      	ldr	r0, [pc, #44]	@ (8001004 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fd6:	490c      	ldr	r1, [pc, #48]	@ (8001008 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800100c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a09      	ldr	r2, [pc, #36]	@ (8001010 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fec:	4c09      	ldr	r4, [pc, #36]	@ (8001014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f009 f959 	bl	800a2b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ffe:	f7ff fc03 	bl	8000808 <main>
  bx lr
 8001002:	4770      	bx	lr
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800100c:	0800add0 	.word	0x0800add0
  ldr r2, =_sbss
 8001010:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001014:	2000495c 	.word	0x2000495c

08001018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC1_2_IRQHandler>
	...

0800101c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <HAL_Init+0x28>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a07      	ldr	r2, [pc, #28]	@ (8001044 <HAL_Init+0x28>)
 8001026:	f043 0310 	orr.w	r3, r3, #16
 800102a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f8d1 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001032:	200f      	movs	r0, #15
 8001034:	f7ff feca 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001038:	f7ff fe50 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40022000 	.word	0x40022000

08001048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <HAL_IncTick+0x1c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <HAL_IncTick+0x20>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a03      	ldr	r2, [pc, #12]	@ (8001068 <HAL_IncTick+0x20>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	20000008 	.word	0x20000008
 8001068:	20000154 	.word	0x20000154

0800106c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b02      	ldr	r3, [pc, #8]	@ (800107c <HAL_GetTick+0x10>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	20000154 	.word	0x20000154

08001080 <__NVIC_SetPriorityGrouping>:
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4906      	ldr	r1, [pc, #24]	@ (8001118 <__NVIC_EnableIRQ+0x34>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	@ (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	@ (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff4f 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011fc:	f7ff ff64 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	f7ff ffb2 	bl	8001170 <NVIC_EncodePriority>
 800120c:	4602      	mov	r2, r0
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff81 	bl	800111c <__NVIC_SetPriority>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff57 	bl	80010e4 <__NVIC_EnableIRQ>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d005      	beq.n	8001264 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2204      	movs	r2, #4
 800125c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	e051      	b.n	8001308 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 020e 	bic.w	r2, r2, #14
 8001272:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0201 	bic.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a22      	ldr	r2, [pc, #136]	@ (8001314 <HAL_DMA_Abort_IT+0xd4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d029      	beq.n	80012e2 <HAL_DMA_Abort_IT+0xa2>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a21      	ldr	r2, [pc, #132]	@ (8001318 <HAL_DMA_Abort_IT+0xd8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d022      	beq.n	80012de <HAL_DMA_Abort_IT+0x9e>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a1f      	ldr	r2, [pc, #124]	@ (800131c <HAL_DMA_Abort_IT+0xdc>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d01a      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x98>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001320 <HAL_DMA_Abort_IT+0xe0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d012      	beq.n	80012d2 <HAL_DMA_Abort_IT+0x92>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001324 <HAL_DMA_Abort_IT+0xe4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00a      	beq.n	80012cc <HAL_DMA_Abort_IT+0x8c>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001328 <HAL_DMA_Abort_IT+0xe8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d102      	bne.n	80012c6 <HAL_DMA_Abort_IT+0x86>
 80012c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012c4:	e00e      	b.n	80012e4 <HAL_DMA_Abort_IT+0xa4>
 80012c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012ca:	e00b      	b.n	80012e4 <HAL_DMA_Abort_IT+0xa4>
 80012cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d0:	e008      	b.n	80012e4 <HAL_DMA_Abort_IT+0xa4>
 80012d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d6:	e005      	b.n	80012e4 <HAL_DMA_Abort_IT+0xa4>
 80012d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012dc:	e002      	b.n	80012e4 <HAL_DMA_Abort_IT+0xa4>
 80012de:	2310      	movs	r3, #16
 80012e0:	e000      	b.n	80012e4 <HAL_DMA_Abort_IT+0xa4>
 80012e2:	2301      	movs	r3, #1
 80012e4:	4a11      	ldr	r2, [pc, #68]	@ (800132c <HAL_DMA_Abort_IT+0xec>)
 80012e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	4798      	blx	r3
    } 
  }
  return status;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40020008 	.word	0x40020008
 8001318:	4002001c 	.word	0x4002001c
 800131c:	40020030 	.word	0x40020030
 8001320:	40020044 	.word	0x40020044
 8001324:	40020058 	.word	0x40020058
 8001328:	4002006c 	.word	0x4002006c
 800132c:	40020000 	.word	0x40020000

08001330 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800133e:	b2db      	uxtb	r3, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
	...

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b08b      	sub	sp, #44	@ 0x2c
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135e:	e169      	b.n	8001634 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001360:	2201      	movs	r2, #1
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 8158 	bne.w	800162e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4a9a      	ldr	r2, [pc, #616]	@ (80015ec <HAL_GPIO_Init+0x2a0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d05e      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 8001388:	4a98      	ldr	r2, [pc, #608]	@ (80015ec <HAL_GPIO_Init+0x2a0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d875      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 800138e:	4a98      	ldr	r2, [pc, #608]	@ (80015f0 <HAL_GPIO_Init+0x2a4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d058      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 8001394:	4a96      	ldr	r2, [pc, #600]	@ (80015f0 <HAL_GPIO_Init+0x2a4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d86f      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 800139a:	4a96      	ldr	r2, [pc, #600]	@ (80015f4 <HAL_GPIO_Init+0x2a8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d052      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 80013a0:	4a94      	ldr	r2, [pc, #592]	@ (80015f4 <HAL_GPIO_Init+0x2a8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d869      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 80013a6:	4a94      	ldr	r2, [pc, #592]	@ (80015f8 <HAL_GPIO_Init+0x2ac>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d04c      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 80013ac:	4a92      	ldr	r2, [pc, #584]	@ (80015f8 <HAL_GPIO_Init+0x2ac>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d863      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 80013b2:	4a92      	ldr	r2, [pc, #584]	@ (80015fc <HAL_GPIO_Init+0x2b0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d046      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 80013b8:	4a90      	ldr	r2, [pc, #576]	@ (80015fc <HAL_GPIO_Init+0x2b0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d85d      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d82a      	bhi.n	8001418 <HAL_GPIO_Init+0xcc>
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d859      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 80013c6:	a201      	add	r2, pc, #4	@ (adr r2, 80013cc <HAL_GPIO_Init+0x80>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	08001447 	.word	0x08001447
 80013d0:	08001421 	.word	0x08001421
 80013d4:	08001433 	.word	0x08001433
 80013d8:	08001475 	.word	0x08001475
 80013dc:	0800147b 	.word	0x0800147b
 80013e0:	0800147b 	.word	0x0800147b
 80013e4:	0800147b 	.word	0x0800147b
 80013e8:	0800147b 	.word	0x0800147b
 80013ec:	0800147b 	.word	0x0800147b
 80013f0:	0800147b 	.word	0x0800147b
 80013f4:	0800147b 	.word	0x0800147b
 80013f8:	0800147b 	.word	0x0800147b
 80013fc:	0800147b 	.word	0x0800147b
 8001400:	0800147b 	.word	0x0800147b
 8001404:	0800147b 	.word	0x0800147b
 8001408:	0800147b 	.word	0x0800147b
 800140c:	0800147b 	.word	0x0800147b
 8001410:	08001429 	.word	0x08001429
 8001414:	0800143d 	.word	0x0800143d
 8001418:	4a79      	ldr	r2, [pc, #484]	@ (8001600 <HAL_GPIO_Init+0x2b4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800141e:	e02c      	b.n	800147a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	623b      	str	r3, [r7, #32]
          break;
 8001426:	e029      	b.n	800147c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	3304      	adds	r3, #4
 800142e:	623b      	str	r3, [r7, #32]
          break;
 8001430:	e024      	b.n	800147c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	3308      	adds	r3, #8
 8001438:	623b      	str	r3, [r7, #32]
          break;
 800143a:	e01f      	b.n	800147c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	330c      	adds	r3, #12
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e01a      	b.n	800147c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800144e:	2304      	movs	r3, #4
 8001450:	623b      	str	r3, [r7, #32]
          break;
 8001452:	e013      	b.n	800147c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d105      	bne.n	8001468 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800145c:	2308      	movs	r3, #8
 800145e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	611a      	str	r2, [r3, #16]
          break;
 8001466:	e009      	b.n	800147c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001468:	2308      	movs	r3, #8
 800146a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	615a      	str	r2, [r3, #20]
          break;
 8001472:	e003      	b.n	800147c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
          break;
 8001478:	e000      	b.n	800147c <HAL_GPIO_Init+0x130>
          break;
 800147a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2bff      	cmp	r3, #255	@ 0xff
 8001480:	d801      	bhi.n	8001486 <HAL_GPIO_Init+0x13a>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	e001      	b.n	800148a <HAL_GPIO_Init+0x13e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3304      	adds	r3, #4
 800148a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2bff      	cmp	r3, #255	@ 0xff
 8001490:	d802      	bhi.n	8001498 <HAL_GPIO_Init+0x14c>
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0x152>
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149a:	3b08      	subs	r3, #8
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	210f      	movs	r1, #15
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	401a      	ands	r2, r3
 80014b0:	6a39      	ldr	r1, [r7, #32]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	431a      	orrs	r2, r3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 80b1 	beq.w	800162e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001604 <HAL_GPIO_Init+0x2b8>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001604 <HAL_GPIO_Init+0x2b8>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001604 <HAL_GPIO_Init+0x2b8>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e4:	4a48      	ldr	r2, [pc, #288]	@ (8001608 <HAL_GPIO_Init+0x2bc>)
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a40      	ldr	r2, [pc, #256]	@ (800160c <HAL_GPIO_Init+0x2c0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d013      	beq.n	8001538 <HAL_GPIO_Init+0x1ec>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a3f      	ldr	r2, [pc, #252]	@ (8001610 <HAL_GPIO_Init+0x2c4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d00d      	beq.n	8001534 <HAL_GPIO_Init+0x1e8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a3e      	ldr	r2, [pc, #248]	@ (8001614 <HAL_GPIO_Init+0x2c8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d007      	beq.n	8001530 <HAL_GPIO_Init+0x1e4>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a3d      	ldr	r2, [pc, #244]	@ (8001618 <HAL_GPIO_Init+0x2cc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d101      	bne.n	800152c <HAL_GPIO_Init+0x1e0>
 8001528:	2303      	movs	r3, #3
 800152a:	e006      	b.n	800153a <HAL_GPIO_Init+0x1ee>
 800152c:	2304      	movs	r3, #4
 800152e:	e004      	b.n	800153a <HAL_GPIO_Init+0x1ee>
 8001530:	2302      	movs	r3, #2
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x1ee>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_GPIO_Init+0x1ee>
 8001538:	2300      	movs	r3, #0
 800153a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800153c:	f002 0203 	and.w	r2, r2, #3
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	4093      	lsls	r3, r2
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800154a:	492f      	ldr	r1, [pc, #188]	@ (8001608 <HAL_GPIO_Init+0x2bc>)
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001564:	4b2d      	ldr	r3, [pc, #180]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	492c      	ldr	r1, [pc, #176]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	608b      	str	r3, [r1, #8]
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001572:	4b2a      	ldr	r3, [pc, #168]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	43db      	mvns	r3, r3
 800157a:	4928      	ldr	r1, [pc, #160]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 800157c:	4013      	ands	r3, r2
 800157e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800158c:	4b23      	ldr	r3, [pc, #140]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	4922      	ldr	r1, [pc, #136]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	60cb      	str	r3, [r1, #12]
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800159a:	4b20      	ldr	r3, [pc, #128]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	491e      	ldr	r1, [pc, #120]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b4:	4b19      	ldr	r3, [pc, #100]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4918      	ldr	r1, [pc, #96]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	4914      	ldr	r1, [pc, #80]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d021      	beq.n	8001620 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015dc:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	490e      	ldr	r1, [pc, #56]	@ (800161c <HAL_GPIO_Init+0x2d0>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
 80015e8:	e021      	b.n	800162e <HAL_GPIO_Init+0x2e2>
 80015ea:	bf00      	nop
 80015ec:	10320000 	.word	0x10320000
 80015f0:	10310000 	.word	0x10310000
 80015f4:	10220000 	.word	0x10220000
 80015f8:	10210000 	.word	0x10210000
 80015fc:	10120000 	.word	0x10120000
 8001600:	10110000 	.word	0x10110000
 8001604:	40021000 	.word	0x40021000
 8001608:	40010000 	.word	0x40010000
 800160c:	40010800 	.word	0x40010800
 8001610:	40010c00 	.word	0x40010c00
 8001614:	40011000 	.word	0x40011000
 8001618:	40011400 	.word	0x40011400
 800161c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <HAL_GPIO_Init+0x304>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	43db      	mvns	r3, r3
 8001628:	4909      	ldr	r1, [pc, #36]	@ (8001650 <HAL_GPIO_Init+0x304>)
 800162a:	4013      	ands	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	3301      	adds	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163a:	fa22 f303 	lsr.w	r3, r2, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	f47f ae8e 	bne.w	8001360 <HAL_GPIO_Init+0x14>
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	372c      	adds	r7, #44	@ 0x2c
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	40010400 	.word	0x40010400

08001654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
 8001660:	4613      	mov	r3, r2
 8001662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001664:	787b      	ldrb	r3, [r7, #1]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001670:	e003      	b.n	800167a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	041a      	lsls	r2, r3, #16
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	611a      	str	r2, [r3, #16]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800168e:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800169a:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fab6 	bl	8000c14 <HAL_GPIO_EXTI_Callback>
  }
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40010400 	.word	0x40010400

080016b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e12b      	b.n	800191e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d106      	bne.n	80016e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fb36 	bl	8000d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2224      	movs	r2, #36	@ 0x24
 80016e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0201 	bic.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001718:	f003 f9ba 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 800171c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a81      	ldr	r2, [pc, #516]	@ (8001928 <HAL_I2C_Init+0x274>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d807      	bhi.n	8001738 <HAL_I2C_Init+0x84>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4a80      	ldr	r2, [pc, #512]	@ (800192c <HAL_I2C_Init+0x278>)
 800172c:	4293      	cmp	r3, r2
 800172e:	bf94      	ite	ls
 8001730:	2301      	movls	r3, #1
 8001732:	2300      	movhi	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	e006      	b.n	8001746 <HAL_I2C_Init+0x92>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4a7d      	ldr	r2, [pc, #500]	@ (8001930 <HAL_I2C_Init+0x27c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	bf94      	ite	ls
 8001740:	2301      	movls	r3, #1
 8001742:	2300      	movhi	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0e7      	b.n	800191e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4a78      	ldr	r2, [pc, #480]	@ (8001934 <HAL_I2C_Init+0x280>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0c9b      	lsrs	r3, r3, #18
 8001758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a6a      	ldr	r2, [pc, #424]	@ (8001928 <HAL_I2C_Init+0x274>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d802      	bhi.n	8001788 <HAL_I2C_Init+0xd4>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3301      	adds	r3, #1
 8001786:	e009      	b.n	800179c <HAL_I2C_Init+0xe8>
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	4a69      	ldr	r2, [pc, #420]	@ (8001938 <HAL_I2C_Init+0x284>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	3301      	adds	r3, #1
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	495c      	ldr	r1, [pc, #368]	@ (8001928 <HAL_I2C_Init+0x274>)
 80017b8:	428b      	cmp	r3, r1
 80017ba:	d819      	bhi.n	80017f0 <HAL_I2C_Init+0x13c>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1e59      	subs	r1, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ca:	1c59      	adds	r1, r3, #1
 80017cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017d0:	400b      	ands	r3, r1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00a      	beq.n	80017ec <HAL_I2C_Init+0x138>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1e59      	subs	r1, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ea:	e051      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 80017ec:	2304      	movs	r3, #4
 80017ee:	e04f      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d111      	bne.n	800181c <HAL_I2C_Init+0x168>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1e58      	subs	r0, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6859      	ldr	r1, [r3, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	e012      	b.n	8001842 <HAL_I2C_Init+0x18e>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1e58      	subs	r0, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	0099      	lsls	r1, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001832:	3301      	adds	r3, #1
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Init+0x196>
 8001846:	2301      	movs	r3, #1
 8001848:	e022      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10e      	bne.n	8001870 <HAL_I2C_Init+0x1bc>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1e58      	subs	r0, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6859      	ldr	r1, [r3, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	440b      	add	r3, r1
 8001860:	fbb0 f3f3 	udiv	r3, r0, r3
 8001864:	3301      	adds	r3, #1
 8001866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800186e:	e00f      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1e58      	subs	r0, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	0099      	lsls	r1, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	fbb0 f3f3 	udiv	r3, r0, r3
 8001886:	3301      	adds	r3, #1
 8001888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	6809      	ldr	r1, [r1, #0]
 8001894:	4313      	orrs	r3, r2
 8001896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69da      	ldr	r2, [r3, #28]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6911      	ldr	r1, [r2, #16]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68d2      	ldr	r2, [r2, #12]
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	000186a0 	.word	0x000186a0
 800192c:	001e847f 	.word	0x001e847f
 8001930:	003d08ff 	.word	0x003d08ff
 8001934:	431bde83 	.word	0x431bde83
 8001938:	10624dd3 	.word	0x10624dd3

0800193c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800194e:	2b80      	cmp	r3, #128	@ 0x80
 8001950:	d103      	bne.n	800195a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af02      	add	r7, sp, #8
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	4608      	mov	r0, r1
 800196e:	4611      	mov	r1, r2
 8001970:	461a      	mov	r2, r3
 8001972:	4603      	mov	r3, r0
 8001974:	817b      	strh	r3, [r7, #10]
 8001976:	460b      	mov	r3, r1
 8001978:	813b      	strh	r3, [r7, #8]
 800197a:	4613      	mov	r3, r2
 800197c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800197e:	f7ff fb75 	bl	800106c <HAL_GetTick>
 8001982:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b20      	cmp	r3, #32
 800198e:	f040 80d9 	bne.w	8001b44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2319      	movs	r3, #25
 8001998:	2201      	movs	r2, #1
 800199a:	496d      	ldr	r1, [pc, #436]	@ (8001b50 <HAL_I2C_Mem_Write+0x1ec>)
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f002 fa2b 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80019a8:	2302      	movs	r3, #2
 80019aa:	e0cc      	b.n	8001b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_I2C_Mem_Write+0x56>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e0c5      	b.n	8001b46 <HAL_I2C_Mem_Write+0x1e2>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d007      	beq.n	80019e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2221      	movs	r2, #33	@ 0x21
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2240      	movs	r2, #64	@ 0x40
 80019fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6a3a      	ldr	r2, [r7, #32]
 8001a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4a4d      	ldr	r2, [pc, #308]	@ (8001b54 <HAL_I2C_Mem_Write+0x1f0>)
 8001a20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a22:	88f8      	ldrh	r0, [r7, #6]
 8001a24:	893a      	ldrh	r2, [r7, #8]
 8001a26:	8979      	ldrh	r1, [r7, #10]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	4603      	mov	r3, r0
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f001 ffba 	bl	80039ac <I2C_RequestMemoryWrite>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d052      	beq.n	8001ae4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e081      	b.n	8001b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f002 faf0 	bl	800402c <I2C_WaitOnTXEFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00d      	beq.n	8001a6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d107      	bne.n	8001a6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e06b      	b.n	8001b46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d11b      	bne.n	8001ae4 <HAL_I2C_Mem_Write+0x180>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d017      	beq.n	8001ae4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1aa      	bne.n	8001a42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f002 fae3 	bl	80040bc <I2C_WaitOnBTFFlagUntilTimeout>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00d      	beq.n	8001b18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d107      	bne.n	8001b14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e016      	b.n	8001b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e000      	b.n	8001b46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
  }
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	00100002 	.word	0x00100002
 8001b54:	ffff0000 	.word	0xffff0000

08001b58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	@ 0x30
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	4608      	mov	r0, r1
 8001b62:	4611      	mov	r1, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	4603      	mov	r3, r0
 8001b68:	817b      	strh	r3, [r7, #10]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	813b      	strh	r3, [r7, #8]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b76:	f7ff fa79 	bl	800106c <HAL_GetTick>
 8001b7a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b20      	cmp	r3, #32
 8001b86:	f040 8250 	bne.w	800202a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2319      	movs	r3, #25
 8001b90:	2201      	movs	r2, #1
 8001b92:	4982      	ldr	r1, [pc, #520]	@ (8001d9c <HAL_I2C_Mem_Read+0x244>)
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f002 f92f 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e243      	b.n	800202c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_I2C_Mem_Read+0x5a>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e23c      	b.n	800202c <HAL_I2C_Mem_Read+0x4d4>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d007      	beq.n	8001bd8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001be6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2222      	movs	r2, #34	@ 0x22
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2240      	movs	r2, #64	@ 0x40
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4a62      	ldr	r2, [pc, #392]	@ (8001da0 <HAL_I2C_Mem_Read+0x248>)
 8001c18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c1a:	88f8      	ldrh	r0, [r7, #6]
 8001c1c:	893a      	ldrh	r2, [r7, #8]
 8001c1e:	8979      	ldrh	r1, [r7, #10]
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	4603      	mov	r3, r0
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f001 ff54 	bl	8003ad8 <I2C_RequestMemoryRead>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e1f8      	b.n	800202c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d113      	bne.n	8001c6a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e1cc      	b.n	8002004 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d11e      	bne.n	8001cb0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c82:	b672      	cpsid	i
}
 8001c84:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001caa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cac:	b662      	cpsie	i
}
 8001cae:	e035      	b.n	8001d1c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d11e      	bne.n	8001cf6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cf0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cf2:	b662      	cpsie	i
}
 8001cf4:	e012      	b.n	8001d1c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d04:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001d1c:	e172      	b.n	8002004 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	f200 811f 	bhi.w	8001f66 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d123      	bne.n	8001d78 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f002 fa3b 	bl	80041b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e173      	b.n	800202c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d76:	e145      	b.n	8002004 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d152      	bne.n	8001e26 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d86:	2200      	movs	r2, #0
 8001d88:	4906      	ldr	r1, [pc, #24]	@ (8001da4 <HAL_I2C_Mem_Read+0x24c>)
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f002 f834 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d008      	beq.n	8001da8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e148      	b.n	800202c <HAL_I2C_Mem_Read+0x4d4>
 8001d9a:	bf00      	nop
 8001d9c:	00100002 	.word	0x00100002
 8001da0:	ffff0000 	.word	0xffff0000
 8001da4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001da8:	b672      	cpsid	i
}
 8001daa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001dee:	b662      	cpsie	i
}
 8001df0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e24:	e0ee      	b.n	8002004 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4981      	ldr	r1, [pc, #516]	@ (8002034 <HAL_I2C_Mem_Read+0x4dc>)
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f001 ffe1 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0f5      	b.n	800202c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e86:	4b6c      	ldr	r3, [pc, #432]	@ (8002038 <HAL_I2C_Mem_Read+0x4e0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	08db      	lsrs	r3, r3, #3
 8001e8c:	4a6b      	ldr	r2, [pc, #428]	@ (800203c <HAL_I2C_Mem_Read+0x4e4>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0a1a      	lsrs	r2, r3, #8
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d118      	bne.n	8001ede <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	f043 0220 	orr.w	r2, r3, #32
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001ece:	b662      	cpsie	i
}
 8001ed0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0a6      	b.n	800202c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d1d9      	bne.n	8001ea0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f2e:	b662      	cpsie	i
}
 8001f30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f64:	e04e      	b.n	8002004 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f002 f920 	bl	80041b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e058      	b.n	800202c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d124      	bne.n	8002004 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d107      	bne.n	8001fd2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fd0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002008:	2b00      	cmp	r3, #0
 800200a:	f47f ae88 	bne.w	8001d1e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
  }
}
 800202c:	4618      	mov	r0, r3
 800202e:	3728      	adds	r7, #40	@ 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	00010004 	.word	0x00010004
 8002038:	20000000 	.word	0x20000000
 800203c:	14f8b589 	.word	0x14f8b589

08002040 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4603      	mov	r3, r0
 8002050:	817b      	strh	r3, [r7, #10]
 8002052:	460b      	mov	r3, r1
 8002054:	813b      	strh	r3, [r7, #8]
 8002056:	4613      	mov	r3, r2
 8002058:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b20      	cmp	r3, #32
 8002068:	f040 8096 	bne.w	8002198 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800206c:	4b4d      	ldr	r3, [pc, #308]	@ (80021a4 <HAL_I2C_Mem_Read_IT+0x164>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	4a4d      	ldr	r2, [pc, #308]	@ (80021a8 <HAL_I2C_Mem_Read_IT+0x168>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	0a1a      	lsrs	r2, r3, #8
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	009a      	lsls	r2, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3b01      	subs	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d112      	bne.n	80020b8 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	f043 0220 	orr.w	r2, r3, #32
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80020b4:	2302      	movs	r3, #2
 80020b6:	e070      	b.n	800219a <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d0df      	beq.n	8002086 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_I2C_Mem_Read_IT+0x94>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e062      	b.n	800219a <HAL_I2C_Mem_Read_IT+0x15a>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d007      	beq.n	80020fa <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002108:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2222      	movs	r2, #34	@ 0x22
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2240      	movs	r2, #64	@ 0x40
 8002116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a3a      	ldr	r2, [r7, #32]
 8002124:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800212a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4a1c      	ldr	r2, [pc, #112]	@ (80021ac <HAL_I2C_Mem_Read_IT+0x16c>)
 800213a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800213c:	897a      	ldrh	r2, [r7, #10]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8002142:	893a      	ldrh	r2, [r7, #8]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002148:	88fa      	ldrh	r2, [r7, #6]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002162:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002172:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002192:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e000      	b.n	800219a <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8002198:	2302      	movs	r3, #2
  }
}
 800219a:	4618      	mov	r0, r3
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	20000000 	.word	0x20000000
 80021a8:	14f8b589 	.word	0x14f8b589
 80021ac:	ffff0000 	.word	0xffff0000

080021b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d003      	beq.n	80021e8 <HAL_I2C_EV_IRQHandler+0x38>
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	2b40      	cmp	r3, #64	@ 0x40
 80021e4:	f040 80c1 	bne.w	800236a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10d      	bne.n	800221e <HAL_I2C_EV_IRQHandler+0x6e>
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002208:	d003      	beq.n	8002212 <HAL_I2C_EV_IRQHandler+0x62>
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002210:	d101      	bne.n	8002216 <HAL_I2C_EV_IRQHandler+0x66>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_I2C_EV_IRQHandler+0x68>
 8002216:	2300      	movs	r3, #0
 8002218:	2b01      	cmp	r3, #1
 800221a:	f000 8132 	beq.w	8002482 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00c      	beq.n	8002242 <HAL_I2C_EV_IRQHandler+0x92>
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	0a5b      	lsrs	r3, r3, #9
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f002 f846 	bl	80042c6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fd90 	bl	8002d60 <I2C_Master_SB>
 8002240:	e092      	b.n	8002368 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	08db      	lsrs	r3, r3, #3
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_I2C_EV_IRQHandler+0xb2>
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	0a5b      	lsrs	r3, r3, #9
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 fe05 	bl	8002e6a <I2C_Master_ADD10>
 8002260:	e082      	b.n	8002368 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <HAL_I2C_EV_IRQHandler+0xd2>
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	0a5b      	lsrs	r3, r3, #9
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fe1e 	bl	8002ebc <I2C_Master_ADDR>
 8002280:	e072      	b.n	8002368 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d03b      	beq.n	8002306 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800229c:	f000 80f3 	beq.w	8002486 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	09db      	lsrs	r3, r3, #7
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00f      	beq.n	80022cc <HAL_I2C_EV_IRQHandler+0x11c>
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	0a9b      	lsrs	r3, r3, #10
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d009      	beq.n	80022cc <HAL_I2C_EV_IRQHandler+0x11c>
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d103      	bne.n	80022cc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f9e8 	bl	800269a <I2C_MasterTransmit_TXE>
 80022ca:	e04d      	b.n	8002368 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80d6 	beq.w	8002486 <HAL_I2C_EV_IRQHandler+0x2d6>
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	0a5b      	lsrs	r3, r3, #9
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 80cf 	beq.w	8002486 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80022e8:	7bbb      	ldrb	r3, [r7, #14]
 80022ea:	2b21      	cmp	r3, #33	@ 0x21
 80022ec:	d103      	bne.n	80022f6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fa6f 	bl	80027d2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022f4:	e0c7      	b.n	8002486 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b40      	cmp	r3, #64	@ 0x40
 80022fa:	f040 80c4 	bne.w	8002486 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fadd 	bl	80028be <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002304:	e0bf      	b.n	8002486 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002314:	f000 80b7 	beq.w	8002486 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	099b      	lsrs	r3, r3, #6
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00f      	beq.n	8002344 <HAL_I2C_EV_IRQHandler+0x194>
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	0a9b      	lsrs	r3, r3, #10
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <HAL_I2C_EV_IRQHandler+0x194>
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fb56 	bl	80029ee <I2C_MasterReceive_RXNE>
 8002342:	e011      	b.n	8002368 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 809a 	beq.w	8002486 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	0a5b      	lsrs	r3, r3, #9
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8093 	beq.w	8002486 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fc0c 	bl	8002b7e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002366:	e08e      	b.n	8002486 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002368:	e08d      	b.n	8002486 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	e007      	b.n	800238c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	085b      	lsrs	r3, r3, #1
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d012      	beq.n	80023be <HAL_I2C_EV_IRQHandler+0x20e>
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	0a5b      	lsrs	r3, r3, #9
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00c      	beq.n	80023be <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80023b4:	69b9      	ldr	r1, [r7, #24]
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 ffd7 	bl	800336a <I2C_Slave_ADDR>
 80023bc:	e066      	b.n	800248c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_I2C_EV_IRQHandler+0x22e>
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	0a5b      	lsrs	r3, r3, #9
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f001 f812 	bl	8003400 <I2C_Slave_STOPF>
 80023dc:	e056      	b.n	800248c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023de:	7bbb      	ldrb	r3, [r7, #14]
 80023e0:	2b21      	cmp	r3, #33	@ 0x21
 80023e2:	d002      	beq.n	80023ea <HAL_I2C_EV_IRQHandler+0x23a>
 80023e4:	7bbb      	ldrb	r3, [r7, #14]
 80023e6:	2b29      	cmp	r3, #41	@ 0x29
 80023e8:	d125      	bne.n	8002436 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	09db      	lsrs	r3, r3, #7
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00f      	beq.n	8002416 <HAL_I2C_EV_IRQHandler+0x266>
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	0a9b      	lsrs	r3, r3, #10
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_I2C_EV_IRQHandler+0x266>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d103      	bne.n	8002416 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 feef 	bl	80031f2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002414:	e039      	b.n	800248a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d033      	beq.n	800248a <HAL_I2C_EV_IRQHandler+0x2da>
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	0a5b      	lsrs	r3, r3, #9
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d02d      	beq.n	800248a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 ff1c 	bl	800326c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002434:	e029      	b.n	800248a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00f      	beq.n	8002462 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	0a9b      	lsrs	r3, r3, #10
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_I2C_EV_IRQHandler+0x2b2>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d103      	bne.n	8002462 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 ff26 	bl	80032ac <I2C_SlaveReceive_RXNE>
 8002460:	e014      	b.n	800248c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00e      	beq.n	800248c <HAL_I2C_EV_IRQHandler+0x2dc>
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	0a5b      	lsrs	r3, r3, #9
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 ff54 	bl	8003328 <I2C_SlaveReceive_BTF>
 8002480:	e004      	b.n	800248c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002482:	bf00      	nop
 8002484:	e002      	b.n	800248c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002486:	bf00      	nop
 8002488:	e000      	b.n	800248c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800248a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b08a      	sub	sp, #40	@ 0x28
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024b4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d016      	beq.n	80024f0 <HAL_I2C_ER_IRQHandler+0x5e>
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d010      	beq.n	80024f0 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80024de:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	0a5b      	lsrs	r3, r3, #9
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00e      	beq.n	800251a <HAL_I2C_ER_IRQHandler+0x88>
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002518:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	0a9b      	lsrs	r3, r3, #10
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d03f      	beq.n	80025a6 <HAL_I2C_ER_IRQHandler+0x114>
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d039      	beq.n	80025a6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002532:	7efb      	ldrb	r3, [r7, #27]
 8002534:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002544:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800254c:	7ebb      	ldrb	r3, [r7, #26]
 800254e:	2b20      	cmp	r3, #32
 8002550:	d112      	bne.n	8002578 <HAL_I2C_ER_IRQHandler+0xe6>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10f      	bne.n	8002578 <HAL_I2C_ER_IRQHandler+0xe6>
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	2b21      	cmp	r3, #33	@ 0x21
 800255c:	d008      	beq.n	8002570 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	2b29      	cmp	r3, #41	@ 0x29
 8002562:	d005      	beq.n	8002570 <HAL_I2C_ER_IRQHandler+0xde>
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	2b28      	cmp	r3, #40	@ 0x28
 8002568:	d106      	bne.n	8002578 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b21      	cmp	r3, #33	@ 0x21
 800256e:	d103      	bne.n	8002578 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f001 f875 	bl	8003660 <I2C_Slave_AF>
 8002576:	e016      	b.n	80025a6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002580:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800258a:	7efb      	ldrb	r3, [r7, #27]
 800258c:	2b10      	cmp	r3, #16
 800258e:	d002      	beq.n	8002596 <HAL_I2C_ER_IRQHandler+0x104>
 8002590:	7efb      	ldrb	r3, [r7, #27]
 8002592:	2b40      	cmp	r3, #64	@ 0x40
 8002594:	d107      	bne.n	80025a6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	0adb      	lsrs	r3, r3, #11
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00e      	beq.n	80025d0 <HAL_I2C_ER_IRQHandler+0x13e>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	f043 0308 	orr.w	r3, r3, #8
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80025ce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f001 f8b0 	bl	8003748 <I2C_ITError>
  }
}
 80025e8:	bf00      	nop
 80025ea:	3728      	adds	r7, #40	@ 0x28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
 8002644:	4613      	mov	r3, r2
 8002646:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026b0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d150      	bne.n	8002762 <I2C_MasterTransmit_TXE+0xc8>
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b21      	cmp	r3, #33	@ 0x21
 80026c4:	d14d      	bne.n	8002762 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d01d      	beq.n	8002708 <I2C_MasterTransmit_TXE+0x6e>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d01a      	beq.n	8002708 <I2C_MasterTransmit_TXE+0x6e>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026d8:	d016      	beq.n	8002708 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026e8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2211      	movs	r2, #17
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff75 	bl	80025f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002706:	e060      	b.n	80027ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002716:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002726:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b40      	cmp	r3, #64	@ 0x40
 8002740:	d107      	bne.n	8002752 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff ff8a 	bl	8002664 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002750:	e03b      	b.n	80027ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ff48 	bl	80025f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002760:	e033      	b.n	80027ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b21      	cmp	r3, #33	@ 0x21
 8002766:	d005      	beq.n	8002774 <I2C_MasterTransmit_TXE+0xda>
 8002768:	7bbb      	ldrb	r3, [r7, #14]
 800276a:	2b40      	cmp	r3, #64	@ 0x40
 800276c:	d12d      	bne.n	80027ca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b22      	cmp	r3, #34	@ 0x22
 8002772:	d12a      	bne.n	80027ca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d108      	bne.n	8002790 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800278c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800278e:	e01c      	b.n	80027ca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b40      	cmp	r3, #64	@ 0x40
 800279a:	d103      	bne.n	80027a4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f88e 	bl	80028be <I2C_MemoryTransmit_TXE_BTF>
}
 80027a2:	e012      	b.n	80027ca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80027c8:	e7ff      	b.n	80027ca <I2C_MasterTransmit_TXE+0x130>
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027de:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b21      	cmp	r3, #33	@ 0x21
 80027ea:	d164      	bne.n	80028b6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d012      	beq.n	800281c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	781a      	ldrb	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800281a:	e04c      	b.n	80028b6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b08      	cmp	r3, #8
 8002820:	d01d      	beq.n	800285e <I2C_MasterTransmit_BTF+0x8c>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b20      	cmp	r3, #32
 8002826:	d01a      	beq.n	800285e <I2C_MasterTransmit_BTF+0x8c>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800282e:	d016      	beq.n	800285e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800283e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2211      	movs	r2, #17
 8002844:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff feca 	bl	80025f0 <HAL_I2C_MasterTxCpltCallback>
}
 800285c:	e02b      	b.n	80028b6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800286c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b40      	cmp	r3, #64	@ 0x40
 8002896:	d107      	bne.n	80028a8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff fedf 	bl	8002664 <HAL_I2C_MemTxCpltCallback>
}
 80028a6:	e006      	b.n	80028b6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff fe9d 	bl	80025f0 <HAL_I2C_MasterTxCpltCallback>
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11d      	bne.n	8002912 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10b      	bne.n	80028f6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ee:	1c9a      	adds	r2, r3, #2
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80028f4:	e077      	b.n	80029e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	121b      	asrs	r3, r3, #8
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002910:	e069      	b.n	80029e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002916:	2b01      	cmp	r3, #1
 8002918:	d10b      	bne.n	8002932 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800291e:	b2da      	uxtb	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002930:	e059      	b.n	80029e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002936:	2b02      	cmp	r3, #2
 8002938:	d152      	bne.n	80029e0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b22      	cmp	r3, #34	@ 0x22
 800293e:	d10d      	bne.n	800295c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800294e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800295a:	e044      	b.n	80029e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d015      	beq.n	8002992 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b21      	cmp	r3, #33	@ 0x21
 800296a:	d112      	bne.n	8002992 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002990:	e029      	b.n	80029e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d124      	bne.n	80029e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b21      	cmp	r3, #33	@ 0x21
 80029a0:	d121      	bne.n	80029e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029b0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029c0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fe43 	bl	8002664 <HAL_I2C_MemTxCpltCallback>
}
 80029de:	e002      	b.n	80029e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7fe ffab 	bl	800193c <I2C_Flush_DR>
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b22      	cmp	r3, #34	@ 0x22
 8002a00:	f040 80b9 	bne.w	8002b76 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d921      	bls.n	8002a5c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	f040 8096 	bne.w	8002b76 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a58:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002a5a:	e08c      	b.n	8002b76 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d07f      	beq.n	8002b64 <I2C_MasterReceive_RXNE+0x176>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d002      	beq.n	8002a70 <I2C_MasterReceive_RXNE+0x82>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d179      	bne.n	8002b64 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f001 fb6b 	bl	800414c <I2C_WaitOnSTOPRequestThroughIT>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d14c      	bne.n	8002b16 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a8a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b40      	cmp	r3, #64	@ 0x40
 8002ad4:	d10a      	bne.n	8002aec <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7fe f8af 	bl	8000c48 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002aea:	e044      	b.n	8002b76 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d002      	beq.n	8002b00 <I2C_MasterReceive_RXNE+0x112>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d103      	bne.n	8002b08 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b06:	e002      	b.n	8002b0e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2212      	movs	r2, #18
 8002b0c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fd77 	bl	8002602 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b14:	e02f      	b.n	8002b76 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b24:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff fd8a 	bl	8002676 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b62:	e008      	b.n	8002b76 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b72:	605a      	str	r2, [r3, #4]
}
 8002b74:	e7ff      	b.n	8002b76 <I2C_MasterReceive_RXNE+0x188>
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d11b      	bne.n	8002bce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002bcc:	e0c4      	b.n	8002d58 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d129      	bne.n	8002c2c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d00a      	beq.n	8002c04 <I2C_MasterReceive_BTF+0x86>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d007      	beq.n	8002c04 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002c2a:	e095      	b.n	8002d58 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d17d      	bne.n	8002d32 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d002      	beq.n	8002c42 <I2C_MasterReceive_BTF+0xc4>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b10      	cmp	r3, #16
 8002c40:	d108      	bne.n	8002c54 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e016      	b.n	8002c82 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d002      	beq.n	8002c60 <I2C_MasterReceive_BTF+0xe2>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d108      	bne.n	8002c72 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	e007      	b.n	8002c82 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c80:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002cdc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b40      	cmp	r3, #64	@ 0x40
 8002cf0:	d10a      	bne.n	8002d08 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fd ffa1 	bl	8000c48 <HAL_I2C_MemRxCpltCallback>
}
 8002d06:	e027      	b.n	8002d58 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d002      	beq.n	8002d1c <I2C_MasterReceive_BTF+0x19e>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d103      	bne.n	8002d24 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d22:	e002      	b.n	8002d2a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2212      	movs	r2, #18
 8002d28:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff fc69 	bl	8002602 <HAL_I2C_MasterRxCpltCallback>
}
 8002d30:	e012      	b.n	8002d58 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b40      	cmp	r3, #64	@ 0x40
 8002d72:	d117      	bne.n	8002da4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d8c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002d8e:	e067      	b.n	8002e60 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	611a      	str	r2, [r3, #16]
}
 8002da2:	e05d      	b.n	8002e60 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dac:	d133      	bne.n	8002e16 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b21      	cmp	r3, #33	@ 0x21
 8002db8:	d109      	bne.n	8002dce <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dca:	611a      	str	r2, [r3, #16]
 8002dcc:	e008      	b.n	8002de0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <I2C_Master_SB+0x92>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d108      	bne.n	8002e04 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d032      	beq.n	8002e60 <I2C_Master_SB+0x100>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d02d      	beq.n	8002e60 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e12:	605a      	str	r2, [r3, #4]
}
 8002e14:	e024      	b.n	8002e60 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10e      	bne.n	8002e3c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	11db      	asrs	r3, r3, #7
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f003 0306 	and.w	r3, r3, #6
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f063 030f 	orn	r3, r3, #15
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	611a      	str	r2, [r3, #16]
}
 8002e3a:	e011      	b.n	8002e60 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d10d      	bne.n	8002e60 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	11db      	asrs	r3, r3, #7
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f003 0306 	and.w	r3, r3, #6
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f063 030e 	orn	r3, r3, #14
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	611a      	str	r2, [r3, #16]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d004      	beq.n	8002e90 <I2C_Master_ADD10+0x26>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d108      	bne.n	8002ea2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00c      	beq.n	8002eb2 <I2C_Master_ADD10+0x48>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eb0:	605a      	str	r2, [r3, #4]
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b091      	sub	sp, #68	@ 0x44
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002eca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed8:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b22      	cmp	r3, #34	@ 0x22
 8002ee4:	f040 8174 	bne.w	80031d0 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10f      	bne.n	8002f10 <I2C_Master_ADDR+0x54>
 8002ef0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002ef4:	2b40      	cmp	r3, #64	@ 0x40
 8002ef6:	d10b      	bne.n	8002f10 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef8:	2300      	movs	r3, #0
 8002efa:	633b      	str	r3, [r7, #48]	@ 0x30
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0e:	e16b      	b.n	80031e8 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11d      	bne.n	8002f54 <I2C_Master_ADDR+0x98>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002f20:	d118      	bne.n	8002f54 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f22:	2300      	movs	r3, #0
 8002f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f46:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f52:	e149      	b.n	80031e8 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d113      	bne.n	8002f86 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e120      	b.n	80031c8 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	f040 808a 	bne.w	80030a6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f98:	d137      	bne.n	800300a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb8:	d113      	bne.n	8002fe2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	e0f2      	b.n	80031c8 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	623b      	str	r3, [r7, #32]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	623b      	str	r3, [r7, #32]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	623b      	str	r3, [r7, #32]
 8002ff6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e0de      	b.n	80031c8 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800300a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300c:	2b08      	cmp	r3, #8
 800300e:	d02e      	beq.n	800306e <I2C_Master_ADDR+0x1b2>
 8003010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003012:	2b20      	cmp	r3, #32
 8003014:	d02b      	beq.n	800306e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003018:	2b12      	cmp	r3, #18
 800301a:	d102      	bne.n	8003022 <I2C_Master_ADDR+0x166>
 800301c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301e:	2b01      	cmp	r3, #1
 8003020:	d125      	bne.n	800306e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003024:	2b04      	cmp	r3, #4
 8003026:	d00e      	beq.n	8003046 <I2C_Master_ADDR+0x18a>
 8003028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302a:	2b02      	cmp	r3, #2
 800302c:	d00b      	beq.n	8003046 <I2C_Master_ADDR+0x18a>
 800302e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003030:	2b10      	cmp	r3, #16
 8003032:	d008      	beq.n	8003046 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e007      	b.n	8003056 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003054:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	e0ac      	b.n	80031c8 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800307c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	e090      	b.n	80031c8 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d158      	bne.n	8003162 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80030b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d021      	beq.n	80030fa <I2C_Master_ADDR+0x23e>
 80030b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d01e      	beq.n	80030fa <I2C_Master_ADDR+0x23e>
 80030bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030be:	2b10      	cmp	r3, #16
 80030c0:	d01b      	beq.n	80030fa <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030d0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e012      	b.n	8003120 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003108:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800312a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800312e:	d14b      	bne.n	80031c8 <I2C_Master_ADDR+0x30c>
 8003130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003132:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003136:	d00b      	beq.n	8003150 <I2C_Master_ADDR+0x294>
 8003138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313a:	2b01      	cmp	r3, #1
 800313c:	d008      	beq.n	8003150 <I2C_Master_ADDR+0x294>
 800313e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003140:	2b08      	cmp	r3, #8
 8003142:	d005      	beq.n	8003150 <I2C_Master_ADDR+0x294>
 8003144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003146:	2b10      	cmp	r3, #16
 8003148:	d002      	beq.n	8003150 <I2C_Master_ADDR+0x294>
 800314a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314c:	2b20      	cmp	r3, #32
 800314e:	d13b      	bne.n	80031c8 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	e032      	b.n	80031c8 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003170:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800317c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003180:	d117      	bne.n	80031b2 <I2C_Master_ADDR+0x2f6>
 8003182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003184:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003188:	d00b      	beq.n	80031a2 <I2C_Master_ADDR+0x2e6>
 800318a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318c:	2b01      	cmp	r3, #1
 800318e:	d008      	beq.n	80031a2 <I2C_Master_ADDR+0x2e6>
 8003190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003192:	2b08      	cmp	r3, #8
 8003194:	d005      	beq.n	80031a2 <I2C_Master_ADDR+0x2e6>
 8003196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003198:	2b10      	cmp	r3, #16
 800319a:	d002      	beq.n	80031a2 <I2C_Master_ADDR+0x2e6>
 800319c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d107      	bne.n	80031b2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80031ce:	e00b      	b.n	80031e8 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d0:	2300      	movs	r3, #0
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
}
 80031e6:	e7ff      	b.n	80031e8 <I2C_Master_ADDR+0x32c>
 80031e8:	bf00      	nop
 80031ea:	3744      	adds	r7, #68	@ 0x44
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003200:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d02b      	beq.n	8003264 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d114      	bne.n	8003264 <I2C_SlaveTransmit_TXE+0x72>
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b29      	cmp	r3, #41	@ 0x29
 800323e:	d111      	bne.n	8003264 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800324e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2221      	movs	r2, #33	@ 0x21
 8003254:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2228      	movs	r2, #40	@ 0x28
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff f9d8 	bl	8002614 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d011      	beq.n	80032a2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	781a      	ldrb	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d02c      	beq.n	8003320 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d114      	bne.n	8003320 <I2C_SlaveReceive_RXNE+0x74>
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80032fa:	d111      	bne.n	8003320 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800330a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2222      	movs	r2, #34	@ 0x22
 8003310:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2228      	movs	r2, #40	@ 0x28
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff f983 	bl	8002626 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d012      	beq.n	8003360 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003374:	2300      	movs	r3, #0
 8003376:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003384:	2b28      	cmp	r3, #40	@ 0x28
 8003386:	d127      	bne.n	80033d8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003396:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	09db      	lsrs	r3, r3, #7
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	81bb      	strh	r3, [r7, #12]
 80033ba:	e002      	b.n	80033c2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80033ca:	89ba      	ldrh	r2, [r7, #12]
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff f931 	bl	8002638 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80033d6:	e00e      	b.n	80033f6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d8:	2300      	movs	r3, #0
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800340e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800341e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003420:	2300      	movs	r3, #0
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800344c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800345c:	d172      	bne.n	8003544 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b22      	cmp	r3, #34	@ 0x22
 8003462:	d002      	beq.n	800346a <I2C_Slave_STOPF+0x6a>
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2b2a      	cmp	r3, #42	@ 0x2a
 8003468:	d135      	bne.n	80034d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	b29a      	uxth	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	f043 0204 	orr.w	r2, r3, #4
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800349c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd ff44 	bl	8001330 <HAL_DMA_GetState>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d049      	beq.n	8003542 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b2:	4a69      	ldr	r2, [pc, #420]	@ (8003658 <I2C_Slave_STOPF+0x258>)
 80034b4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd fec0 	bl	8001240 <HAL_DMA_Abort_IT>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d03d      	beq.n	8003542 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034d0:	4610      	mov	r0, r2
 80034d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034d4:	e035      	b.n	8003542 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	b29a      	uxth	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	f043 0204 	orr.w	r2, r3, #4
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003508:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd ff0e 	bl	8001330 <HAL_DMA_GetState>
 8003514:	4603      	mov	r3, r0
 8003516:	2b01      	cmp	r3, #1
 8003518:	d014      	beq.n	8003544 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800351e:	4a4e      	ldr	r2, [pc, #312]	@ (8003658 <I2C_Slave_STOPF+0x258>)
 8003520:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd fe8a 	bl	8001240 <HAL_DMA_Abort_IT>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800353c:	4610      	mov	r0, r2
 800353e:	4798      	blx	r3
 8003540:	e000      	b.n	8003544 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003542:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d03e      	beq.n	80035cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b04      	cmp	r3, #4
 800355a:	d112      	bne.n	8003582 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	2b40      	cmp	r3, #64	@ 0x40
 800358e:	d112      	bne.n	80035b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c4:	f043 0204 	orr.w	r2, r3, #4
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f8b7 	bl	8003748 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80035da:	e039      	b.n	8003650 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b2a      	cmp	r3, #42	@ 0x2a
 80035e0:	d109      	bne.n	80035f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2228      	movs	r2, #40	@ 0x28
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff f818 	bl	8002626 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b28      	cmp	r3, #40	@ 0x28
 8003600:	d111      	bne.n	8003626 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a15      	ldr	r2, [pc, #84]	@ (800365c <I2C_Slave_STOPF+0x25c>)
 8003606:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff f817 	bl	8002652 <HAL_I2C_ListenCpltCallback>
}
 8003624:	e014      	b.n	8003650 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	2b22      	cmp	r3, #34	@ 0x22
 800362c:	d002      	beq.n	8003634 <I2C_Slave_STOPF+0x234>
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b22      	cmp	r3, #34	@ 0x22
 8003632:	d10d      	bne.n	8003650 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fe ffeb 	bl	8002626 <HAL_I2C_SlaveRxCpltCallback>
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	08003ca9 	.word	0x08003ca9
 800365c:	ffff0000 	.word	0xffff0000

08003660 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800366e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d002      	beq.n	8003682 <I2C_Slave_AF+0x22>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b20      	cmp	r3, #32
 8003680:	d129      	bne.n	80036d6 <I2C_Slave_AF+0x76>
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	2b28      	cmp	r3, #40	@ 0x28
 8003686:	d126      	bne.n	80036d6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a2e      	ldr	r2, [pc, #184]	@ (8003744 <I2C_Slave_AF+0xe4>)
 800368c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800369c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036a6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036b6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fe ffbf 	bl	8002652 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80036d4:	e031      	b.n	800373a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	2b21      	cmp	r3, #33	@ 0x21
 80036da:	d129      	bne.n	8003730 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a19      	ldr	r2, [pc, #100]	@ (8003744 <I2C_Slave_AF+0xe4>)
 80036e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2221      	movs	r2, #33	@ 0x21
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003706:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003710:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003720:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe f90a 	bl	800193c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7fe ff73 	bl	8002614 <HAL_I2C_SlaveTxCpltCallback>
}
 800372e:	e004      	b.n	800373a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003738:	615a      	str	r2, [r3, #20]
}
 800373a:	bf00      	nop
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	ffff0000 	.word	0xffff0000

08003748 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003756:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800375e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003760:	7bbb      	ldrb	r3, [r7, #14]
 8003762:	2b10      	cmp	r3, #16
 8003764:	d002      	beq.n	800376c <I2C_ITError+0x24>
 8003766:	7bbb      	ldrb	r3, [r7, #14]
 8003768:	2b40      	cmp	r3, #64	@ 0x40
 800376a:	d10a      	bne.n	8003782 <I2C_ITError+0x3a>
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b22      	cmp	r3, #34	@ 0x22
 8003770:	d107      	bne.n	8003782 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003780:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003788:	2b28      	cmp	r3, #40	@ 0x28
 800378a:	d107      	bne.n	800379c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2228      	movs	r2, #40	@ 0x28
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800379a:	e015      	b.n	80037c8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037aa:	d00a      	beq.n	80037c2 <I2C_ITError+0x7a>
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b60      	cmp	r3, #96	@ 0x60
 80037b0:	d007      	beq.n	80037c2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037d6:	d162      	bne.n	800389e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037e6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d020      	beq.n	8003838 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fa:	4a6a      	ldr	r2, [pc, #424]	@ (80039a4 <I2C_ITError+0x25c>)
 80037fc:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd fd1c 	bl	8001240 <HAL_DMA_Abort_IT>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8089 	beq.w	8003922 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003832:	4610      	mov	r0, r2
 8003834:	4798      	blx	r3
 8003836:	e074      	b.n	8003922 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	4a59      	ldr	r2, [pc, #356]	@ (80039a4 <I2C_ITError+0x25c>)
 800383e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd fcfb 	bl	8001240 <HAL_DMA_Abort_IT>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d068      	beq.n	8003922 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385a:	2b40      	cmp	r3, #64	@ 0x40
 800385c:	d10b      	bne.n	8003876 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003898:	4610      	mov	r0, r2
 800389a:	4798      	blx	r3
 800389c:	e041      	b.n	8003922 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b60      	cmp	r3, #96	@ 0x60
 80038a8:	d125      	bne.n	80038f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c2:	2b40      	cmp	r3, #64	@ 0x40
 80038c4:	d10b      	bne.n	80038de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fe feca 	bl	8002688 <HAL_I2C_AbortCpltCallback>
 80038f4:	e015      	b.n	8003922 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003900:	2b40      	cmp	r3, #64	@ 0x40
 8003902:	d10b      	bne.n	800391c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7fe feaa 	bl	8002676 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10e      	bne.n	8003950 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003942:	2b00      	cmp	r3, #0
 8003944:	d104      	bne.n	8003950 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800395e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003966:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b04      	cmp	r3, #4
 8003972:	d113      	bne.n	800399c <I2C_ITError+0x254>
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b28      	cmp	r3, #40	@ 0x28
 8003978:	d110      	bne.n	800399c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a0a      	ldr	r2, [pc, #40]	@ (80039a8 <I2C_ITError+0x260>)
 800397e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fe fe5b 	bl	8002652 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	08003ca9 	.word	0x08003ca9
 80039a8:	ffff0000 	.word	0xffff0000

080039ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	4608      	mov	r0, r1
 80039b6:	4611      	mov	r1, r2
 80039b8:	461a      	mov	r2, r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	817b      	strh	r3, [r7, #10]
 80039be:	460b      	mov	r3, r1
 80039c0:	813b      	strh	r3, [r7, #8]
 80039c2:	4613      	mov	r3, r2
 80039c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	2200      	movs	r2, #0
 80039de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fa08 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00d      	beq.n	8003a0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039fc:	d103      	bne.n	8003a06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e05f      	b.n	8003aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a0a:	897b      	ldrh	r3, [r7, #10]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	6a3a      	ldr	r2, [r7, #32]
 8003a1e:	492d      	ldr	r1, [pc, #180]	@ (8003ad4 <I2C_RequestMemoryWrite+0x128>)
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fa63 	bl	8003eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e04c      	b.n	8003aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a48:	6a39      	ldr	r1, [r7, #32]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 faee 	bl	800402c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00d      	beq.n	8003a72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d107      	bne.n	8003a6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e02b      	b.n	8003aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d105      	bne.n	8003a84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a78:	893b      	ldrh	r3, [r7, #8]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	611a      	str	r2, [r3, #16]
 8003a82:	e021      	b.n	8003ac8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a84:	893b      	ldrh	r3, [r7, #8]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a94:	6a39      	ldr	r1, [r7, #32]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fac8 	bl	800402c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00d      	beq.n	8003abe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d107      	bne.n	8003aba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e005      	b.n	8003aca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003abe:	893b      	ldrh	r3, [r7, #8]
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	00010002 	.word	0x00010002

08003ad8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	817b      	strh	r3, [r7, #10]
 8003aea:	460b      	mov	r3, r1
 8003aec:	813b      	strh	r3, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f96a 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00d      	beq.n	8003b46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b38:	d103      	bne.n	8003b42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e0aa      	b.n	8003c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b46:	897b      	ldrh	r3, [r7, #10]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	6a3a      	ldr	r2, [r7, #32]
 8003b5a:	4952      	ldr	r1, [pc, #328]	@ (8003ca4 <I2C_RequestMemoryRead+0x1cc>)
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f9c5 	bl	8003eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e097      	b.n	8003c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b84:	6a39      	ldr	r1, [r7, #32]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fa50 	bl	800402c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00d      	beq.n	8003bae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d107      	bne.n	8003baa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e076      	b.n	8003c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d105      	bne.n	8003bc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb4:	893b      	ldrh	r3, [r7, #8]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	611a      	str	r2, [r3, #16]
 8003bbe:	e021      	b.n	8003c04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bc0:	893b      	ldrh	r3, [r7, #8]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd0:	6a39      	ldr	r1, [r7, #32]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fa2a 	bl	800402c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d107      	bne.n	8003bf6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e050      	b.n	8003c9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bfa:	893b      	ldrh	r3, [r7, #8]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c06:	6a39      	ldr	r1, [r7, #32]
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 fa0f 	bl	800402c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00d      	beq.n	8003c30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d107      	bne.n	8003c2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e035      	b.n	8003c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f8d3 	bl	8003df8 <I2C_WaitOnFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00d      	beq.n	8003c74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c66:	d103      	bne.n	8003c70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e013      	b.n	8003c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c74:	897b      	ldrh	r3, [r7, #10]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	6a3a      	ldr	r2, [r7, #32]
 8003c88:	4906      	ldr	r1, [pc, #24]	@ (8003ca4 <I2C_RequestMemoryRead+0x1cc>)
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f92e 	bl	8003eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	00010002 	.word	0x00010002

08003ca8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8003df0 <I2C_DMAAbort+0x148>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	08db      	lsrs	r3, r3, #3
 8003cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8003df4 <I2C_DMAAbort+0x14c>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	0a1a      	lsrs	r2, r3, #8
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	00da      	lsls	r2, r3, #3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce6:	f043 0220 	orr.w	r2, r3, #32
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003cee:	e00a      	b.n	8003d06 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d04:	d0ea      	beq.n	8003cdc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d12:	2200      	movs	r2, #0
 8003d14:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d22:	2200      	movs	r2, #0
 8003d24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d34:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d48:	2200      	movs	r2, #0
 8003d4a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	2200      	movs	r2, #0
 8003d5a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b60      	cmp	r3, #96	@ 0x60
 8003d76:	d10e      	bne.n	8003d96 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d8e:	6978      	ldr	r0, [r7, #20]
 8003d90:	f7fe fc7a 	bl	8002688 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d94:	e027      	b.n	8003de6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d9c:	2b28      	cmp	r3, #40	@ 0x28
 8003d9e:	d117      	bne.n	8003dd0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dbe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2228      	movs	r2, #40	@ 0x28
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003dce:	e007      	b.n	8003de0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003de0:	6978      	ldr	r0, [r7, #20]
 8003de2:	f7fe fc48 	bl	8002676 <HAL_I2C_ErrorCallback>
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20000000 	.word	0x20000000
 8003df4:	14f8b589 	.word	0x14f8b589

08003df8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e08:	e048      	b.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d044      	beq.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e12:	f7fd f92b 	bl	800106c <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d139      	bne.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	0c1b      	lsrs	r3, r3, #16
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d10d      	bne.n	8003e4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	43da      	mvns	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	e00c      	b.n	8003e68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	43da      	mvns	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d116      	bne.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	f043 0220 	orr.w	r2, r3, #32
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e023      	b.n	8003ee4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	0c1b      	lsrs	r3, r3, #16
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d10d      	bne.n	8003ec2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	43da      	mvns	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	e00c      	b.n	8003edc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	43da      	mvns	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bf0c      	ite	eq
 8003ed4:	2301      	moveq	r3, #1
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d093      	beq.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003efa:	e071      	b.n	8003fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f0a:	d123      	bne.n	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f40:	f043 0204 	orr.w	r2, r3, #4
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e067      	b.n	8004024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5a:	d041      	beq.n	8003fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5c:	f7fd f886 	bl	800106c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d302      	bcc.n	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d136      	bne.n	8003fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d10c      	bne.n	8003f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	43da      	mvns	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4013      	ands	r3, r2
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bf14      	ite	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	2300      	moveq	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	e00b      	b.n	8003fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	43da      	mvns	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf14      	ite	ne
 8003fa8:	2301      	movne	r3, #1
 8003faa:	2300      	moveq	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	f043 0220 	orr.w	r2, r3, #32
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e021      	b.n	8004024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	0c1b      	lsrs	r3, r3, #16
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d10c      	bne.n	8004004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	43da      	mvns	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e00b      	b.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	43da      	mvns	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	bf14      	ite	ne
 8004016:	2301      	movne	r3, #1
 8004018:	2300      	moveq	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	f47f af6d 	bne.w	8003efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004038:	e034      	b.n	80040a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f915 	bl	800426a <I2C_IsAcknowledgeFailed>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e034      	b.n	80040b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d028      	beq.n	80040a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004052:	f7fd f80b 	bl	800106c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	429a      	cmp	r2, r3
 8004060:	d302      	bcc.n	8004068 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d11d      	bne.n	80040a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004072:	2b80      	cmp	r3, #128	@ 0x80
 8004074:	d016      	beq.n	80040a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e007      	b.n	80040b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ae:	2b80      	cmp	r3, #128	@ 0x80
 80040b0:	d1c3      	bne.n	800403a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040c8:	e034      	b.n	8004134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f8cd 	bl	800426a <I2C_IsAcknowledgeFailed>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e034      	b.n	8004144 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d028      	beq.n	8004134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7fc ffc3 	bl	800106c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d11d      	bne.n	8004134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b04      	cmp	r3, #4
 8004104:	d016      	beq.n	8004134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	f043 0220 	orr.w	r2, r3, #32
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e007      	b.n	8004144 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b04      	cmp	r3, #4
 8004140:	d1c3      	bne.n	80040ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004158:	4b13      	ldr	r3, [pc, #76]	@ (80041a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	08db      	lsrs	r3, r3, #3
 800415e:	4a13      	ldr	r2, [pc, #76]	@ (80041ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004160:	fba2 2303 	umull	r2, r3, r2, r3
 8004164:	0a1a      	lsrs	r2, r3, #8
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3b01      	subs	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d107      	bne.n	800418a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e008      	b.n	800419c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004198:	d0e9      	beq.n	800416e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000000 	.word	0x20000000
 80041ac:	14f8b589 	.word	0x14f8b589

080041b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041bc:	e049      	b.n	8004252 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d119      	bne.n	8004200 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0210 	mvn.w	r2, #16
 80041d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e030      	b.n	8004262 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004200:	f7fc ff34 	bl	800106c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	429a      	cmp	r2, r3
 800420e:	d302      	bcc.n	8004216 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d11d      	bne.n	8004252 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004220:	2b40      	cmp	r3, #64	@ 0x40
 8004222:	d016      	beq.n	8004252 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	f043 0220 	orr.w	r2, r3, #32
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e007      	b.n	8004262 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425c:	2b40      	cmp	r3, #64	@ 0x40
 800425e:	d1ae      	bne.n	80041be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800427c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004280:	d11b      	bne.n	80042ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800428a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	f043 0204 	orr.w	r2, r3, #4
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr

080042c6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80042d6:	d103      	bne.n	80042e0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80042de:	e007      	b.n	80042f0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80042e8:	d102      	bne.n	80042f0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2208      	movs	r2, #8
 80042ee:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e272      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8087 	beq.w	800442a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800431c:	4b92      	ldr	r3, [pc, #584]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b04      	cmp	r3, #4
 8004326:	d00c      	beq.n	8004342 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004328:	4b8f      	ldr	r3, [pc, #572]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b08      	cmp	r3, #8
 8004332:	d112      	bne.n	800435a <HAL_RCC_OscConfig+0x5e>
 8004334:	4b8c      	ldr	r3, [pc, #560]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004340:	d10b      	bne.n	800435a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004342:	4b89      	ldr	r3, [pc, #548]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d06c      	beq.n	8004428 <HAL_RCC_OscConfig+0x12c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d168      	bne.n	8004428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e24c      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004362:	d106      	bne.n	8004372 <HAL_RCC_OscConfig+0x76>
 8004364:	4b80      	ldr	r3, [pc, #512]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7f      	ldr	r2, [pc, #508]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 800436a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e02e      	b.n	80043d0 <HAL_RCC_OscConfig+0xd4>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0x98>
 800437a:	4b7b      	ldr	r3, [pc, #492]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a7a      	ldr	r2, [pc, #488]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b78      	ldr	r3, [pc, #480]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a77      	ldr	r2, [pc, #476]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 800438c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e01d      	b.n	80043d0 <HAL_RCC_OscConfig+0xd4>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0xbc>
 800439e:	4b72      	ldr	r3, [pc, #456]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a71      	ldr	r2, [pc, #452]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b6f      	ldr	r3, [pc, #444]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6e      	ldr	r2, [pc, #440]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e00b      	b.n	80043d0 <HAL_RCC_OscConfig+0xd4>
 80043b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a6a      	ldr	r2, [pc, #424]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b68      	ldr	r3, [pc, #416]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a67      	ldr	r2, [pc, #412]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fc fe48 	bl	800106c <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e0:	f7fc fe44 	bl	800106c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	@ 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e200      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	4b5d      	ldr	r3, [pc, #372]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0xe4>
 80043fe:	e014      	b.n	800442a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fc fe34 	bl	800106c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004408:	f7fc fe30 	bl	800106c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	@ 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e1ec      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	4b53      	ldr	r3, [pc, #332]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x10c>
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d063      	beq.n	80044fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004436:	4b4c      	ldr	r3, [pc, #304]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004442:	4b49      	ldr	r3, [pc, #292]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b08      	cmp	r3, #8
 800444c:	d11c      	bne.n	8004488 <HAL_RCC_OscConfig+0x18c>
 800444e:	4b46      	ldr	r3, [pc, #280]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d116      	bne.n	8004488 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	4b43      	ldr	r3, [pc, #268]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCC_OscConfig+0x176>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e1c0      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	4b3d      	ldr	r3, [pc, #244]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4939      	ldr	r1, [pc, #228]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	e03a      	b.n	80044fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004490:	4b36      	ldr	r3, [pc, #216]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004496:	f7fc fde9 	bl	800106c <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449e:	f7fc fde5 	bl	800106c <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1a1      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4927      	ldr	r1, [pc, #156]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d2:	4b26      	ldr	r3, [pc, #152]	@ (800456c <HAL_RCC_OscConfig+0x270>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fc fdc8 	bl	800106c <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e0:	f7fc fdc4 	bl	800106c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e180      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d03a      	beq.n	8004580 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d019      	beq.n	8004546 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004512:	4b17      	ldr	r3, [pc, #92]	@ (8004570 <HAL_RCC_OscConfig+0x274>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004518:	f7fc fda8 	bl	800106c <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004520:	f7fc fda4 	bl	800106c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e160      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	4b0d      	ldr	r3, [pc, #52]	@ (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800453e:	2001      	movs	r0, #1
 8004540:	f000 faea 	bl	8004b18 <RCC_Delay>
 8004544:	e01c      	b.n	8004580 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004546:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <HAL_RCC_OscConfig+0x274>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454c:	f7fc fd8e 	bl	800106c <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004552:	e00f      	b.n	8004574 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004554:	f7fc fd8a 	bl	800106c <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d908      	bls.n	8004574 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e146      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
 8004566:	bf00      	nop
 8004568:	40021000 	.word	0x40021000
 800456c:	42420000 	.word	0x42420000
 8004570:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	4b92      	ldr	r3, [pc, #584]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e9      	bne.n	8004554 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80a6 	beq.w	80046da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004592:	4b8b      	ldr	r3, [pc, #556]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10d      	bne.n	80045ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459e:	4b88      	ldr	r3, [pc, #544]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	4a87      	ldr	r2, [pc, #540]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a8:	61d3      	str	r3, [r2, #28]
 80045aa:	4b85      	ldr	r3, [pc, #532]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ba:	4b82      	ldr	r3, [pc, #520]	@ (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d118      	bne.n	80045f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c6:	4b7f      	ldr	r3, [pc, #508]	@ (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a7e      	ldr	r2, [pc, #504]	@ (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d2:	f7fc fd4b 	bl	800106c <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045da:	f7fc fd47 	bl	800106c <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b64      	cmp	r3, #100	@ 0x64
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e103      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	4b75      	ldr	r3, [pc, #468]	@ (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d106      	bne.n	800460e <HAL_RCC_OscConfig+0x312>
 8004600:	4b6f      	ldr	r3, [pc, #444]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	4a6e      	ldr	r2, [pc, #440]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6213      	str	r3, [r2, #32]
 800460c:	e02d      	b.n	800466a <HAL_RCC_OscConfig+0x36e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x334>
 8004616:	4b6a      	ldr	r3, [pc, #424]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4a69      	ldr	r2, [pc, #420]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	6213      	str	r3, [r2, #32]
 8004622:	4b67      	ldr	r3, [pc, #412]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	4a66      	ldr	r2, [pc, #408]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	f023 0304 	bic.w	r3, r3, #4
 800462c:	6213      	str	r3, [r2, #32]
 800462e:	e01c      	b.n	800466a <HAL_RCC_OscConfig+0x36e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b05      	cmp	r3, #5
 8004636:	d10c      	bne.n	8004652 <HAL_RCC_OscConfig+0x356>
 8004638:	4b61      	ldr	r3, [pc, #388]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4a60      	ldr	r2, [pc, #384]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800463e:	f043 0304 	orr.w	r3, r3, #4
 8004642:	6213      	str	r3, [r2, #32]
 8004644:	4b5e      	ldr	r3, [pc, #376]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4a5d      	ldr	r2, [pc, #372]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6213      	str	r3, [r2, #32]
 8004650:	e00b      	b.n	800466a <HAL_RCC_OscConfig+0x36e>
 8004652:	4b5b      	ldr	r3, [pc, #364]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	4a5a      	ldr	r2, [pc, #360]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	6213      	str	r3, [r2, #32]
 800465e:	4b58      	ldr	r3, [pc, #352]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	4a57      	ldr	r2, [pc, #348]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	f023 0304 	bic.w	r3, r3, #4
 8004668:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d015      	beq.n	800469e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004672:	f7fc fcfb 	bl	800106c <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004678:	e00a      	b.n	8004690 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467a:	f7fc fcf7 	bl	800106c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004688:	4293      	cmp	r3, r2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e0b1      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004690:	4b4b      	ldr	r3, [pc, #300]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ee      	beq.n	800467a <HAL_RCC_OscConfig+0x37e>
 800469c:	e014      	b.n	80046c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469e:	f7fc fce5 	bl	800106c <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fc fce1 	bl	800106c <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e09b      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046bc:	4b40      	ldr	r3, [pc, #256]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1ee      	bne.n	80046a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d105      	bne.n	80046da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ce:	4b3c      	ldr	r3, [pc, #240]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	4a3b      	ldr	r2, [pc, #236]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 8087 	beq.w	80047f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e4:	4b36      	ldr	r3, [pc, #216]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d061      	beq.n	80047b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d146      	bne.n	8004786 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f8:	4b33      	ldr	r3, [pc, #204]	@ (80047c8 <HAL_RCC_OscConfig+0x4cc>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fe:	f7fc fcb5 	bl	800106c <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004706:	f7fc fcb1 	bl	800106c <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e06d      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004718:	4b29      	ldr	r3, [pc, #164]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f0      	bne.n	8004706 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800472c:	d108      	bne.n	8004740 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800472e:	4b24      	ldr	r3, [pc, #144]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	4921      	ldr	r1, [pc, #132]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004740:	4b1f      	ldr	r3, [pc, #124]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a19      	ldr	r1, [r3, #32]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	430b      	orrs	r3, r1
 8004752:	491b      	ldr	r1, [pc, #108]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004754:	4313      	orrs	r3, r2
 8004756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004758:	4b1b      	ldr	r3, [pc, #108]	@ (80047c8 <HAL_RCC_OscConfig+0x4cc>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475e:	f7fc fc85 	bl	800106c <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004766:	f7fc fc81 	bl	800106c <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e03d      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004778:	4b11      	ldr	r3, [pc, #68]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x46a>
 8004784:	e035      	b.n	80047f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004786:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <HAL_RCC_OscConfig+0x4cc>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fc fc6e 	bl	800106c <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004794:	f7fc fc6a 	bl	800106c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e026      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a6:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x498>
 80047b2:	e01e      	b.n	80047f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d107      	bne.n	80047cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e019      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40007000 	.word	0x40007000
 80047c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047cc:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <HAL_RCC_OscConfig+0x500>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d106      	bne.n	80047ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d001      	beq.n	80047f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40021000 	.word	0x40021000

08004800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0d0      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004814:	4b6a      	ldr	r3, [pc, #424]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d910      	bls.n	8004844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004822:	4b67      	ldr	r3, [pc, #412]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 0207 	bic.w	r2, r3, #7
 800482a:	4965      	ldr	r1, [pc, #404]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004832:	4b63      	ldr	r3, [pc, #396]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0b8      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d020      	beq.n	8004892 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800485c:	4b59      	ldr	r3, [pc, #356]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a58      	ldr	r2, [pc, #352]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004862:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004866:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004874:	4b53      	ldr	r3, [pc, #332]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	4a52      	ldr	r2, [pc, #328]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800487e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004880:	4b50      	ldr	r3, [pc, #320]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	494d      	ldr	r1, [pc, #308]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d040      	beq.n	8004920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d107      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a6:	4b47      	ldr	r3, [pc, #284]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d115      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e07f      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d107      	bne.n	80048ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048be:	4b41      	ldr	r3, [pc, #260]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e073      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ce:	4b3d      	ldr	r3, [pc, #244]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e06b      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048de:	4b39      	ldr	r3, [pc, #228]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f023 0203 	bic.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4936      	ldr	r1, [pc, #216]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f0:	f7fc fbbc 	bl	800106c <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	e00a      	b.n	800490e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f8:	f7fc fbb8 	bl	800106c <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e053      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	4b2d      	ldr	r3, [pc, #180]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 020c 	and.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	429a      	cmp	r2, r3
 800491e:	d1eb      	bne.n	80048f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004920:	4b27      	ldr	r3, [pc, #156]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d210      	bcs.n	8004950 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b24      	ldr	r3, [pc, #144]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 0207 	bic.w	r2, r3, #7
 8004936:	4922      	ldr	r1, [pc, #136]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b20      	ldr	r3, [pc, #128]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e032      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800495c:	4b19      	ldr	r3, [pc, #100]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4916      	ldr	r1, [pc, #88]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800497a:	4b12      	ldr	r3, [pc, #72]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	490e      	ldr	r1, [pc, #56]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800498e:	f000 f821 	bl	80049d4 <HAL_RCC_GetSysClockFreq>
 8004992:	4602      	mov	r2, r0
 8004994:	4b0b      	ldr	r3, [pc, #44]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	091b      	lsrs	r3, r3, #4
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	490a      	ldr	r1, [pc, #40]	@ (80049c8 <HAL_RCC_ClockConfig+0x1c8>)
 80049a0:	5ccb      	ldrb	r3, [r1, r3]
 80049a2:	fa22 f303 	lsr.w	r3, r2, r3
 80049a6:	4a09      	ldr	r2, [pc, #36]	@ (80049cc <HAL_RCC_ClockConfig+0x1cc>)
 80049a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049aa:	4b09      	ldr	r3, [pc, #36]	@ (80049d0 <HAL_RCC_ClockConfig+0x1d0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fc fa0c 	bl	8000dcc <HAL_InitTick>

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40022000 	.word	0x40022000
 80049c4:	40021000 	.word	0x40021000
 80049c8:	0800ad3c 	.word	0x0800ad3c
 80049cc:	20000000 	.word	0x20000000
 80049d0:	20000004 	.word	0x20000004

080049d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x94>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d002      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x30>
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d003      	beq.n	8004a0a <HAL_RCC_GetSysClockFreq+0x36>
 8004a02:	e027      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a04:	4b19      	ldr	r3, [pc, #100]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a06:	613b      	str	r3, [r7, #16]
      break;
 8004a08:	e027      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	0c9b      	lsrs	r3, r3, #18
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	4a17      	ldr	r2, [pc, #92]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a14:	5cd3      	ldrb	r3, [r2, r3]
 8004a16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d010      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a22:	4b11      	ldr	r3, [pc, #68]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	0c5b      	lsrs	r3, r3, #17
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	4a11      	ldr	r2, [pc, #68]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a2e:	5cd3      	ldrb	r3, [r2, r3]
 8004a30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a0d      	ldr	r2, [pc, #52]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a36:	fb03 f202 	mul.w	r2, r3, r2
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	e004      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	613b      	str	r3, [r7, #16]
      break;
 8004a52:	e002      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a54:	4b05      	ldr	r3, [pc, #20]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a56:	613b      	str	r3, [r7, #16]
      break;
 8004a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a5a:	693b      	ldr	r3, [r7, #16]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	007a1200 	.word	0x007a1200
 8004a70:	0800ad54 	.word	0x0800ad54
 8004a74:	0800ad64 	.word	0x0800ad64
 8004a78:	003d0900 	.word	0x003d0900

08004a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a80:	4b02      	ldr	r3, [pc, #8]	@ (8004a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a82:	681b      	ldr	r3, [r3, #0]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr
 8004a8c:	20000000 	.word	0x20000000

08004a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a94:	f7ff fff2 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4903      	ldr	r1, [pc, #12]	@ (8004ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	0800ad4c 	.word	0x0800ad4c

08004ab8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	220f      	movs	r2, #15
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ac8:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <HAL_RCC_GetClockConfig+0x58>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 0203 	and.w	r2, r3, #3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b10 <HAL_RCC_GetClockConfig+0x58>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_RCC_GetClockConfig+0x58>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004aec:	4b08      	ldr	r3, [pc, #32]	@ (8004b10 <HAL_RCC_GetClockConfig+0x58>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	08db      	lsrs	r3, r3, #3
 8004af2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004afa:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <HAL_RCC_GetClockConfig+0x5c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0207 	and.w	r2, r3, #7
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40022000 	.word	0x40022000

08004b18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b20:	4b0a      	ldr	r3, [pc, #40]	@ (8004b4c <RCC_Delay+0x34>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a0a      	ldr	r2, [pc, #40]	@ (8004b50 <RCC_Delay+0x38>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	0a5b      	lsrs	r3, r3, #9
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
 8004b32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b34:	bf00      	nop
  }
  while (Delay --);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1e5a      	subs	r2, r3, #1
 8004b3a:	60fa      	str	r2, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f9      	bne.n	8004b34 <RCC_Delay+0x1c>
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr
 8004b4c:	20000000 	.word	0x20000000
 8004b50:	10624dd3 	.word	0x10624dd3

08004b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e041      	b.n	8004bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f839 	bl	8004bf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f000 f99c 	bl	8004ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d001      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e03a      	b.n	8004c92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a18      	ldr	r2, [pc, #96]	@ (8004c9c <HAL_TIM_Base_Start_IT+0x98>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00e      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x58>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c46:	d009      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x58>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ca0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x58>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a13      	ldr	r2, [pc, #76]	@ (8004ca4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d111      	bne.n	8004c80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b06      	cmp	r3, #6
 8004c6c:	d010      	beq.n	8004c90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0201 	orr.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7e:	e007      	b.n	8004c90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	40012c00 	.word	0x40012c00
 8004ca0:	40000400 	.word	0x40000400
 8004ca4:	40000800 	.word	0x40000800

08004ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d020      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0202 	mvn.w	r2, #2
 8004cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f8d1 	bl	8004e9a <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f8c4 	bl	8004e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f8d3 	bl	8004eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d020      	beq.n	8004d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01b      	beq.n	8004d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0204 	mvn.w	r2, #4
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f8ab 	bl	8004e9a <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f89e 	bl	8004e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f8ad 	bl	8004eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d020      	beq.n	8004da4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01b      	beq.n	8004da4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0208 	mvn.w	r2, #8
 8004d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2204      	movs	r2, #4
 8004d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f885 	bl	8004e9a <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f878 	bl	8004e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f887 	bl	8004eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d020      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01b      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0210 	mvn.w	r2, #16
 8004dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f85f 	bl	8004e9a <HAL_TIM_IC_CaptureCallback>
 8004ddc:	e005      	b.n	8004dea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f852 	bl	8004e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f861 	bl	8004eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00c      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0201 	mvn.w	r2, #1
 8004e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fb feee 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00c      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f8c3 	bl	8004fbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f831 	bl	8004ebe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00c      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0220 	mvn.w	r2, #32
 8004e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f896 	bl	8004fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr

08004e9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr

08004eac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr

08004ebe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr

08004ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa0 <TIM_Base_SetConfig+0xd0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <TIM_Base_SetConfig+0x30>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eee:	d007      	beq.n	8004f00 <TIM_Base_SetConfig+0x30>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa4 <TIM_Base_SetConfig+0xd4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_Base_SetConfig+0x30>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a2b      	ldr	r2, [pc, #172]	@ (8004fa8 <TIM_Base_SetConfig+0xd8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d108      	bne.n	8004f12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a22      	ldr	r2, [pc, #136]	@ (8004fa0 <TIM_Base_SetConfig+0xd0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00b      	beq.n	8004f32 <TIM_Base_SetConfig+0x62>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f20:	d007      	beq.n	8004f32 <TIM_Base_SetConfig+0x62>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1f      	ldr	r2, [pc, #124]	@ (8004fa4 <TIM_Base_SetConfig+0xd4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d003      	beq.n	8004f32 <TIM_Base_SetConfig+0x62>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa8 <TIM_Base_SetConfig+0xd8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d108      	bne.n	8004f44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8004fa0 <TIM_Base_SetConfig+0xd0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d103      	bne.n	8004f78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f023 0201 	bic.w	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	611a      	str	r2, [r3, #16]
  }
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800

08004fac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr

08004fbe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <LPS25HB_Initialise>:
/**
 * @brief Initialize the LPS25HB sensor.
 * @param i2cHandle The I2C handle to use.
 * @return 0 on success, 1 on error.
 */
uint8_t LPS25HB_Initialise(I2C_HandleTypeDef * i2cHandle) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af04      	add	r7, sp, #16
 8004fd6:	6078      	str	r0, [r7, #4]

  // Check the ID of the sensor.
  HAL_I2C_Mem_Read(i2cHandle, LPS25HB_ADDRESS, LPS25HB_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, & chipID, 1, 100);
 8004fd8:	2364      	movs	r3, #100	@ 0x64
 8004fda:	9302      	str	r3, [sp, #8]
 8004fdc:	2301      	movs	r3, #1
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	4b13      	ldr	r3, [pc, #76]	@ (8005030 <LPS25HB_Initialise+0x60>)
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	220f      	movs	r2, #15
 8004fe8:	21b8      	movs	r1, #184	@ 0xb8
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fc fdb4 	bl	8001b58 <HAL_I2C_Mem_Read>

  if (chipID != LPS25HB_DEVICE_ID) {
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8005030 <LPS25HB_Initialise+0x60>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2bbd      	cmp	r3, #189	@ 0xbd
 8004ff6:	d001      	beq.n	8004ffc <LPS25HB_Initialise+0x2c>
    return 1; // If the ID does not match, initialization is aborted.
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e014      	b.n	8005026 <LPS25HB_Initialise+0x56>
  } 

	// Power on the sensor.
  datatowrite = (0x01 << 7); //power on PD
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8005034 <LPS25HB_Initialise+0x64>)
 8004ffe:	2280      	movs	r2, #128	@ 0x80
 8005000:	701a      	strb	r2, [r3, #0]
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 8005002:	2364      	movs	r3, #100	@ 0x64
 8005004:	9302      	str	r3, [sp, #8]
 8005006:	2301      	movs	r3, #1
 8005008:	9301      	str	r3, [sp, #4]
 800500a:	4b0a      	ldr	r3, [pc, #40]	@ (8005034 <LPS25HB_Initialise+0x64>)
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	2301      	movs	r3, #1
 8005010:	2220      	movs	r2, #32
 8005012:	21b8      	movs	r1, #184	@ 0xb8
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7fc fca5 	bl	8001964 <HAL_I2C_Mem_Write>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <LPS25HB_Initialise+0x54>
    return 1;
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <LPS25HB_Initialise+0x56>
  }
  return 0;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000158 	.word	0x20000158
 8005034:	20000159 	.word	0x20000159

08005038 <LPS25HB_Measure_Temperature_IT>:
/**
 * @brief Measure the temperature using the LPS25HB sensor.
 * @param i2cHandle The I2C handle to use.
 * @return 0 on success, 1 on error.
 */
uint8_t LPS25HB_Measure_Temperature_IT(I2C_HandleTypeDef * i2cHandle) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af04      	add	r7, sp, #16
 800503e:	6078      	str	r0, [r7, #4]
	// Set one shot mode.
  datatowrite = (0x01 << 0); // One shot mode
 8005040:	4b11      	ldr	r3, [pc, #68]	@ (8005088 <LPS25HB_Measure_Temperature_IT+0x50>)
 8005042:	2201      	movs	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 8005046:	2364      	movs	r3, #100	@ 0x64
 8005048:	9302      	str	r3, [sp, #8]
 800504a:	2301      	movs	r3, #1
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	4b0e      	ldr	r3, [pc, #56]	@ (8005088 <LPS25HB_Measure_Temperature_IT+0x50>)
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	2301      	movs	r3, #1
 8005054:	2221      	movs	r2, #33	@ 0x21
 8005056:	21b8      	movs	r1, #184	@ 0xb8
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fc fc83 	bl	8001964 <HAL_I2C_Mem_Write>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <LPS25HB_Measure_Temperature_IT+0x30>
    return 1;
 8005064:	2301      	movs	r3, #1
 8005066:	e00a      	b.n	800507e <LPS25HB_Measure_Temperature_IT+0x46>
  }
	
  // Start the temperature measurement.
  HAL_I2C_Mem_Read_IT(i2cHandle, LPS25HB_ADDRESS, LPS25HB_TEMP_OUT_L | 0x80, I2C_MEMADD_SIZE_8BIT, Temp_RAW, 2);
 8005068:	2302      	movs	r3, #2
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	4b07      	ldr	r3, [pc, #28]	@ (800508c <LPS25HB_Measure_Temperature_IT+0x54>)
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	2301      	movs	r3, #1
 8005072:	22ab      	movs	r2, #171	@ 0xab
 8005074:	21b8      	movs	r1, #184	@ 0xb8
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fc ffe2 	bl	8002040 <HAL_I2C_Mem_Read_IT>

	return 0;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000159 	.word	0x20000159
 800508c:	2000015c 	.word	0x2000015c

08005090 <LPS25HB_Measure_Pressure_IT>:

uint8_t	LPS25HB_Measure_Pressure_IT(I2C_HandleTypeDef *i2cHandle) {
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af04      	add	r7, sp, #16
 8005096:	6078      	str	r0, [r7, #4]
	// Set one shot mode.
  datatowrite = (0x01 << 0); // One shot mode
 8005098:	4b11      	ldr	r3, [pc, #68]	@ (80050e0 <LPS25HB_Measure_Pressure_IT+0x50>)
 800509a:	2201      	movs	r2, #1
 800509c:	701a      	strb	r2, [r3, #0]
  if (HAL_I2C_Mem_Write(i2cHandle, LPS25HB_ADDRESS, LPS25HB_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, & datatowrite, 1, 100) != HAL_OK) {
 800509e:	2364      	movs	r3, #100	@ 0x64
 80050a0:	9302      	str	r3, [sp, #8]
 80050a2:	2301      	movs	r3, #1
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <LPS25HB_Measure_Pressure_IT+0x50>)
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	2301      	movs	r3, #1
 80050ac:	2221      	movs	r2, #33	@ 0x21
 80050ae:	21b8      	movs	r1, #184	@ 0xb8
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7fc fc57 	bl	8001964 <HAL_I2C_Mem_Write>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <LPS25HB_Measure_Pressure_IT+0x30>
    return 1;
 80050bc:	2301      	movs	r3, #1
 80050be:	e00a      	b.n	80050d6 <LPS25HB_Measure_Pressure_IT+0x46>
  }

  // Start the pressure measurement.
  HAL_I2C_Mem_Read_IT(i2cHandle, LPS25HB_ADDRESS, LPS25HB_PRESS_OUT_XL | 0x80, I2C_MEMADD_SIZE_8BIT, Press_RAW, 3);
 80050c0:	2303      	movs	r3, #3
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	4b07      	ldr	r3, [pc, #28]	@ (80050e4 <LPS25HB_Measure_Pressure_IT+0x54>)
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	2301      	movs	r3, #1
 80050ca:	22a8      	movs	r2, #168	@ 0xa8
 80050cc:	21b8      	movs	r1, #184	@ 0xb8
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fc ffb6 	bl	8002040 <HAL_I2C_Mem_Read_IT>

	return 0;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000159 	.word	0x20000159
 80050e4:	20000160 	.word	0x20000160

080050e8 <__NVIC_SetPriority>:
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	6039      	str	r1, [r7, #0]
 80050f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	db0a      	blt.n	8005112 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	490c      	ldr	r1, [pc, #48]	@ (8005134 <__NVIC_SetPriority+0x4c>)
 8005102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005106:	0112      	lsls	r2, r2, #4
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	440b      	add	r3, r1
 800510c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005110:	e00a      	b.n	8005128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	4908      	ldr	r1, [pc, #32]	@ (8005138 <__NVIC_SetPriority+0x50>)
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	3b04      	subs	r3, #4
 8005120:	0112      	lsls	r2, r2, #4
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	440b      	add	r3, r1
 8005126:	761a      	strb	r2, [r3, #24]
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	e000e100 	.word	0xe000e100
 8005138:	e000ed00 	.word	0xe000ed00

0800513c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005140:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <SysTick_Handler+0x1c>)
 8005142:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005144:	f002 fa9a 	bl	800767c <xTaskGetSchedulerState>
 8005148:	4603      	mov	r3, r0
 800514a:	2b01      	cmp	r3, #1
 800514c:	d001      	beq.n	8005152 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800514e:	f003 f86b 	bl	8008228 <xPortSysTickHandler>
  }
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	e000e010 	.word	0xe000e010

0800515c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005160:	2100      	movs	r1, #0
 8005162:	f06f 0004 	mvn.w	r0, #4
 8005166:	f7ff ffbf 	bl	80050e8 <__NVIC_SetPriority>
#endif
}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005176:	f3ef 8305 	mrs	r3, IPSR
 800517a:	603b      	str	r3, [r7, #0]
  return(result);
 800517c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005182:	f06f 0305 	mvn.w	r3, #5
 8005186:	607b      	str	r3, [r7, #4]
 8005188:	e00c      	b.n	80051a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800518a:	4b09      	ldr	r3, [pc, #36]	@ (80051b0 <osKernelInitialize+0x40>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d105      	bne.n	800519e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005192:	4b07      	ldr	r3, [pc, #28]	@ (80051b0 <osKernelInitialize+0x40>)
 8005194:	2201      	movs	r2, #1
 8005196:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005198:	2300      	movs	r3, #0
 800519a:	607b      	str	r3, [r7, #4]
 800519c:	e002      	b.n	80051a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295
 80051a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051a4:	687b      	ldr	r3, [r7, #4]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr
 80051b0:	20000164 	.word	0x20000164

080051b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ba:	f3ef 8305 	mrs	r3, IPSR
 80051be:	603b      	str	r3, [r7, #0]
  return(result);
 80051c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80051c6:	f06f 0305 	mvn.w	r3, #5
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	e010      	b.n	80051f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80051ce:	4b0b      	ldr	r3, [pc, #44]	@ (80051fc <osKernelStart+0x48>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d109      	bne.n	80051ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80051d6:	f7ff ffc1 	bl	800515c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80051da:	4b08      	ldr	r3, [pc, #32]	@ (80051fc <osKernelStart+0x48>)
 80051dc:	2202      	movs	r2, #2
 80051de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80051e0:	f001 fc16 	bl	8006a10 <vTaskStartScheduler>
      stat = osOK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	607b      	str	r3, [r7, #4]
 80051e8:	e002      	b.n	80051f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80051ea:	f04f 33ff 	mov.w	r3, #4294967295
 80051ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051f0:	687b      	ldr	r3, [r7, #4]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000164 	.word	0x20000164

08005200 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b08e      	sub	sp, #56	@ 0x38
 8005204:	af04      	add	r7, sp, #16
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800520c:	2300      	movs	r3, #0
 800520e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005210:	f3ef 8305 	mrs	r3, IPSR
 8005214:	617b      	str	r3, [r7, #20]
  return(result);
 8005216:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005218:	2b00      	cmp	r3, #0
 800521a:	f040 8081 	bne.w	8005320 <osThreadNew+0x120>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d07d      	beq.n	8005320 <osThreadNew+0x120>
    stack = configMINIMAL_STACK_SIZE;
 8005224:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005228:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800522a:	2318      	movs	r3, #24
 800522c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005232:	f04f 33ff 	mov.w	r3, #4294967295
 8005236:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d045      	beq.n	80052ca <osThreadNew+0xca>
      if (attr->name != NULL) {
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <osThreadNew+0x4c>
        name = attr->name;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <osThreadNew+0x72>
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b38      	cmp	r3, #56	@ 0x38
 8005264:	d805      	bhi.n	8005272 <osThreadNew+0x72>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <osThreadNew+0x76>
        return (NULL);
 8005272:	2300      	movs	r3, #0
 8005274:	e055      	b.n	8005322 <osThreadNew+0x122>
      }

      if (attr->stack_size > 0U) {
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <osThreadNew+0x86>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	089b      	lsrs	r3, r3, #2
 8005284:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00e      	beq.n	80052ac <osThreadNew+0xac>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	2b5b      	cmp	r3, #91	@ 0x5b
 8005294:	d90a      	bls.n	80052ac <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800529a:	2b00      	cmp	r3, #0
 800529c:	d006      	beq.n	80052ac <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <osThreadNew+0xac>
        mem = 1;
 80052a6:	2301      	movs	r3, #1
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	e010      	b.n	80052ce <osThreadNew+0xce>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10c      	bne.n	80052ce <osThreadNew+0xce>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d108      	bne.n	80052ce <osThreadNew+0xce>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <osThreadNew+0xce>
          mem = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	e001      	b.n	80052ce <osThreadNew+0xce>
        }
      }
    }
    else {
      mem = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d110      	bne.n	80052f6 <osThreadNew+0xf6>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052dc:	9202      	str	r2, [sp, #8]
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	6a3a      	ldr	r2, [r7, #32]
 80052e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f001 f912 	bl	8006514 <xTaskCreateStatic>
 80052f0:	4603      	mov	r3, r0
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	e014      	b.n	8005320 <osThreadNew+0x120>
      #endif
    }
    else {
      if (mem == 0) {
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d111      	bne.n	8005320 <osThreadNew+0x120>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	f107 0310 	add.w	r3, r7, #16
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f001 f96c 	bl	80065ee <xTaskCreate>
 8005316:	4603      	mov	r3, r0
 8005318:	2b01      	cmp	r3, #1
 800531a:	d001      	beq.n	8005320 <osThreadNew+0x120>
            hTask = NULL;
 800531c:	2300      	movs	r3, #0
 800531e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005320:	693b      	ldr	r3, [r7, #16]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3728      	adds	r7, #40	@ 0x28
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005332:	f3ef 8305 	mrs	r3, IPSR
 8005336:	60bb      	str	r3, [r7, #8]
  return(result);
 8005338:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <osDelay+0x1c>
    stat = osErrorISR;
 800533e:	f06f 0305 	mvn.w	r3, #5
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e007      	b.n	8005356 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f001 fabd 	bl	80068d0 <vTaskDelay>
    }
  }

  return (stat);
 8005356:	68fb      	ldr	r3, [r7, #12]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	@ 0x28
 8005364:	af02      	add	r7, sp, #8
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800536c:	2300      	movs	r3, #0
 800536e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005370:	f3ef 8305 	mrs	r3, IPSR
 8005374:	613b      	str	r3, [r7, #16]
  return(result);
 8005376:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005378:	2b00      	cmp	r3, #0
 800537a:	d15f      	bne.n	800543c <osMessageQueueNew+0xdc>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d05c      	beq.n	800543c <osMessageQueueNew+0xdc>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d059      	beq.n	800543c <osMessageQueueNew+0xdc>
    mem = -1;
 8005388:	f04f 33ff 	mov.w	r3, #4294967295
 800538c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d029      	beq.n	80053e8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d012      	beq.n	80053c2 <osMessageQueueNew+0x62>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	2b4f      	cmp	r3, #79	@ 0x4f
 80053a2:	d90e      	bls.n	80053c2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68b9      	ldr	r1, [r7, #8]
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d302      	bcc.n	80053c2 <osMessageQueueNew+0x62>
        mem = 1;
 80053bc:	2301      	movs	r3, #1
 80053be:	61bb      	str	r3, [r7, #24]
 80053c0:	e014      	b.n	80053ec <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d110      	bne.n	80053ec <osMessageQueueNew+0x8c>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10c      	bne.n	80053ec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d108      	bne.n	80053ec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d104      	bne.n	80053ec <osMessageQueueNew+0x8c>
          mem = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	e001      	b.n	80053ec <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d10b      	bne.n	800540a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2100      	movs	r1, #0
 80053fc:	9100      	str	r1, [sp, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fa4d 	bl	80058a0 <xQueueGenericCreateStatic>
 8005406:	61f8      	str	r0, [r7, #28]
 8005408:	e008      	b.n	800541c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d105      	bne.n	800541c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005410:	2200      	movs	r2, #0
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 faad 	bl	8005974 <xQueueGenericCreate>
 800541a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00c      	beq.n	800543c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e001      	b.n	8005434 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005430:	2300      	movs	r3, #0
 8005432:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005434:	6979      	ldr	r1, [r7, #20]
 8005436:	69f8      	ldr	r0, [r7, #28]
 8005438:	f000 ff84 	bl	8006344 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800543c:	69fb      	ldr	r3, [r7, #28]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	4613      	mov	r3, r2
 8005456:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800545c:	2300      	movs	r3, #0
 800545e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005460:	f3ef 8305 	mrs	r3, IPSR
 8005464:	617b      	str	r3, [r7, #20]
  return(result);
 8005466:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005468:	2b00      	cmp	r3, #0
 800546a:	d02d      	beq.n	80054c8 <osMessageQueuePut+0x80>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <osMessageQueuePut+0x36>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <osMessageQueuePut+0x36>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800547e:	f06f 0303 	mvn.w	r3, #3
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	e03d      	b.n	8005502 <osMessageQueuePut+0xba>
    }
    else {
      yield = pdFALSE;
 8005486:	2300      	movs	r3, #0
 8005488:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800548a:	f107 0210 	add.w	r2, r7, #16
 800548e:	2300      	movs	r3, #0
 8005490:	68b9      	ldr	r1, [r7, #8]
 8005492:	69b8      	ldr	r0, [r7, #24]
 8005494:	f000 fbfc 	bl	8005c90 <xQueueGenericSendFromISR>
 8005498:	4603      	mov	r3, r0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d003      	beq.n	80054a6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800549e:	f06f 0302 	mvn.w	r3, #2
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	e02d      	b.n	8005502 <osMessageQueuePut+0xba>
      } else {
        portYIELD_FROM_ISR (yield);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <osMessageQueuePut+0x7a>
 80054ac:	f004 fb7c 	bl	8009ba8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80054b0:	4b16      	ldr	r3, [pc, #88]	@ (800550c <osMessageQueuePut+0xc4>)
 80054b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	e01f      	b.n	8005502 <osMessageQueuePut+0xba>
 80054c2:	f004 fb55 	bl	8009b70 <SEGGER_SYSVIEW_RecordExitISR>
 80054c6:	e01c      	b.n	8005502 <osMessageQueuePut+0xba>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <osMessageQueuePut+0x8c>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d103      	bne.n	80054dc <osMessageQueuePut+0x94>
      stat = osErrorParameter;
 80054d4:	f06f 0303 	mvn.w	r3, #3
 80054d8:	61fb      	str	r3, [r7, #28]
 80054da:	e012      	b.n	8005502 <osMessageQueuePut+0xba>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80054dc:	2300      	movs	r3, #0
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	69b8      	ldr	r0, [r7, #24]
 80054e4:	f000 fac6 	bl	8005a74 <xQueueGenericSend>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d009      	beq.n	8005502 <osMessageQueuePut+0xba>
        if (timeout != 0U) {
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <osMessageQueuePut+0xb4>
          stat = osErrorTimeout;
 80054f4:	f06f 0301 	mvn.w	r3, #1
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e002      	b.n	8005502 <osMessageQueuePut+0xba>
        } else {
          stat = osErrorResource;
 80054fc:	f06f 0302 	mvn.w	r3, #2
 8005500:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005502:	69fb      	ldr	r3, [r7, #28]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	e000ed04 	.word	0xe000ed04

08005510 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005526:	f3ef 8305 	mrs	r3, IPSR
 800552a:	617b      	str	r3, [r7, #20]
  return(result);
 800552c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800552e:	2b00      	cmp	r3, #0
 8005530:	d02d      	beq.n	800558e <osMessageQueueGet+0x7e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <osMessageQueueGet+0x34>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <osMessageQueueGet+0x34>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005544:	f06f 0303 	mvn.w	r3, #3
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	e03c      	b.n	80055c6 <osMessageQueueGet+0xb6>
    }
    else {
      yield = pdFALSE;
 800554c:	2300      	movs	r3, #0
 800554e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005550:	f107 0310 	add.w	r3, r7, #16
 8005554:	461a      	mov	r2, r3
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	69b8      	ldr	r0, [r7, #24]
 800555a:	f000 fd43 	bl	8005fe4 <xQueueReceiveFromISR>
 800555e:	4603      	mov	r3, r0
 8005560:	2b01      	cmp	r3, #1
 8005562:	d003      	beq.n	800556c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005564:	f06f 0302 	mvn.w	r3, #2
 8005568:	61fb      	str	r3, [r7, #28]
 800556a:	e02c      	b.n	80055c6 <osMessageQueueGet+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <osMessageQueueGet+0x78>
 8005572:	f004 fb19 	bl	8009ba8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8005576:	4b16      	ldr	r3, [pc, #88]	@ (80055d0 <osMessageQueueGet+0xc0>)
 8005578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	e01e      	b.n	80055c6 <osMessageQueueGet+0xb6>
 8005588:	f004 faf2 	bl	8009b70 <SEGGER_SYSVIEW_RecordExitISR>
 800558c:	e01b      	b.n	80055c6 <osMessageQueueGet+0xb6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <osMessageQueueGet+0x8a>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <osMessageQueueGet+0x92>
      stat = osErrorParameter;
 800559a:	f06f 0303 	mvn.w	r3, #3
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	e011      	b.n	80055c6 <osMessageQueueGet+0xb6>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	69b8      	ldr	r0, [r7, #24]
 80055a8:	f000 fc2e 	bl	8005e08 <xQueueReceive>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d009      	beq.n	80055c6 <osMessageQueueGet+0xb6>
        if (timeout != 0U) {
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <osMessageQueueGet+0xb0>
          stat = osErrorTimeout;
 80055b8:	f06f 0301 	mvn.w	r3, #1
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	e002      	b.n	80055c6 <osMessageQueueGet+0xb6>
        } else {
          stat = osErrorResource;
 80055c0:	f06f 0302 	mvn.w	r3, #2
 80055c4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80055c6:	69fb      	ldr	r3, [r7, #28]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3720      	adds	r7, #32
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4a07      	ldr	r2, [pc, #28]	@ (8005600 <vApplicationGetIdleTaskMemory+0x2c>)
 80055e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4a06      	ldr	r2, [pc, #24]	@ (8005604 <vApplicationGetIdleTaskMemory+0x30>)
 80055ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055f2:	601a      	str	r2, [r3, #0]
}
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bc80      	pop	{r7}
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	20000168 	.word	0x20000168
 8005604:	200001c4 	.word	0x200001c4

08005608 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4a07      	ldr	r2, [pc, #28]	@ (8005634 <vApplicationGetTimerTaskMemory+0x2c>)
 8005618:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4a06      	ldr	r2, [pc, #24]	@ (8005638 <vApplicationGetTimerTaskMemory+0x30>)
 800561e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005626:	601a      	str	r2, [r3, #0]
}
 8005628:	bf00      	nop
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	200005c4 	.word	0x200005c4
 8005638:	20000620 	.word	0x20000620

0800563c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f103 0208 	add.w	r2, r3, #8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f04f 32ff 	mov.w	r2, #4294967295
 8005654:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f103 0208 	add.w	r2, r3, #8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f103 0208 	add.w	r2, r3, #8
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8005670:	f240 1019 	movw	r0, #281	@ 0x119
 8005674:	f004 fab4 	bl	8009be0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8005678:	bf00      	nop
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800568e:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8005692:	f004 faa5 	bl	8009be0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b4:	d103      	bne.n	80056be <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	e00c      	b.n	80056d8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3308      	adds	r3, #8
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e002      	b.n	80056cc <vListInsert+0x2e>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d2f6      	bcs.n	80056c6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8005704:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8005708:	f004 fa6a 	bl	8009be0 <SEGGER_SYSVIEW_RecordEndCall>
}
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6892      	ldr	r2, [r2, #8]
 800572a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6852      	ldr	r2, [r2, #4]
 8005734:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d103      	bne.n	8005748 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	1e5a      	subs	r2, r3, #1
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4619      	mov	r1, r3
 800575e:	f240 101d 	movw	r0, #285	@ 0x11d
 8005762:	f004 fa79 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800577e:	2301      	movs	r3, #1
 8005780:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10b      	bne.n	80057a4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d05d      	beq.n	8005866 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d059      	beq.n	8005866 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ba:	2100      	movs	r1, #0
 80057bc:	fba3 2302 	umull	r2, r3, r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d000      	beq.n	80057c6 <xQueueGenericReset+0x52>
 80057c4:	2101      	movs	r1, #1
 80057c6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d14c      	bne.n	8005866 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80057cc:	f002 fcac 	bl	8008128 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d8:	6939      	ldr	r1, [r7, #16]
 80057da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057dc:	fb01 f303 	mul.w	r3, r1, r3
 80057e0:	441a      	add	r2, r3
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2200      	movs	r2, #0
 80057ea:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fc:	3b01      	subs	r3, #1
 80057fe:	6939      	ldr	r1, [r7, #16]
 8005800:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	441a      	add	r2, r3
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	22ff      	movs	r2, #255	@ 0xff
 8005810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	22ff      	movs	r2, #255	@ 0xff
 8005818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d114      	bne.n	800584c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01a      	beq.n	8005860 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	3310      	adds	r3, #16
 800582e:	4618      	mov	r0, r3
 8005830:	f001 fcaa 	bl	8007188 <xTaskRemoveFromEventList>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d012      	beq.n	8005860 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800583a:	4b18      	ldr	r3, [pc, #96]	@ (800589c <xQueueGenericReset+0x128>)
 800583c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	e009      	b.n	8005860 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	3310      	adds	r3, #16
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff fef3 	bl	800563c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	3324      	adds	r3, #36	@ 0x24
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff feee 	bl	800563c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005860:	f002 fc92 	bl	8008188 <vPortExitCritical>
 8005864:	e001      	b.n	800586a <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10b      	bne.n	8005888 <xQueueGenericReset+0x114>
    __asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	60bb      	str	r3, [r7, #8]
}
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	4619      	mov	r1, r3
 800588c:	2096      	movs	r0, #150	@ 0x96
 800588e:	f004 f9e3 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8005892:	697b      	ldr	r3, [r7, #20]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	e000ed04 	.word	0xe000ed04

080058a0 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08c      	sub	sp, #48	@ 0x30
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10b      	bne.n	80058d0 <xQueueGenericCreateStatic+0x30>
    __asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	623b      	str	r3, [r7, #32]
}
 80058ca:	bf00      	nop
 80058cc:	bf00      	nop
 80058ce:	e7fd      	b.n	80058cc <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d031      	beq.n	800593a <xQueueGenericCreateStatic+0x9a>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d02e      	beq.n	800593a <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d028      	beq.n	800593a <xQueueGenericCreateStatic+0x9a>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d102      	bne.n	80058f4 <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d122      	bne.n	800593a <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80058f4:	2350      	movs	r3, #80	@ 0x50
 80058f6:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2b50      	cmp	r3, #80	@ 0x50
 80058fc:	d00b      	beq.n	8005916 <xQueueGenericCreateStatic+0x76>
    __asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	61fb      	str	r3, [r7, #28]
}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	e7fd      	b.n	8005912 <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 8005916:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005924:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 f87a 	bl	8005a2c <prvInitialiseNewQueue>
 8005938:	e00e      	b.n	8005958 <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10b      	bne.n	8005958 <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	61bb      	str	r3, [r7, #24]
}
 8005952:	bf00      	nop
 8005954:	bf00      	nop
 8005956:	e7fd      	b.n	8005954 <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 8005958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595a:	4618      	mov	r0, r3
 800595c:	f004 fb16 	bl	8009f8c <SEGGER_SYSVIEW_ShrinkId>
 8005960:	4603      	mov	r3, r0
 8005962:	4619      	mov	r1, r3
 8005964:	2097      	movs	r0, #151	@ 0x97
 8005966:	f004 f977 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800596c:	4618      	mov	r0, r3
 800596e:	3728      	adds	r7, #40	@ 0x28
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005974:	b580      	push	{r7, lr}
 8005976:	b08a      	sub	sp, #40	@ 0x28
 8005978:	af02      	add	r7, sp, #8
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d032      	beq.n	80059f2 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800598c:	2100      	movs	r1, #0
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	fba3 2302 	umull	r2, r3, r3, r2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d000      	beq.n	800599c <xQueueGenericCreate+0x28>
 800599a:	2101      	movs	r1, #1
 800599c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d127      	bne.n	80059f2 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80059aa:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80059ae:	d820      	bhi.n	80059f2 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	fb02 f303 	mul.w	r3, r2, r3
 80059b8:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	3350      	adds	r3, #80	@ 0x50
 80059be:	4618      	mov	r0, r3
 80059c0:	f002 fcbe 	bl	8008340 <pvPortMalloc>
 80059c4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d021      	beq.n	8005a10 <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	3350      	adds	r3, #80	@ 0x50
 80059d4:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059de:	79fa      	ldrb	r2, [r7, #7]
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	4613      	mov	r3, r2
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 f81e 	bl	8005a2c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80059f0:	e00e      	b.n	8005a10 <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10b      	bne.n	8005a10 <xQueueGenericCreate+0x9c>
    __asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	613b      	str	r3, [r7, #16]
}
 8005a0a:	bf00      	nop
 8005a0c:	bf00      	nop
 8005a0e:	e7fd      	b.n	8005a0c <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f004 faba 	bl	8009f8c <SEGGER_SYSVIEW_ShrinkId>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	2098      	movs	r0, #152	@ 0x98
 8005a1e:	f004 f91b 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8005a22:	69fb      	ldr	r3, [r7, #28]
    }
 8005a24:	4618      	mov	r0, r3
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d103      	bne.n	8005a48 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e002      	b.n	8005a4e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	69b8      	ldr	r0, [r7, #24]
 8005a5e:	f7ff fe89 	bl	8005774 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	78fa      	ldrb	r2, [r7, #3]
 8005a66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005a6a:	bf00      	nop
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08e      	sub	sp, #56	@ 0x38
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a82:	2300      	movs	r3, #0
 8005a84:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <xQueueGenericSend+0x34>
    __asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d103      	bne.n	8005ab6 <xQueueGenericSend+0x42>
 8005aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <xQueueGenericSend+0x46>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <xQueueGenericSend+0x48>
 8005aba:	2300      	movs	r3, #0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10b      	bne.n	8005ad8 <xQueueGenericSend+0x64>
    __asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ad2:	bf00      	nop
 8005ad4:	bf00      	nop
 8005ad6:	e7fd      	b.n	8005ad4 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d103      	bne.n	8005ae6 <xQueueGenericSend+0x72>
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <xQueueGenericSend+0x76>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <xQueueGenericSend+0x78>
 8005aea:	2300      	movs	r3, #0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10b      	bne.n	8005b08 <xQueueGenericSend+0x94>
    __asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	623b      	str	r3, [r7, #32]
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	e7fd      	b.n	8005b04 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b08:	f001 fdb8 	bl	800767c <xTaskGetSchedulerState>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d102      	bne.n	8005b18 <xQueueGenericSend+0xa4>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <xQueueGenericSend+0xa8>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <xQueueGenericSend+0xaa>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10b      	bne.n	8005b3a <xQueueGenericSend+0xc6>
    __asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	61fb      	str	r3, [r7, #28]
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	e7fd      	b.n	8005b36 <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005b3a:	f002 faf5 	bl	8008128 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d302      	bcc.n	8005b50 <xQueueGenericSend+0xdc>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d12d      	bne.n	8005bac <xQueueGenericSend+0x138>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b56:	f000 fae4 	bl	8006122 <prvCopyDataToQueue>
 8005b5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d010      	beq.n	8005b86 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b66:	3324      	adds	r3, #36	@ 0x24
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 fb0d 	bl	8007188 <xTaskRemoveFromEventList>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d013      	beq.n	8005b9c <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005b74:	4b45      	ldr	r3, [pc, #276]	@ (8005c8c <xQueueGenericSend+0x218>)
 8005b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	e00a      	b.n	8005b9c <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8005b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d007      	beq.n	8005b9c <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8005b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c8c <xQueueGenericSend+0x218>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005b9c:	f002 faf4 	bl	8008188 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	20a1      	movs	r0, #161	@ 0xa1
 8005ba4:	f004 f858 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e06b      	b.n	8005c84 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d107      	bne.n	8005bc2 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005bb2:	f002 fae9 	bl	8008188 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	20a1      	movs	r0, #161	@ 0xa1
 8005bba:	f004 f84d 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_FULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e060      	b.n	8005c84 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d106      	bne.n	8005bd6 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005bc8:	f107 0314 	add.w	r3, r7, #20
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 fbbd 	bl	800734c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005bd6:	f002 fad7 	bl	8008188 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005bda:	f000 ff77 	bl	8006acc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005bde:	f002 faa3 	bl	8008128 <vPortEnterCritical>
 8005be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005be8:	b25b      	sxtb	r3, r3
 8005bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bee:	d103      	bne.n	8005bf8 <xQueueGenericSend+0x184>
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bfe:	b25b      	sxtb	r3, r3
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c04:	d103      	bne.n	8005c0e <xQueueGenericSend+0x19a>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c0e:	f002 fabb 	bl	8008188 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c12:	1d3a      	adds	r2, r7, #4
 8005c14:	f107 0314 	add.w	r3, r7, #20
 8005c18:	4611      	mov	r1, r2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 fbae 	bl	800737c <xTaskCheckForTimeOut>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d124      	bne.n	8005c70 <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c28:	f000 fb73 	bl	8006312 <prvIsQueueFull>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d018      	beq.n	8005c64 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c34:	3310      	adds	r3, #16
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	4611      	mov	r1, r2
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f001 fa32 	bl	80070a4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c42:	f000 fafe 	bl	8006242 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005c46:	f000 ff4f 	bl	8006ae8 <xTaskResumeAll>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f47f af74 	bne.w	8005b3a <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8005c52:	4b0e      	ldr	r3, [pc, #56]	@ (8005c8c <xQueueGenericSend+0x218>)
 8005c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	e76a      	b.n	8005b3a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005c64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c66:	f000 faec 	bl	8006242 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005c6a:	f000 ff3d 	bl	8006ae8 <xTaskResumeAll>
 8005c6e:	e764      	b.n	8005b3a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c72:	f000 fae6 	bl	8006242 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005c76:	f000 ff37 	bl	8006ae8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	20a1      	movs	r0, #161	@ 0xa1
 8005c7e:	f003 ffeb 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

            return errQUEUE_FULL;
 8005c82:	2300      	movs	r3, #0
        }
    }
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3738      	adds	r7, #56	@ 0x38
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	e000ed04 	.word	0xe000ed04

08005c90 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b092      	sub	sp, #72	@ 0x48
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 8005ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10b      	bne.n	8005cc0 <xQueueGenericSendFromISR+0x30>
    __asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 8005cba:	bf00      	nop
 8005cbc:	bf00      	nop
 8005cbe:	e7fd      	b.n	8005cbc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d103      	bne.n	8005cce <xQueueGenericSendFromISR+0x3e>
 8005cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <xQueueGenericSendFromISR+0x42>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e000      	b.n	8005cd4 <xQueueGenericSendFromISR+0x44>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10b      	bne.n	8005cf0 <xQueueGenericSendFromISR+0x60>
    __asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	e7fd      	b.n	8005cec <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d103      	bne.n	8005cfe <xQueueGenericSendFromISR+0x6e>
 8005cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <xQueueGenericSendFromISR+0x72>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e000      	b.n	8005d04 <xQueueGenericSendFromISR+0x74>
 8005d02:	2300      	movs	r3, #0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10b      	bne.n	8005d20 <xQueueGenericSendFromISR+0x90>
    __asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d1a:	bf00      	nop
 8005d1c:	bf00      	nop
 8005d1e:	e7fd      	b.n	8005d1c <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d20:	f002 face 	bl	80082c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8005d24:	f3ef 8211 	mrs	r2, BASEPRI
 8005d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	623a      	str	r2, [r7, #32]
 8005d3a:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d302      	bcc.n	8005d52 <xQueueGenericSendFromISR+0xc2>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d147      	bne.n	8005de2 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d58:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d60:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005d68:	f000 f9db 	bl	8006122 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005d6c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d112      	bne.n	8005d9c <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d02e      	beq.n	8005ddc <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d80:	3324      	adds	r3, #36	@ 0x24
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 fa00 	bl	8007188 <xTaskRemoveFromEventList>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d026      	beq.n	8005ddc <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d023      	beq.n	8005ddc <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	e01f      	b.n	8005ddc <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8005d9c:	f000 ffde 	bl	8006d5c <uxTaskGetNumberOfTasks>
 8005da0:	6338      	str	r0, [r7, #48]	@ 0x30
 8005da2:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d917      	bls.n	8005ddc <xQueueGenericSendFromISR+0x14c>
 8005dac:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005db0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005db2:	d10b      	bne.n	8005dcc <xQueueGenericSendFromISR+0x13c>
    __asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	61bb      	str	r3, [r7, #24]
}
 8005dc6:	bf00      	nop
 8005dc8:	bf00      	nop
 8005dca:	e7fd      	b.n	8005dc8 <xQueueGenericSendFromISR+0x138>
 8005dcc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	b25a      	sxtb	r2, r3
 8005dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8005de0:	e001      	b.n	8005de6 <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8005df0:	bf00      	nop
        }
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );
 8005df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005df4:	4619      	mov	r1, r3
 8005df6:	20a2      	movs	r0, #162	@ 0xa2
 8005df8:	f003 ff2e 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8005dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3748      	adds	r7, #72	@ 0x48
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	@ 0x30
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10b      	bne.n	8005e3a <xQueueReceive+0x32>
    __asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	623b      	str	r3, [r7, #32]
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	e7fd      	b.n	8005e36 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d103      	bne.n	8005e48 <xQueueReceive+0x40>
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <xQueueReceive+0x44>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <xQueueReceive+0x46>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <xQueueReceive+0x62>
    __asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	61fb      	str	r3, [r7, #28]
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	e7fd      	b.n	8005e66 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e6a:	f001 fc07 	bl	800767c <xTaskGetSchedulerState>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d102      	bne.n	8005e7a <xQueueReceive+0x72>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <xQueueReceive+0x76>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <xQueueReceive+0x78>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10b      	bne.n	8005e9c <xQueueReceive+0x94>
    __asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	61bb      	str	r3, [r7, #24]
}
 8005e96:	bf00      	nop
 8005e98:	bf00      	nop
 8005e9a:	e7fd      	b.n	8005e98 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005e9c:	f002 f944 	bl	8008128 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d023      	beq.n	8005ef4 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eac:	68b9      	ldr	r1, [r7, #8]
 8005eae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eb0:	f000 f9a1 	bl	80061f6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	1e5a      	subs	r2, r3, #1
 8005eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eba:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00f      	beq.n	8005ee4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec6:	3310      	adds	r3, #16
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f001 f95d 	bl	8007188 <xTaskRemoveFromEventList>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d007      	beq.n	8005ee4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005ed4:	4b42      	ldr	r3, [pc, #264]	@ (8005fe0 <xQueueReceive+0x1d8>)
 8005ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005ee4:	f002 f950 	bl	8008188 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8005ee8:	2101      	movs	r1, #1
 8005eea:	20a4      	movs	r0, #164	@ 0xa4
 8005eec:	f003 feb4 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e071      	b.n	8005fd8 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d107      	bne.n	8005f0a <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005efa:	f002 f945 	bl	8008188 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8005efe:	2100      	movs	r1, #0
 8005f00:	20a4      	movs	r0, #164	@ 0xa4
 8005f02:	f003 fea9 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e066      	b.n	8005fd8 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005f10:	f107 0310 	add.w	r3, r7, #16
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 fa19 	bl	800734c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005f1e:	f002 f933 	bl	8008188 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005f22:	f000 fdd3 	bl	8006acc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005f26:	f002 f8ff 	bl	8008128 <vPortEnterCritical>
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f30:	b25b      	sxtb	r3, r3
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f36:	d103      	bne.n	8005f40 <xQueueReceive+0x138>
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f46:	b25b      	sxtb	r3, r3
 8005f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4c:	d103      	bne.n	8005f56 <xQueueReceive+0x14e>
 8005f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f56:	f002 f917 	bl	8008188 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f5a:	1d3a      	adds	r2, r7, #4
 8005f5c:	f107 0310 	add.w	r3, r7, #16
 8005f60:	4611      	mov	r1, r2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 fa0a 	bl	800737c <xTaskCheckForTimeOut>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d123      	bne.n	8005fb6 <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f70:	f000 f9b9 	bl	80062e6 <prvIsQueueEmpty>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d017      	beq.n	8005faa <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7c:	3324      	adds	r3, #36	@ 0x24
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4611      	mov	r1, r2
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 f88e 	bl	80070a4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005f88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f8a:	f000 f95a 	bl	8006242 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005f8e:	f000 fdab 	bl	8006ae8 <xTaskResumeAll>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d181      	bne.n	8005e9c <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8005f98:	4b11      	ldr	r3, [pc, #68]	@ (8005fe0 <xQueueReceive+0x1d8>)
 8005f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	e778      	b.n	8005e9c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fac:	f000 f949 	bl	8006242 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005fb0:	f000 fd9a 	bl	8006ae8 <xTaskResumeAll>
 8005fb4:	e772      	b.n	8005e9c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005fb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fb8:	f000 f943 	bl	8006242 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005fbc:	f000 fd94 	bl	8006ae8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fc2:	f000 f990 	bl	80062e6 <prvIsQueueEmpty>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f43f af67 	beq.w	8005e9c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8005fce:	2100      	movs	r1, #0
 8005fd0:	20a4      	movs	r0, #164	@ 0xa4
 8005fd2:	f003 fe41 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8005fd6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3730      	adds	r7, #48	@ 0x30
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	e000ed04 	.word	0xe000ed04

08005fe4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b090      	sub	sp, #64	@ 0x40
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	63bb      	str	r3, [r7, #56]	@ 0x38

    traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );

    configASSERT( pxQueue );
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10b      	bne.n	8006012 <xQueueReceiveFromISR+0x2e>
    __asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d103      	bne.n	8006020 <xQueueReceiveFromISR+0x3c>
 8006018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <xQueueReceiveFromISR+0x40>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <xQueueReceiveFromISR+0x42>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <xQueueReceiveFromISR+0x5e>
    __asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	623b      	str	r3, [r7, #32]
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	e7fd      	b.n	800603e <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006042:	f002 f93d 	bl	80082c0 <vPortValidateInterruptPriority>
    __asm volatile
 8006046:	f3ef 8211 	mrs	r2, BASEPRI
 800604a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	61fa      	str	r2, [r7, #28]
 800605c:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 800605e:	69fb      	ldr	r3, [r7, #28]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8006060:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006066:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	2b00      	cmp	r3, #0
 800606c:	d047      	beq.n	80060fe <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800606e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006070:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006074:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006078:	68b9      	ldr	r1, [r7, #8]
 800607a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800607c:	f000 f8bb 	bl	80061f6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8006080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006082:	1e5a      	subs	r2, r3, #1
 8006084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006086:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8006088:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d112      	bne.n	80060b8 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d02e      	beq.n	80060f8 <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800609a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609c:	3310      	adds	r3, #16
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 f872 	bl	8007188 <xTaskRemoveFromEventList>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d026      	beq.n	80060f8 <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d023      	beq.n	80060f8 <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e01f      	b.n	80060f8 <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 80060b8:	f000 fe50 	bl	8006d5c <uxTaskGetNumberOfTasks>
 80060bc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80060be:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80060c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d917      	bls.n	80060f8 <xQueueReceiveFromISR+0x114>
 80060c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80060cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80060ce:	d10b      	bne.n	80060e8 <xQueueReceiveFromISR+0x104>
    __asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	617b      	str	r3, [r7, #20]
}
 80060e2:	bf00      	nop
 80060e4:	bf00      	nop
 80060e6:	e7fd      	b.n	80060e4 <xQueueReceiveFromISR+0x100>
 80060e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060ec:	3301      	adds	r3, #1
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	b25a      	sxtb	r2, r3
 80060f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 80060f8:	2301      	movs	r3, #1
 80060fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060fc:	e001      	b.n	8006102 <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
 80060fe:	2300      	movs	r3, #0
 8006100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006104:	613b      	str	r3, [r7, #16]
    __asm volatile
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f383 8811 	msr	BASEPRI, r3
}
 800610c:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );
 800610e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006110:	4619      	mov	r1, r3
 8006112:	20a7      	movs	r0, #167	@ 0xa7
 8006114:	f003 fda0 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8006118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800611a:	4618      	mov	r0, r3
 800611c:	3740      	adds	r7, #64	@ 0x40
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006136:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10d      	bne.n	800615c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d14d      	bne.n	80061e4 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	4618      	mov	r0, r3
 800614e:	f001 fab7 	bl	80076c0 <xTaskPriorityDisinherit>
 8006152:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	609a      	str	r2, [r3, #8]
 800615a:	e043      	b.n	80061e4 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d119      	bne.n	8006196 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6858      	ldr	r0, [r3, #4]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	461a      	mov	r2, r3
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	f004 f8c5 	bl	800a2fc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617a:	441a      	add	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	429a      	cmp	r2, r3
 800618a:	d32b      	bcc.n	80061e4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	605a      	str	r2, [r3, #4]
 8006194:	e026      	b.n	80061e4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	68d8      	ldr	r0, [r3, #12]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619e:	461a      	mov	r2, r3
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	f004 f8ab 	bl	800a2fc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ae:	425b      	negs	r3, r3
 80061b0:	441a      	add	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d207      	bcs.n	80061d2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ca:	425b      	negs	r3, r3
 80061cc:	441a      	add	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d105      	bne.n	80061e4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80061ec:	697b      	ldr	r3, [r7, #20]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d018      	beq.n	800623a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006210:	441a      	add	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	429a      	cmp	r2, r3
 8006220:	d303      	bcc.n	800622a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68d9      	ldr	r1, [r3, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006232:	461a      	mov	r2, r3
 8006234:	6838      	ldr	r0, [r7, #0]
 8006236:	f004 f861 	bl	800a2fc <memcpy>
    }
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800624a:	f001 ff6d 	bl	8008128 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006254:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006256:	e011      	b.n	800627c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	2b00      	cmp	r3, #0
 800625e:	d012      	beq.n	8006286 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3324      	adds	r3, #36	@ 0x24
 8006264:	4618      	mov	r0, r3
 8006266:	f000 ff8f 	bl	8007188 <xTaskRemoveFromEventList>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006270:	f001 f8f0 	bl	8007454 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	3b01      	subs	r3, #1
 8006278:	b2db      	uxtb	r3, r3
 800627a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800627c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006280:	2b00      	cmp	r3, #0
 8006282:	dce9      	bgt.n	8006258 <prvUnlockQueue+0x16>
 8006284:	e000      	b.n	8006288 <prvUnlockQueue+0x46>
                    break;
 8006286:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	22ff      	movs	r2, #255	@ 0xff
 800628c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8006290:	f001 ff7a 	bl	8008188 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006294:	f001 ff48 	bl	8008128 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800629e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80062a0:	e011      	b.n	80062c6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d012      	beq.n	80062d0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3310      	adds	r3, #16
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 ff6a 	bl	8007188 <xTaskRemoveFromEventList>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80062ba:	f001 f8cb 	bl	8007454 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80062c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	dce9      	bgt.n	80062a2 <prvUnlockQueue+0x60>
 80062ce:	e000      	b.n	80062d2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80062d0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	22ff      	movs	r2, #255	@ 0xff
 80062d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80062da:	f001 ff55 	bl	8008188 <vPortExitCritical>
}
 80062de:	bf00      	nop
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80062ee:	f001 ff1b 	bl	8008128 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d102      	bne.n	8006300 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80062fa:	2301      	movs	r3, #1
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	e001      	b.n	8006304 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006300:	2300      	movs	r3, #0
 8006302:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006304:	f001 ff40 	bl	8008188 <vPortExitCritical>

    return xReturn;
 8006308:	68fb      	ldr	r3, [r7, #12]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800631a:	f001 ff05 	bl	8008128 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006326:	429a      	cmp	r2, r3
 8006328:	d102      	bne.n	8006330 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800632a:	2301      	movs	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	e001      	b.n	8006334 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006334:	f001 ff28 	bl	8008188 <vPortExitCritical>

    return xReturn;
 8006338:	68fb      	ldr	r3, [r7, #12]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800634e:	2300      	movs	r3, #0
 8006350:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10b      	bne.n	8006370 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	60fb      	str	r3, [r7, #12]
}
 800636a:	bf00      	nop
 800636c:	bf00      	nop
 800636e:	e7fd      	b.n	800636c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d024      	beq.n	80063c0 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e01e      	b.n	80063ba <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800637c:	4a18      	ldr	r2, [pc, #96]	@ (80063e0 <vQueueAddToRegistry+0x9c>)
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	4413      	add	r3, r2
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	429a      	cmp	r2, r3
 800638a:	d105      	bne.n	8006398 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4a13      	ldr	r2, [pc, #76]	@ (80063e0 <vQueueAddToRegistry+0x9c>)
 8006392:	4413      	add	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
                    break;
 8006396:	e013      	b.n	80063c0 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <vQueueAddToRegistry+0x70>
 800639e:	4a10      	ldr	r2, [pc, #64]	@ (80063e0 <vQueueAddToRegistry+0x9c>)
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d104      	bne.n	80063b4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	4a0c      	ldr	r2, [pc, #48]	@ (80063e0 <vQueueAddToRegistry+0x9c>)
 80063b0:	4413      	add	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	3301      	adds	r3, #1
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b07      	cmp	r3, #7
 80063be:	d9dd      	bls.n	800637c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 80063d2:	20b6      	movs	r0, #182	@ 0xb6
 80063d4:	f003 fc04 	bl	8009be0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80063d8:	bf00      	nop
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20000e20 	.word	0x20000e20

080063e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80063f4:	f001 fe98 	bl	8008128 <vPortEnterCritical>
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063fe:	b25b      	sxtb	r3, r3
 8006400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006404:	d103      	bne.n	800640e <vQueueWaitForMessageRestricted+0x2a>
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006414:	b25b      	sxtb	r3, r3
 8006416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641a:	d103      	bne.n	8006424 <vQueueWaitForMessageRestricted+0x40>
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006424:	f001 feb0 	bl	8008188 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642c:	2b00      	cmp	r3, #0
 800642e:	d106      	bne.n	800643e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	3324      	adds	r3, #36	@ 0x24
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fe5b 	bl	80070f4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800643e:	6978      	ldr	r0, [r7, #20]
 8006440:	f7ff feff 	bl	8006242 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8006444:	20b9      	movs	r0, #185	@ 0xb9
 8006446:	f003 fbcb 	bl	8009be0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800644a:	bf00      	nop
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8006452:	b580      	push	{r7, lr}
 8006454:	b08e      	sub	sp, #56	@ 0x38
 8006456:	af04      	add	r7, sp, #16
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8006460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10b      	bne.n	800647e <prvCreateStaticTask+0x2c>
    __asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	623b      	str	r3, [r7, #32]
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop
 800647c:	e7fd      	b.n	800647a <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10b      	bne.n	800649c <prvCreateStaticTask+0x4a>
    __asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	61fb      	str	r3, [r7, #28]
}
 8006496:	bf00      	nop
 8006498:	bf00      	nop
 800649a:	e7fd      	b.n	8006498 <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800649c:	235c      	movs	r3, #92	@ 0x5c
 800649e:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2b5c      	cmp	r3, #92	@ 0x5c
 80064a4:	d00b      	beq.n	80064be <prvCreateStaticTask+0x6c>
    __asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	61bb      	str	r3, [r7, #24]
}
 80064b8:	bf00      	nop
 80064ba:	bf00      	nop
 80064bc:	e7fd      	b.n	80064ba <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 80064be:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d01f      	beq.n	8006506 <prvCreateStaticTask+0xb4>
 80064c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01c      	beq.n	8006506 <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 80064cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ce:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80064d0:	225c      	movs	r2, #92	@ 0x5c
 80064d2:	2100      	movs	r1, #0
 80064d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80064d6:	f003 fedd 	bl	800a294 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064de:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064e8:	2300      	movs	r3, #0
 80064ea:	9303      	str	r3, [sp, #12]
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	9302      	str	r3, [sp, #8]
 80064f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f2:	9301      	str	r3, [sp, #4]
 80064f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f89d 	bl	800663e <prvInitialiseNewTask>
 8006504:	e001      	b.n	800650a <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800650c:	4618      	mov	r0, r3
 800650e:	3728      	adds	r7, #40	@ 0x28
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8006514:	b580      	push	{r7, lr}
 8006516:	b08a      	sub	sp, #40	@ 0x28
 8006518:	af04      	add	r7, sp, #16
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8006526:	f107 0310 	add.w	r3, r7, #16
 800652a:	9303      	str	r3, [sp, #12]
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	9302      	str	r3, [sp, #8]
 8006530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f7ff ff87 	bl	8006452 <prvCreateStaticTask>
 8006544:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800654c:	6978      	ldr	r0, [r7, #20]
 800654e:	f000 f907 	bl	8006760 <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	4618      	mov	r0, r3
 8006556:	f003 fd19 	bl	8009f8c <SEGGER_SYSVIEW_ShrinkId>
 800655a:	4603      	mov	r3, r0
 800655c:	4619      	mov	r1, r3
 800655e:	20bf      	movs	r0, #191	@ 0xbf
 8006560:	f003 fb7a 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8006564:	693b      	ldr	r3, [r7, #16]
    }
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800656e:	b580      	push	{r7, lr}
 8006570:	b08a      	sub	sp, #40	@ 0x28
 8006572:	af04      	add	r7, sp, #16
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
 800657a:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4618      	mov	r0, r3
 8006582:	f001 fedd 	bl	8008340 <pvPortMalloc>
 8006586:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d013      	beq.n	80065b6 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800658e:	205c      	movs	r0, #92	@ 0x5c
 8006590:	f001 fed6 	bl	8008340 <pvPortMalloc>
 8006594:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800659c:	225c      	movs	r2, #92	@ 0x5c
 800659e:	2100      	movs	r1, #0
 80065a0:	6978      	ldr	r0, [r7, #20]
 80065a2:	f003 fe77 	bl	800a294 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80065ac:	e005      	b.n	80065ba <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80065ae:	6938      	ldr	r0, [r7, #16]
 80065b0:	f001 fff8 	bl	80085a4 <vPortFree>
 80065b4:	e001      	b.n	80065ba <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d011      	beq.n	80065e4 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065c8:	2300      	movs	r3, #0
 80065ca:	9303      	str	r3, [sp, #12]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	9302      	str	r3, [sp, #8]
 80065d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d2:	9301      	str	r3, [sp, #4]
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f82d 	bl	800663e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80065e4:	697b      	ldr	r3, [r7, #20]
    }
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b088      	sub	sp, #32
 80065f2:	af02      	add	r7, sp, #8
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	607a      	str	r2, [r7, #4]
 80065fa:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80065fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f7ff ffaf 	bl	800656e <prvCreateTask>
 8006610:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8006618:	6938      	ldr	r0, [r7, #16]
 800661a:	f000 f8a1 	bl	8006760 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800661e:	2301      	movs	r3, #1
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	e002      	b.n	800662a <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006624:	f04f 33ff 	mov.w	r3, #4294967295
 8006628:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	4619      	mov	r1, r3
 800662e:	20c2      	movs	r0, #194	@ 0xc2
 8006630:	f003 fb12 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8006634:	697b      	ldr	r3, [r7, #20]
    }
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b088      	sub	sp, #32
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
 800664a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800664c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	461a      	mov	r2, r3
 8006656:	21a5      	movs	r1, #165	@ 0xa5
 8006658:	f003 fe1c 	bl	800a294 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800665c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006666:	3b01      	subs	r3, #1
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	f023 0307 	bic.w	r3, r3, #7
 8006674:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00b      	beq.n	8006698 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	617b      	str	r3, [r7, #20]
}
 8006692:	bf00      	nop
 8006694:	bf00      	nop
 8006696:	e7fd      	b.n	8006694 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01e      	beq.n	80066dc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800669e:	2300      	movs	r3, #0
 80066a0:	61fb      	str	r3, [r7, #28]
 80066a2:	e012      	b.n	80066ca <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	7819      	ldrb	r1, [r3, #0]
 80066ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	4413      	add	r3, r2
 80066b2:	3334      	adds	r3, #52	@ 0x34
 80066b4:	460a      	mov	r2, r1
 80066b6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4413      	add	r3, r2
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d006      	beq.n	80066d2 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	3301      	adds	r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	2b0f      	cmp	r3, #15
 80066ce:	d9e9      	bls.n	80066a4 <prvInitialiseNewTask+0x66>
 80066d0:	e000      	b.n	80066d4 <prvInitialiseNewTask+0x96>
            {
                break;
 80066d2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80066dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066de:	2b37      	cmp	r3, #55	@ 0x37
 80066e0:	d90b      	bls.n	80066fa <prvInitialiseNewTask+0xbc>
    __asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	613b      	str	r3, [r7, #16]
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	e7fd      	b.n	80066f6 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	2b37      	cmp	r3, #55	@ 0x37
 80066fe:	d901      	bls.n	8006704 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006700:	2337      	movs	r3, #55	@ 0x37
 8006702:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006708:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800670a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800670e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006712:	3304      	adds	r3, #4
 8006714:	4618      	mov	r0, r3
 8006716:	f7fe ffb3 	bl	8005680 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800671a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671c:	3318      	adds	r3, #24
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe ffae 	bl	8005680 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006728:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800672a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006732:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006738:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	68f9      	ldr	r1, [r7, #12]
 800673e:	69b8      	ldr	r0, [r7, #24]
 8006740:	f001 fbb0 	bl	8007ea4 <pxPortInitialiseStack>
 8006744:	4602      	mov	r2, r0
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800674a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006754:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006756:	bf00      	nop
 8006758:	3720      	adds	r7, #32
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8006760:	b5b0      	push	{r4, r5, r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af02      	add	r7, sp, #8
 8006766:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8006768:	f001 fcde 	bl	8008128 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800676c:	4b51      	ldr	r3, [pc, #324]	@ (80068b4 <prvAddNewTaskToReadyList+0x154>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3301      	adds	r3, #1
 8006772:	4a50      	ldr	r2, [pc, #320]	@ (80068b4 <prvAddNewTaskToReadyList+0x154>)
 8006774:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8006776:	4b50      	ldr	r3, [pc, #320]	@ (80068b8 <prvAddNewTaskToReadyList+0x158>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800677e:	4a4e      	ldr	r2, [pc, #312]	@ (80068b8 <prvAddNewTaskToReadyList+0x158>)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006784:	4b4b      	ldr	r3, [pc, #300]	@ (80068b4 <prvAddNewTaskToReadyList+0x154>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d110      	bne.n	80067ae <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800678c:	f000 fe86 	bl	800749c <prvInitialiseTaskLists>
 8006790:	e00d      	b.n	80067ae <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8006792:	4b4a      	ldr	r3, [pc, #296]	@ (80068bc <prvAddNewTaskToReadyList+0x15c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d109      	bne.n	80067ae <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800679a:	4b47      	ldr	r3, [pc, #284]	@ (80068b8 <prvAddNewTaskToReadyList+0x158>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d802      	bhi.n	80067ae <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80067a8:	4a43      	ldr	r2, [pc, #268]	@ (80068b8 <prvAddNewTaskToReadyList+0x158>)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80067ae:	4b44      	ldr	r3, [pc, #272]	@ (80068c0 <prvAddNewTaskToReadyList+0x160>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3301      	adds	r3, #1
 80067b4:	4a42      	ldr	r2, [pc, #264]	@ (80068c0 <prvAddNewTaskToReadyList+0x160>)
 80067b6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80067b8:	4b41      	ldr	r3, [pc, #260]	@ (80068c0 <prvAddNewTaskToReadyList+0x160>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d016      	beq.n	80067f4 <prvAddNewTaskToReadyList+0x94>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f003 fab9 	bl	8009d40 <SEGGER_SYSVIEW_OnTaskCreate>
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067de:	461d      	mov	r5, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461c      	mov	r4, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ea:	1ae3      	subs	r3, r4, r3
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	462b      	mov	r3, r5
 80067f0:	f002 f8e8 	bl	80089c4 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f003 fb26 	bl	8009e48 <SEGGER_SYSVIEW_OnTaskStartReady>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006800:	4b30      	ldr	r3, [pc, #192]	@ (80068c4 <prvAddNewTaskToReadyList+0x164>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d903      	bls.n	8006810 <prvAddNewTaskToReadyList+0xb0>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680c:	4a2d      	ldr	r2, [pc, #180]	@ (80068c4 <prvAddNewTaskToReadyList+0x164>)
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006814:	492c      	ldr	r1, [pc, #176]	@ (80068c8 <prvAddNewTaskToReadyList+0x168>)
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	3304      	adds	r3, #4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	609a      	str	r2, [r3, #8]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	60da      	str	r2, [r3, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	3204      	adds	r2, #4
 800683c:	605a      	str	r2, [r3, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	1d1a      	adds	r2, r3, #4
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	609a      	str	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4a1d      	ldr	r2, [pc, #116]	@ (80068c8 <prvAddNewTaskToReadyList+0x168>)
 8006854:	441a      	add	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	615a      	str	r2, [r3, #20]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800685e:	491a      	ldr	r1, [pc, #104]	@ (80068c8 <prvAddNewTaskToReadyList+0x168>)
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006870:	1c59      	adds	r1, r3, #1
 8006872:	4815      	ldr	r0, [pc, #84]	@ (80068c8 <prvAddNewTaskToReadyList+0x168>)
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4403      	add	r3, r0
 800687e:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8006880:	f001 fc82 	bl	8008188 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8006884:	4b0d      	ldr	r3, [pc, #52]	@ (80068bc <prvAddNewTaskToReadyList+0x15c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00e      	beq.n	80068aa <prvAddNewTaskToReadyList+0x14a>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800688c:	4b0a      	ldr	r3, [pc, #40]	@ (80068b8 <prvAddNewTaskToReadyList+0x158>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006896:	429a      	cmp	r2, r3
 8006898:	d207      	bcs.n	80068aa <prvAddNewTaskToReadyList+0x14a>
 800689a:	4b0c      	ldr	r3, [pc, #48]	@ (80068cc <prvAddNewTaskToReadyList+0x16c>)
 800689c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80068aa:	bf00      	nop
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bdb0      	pop	{r4, r5, r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20001334 	.word	0x20001334
 80068b8:	20000e60 	.word	0x20000e60
 80068bc:	20001340 	.word	0x20001340
 80068c0:	20001350 	.word	0x20001350
 80068c4:	2000133c 	.word	0x2000133c
 80068c8:	20000e64 	.word	0x20000e64
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d018      	beq.n	8006914 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 80068e2:	f000 f8f3 	bl	8006acc <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80068e6:	4b14      	ldr	r3, [pc, #80]	@ (8006938 <vTaskDelay+0x68>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d00b      	beq.n	8006906 <vTaskDelay+0x36>
    __asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	60bb      	str	r3, [r7, #8]
}
 8006900:	bf00      	nop
 8006902:	bf00      	nop
 8006904:	e7fd      	b.n	8006902 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006906:	2100      	movs	r1, #0
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 ff7d 	bl	8007808 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800690e:	f000 f8eb 	bl	8006ae8 <xTaskResumeAll>
 8006912:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d107      	bne.n	800692a <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 800691a:	4b08      	ldr	r3, [pc, #32]	@ (800693c <vTaskDelay+0x6c>)
 800691c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 800692a:	20c5      	movs	r0, #197	@ 0xc5
 800692c:	f003 f958 	bl	8009be0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8006930:	bf00      	nop
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	2000135c 	.word	0x2000135c
 800693c:	e000ed04 	.word	0xe000ed04

08006940 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b090      	sub	sp, #64	@ 0x40
 8006944:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8006946:	2301      	movs	r3, #1
 8006948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800694e:	2300      	movs	r3, #0
 8006950:	627b      	str	r3, [r7, #36]	@ 0x24
 8006952:	e013      	b.n	800697c <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8006954:	4a2b      	ldr	r2, [pc, #172]	@ (8006a04 <prvCreateIdleTasks+0xc4>)
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	4413      	add	r3, r2
 800695a:	7819      	ldrb	r1, [r3, #0]
 800695c:	f107 0210 	add.w	r2, r7, #16
 8006960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006962:	4413      	add	r3, r2
 8006964:	460a      	mov	r2, r1
 8006966:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8006968:	f107 0210 	add.w	r2, r7, #16
 800696c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696e:	4413      	add	r3, r2
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d006      	beq.n	8006984 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	3301      	adds	r3, #1
 800697a:	627b      	str	r3, [r7, #36]	@ 0x24
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	2b0f      	cmp	r3, #15
 8006980:	dde8      	ble.n	8006954 <prvCreateIdleTasks+0x14>
 8006982:	e000      	b.n	8006986 <prvCreateIdleTasks+0x46>
        {
            break;
 8006984:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8006986:	2300      	movs	r3, #0
 8006988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800698a:	e031      	b.n	80069f0 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800698c:	4b1e      	ldr	r3, [pc, #120]	@ (8006a08 <prvCreateIdleTasks+0xc8>)
 800698e:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8006994:	2300      	movs	r3, #0
 8006996:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8006998:	1d3a      	adds	r2, r7, #4
 800699a:	f107 0108 	add.w	r1, r7, #8
 800699e:	f107 030c 	add.w	r3, r7, #12
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe fe16 	bl	80055d4 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	f107 0110 	add.w	r1, r7, #16
 80069b2:	9202      	str	r2, [sp, #8]
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	2300      	movs	r3, #0
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	2300      	movs	r3, #0
 80069bc:	4602      	mov	r2, r0
 80069be:	6a38      	ldr	r0, [r7, #32]
 80069c0:	f7ff fda8 	bl	8006514 <xTaskCreateStatic>
 80069c4:	4602      	mov	r2, r0
 80069c6:	4911      	ldr	r1, [pc, #68]	@ (8006a0c <prvCreateIdleTasks+0xcc>)
 80069c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 80069ce:	4a0f      	ldr	r2, [pc, #60]	@ (8006a0c <prvCreateIdleTasks+0xcc>)
 80069d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d002      	beq.n	80069e0 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 80069da:	2301      	movs	r3, #1
 80069dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069de:	e001      	b.n	80069e4 <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80069e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d006      	beq.n	80069f8 <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80069ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ec:	3301      	adds	r3, #1
 80069ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	ddca      	ble.n	800698c <prvCreateIdleTasks+0x4c>
 80069f6:	e000      	b.n	80069fa <prvCreateIdleTasks+0xba>
        {
            break;
 80069f8:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80069fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3730      	adds	r7, #48	@ 0x30
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	0800ac0c 	.word	0x0800ac0c
 8006a08:	0800746d 	.word	0x0800746d
 8006a0c:	20001358 	.word	0x20001358

08006a10 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8006a16:	f7ff ff93 	bl	8006940 <prvCreateIdleTasks>
 8006a1a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d102      	bne.n	8006a28 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8006a22:	f000 ff6d 	bl	8007900 <xTimerCreateTimerTask>
 8006a26:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d129      	bne.n	8006a82 <vTaskStartScheduler+0x72>
    __asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	60bb      	str	r3, [r7, #8]
}
 8006a40:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006a42:	4b1c      	ldr	r3, [pc, #112]	@ (8006ab4 <vTaskStartScheduler+0xa4>)
 8006a44:	f04f 32ff 	mov.w	r2, #4294967295
 8006a48:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ab8 <vTaskStartScheduler+0xa8>)
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a50:	4b1a      	ldr	r3, [pc, #104]	@ (8006abc <vTaskStartScheduler+0xac>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8006a56:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac0 <vTaskStartScheduler+0xb0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3334      	adds	r3, #52	@ 0x34
 8006a5c:	2205      	movs	r2, #5
 8006a5e:	4919      	ldr	r1, [pc, #100]	@ (8006ac4 <vTaskStartScheduler+0xb4>)
 8006a60:	4618      	mov	r0, r3
 8006a62:	f003 fc07 	bl	800a274 <memcmp>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <vTaskStartScheduler+0x68>
 8006a6c:	4b14      	ldr	r3, [pc, #80]	@ (8006ac0 <vTaskStartScheduler+0xb0>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f003 f9a7 	bl	8009dc4 <SEGGER_SYSVIEW_OnTaskStartExec>
 8006a76:	e001      	b.n	8006a7c <vTaskStartScheduler+0x6c>
 8006a78:	f003 f946 	bl	8009d08 <SEGGER_SYSVIEW_OnIdle>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8006a7c:	f001 fa96 	bl	8007fac <xPortStartScheduler>
 8006a80:	e00f      	b.n	8006aa2 <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d10b      	bne.n	8006aa2 <vTaskStartScheduler+0x92>
    __asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	607b      	str	r3, [r7, #4]
}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	e7fd      	b.n	8006a9e <vTaskStartScheduler+0x8e>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006aa2:	4b09      	ldr	r3, [pc, #36]	@ (8006ac8 <vTaskStartScheduler+0xb8>)
 8006aa4:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8006aa6:	20cd      	movs	r0, #205	@ 0xcd
 8006aa8:	f003 f89a 	bl	8009be0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8006aac:	bf00      	nop
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	20001354 	.word	0x20001354
 8006ab8:	20001340 	.word	0x20001340
 8006abc:	20001338 	.word	0x20001338
 8006ac0:	20000e60 	.word	0x20000e60
 8006ac4:	0800ac0c 	.word	0x0800ac0c
 8006ac8:	0800ad68 	.word	0x0800ad68

08006acc <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8006ad0:	4b04      	ldr	r3, [pc, #16]	@ (8006ae4 <vTaskSuspendAll+0x18>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	4a03      	ldr	r2, [pc, #12]	@ (8006ae4 <vTaskSuspendAll+0x18>)
 8006ad8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8006ada:	20cf      	movs	r0, #207	@ 0xcf
 8006adc:	f003 f880 	bl	8009be0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8006ae0:	bf00      	nop
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	2000135c 	.word	0x2000135c

08006ae8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006af2:	2300      	movs	r3, #0
 8006af4:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8006af6:	f001 fb17 	bl	8008128 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8006afa:	2300      	movs	r3, #0
 8006afc:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8006afe:	4b7a      	ldr	r3, [pc, #488]	@ (8006ce8 <xTaskResumeAll+0x200>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10b      	bne.n	8006b1e <xTaskResumeAll+0x36>
    __asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	603b      	str	r3, [r7, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	e7fd      	b.n	8006b1a <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8006b1e:	4b72      	ldr	r3, [pc, #456]	@ (8006ce8 <xTaskResumeAll+0x200>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3b01      	subs	r3, #1
 8006b24:	4a70      	ldr	r2, [pc, #448]	@ (8006ce8 <xTaskResumeAll+0x200>)
 8006b26:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006b28:	4b6f      	ldr	r3, [pc, #444]	@ (8006ce8 <xTaskResumeAll+0x200>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f040 80cf 	bne.w	8006cd0 <xTaskResumeAll+0x1e8>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b32:	4b6e      	ldr	r3, [pc, #440]	@ (8006cec <xTaskResumeAll+0x204>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 80ca 	beq.w	8006cd0 <xTaskResumeAll+0x1e8>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b3c:	e093      	b.n	8006c66 <xTaskResumeAll+0x17e>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006b3e:	4b6c      	ldr	r3, [pc, #432]	@ (8006cf0 <xTaskResumeAll+0x208>)
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	69fa      	ldr	r2, [r7, #28]
 8006b52:	6a12      	ldr	r2, [r2, #32]
 8006b54:	609a      	str	r2, [r3, #8]
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	69d2      	ldr	r2, [r2, #28]
 8006b5e:	605a      	str	r2, [r3, #4]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	3318      	adds	r3, #24
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d103      	bne.n	8006b74 <xTaskResumeAll+0x8c>
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	6a1a      	ldr	r2, [r3, #32]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	605a      	str	r2, [r3, #4]
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	2200      	movs	r2, #0
 8006b78:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	1e5a      	subs	r2, r3, #1
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	60bb      	str	r3, [r7, #8]
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	68d2      	ldr	r2, [r2, #12]
 8006b92:	609a      	str	r2, [r3, #8]
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	6892      	ldr	r2, [r2, #8]
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d103      	bne.n	8006bb2 <xTaskResumeAll+0xca>
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	605a      	str	r2, [r3, #4]
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	615a      	str	r2, [r3, #20]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	1e5a      	subs	r2, r3, #1
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f003 f93f 	bl	8009e48 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bce:	4b49      	ldr	r3, [pc, #292]	@ (8006cf4 <xTaskResumeAll+0x20c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d903      	bls.n	8006bde <xTaskResumeAll+0xf6>
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bda:	4a46      	ldr	r2, [pc, #280]	@ (8006cf4 <xTaskResumeAll+0x20c>)
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be2:	4945      	ldr	r1, [pc, #276]	@ (8006cf8 <xTaskResumeAll+0x210>)
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	3304      	adds	r3, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	607b      	str	r3, [r7, #4]
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	609a      	str	r2, [r3, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689a      	ldr	r2, [r3, #8]
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	60da      	str	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	3204      	adds	r2, #4
 8006c0a:	605a      	str	r2, [r3, #4]
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	1d1a      	adds	r2, r3, #4
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	609a      	str	r2, [r3, #8]
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4a35      	ldr	r2, [pc, #212]	@ (8006cf8 <xTaskResumeAll+0x210>)
 8006c22:	441a      	add	r2, r3
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	615a      	str	r2, [r3, #20]
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c2c:	4932      	ldr	r1, [pc, #200]	@ (8006cf8 <xTaskResumeAll+0x210>)
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c3e:	1c59      	adds	r1, r3, #1
 8006c40:	482d      	ldr	r0, [pc, #180]	@ (8006cf8 <xTaskResumeAll+0x210>)
 8006c42:	4613      	mov	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4403      	add	r3, r0
 8006c4c:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c52:	4b2a      	ldr	r3, [pc, #168]	@ (8006cfc <xTaskResumeAll+0x214>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d904      	bls.n	8006c66 <xTaskResumeAll+0x17e>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8006c5c:	4a28      	ldr	r2, [pc, #160]	@ (8006d00 <xTaskResumeAll+0x218>)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2101      	movs	r1, #1
 8006c62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c66:	4b22      	ldr	r3, [pc, #136]	@ (8006cf0 <xTaskResumeAll+0x208>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f47f af67 	bne.w	8006b3e <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <xTaskResumeAll+0x192>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8006c76:	f000 fce7 	bl	8007648 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c7a:	4b22      	ldr	r3, [pc, #136]	@ (8006d04 <xTaskResumeAll+0x21c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d012      	beq.n	8006cac <xTaskResumeAll+0x1c4>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8006c86:	f000 f877 	bl	8006d78 <xTaskIncrementTick>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d004      	beq.n	8006c9a <xTaskResumeAll+0x1b2>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8006c90:	4a1b      	ldr	r2, [pc, #108]	@ (8006d00 <xTaskResumeAll+0x218>)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2101      	movs	r1, #1
 8006c96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1ef      	bne.n	8006c86 <xTaskResumeAll+0x19e>

                            xPendedTicks = 0;
 8006ca6:	4b17      	ldr	r3, [pc, #92]	@ (8006d04 <xTaskResumeAll+0x21c>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8006cac:	4a14      	ldr	r2, [pc, #80]	@ (8006d00 <xTaskResumeAll+0x218>)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <xTaskResumeAll+0x1e8>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8006cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8006cfc <xTaskResumeAll+0x214>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4b11      	ldr	r3, [pc, #68]	@ (8006d08 <xTaskResumeAll+0x220>)
 8006cc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006cd0:	f001 fa5a 	bl	8008188 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	20d0      	movs	r0, #208	@ 0xd0
 8006cda:	f002 ffbd 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8006cde:	69bb      	ldr	r3, [r7, #24]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3720      	adds	r7, #32
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	2000135c 	.word	0x2000135c
 8006cec:	20001334 	.word	0x20001334
 8006cf0:	200012f4 	.word	0x200012f4
 8006cf4:	2000133c 	.word	0x2000133c
 8006cf8:	20000e64 	.word	0x20000e64
 8006cfc:	20000e60 	.word	0x20000e60
 8006d00:	20001348 	.word	0x20001348
 8006d04:	20001344 	.word	0x20001344
 8006d08:	e000ed04 	.word	0xe000ed04

08006d0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006d12:	4b06      	ldr	r3, [pc, #24]	@ (8006d2c <xTaskGetTickCount+0x20>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	20d1      	movs	r0, #209	@ 0xd1
 8006d1c:	f002 ff9c 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8006d20:	687b      	ldr	r3, [r7, #4]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20001338 	.word	0x20001338

08006d30 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d36:	f001 fac3 	bl	80082c0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8006d3e:	4b06      	ldr	r3, [pc, #24]	@ (8006d58 <xTaskGetTickCountFromISR+0x28>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	20d2      	movs	r0, #210	@ 0xd2
 8006d48:	f002 ff86 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8006d4c:	683b      	ldr	r3, [r7, #0]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20001338 	.word	0x20001338

08006d5c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8006d60:	4b04      	ldr	r3, [pc, #16]	@ (8006d74 <uxTaskGetNumberOfTasks+0x18>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4619      	mov	r1, r3
 8006d66:	20d3      	movs	r0, #211	@ 0xd3
 8006d68:	f002 ff76 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 8006d6c:	4b01      	ldr	r3, [pc, #4]	@ (8006d74 <uxTaskGetNumberOfTasks+0x18>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20001334 	.word	0x20001334

08006d78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08a      	sub	sp, #40	@ 0x28
 8006d7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006d82:	4b84      	ldr	r3, [pc, #528]	@ (8006f94 <xTaskIncrementTick+0x21c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f040 80f4 	bne.w	8006f74 <xTaskIncrementTick+0x1fc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d8c:	4b82      	ldr	r3, [pc, #520]	@ (8006f98 <xTaskIncrementTick+0x220>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3301      	adds	r3, #1
 8006d92:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006d94:	4a80      	ldr	r2, [pc, #512]	@ (8006f98 <xTaskIncrementTick+0x220>)
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d121      	bne.n	8006de4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8006da0:	4b7e      	ldr	r3, [pc, #504]	@ (8006f9c <xTaskIncrementTick+0x224>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <xTaskIncrementTick+0x4a>
    __asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	607b      	str	r3, [r7, #4]
}
 8006dbc:	bf00      	nop
 8006dbe:	bf00      	nop
 8006dc0:	e7fd      	b.n	8006dbe <xTaskIncrementTick+0x46>
 8006dc2:	4b76      	ldr	r3, [pc, #472]	@ (8006f9c <xTaskIncrementTick+0x224>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	61fb      	str	r3, [r7, #28]
 8006dc8:	4b75      	ldr	r3, [pc, #468]	@ (8006fa0 <xTaskIncrementTick+0x228>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a73      	ldr	r2, [pc, #460]	@ (8006f9c <xTaskIncrementTick+0x224>)
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	4a73      	ldr	r2, [pc, #460]	@ (8006fa0 <xTaskIncrementTick+0x228>)
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	6013      	str	r3, [r2, #0]
 8006dd6:	4b73      	ldr	r3, [pc, #460]	@ (8006fa4 <xTaskIncrementTick+0x22c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	4a71      	ldr	r2, [pc, #452]	@ (8006fa4 <xTaskIncrementTick+0x22c>)
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	f000 fc32 	bl	8007648 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006de4:	4b70      	ldr	r3, [pc, #448]	@ (8006fa8 <xTaskIncrementTick+0x230>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6a3a      	ldr	r2, [r7, #32]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	f0c0 80ad 	bcc.w	8006f4a <xTaskIncrementTick+0x1d2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006df0:	4b6a      	ldr	r3, [pc, #424]	@ (8006f9c <xTaskIncrementTick+0x224>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d104      	bne.n	8006e04 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8006dfa:	4b6b      	ldr	r3, [pc, #428]	@ (8006fa8 <xTaskIncrementTick+0x230>)
 8006dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006e00:	601a      	str	r2, [r3, #0]
                    break;
 8006e02:	e0a2      	b.n	8006f4a <xTaskIncrementTick+0x1d2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e04:	4b65      	ldr	r3, [pc, #404]	@ (8006f9c <xTaskIncrementTick+0x224>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006e14:	6a3a      	ldr	r2, [r7, #32]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d203      	bcs.n	8006e24 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006e1c:	4a62      	ldr	r2, [pc, #392]	@ (8006fa8 <xTaskIncrementTick+0x230>)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	6013      	str	r3, [r2, #0]
                        break;
 8006e22:	e092      	b.n	8006f4a <xTaskIncrementTick+0x1d2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	613b      	str	r3, [r7, #16]
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	68d2      	ldr	r2, [r2, #12]
 8006e32:	609a      	str	r2, [r3, #8]
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	6892      	ldr	r2, [r2, #8]
 8006e3c:	605a      	str	r2, [r3, #4]
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	3304      	adds	r3, #4
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d103      	bne.n	8006e52 <xTaskIncrementTick+0xda>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	605a      	str	r2, [r3, #4]
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2200      	movs	r2, #0
 8006e56:	615a      	str	r2, [r3, #20]
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	1e5a      	subs	r2, r3, #1
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d01e      	beq.n	8006ea8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	6a12      	ldr	r2, [r2, #32]
 8006e78:	609a      	str	r2, [r3, #8]
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	69d2      	ldr	r2, [r2, #28]
 8006e82:	605a      	str	r2, [r3, #4]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	3318      	adds	r3, #24
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d103      	bne.n	8006e98 <xTaskIncrementTick+0x120>
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	6a1a      	ldr	r2, [r3, #32]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	605a      	str	r2, [r3, #4]
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	1e5a      	subs	r2, r3, #1
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f002 ffcc 	bl	8009e48 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8006fac <xTaskIncrementTick+0x234>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d903      	bls.n	8006ec4 <xTaskIncrementTick+0x14c>
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec0:	4a3a      	ldr	r2, [pc, #232]	@ (8006fac <xTaskIncrementTick+0x234>)
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec8:	4939      	ldr	r1, [pc, #228]	@ (8006fb0 <xTaskIncrementTick+0x238>)
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	60bb      	str	r3, [r7, #8]
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	609a      	str	r2, [r3, #8]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	60da      	str	r2, [r3, #12]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	3204      	adds	r2, #4
 8006ef0:	605a      	str	r2, [r3, #4]
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	1d1a      	adds	r2, r3, #4
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	609a      	str	r2, [r3, #8]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006efe:	4613      	mov	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4a2a      	ldr	r2, [pc, #168]	@ (8006fb0 <xTaskIncrementTick+0x238>)
 8006f08:	441a      	add	r2, r3
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	615a      	str	r2, [r3, #20]
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f12:	4927      	ldr	r1, [pc, #156]	@ (8006fb0 <xTaskIncrementTick+0x238>)
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f24:	1c59      	adds	r1, r3, #1
 8006f26:	4822      	ldr	r0, [pc, #136]	@ (8006fb0 <xTaskIncrementTick+0x238>)
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4403      	add	r3, r0
 8006f32:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f38:	4b1e      	ldr	r3, [pc, #120]	@ (8006fb4 <xTaskIncrementTick+0x23c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	f67f af56 	bls.w	8006df0 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8006f44:	2301      	movs	r3, #1
 8006f46:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f48:	e752      	b.n	8006df0 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8006f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb4 <xTaskIncrementTick+0x23c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f50:	4917      	ldr	r1, [pc, #92]	@ (8006fb0 <xTaskIncrementTick+0x238>)
 8006f52:	4613      	mov	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d901      	bls.n	8006f66 <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8006f62:	2301      	movs	r3, #1
 8006f64:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8006f66:	4b14      	ldr	r3, [pc, #80]	@ (8006fb8 <xTaskIncrementTick+0x240>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d007      	beq.n	8006f7e <xTaskIncrementTick+0x206>
                {
                    xSwitchRequired = pdTRUE;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f72:	e004      	b.n	8006f7e <xTaskIncrementTick+0x206>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8006f74:	4b11      	ldr	r3, [pc, #68]	@ (8006fbc <xTaskIncrementTick+0x244>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	4a10      	ldr	r2, [pc, #64]	@ (8006fbc <xTaskIncrementTick+0x244>)
 8006f7c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	4619      	mov	r1, r3
 8006f82:	20db      	movs	r0, #219	@ 0xdb
 8006f84:	f002 fe68 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3728      	adds	r7, #40	@ 0x28
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	2000135c 	.word	0x2000135c
 8006f98:	20001338 	.word	0x20001338
 8006f9c:	200012ec 	.word	0x200012ec
 8006fa0:	200012f0 	.word	0x200012f0
 8006fa4:	2000134c 	.word	0x2000134c
 8006fa8:	20001354 	.word	0x20001354
 8006fac:	2000133c 	.word	0x2000133c
 8006fb0:	20000e64 	.word	0x20000e64
 8006fb4:	20000e60 	.word	0x20000e60
 8006fb8:	20001348 	.word	0x20001348
 8006fbc:	20001344 	.word	0x20001344

08006fc0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8006fc6:	4b31      	ldr	r3, [pc, #196]	@ (800708c <vTaskSwitchContext+0xcc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8006fce:	4b30      	ldr	r3, [pc, #192]	@ (8007090 <vTaskSwitchContext+0xd0>)
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8006fd4:	e056      	b.n	8007084 <vTaskSwitchContext+0xc4>
            xYieldPendings[ 0 ] = pdFALSE;
 8006fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8007090 <vTaskSwitchContext+0xd0>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8006fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8007094 <vTaskSwitchContext+0xd4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	e011      	b.n	8007008 <vTaskSwitchContext+0x48>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10b      	bne.n	8007002 <vTaskSwitchContext+0x42>
    __asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	607b      	str	r3, [r7, #4]
}
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	e7fd      	b.n	8006ffe <vTaskSwitchContext+0x3e>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3b01      	subs	r3, #1
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	4923      	ldr	r1, [pc, #140]	@ (8007098 <vTaskSwitchContext+0xd8>)
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	440b      	add	r3, r1
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0e3      	beq.n	8006fe4 <vTaskSwitchContext+0x24>
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4a1c      	ldr	r2, [pc, #112]	@ (8007098 <vTaskSwitchContext+0xd8>)
 8007028:	4413      	add	r3, r2
 800702a:	60bb      	str	r3, [r7, #8]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	605a      	str	r2, [r3, #4]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	3308      	adds	r3, #8
 800703e:	429a      	cmp	r2, r3
 8007040:	d103      	bne.n	800704a <vTaskSwitchContext+0x8a>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	605a      	str	r2, [r3, #4]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	4a12      	ldr	r2, [pc, #72]	@ (800709c <vTaskSwitchContext+0xdc>)
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	4a0f      	ldr	r2, [pc, #60]	@ (8007094 <vTaskSwitchContext+0xd4>)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800705a:	4b10      	ldr	r3, [pc, #64]	@ (800709c <vTaskSwitchContext+0xdc>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3334      	adds	r3, #52	@ 0x34
 8007060:	2205      	movs	r2, #5
 8007062:	490f      	ldr	r1, [pc, #60]	@ (80070a0 <vTaskSwitchContext+0xe0>)
 8007064:	4618      	mov	r0, r3
 8007066:	f003 f905 	bl	800a274 <memcmp>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d005      	beq.n	800707c <vTaskSwitchContext+0xbc>
 8007070:	4b0a      	ldr	r3, [pc, #40]	@ (800709c <vTaskSwitchContext+0xdc>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f002 fea5 	bl	8009dc4 <SEGGER_SYSVIEW_OnTaskStartExec>
 800707a:	e001      	b.n	8007080 <vTaskSwitchContext+0xc0>
 800707c:	f002 fe44 	bl	8009d08 <SEGGER_SYSVIEW_OnIdle>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8007080:	4b06      	ldr	r3, [pc, #24]	@ (800709c <vTaskSwitchContext+0xdc>)
 8007082:	681b      	ldr	r3, [r3, #0]
    }
 8007084:	bf00      	nop
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	2000135c 	.word	0x2000135c
 8007090:	20001348 	.word	0x20001348
 8007094:	2000133c 	.word	0x2000133c
 8007098:	20000e64 	.word	0x20000e64
 800709c:	20000e60 	.word	0x20000e60
 80070a0:	0800ac0c 	.word	0x0800ac0c

080070a4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10b      	bne.n	80070cc <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	60fb      	str	r3, [r7, #12]
}
 80070c6:	bf00      	nop
 80070c8:	bf00      	nop
 80070ca:	e7fd      	b.n	80070c8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070cc:	4b08      	ldr	r3, [pc, #32]	@ (80070f0 <vTaskPlaceOnEventList+0x4c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3318      	adds	r3, #24
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7fe fae2 	bl	800569e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070da:	2101      	movs	r1, #1
 80070dc:	6838      	ldr	r0, [r7, #0]
 80070de:	f000 fb93 	bl	8007808 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80070e2:	20e1      	movs	r0, #225	@ 0xe1
 80070e4:	f002 fd7c 	bl	8009be0 <SEGGER_SYSVIEW_RecordEndCall>
}
 80070e8:	bf00      	nop
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000e60 	.word	0x20000e60

080070f4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10b      	bne.n	800711e <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	613b      	str	r3, [r7, #16]
}
 8007118:	bf00      	nop
 800711a:	bf00      	nop
 800711c:	e7fd      	b.n	800711a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	4b17      	ldr	r3, [pc, #92]	@ (8007184 <vTaskPlaceOnEventListRestricted+0x90>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	61da      	str	r2, [r3, #28]
 800712c:	4b15      	ldr	r3, [pc, #84]	@ (8007184 <vTaskPlaceOnEventListRestricted+0x90>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	6892      	ldr	r2, [r2, #8]
 8007134:	621a      	str	r2, [r3, #32]
 8007136:	4b13      	ldr	r3, [pc, #76]	@ (8007184 <vTaskPlaceOnEventListRestricted+0x90>)
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	3218      	adds	r2, #24
 8007140:	605a      	str	r2, [r3, #4]
 8007142:	4b10      	ldr	r3, [pc, #64]	@ (8007184 <vTaskPlaceOnEventListRestricted+0x90>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f103 0218 	add.w	r2, r3, #24
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	609a      	str	r2, [r3, #8]
 800714e:	4b0d      	ldr	r3, [pc, #52]	@ (8007184 <vTaskPlaceOnEventListRestricted+0x90>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	629a      	str	r2, [r3, #40]	@ 0x28
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8007166:	f04f 33ff 	mov.w	r3, #4294967295
 800716a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800716c:	6879      	ldr	r1, [r7, #4]
 800716e:	68b8      	ldr	r0, [r7, #8]
 8007170:	f000 fb4a 	bl	8007808 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8007174:	20e3      	movs	r0, #227	@ 0xe3
 8007176:	f002 fd33 	bl	8009be0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800717a:	bf00      	nop
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000e60 	.word	0x20000e60

08007188 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08a      	sub	sp, #40	@ 0x28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10b      	bne.n	80071b6 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	60fb      	str	r3, [r7, #12]
}
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	e7fd      	b.n	80071b2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ba:	61fb      	str	r3, [r7, #28]
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	6a3a      	ldr	r2, [r7, #32]
 80071c2:	6a12      	ldr	r2, [r2, #32]
 80071c4:	609a      	str	r2, [r3, #8]
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	6a3a      	ldr	r2, [r7, #32]
 80071cc:	69d2      	ldr	r2, [r2, #28]
 80071ce:	605a      	str	r2, [r3, #4]
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	3318      	adds	r3, #24
 80071d8:	429a      	cmp	r2, r3
 80071da:	d103      	bne.n	80071e4 <xTaskRemoveFromEventList+0x5c>
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	6a1a      	ldr	r2, [r3, #32]
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	605a      	str	r2, [r3, #4]
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	2200      	movs	r2, #0
 80071e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	1e5a      	subs	r2, r3, #1
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80071f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007334 <xTaskRemoveFromEventList+0x1ac>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d165      	bne.n	80072c8 <xTaskRemoveFromEventList+0x140>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	6a3a      	ldr	r2, [r7, #32]
 8007208:	68d2      	ldr	r2, [r2, #12]
 800720a:	609a      	str	r2, [r3, #8]
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	6a3a      	ldr	r2, [r7, #32]
 8007212:	6892      	ldr	r2, [r2, #8]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	3304      	adds	r3, #4
 800721e:	429a      	cmp	r2, r3
 8007220:	d103      	bne.n	800722a <xTaskRemoveFromEventList+0xa2>
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	605a      	str	r2, [r3, #4]
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	2200      	movs	r2, #0
 800722e:	615a      	str	r2, [r3, #20]
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	1e5a      	subs	r2, r3, #1
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	4618      	mov	r0, r3
 800723e:	f002 fe03 	bl	8009e48 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007246:	4b3c      	ldr	r3, [pc, #240]	@ (8007338 <xTaskRemoveFromEventList+0x1b0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	d903      	bls.n	8007256 <xTaskRemoveFromEventList+0xce>
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007252:	4a39      	ldr	r2, [pc, #228]	@ (8007338 <xTaskRemoveFromEventList+0x1b0>)
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800725a:	4938      	ldr	r1, [pc, #224]	@ (800733c <xTaskRemoveFromEventList+0x1b4>)
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	440b      	add	r3, r1
 8007266:	3304      	adds	r3, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	613b      	str	r3, [r7, #16]
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	609a      	str	r2, [r3, #8]
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	60da      	str	r2, [r3, #12]
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	6a3a      	ldr	r2, [r7, #32]
 8007280:	3204      	adds	r2, #4
 8007282:	605a      	str	r2, [r3, #4]
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	1d1a      	adds	r2, r3, #4
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	609a      	str	r2, [r3, #8]
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4a28      	ldr	r2, [pc, #160]	@ (800733c <xTaskRemoveFromEventList+0x1b4>)
 800729a:	441a      	add	r2, r3
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	615a      	str	r2, [r3, #20]
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072a4:	4925      	ldr	r1, [pc, #148]	@ (800733c <xTaskRemoveFromEventList+0x1b4>)
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	440b      	add	r3, r1
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6a3a      	ldr	r2, [r7, #32]
 80072b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80072b6:	1c59      	adds	r1, r3, #1
 80072b8:	4820      	ldr	r0, [pc, #128]	@ (800733c <xTaskRemoveFromEventList+0x1b4>)
 80072ba:	4613      	mov	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4403      	add	r3, r0
 80072c4:	6019      	str	r1, [r3, #0]
 80072c6:	e01b      	b.n	8007300 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007340 <xTaskRemoveFromEventList+0x1b8>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	61da      	str	r2, [r3, #28]
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	689a      	ldr	r2, [r3, #8]
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	621a      	str	r2, [r3, #32]
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	6a3a      	ldr	r2, [r7, #32]
 80072e2:	3218      	adds	r2, #24
 80072e4:	605a      	str	r2, [r3, #4]
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	f103 0218 	add.w	r2, r3, #24
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	609a      	str	r2, [r3, #8]
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	4a13      	ldr	r2, [pc, #76]	@ (8007340 <xTaskRemoveFromEventList+0x1b8>)
 80072f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80072f6:	4b12      	ldr	r3, [pc, #72]	@ (8007340 <xTaskRemoveFromEventList+0x1b8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3301      	adds	r3, #1
 80072fc:	4a10      	ldr	r2, [pc, #64]	@ (8007340 <xTaskRemoveFromEventList+0x1b8>)
 80072fe:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007304:	4b0f      	ldr	r3, [pc, #60]	@ (8007344 <xTaskRemoveFromEventList+0x1bc>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730a:	429a      	cmp	r2, r3
 800730c:	d905      	bls.n	800731a <xTaskRemoveFromEventList+0x192>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800730e:	2301      	movs	r3, #1
 8007310:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8007312:	4b0d      	ldr	r3, [pc, #52]	@ (8007348 <xTaskRemoveFromEventList+0x1c0>)
 8007314:	2201      	movs	r2, #1
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	e001      	b.n	800731e <xTaskRemoveFromEventList+0x196>
        }
        else
        {
            xReturn = pdFALSE;
 800731a:	2300      	movs	r3, #0
 800731c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	4619      	mov	r1, r3
 8007322:	20e4      	movs	r0, #228	@ 0xe4
 8007324:	f002 fc98 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800732a:	4618      	mov	r0, r3
 800732c:	3728      	adds	r7, #40	@ 0x28
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	2000135c 	.word	0x2000135c
 8007338:	2000133c 	.word	0x2000133c
 800733c:	20000e64 	.word	0x20000e64
 8007340:	200012f4 	.word	0x200012f4
 8007344:	20000e60 	.word	0x20000e60
 8007348:	20001348 	.word	0x20001348

0800734c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007354:	4b07      	ldr	r3, [pc, #28]	@ (8007374 <vTaskInternalSetTimeOutState+0x28>)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800735c:	4b06      	ldr	r3, [pc, #24]	@ (8007378 <vTaskInternalSetTimeOutState+0x2c>)
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8007364:	20e7      	movs	r0, #231	@ 0xe7
 8007366:	f002 fc3b 	bl	8009be0 <SEGGER_SYSVIEW_RecordEndCall>
}
 800736a:	bf00      	nop
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	2000134c 	.word	0x2000134c
 8007378:	20001338 	.word	0x20001338

0800737c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10b      	bne.n	80073a4 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	613b      	str	r3, [r7, #16]
}
 800739e:	bf00      	nop
 80073a0:	bf00      	nop
 80073a2:	e7fd      	b.n	80073a0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10b      	bne.n	80073c2 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	60fb      	str	r3, [r7, #12]
}
 80073bc:	bf00      	nop
 80073be:	bf00      	nop
 80073c0:	e7fd      	b.n	80073be <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80073c2:	f000 feb1 	bl	8008128 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80073c6:	4b21      	ldr	r3, [pc, #132]	@ (800744c <xTaskCheckForTimeOut+0xd0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073de:	d102      	bne.n	80073e6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80073e0:	2300      	movs	r3, #0
 80073e2:	61fb      	str	r3, [r7, #28]
 80073e4:	e026      	b.n	8007434 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	4b19      	ldr	r3, [pc, #100]	@ (8007450 <xTaskCheckForTimeOut+0xd4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d00a      	beq.n	8007408 <xTaskCheckForTimeOut+0x8c>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d305      	bcc.n	8007408 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80073fc:	2301      	movs	r3, #1
 80073fe:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	e015      	b.n	8007434 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	429a      	cmp	r2, r3
 8007410:	d20b      	bcs.n	800742a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	1ad2      	subs	r2, r2, r3
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff ff94 	bl	800734c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]
 8007428:	e004      	b.n	8007434 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007430:	2301      	movs	r3, #1
 8007432:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007434:	f000 fea8 	bl	8008188 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	4619      	mov	r1, r3
 800743c:	20e8      	movs	r0, #232	@ 0xe8
 800743e:	f002 fc0b 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8007442:	69fb      	ldr	r3, [r7, #28]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3720      	adds	r7, #32
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20001338 	.word	0x20001338
 8007450:	2000134c 	.word	0x2000134c

08007454 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8007458:	4b03      	ldr	r3, [pc, #12]	@ (8007468 <vTaskMissedYield+0x14>)
 800745a:	2201      	movs	r2, #1
 800745c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800745e:	20e9      	movs	r0, #233	@ 0xe9
 8007460:	f002 fbbe 	bl	8009be0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8007464:	bf00      	nop
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20001348 	.word	0x20001348

0800746c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007474:	f000 f852 	bl	800751c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8007478:	4b06      	ldr	r3, [pc, #24]	@ (8007494 <prvIdleTask+0x28>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d9f9      	bls.n	8007474 <prvIdleTask+0x8>
            {
                taskYIELD();
 8007480:	4b05      	ldr	r3, [pc, #20]	@ (8007498 <prvIdleTask+0x2c>)
 8007482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007490:	e7f0      	b.n	8007474 <prvIdleTask+0x8>
 8007492:	bf00      	nop
 8007494:	20000e64 	.word	0x20000e64
 8007498:	e000ed04 	.word	0xe000ed04

0800749c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074a2:	2300      	movs	r3, #0
 80074a4:	607b      	str	r3, [r7, #4]
 80074a6:	e00c      	b.n	80074c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	4613      	mov	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4a12      	ldr	r2, [pc, #72]	@ (80074fc <prvInitialiseTaskLists+0x60>)
 80074b4:	4413      	add	r3, r2
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe f8c0 	bl	800563c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3301      	adds	r3, #1
 80074c0:	607b      	str	r3, [r7, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b37      	cmp	r3, #55	@ 0x37
 80074c6:	d9ef      	bls.n	80074a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80074c8:	480d      	ldr	r0, [pc, #52]	@ (8007500 <prvInitialiseTaskLists+0x64>)
 80074ca:	f7fe f8b7 	bl	800563c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80074ce:	480d      	ldr	r0, [pc, #52]	@ (8007504 <prvInitialiseTaskLists+0x68>)
 80074d0:	f7fe f8b4 	bl	800563c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80074d4:	480c      	ldr	r0, [pc, #48]	@ (8007508 <prvInitialiseTaskLists+0x6c>)
 80074d6:	f7fe f8b1 	bl	800563c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80074da:	480c      	ldr	r0, [pc, #48]	@ (800750c <prvInitialiseTaskLists+0x70>)
 80074dc:	f7fe f8ae 	bl	800563c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80074e0:	480b      	ldr	r0, [pc, #44]	@ (8007510 <prvInitialiseTaskLists+0x74>)
 80074e2:	f7fe f8ab 	bl	800563c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80074e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007514 <prvInitialiseTaskLists+0x78>)
 80074e8:	4a05      	ldr	r2, [pc, #20]	@ (8007500 <prvInitialiseTaskLists+0x64>)
 80074ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007518 <prvInitialiseTaskLists+0x7c>)
 80074ee:	4a05      	ldr	r2, [pc, #20]	@ (8007504 <prvInitialiseTaskLists+0x68>)
 80074f0:	601a      	str	r2, [r3, #0]
}
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20000e64 	.word	0x20000e64
 8007500:	200012c4 	.word	0x200012c4
 8007504:	200012d8 	.word	0x200012d8
 8007508:	200012f4 	.word	0x200012f4
 800750c:	20001308 	.word	0x20001308
 8007510:	20001320 	.word	0x20001320
 8007514:	200012ec 	.word	0x200012ec
 8007518:	200012f0 	.word	0x200012f0

0800751c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007522:	e019      	b.n	8007558 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8007524:	f000 fe00 	bl	8008128 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007528:	4b10      	ldr	r3, [pc, #64]	@ (800756c <prvCheckTasksWaitingTermination+0x50>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3304      	adds	r3, #4
 8007534:	4618      	mov	r0, r3
 8007536:	f7fe f8ed 	bl	8005714 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800753a:	4b0d      	ldr	r3, [pc, #52]	@ (8007570 <prvCheckTasksWaitingTermination+0x54>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3b01      	subs	r3, #1
 8007540:	4a0b      	ldr	r2, [pc, #44]	@ (8007570 <prvCheckTasksWaitingTermination+0x54>)
 8007542:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8007544:	4b0b      	ldr	r3, [pc, #44]	@ (8007574 <prvCheckTasksWaitingTermination+0x58>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3b01      	subs	r3, #1
 800754a:	4a0a      	ldr	r2, [pc, #40]	@ (8007574 <prvCheckTasksWaitingTermination+0x58>)
 800754c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800754e:	f000 fe1b 	bl	8008188 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f848 	bl	80075e8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007558:	4b06      	ldr	r3, [pc, #24]	@ (8007574 <prvCheckTasksWaitingTermination+0x58>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e1      	bne.n	8007524 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20001308 	.word	0x20001308
 8007570:	20001334 	.word	0x20001334
 8007574:	2000131c 	.word	0x2000131c

08007578 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007584:	e005      	b.n	8007592 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	3301      	adds	r3, #1
 800758a:	607b      	str	r3, [r7, #4]
            uxCount++;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3301      	adds	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2ba5      	cmp	r3, #165	@ 0xa5
 8007598:	d0f5      	beq.n	8007586 <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	089b      	lsrs	r3, r3, #2
 800759e:	60fb      	str	r3, [r7, #12]

        return uxCount;
 80075a0:	68fb      	ldr	r3, [r7, #12]
    }
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bc80      	pop	{r7}
 80075aa:	4770      	bx	lr

080075ac <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        traceENTER_uxTaskGetStackHighWaterMark( xTask );

        pxTCB = prvGetTCBFromHandle( xTask );
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d102      	bne.n	80075c0 <uxTaskGetStackHighWaterMark+0x14>
 80075ba:	4b0a      	ldr	r3, [pc, #40]	@ (80075e4 <uxTaskGetStackHighWaterMark+0x38>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	e000      	b.n	80075c2 <uxTaskGetStackHighWaterMark+0x16>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c8:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80075ca:	6938      	ldr	r0, [r7, #16]
 80075cc:	f7ff ffd4 	bl	8007578 <prvTaskCheckFreeStackSpace>
 80075d0:	60f8      	str	r0, [r7, #12]

        traceRETURN_uxTaskGetStackHighWaterMark( uxReturn );
 80075d2:	68f9      	ldr	r1, [r7, #12]
 80075d4:	20f2      	movs	r0, #242	@ 0xf2
 80075d6:	f002 fb3f 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

        return uxReturn;
 80075da:	68fb      	ldr	r3, [r7, #12]
    }
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	20000e60 	.word	0x20000e60

080075e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d108      	bne.n	800760c <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 ffd0 	bl	80085a4 <vPortFree>
                vPortFree( pxTCB );
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 ffcd 	bl	80085a4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800760a:	e019      	b.n	8007640 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007612:	2b01      	cmp	r3, #1
 8007614:	d103      	bne.n	800761e <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 ffc4 	bl	80085a4 <vPortFree>
    }
 800761c:	e010      	b.n	8007640 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007624:	2b02      	cmp	r3, #2
 8007626:	d00b      	beq.n	8007640 <prvDeleteTCB+0x58>
    __asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	60fb      	str	r3, [r7, #12]
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <prvDeleteTCB+0x54>
    }
 8007640:	bf00      	nop
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800764c:	4b09      	ldr	r3, [pc, #36]	@ (8007674 <prvResetNextTaskUnblockTime+0x2c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d104      	bne.n	8007660 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007656:	4b08      	ldr	r3, [pc, #32]	@ (8007678 <prvResetNextTaskUnblockTime+0x30>)
 8007658:	f04f 32ff 	mov.w	r2, #4294967295
 800765c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800765e:	e005      	b.n	800766c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007660:	4b04      	ldr	r3, [pc, #16]	@ (8007674 <prvResetNextTaskUnblockTime+0x2c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a03      	ldr	r2, [pc, #12]	@ (8007678 <prvResetNextTaskUnblockTime+0x30>)
 800766a:	6013      	str	r3, [r2, #0]
}
 800766c:	bf00      	nop
 800766e:	46bd      	mov	sp, r7
 8007670:	bc80      	pop	{r7}
 8007672:	4770      	bx	lr
 8007674:	200012ec 	.word	0x200012ec
 8007678:	20001354 	.word	0x20001354

0800767c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8007682:	4b0d      	ldr	r3, [pc, #52]	@ (80076b8 <xTaskGetSchedulerState+0x3c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d102      	bne.n	8007690 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800768a:	2301      	movs	r3, #1
 800768c:	607b      	str	r3, [r7, #4]
 800768e:	e008      	b.n	80076a2 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007690:	4b0a      	ldr	r3, [pc, #40]	@ (80076bc <xTaskGetSchedulerState+0x40>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8007698:	2302      	movs	r3, #2
 800769a:	607b      	str	r3, [r7, #4]
 800769c:	e001      	b.n	80076a2 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800769e:	2300      	movs	r3, #0
 80076a0:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4619      	mov	r1, r3
 80076a6:	20f5      	movs	r0, #245	@ 0xf5
 80076a8:	f002 fad6 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80076ac:	687b      	ldr	r3, [r7, #4]
    }
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20001340 	.word	0x20001340
 80076bc:	2000135c 	.word	0x2000135c

080076c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80076cc:	2300      	movs	r3, #0
 80076ce:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 8087 	beq.w	80077e6 <xTaskPriorityDisinherit+0x126>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80076d8:	4b48      	ldr	r3, [pc, #288]	@ (80077fc <xTaskPriorityDisinherit+0x13c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d00b      	beq.n	80076fa <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	613b      	str	r3, [r7, #16]
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	e7fd      	b.n	80076f6 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10b      	bne.n	800771a <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	60fb      	str	r3, [r7, #12]
}
 8007714:	bf00      	nop
 8007716:	bf00      	nop
 8007718:	e7fd      	b.n	8007716 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800771e:	1e5a      	subs	r2, r3, #1
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800772c:	429a      	cmp	r2, r3
 800772e:	d05a      	beq.n	80077e6 <xTaskPriorityDisinherit+0x126>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007734:	2b00      	cmp	r3, #0
 8007736:	d156      	bne.n	80077e6 <xTaskPriorityDisinherit+0x126>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	3304      	adds	r3, #4
 800773c:	4618      	mov	r0, r3
 800773e:	f7fd ffe9 	bl	8005714 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	4618      	mov	r0, r3
 800775a:	f002 fb75 	bl	8009e48 <SEGGER_SYSVIEW_OnTaskStartReady>
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007762:	4b27      	ldr	r3, [pc, #156]	@ (8007800 <xTaskPriorityDisinherit+0x140>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d903      	bls.n	8007772 <xTaskPriorityDisinherit+0xb2>
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776e:	4a24      	ldr	r2, [pc, #144]	@ (8007800 <xTaskPriorityDisinherit+0x140>)
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007776:	4923      	ldr	r1, [pc, #140]	@ (8007804 <xTaskPriorityDisinherit+0x144>)
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	3304      	adds	r3, #4
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	609a      	str	r2, [r3, #8]
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	689a      	ldr	r2, [r3, #8]
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	60da      	str	r2, [r3, #12]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	3204      	adds	r2, #4
 800779e:	605a      	str	r2, [r3, #4]
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	1d1a      	adds	r2, r3, #4
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	609a      	str	r2, [r3, #8]
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4a13      	ldr	r2, [pc, #76]	@ (8007804 <xTaskPriorityDisinherit+0x144>)
 80077b6:	441a      	add	r2, r3
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	615a      	str	r2, [r3, #20]
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c0:	4910      	ldr	r1, [pc, #64]	@ (8007804 <xTaskPriorityDisinherit+0x144>)
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	440b      	add	r3, r1
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80077d2:	1c59      	adds	r1, r3, #1
 80077d4:	480b      	ldr	r0, [pc, #44]	@ (8007804 <xTaskPriorityDisinherit+0x144>)
 80077d6:	4613      	mov	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4403      	add	r3, r0
 80077e0:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80077e2:	2301      	movs	r3, #1
 80077e4:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	4619      	mov	r1, r3
 80077ea:	20f7      	movs	r0, #247	@ 0xf7
 80077ec:	f002 fa34 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80077f0:	69fb      	ldr	r3, [r7, #28]
    }
 80077f2:	4618      	mov	r0, r3
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000e60 	.word	0x20000e60
 8007800:	2000133c 	.word	0x2000133c
 8007804:	20000e64 	.word	0x20000e64

08007808 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007812:	4b35      	ldr	r3, [pc, #212]	@ (80078e8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8007818:	4b34      	ldr	r3, [pc, #208]	@ (80078ec <prvAddCurrentTaskToDelayedList+0xe4>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800781e:	4b34      	ldr	r3, [pc, #208]	@ (80078f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007824:	4b33      	ldr	r3, [pc, #204]	@ (80078f4 <prvAddCurrentTaskToDelayedList+0xec>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3304      	adds	r3, #4
 800782a:	4618      	mov	r0, r3
 800782c:	f7fd ff72 	bl	8005714 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007836:	d124      	bne.n	8007882 <prvAddCurrentTaskToDelayedList+0x7a>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d021      	beq.n	8007882 <prvAddCurrentTaskToDelayedList+0x7a>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800783e:	4b2e      	ldr	r3, [pc, #184]	@ (80078f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	4b2b      	ldr	r3, [pc, #172]	@ (80078f4 <prvAddCurrentTaskToDelayedList+0xec>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	609a      	str	r2, [r3, #8]
 800784c:	4b29      	ldr	r3, [pc, #164]	@ (80078f4 <prvAddCurrentTaskToDelayedList+0xec>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	6892      	ldr	r2, [r2, #8]
 8007854:	60da      	str	r2, [r3, #12]
 8007856:	4b27      	ldr	r3, [pc, #156]	@ (80078f4 <prvAddCurrentTaskToDelayedList+0xec>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	3204      	adds	r2, #4
 8007860:	605a      	str	r2, [r3, #4]
 8007862:	4b24      	ldr	r3, [pc, #144]	@ (80078f4 <prvAddCurrentTaskToDelayedList+0xec>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	1d1a      	adds	r2, r3, #4
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	609a      	str	r2, [r3, #8]
 800786c:	4b21      	ldr	r3, [pc, #132]	@ (80078f4 <prvAddCurrentTaskToDelayedList+0xec>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a21      	ldr	r2, [pc, #132]	@ (80078f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007872:	615a      	str	r2, [r3, #20]
 8007874:	4b20      	ldr	r3, [pc, #128]	@ (80078f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3301      	adds	r3, #1
 800787a:	4a1f      	ldr	r2, [pc, #124]	@ (80078f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007880:	e02e      	b.n	80078e0 <prvAddCurrentTaskToDelayedList+0xd8>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4413      	add	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800788a:	4b1a      	ldr	r3, [pc, #104]	@ (80078f4 <prvAddCurrentTaskToDelayedList+0xec>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	429a      	cmp	r2, r3
 8007898:	d20d      	bcs.n	80078b6 <prvAddCurrentTaskToDelayedList+0xae>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800789a:	4b16      	ldr	r3, [pc, #88]	@ (80078f4 <prvAddCurrentTaskToDelayedList+0xec>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2104      	movs	r1, #4
 80078a0:	4618      	mov	r0, r3
 80078a2:	f002 fb13 	bl	8009ecc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80078a6:	4b13      	ldr	r3, [pc, #76]	@ (80078f4 <prvAddCurrentTaskToDelayedList+0xec>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4619      	mov	r1, r3
 80078ae:	6978      	ldr	r0, [r7, #20]
 80078b0:	f7fd fef5 	bl	800569e <vListInsert>
}
 80078b4:	e014      	b.n	80078e0 <prvAddCurrentTaskToDelayedList+0xd8>
                traceMOVED_TASK_TO_DELAYED_LIST();
 80078b6:	4b0f      	ldr	r3, [pc, #60]	@ (80078f4 <prvAddCurrentTaskToDelayedList+0xec>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2104      	movs	r1, #4
 80078bc:	4618      	mov	r0, r3
 80078be:	f002 fb05 	bl	8009ecc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80078c2:	4b0c      	ldr	r3, [pc, #48]	@ (80078f4 <prvAddCurrentTaskToDelayedList+0xec>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3304      	adds	r3, #4
 80078c8:	4619      	mov	r1, r3
 80078ca:	69b8      	ldr	r0, [r7, #24]
 80078cc:	f7fd fee7 	bl	800569e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80078d0:	4b0a      	ldr	r3, [pc, #40]	@ (80078fc <prvAddCurrentTaskToDelayedList+0xf4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d202      	bcs.n	80078e0 <prvAddCurrentTaskToDelayedList+0xd8>
                    xNextTaskUnblockTime = xTimeToWake;
 80078da:	4a08      	ldr	r2, [pc, #32]	@ (80078fc <prvAddCurrentTaskToDelayedList+0xf4>)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6013      	str	r3, [r2, #0]
}
 80078e0:	bf00      	nop
 80078e2:	3720      	adds	r7, #32
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	20001338 	.word	0x20001338
 80078ec:	200012ec 	.word	0x200012ec
 80078f0:	200012f0 	.word	0x200012f0
 80078f4:	20000e60 	.word	0x20000e60
 80078f8:	20001320 	.word	0x20001320
 80078fc:	20001354 	.word	0x20001354

08007900 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007900:	b580      	push	{r7, lr}
 8007902:	b08a      	sub	sp, #40	@ 0x28
 8007904:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8007906:	2300      	movs	r3, #0
 8007908:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800790a:	f000 fa8b 	bl	8007e24 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800790e:	4b20      	ldr	r3, [pc, #128]	@ (8007990 <xTimerCreateTimerTask+0x90>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d021      	beq.n	800795a <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8007916:	2300      	movs	r3, #0
 8007918:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800791a:	2300      	movs	r3, #0
 800791c:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 800791e:	1d3a      	adds	r2, r7, #4
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	f107 030c 	add.w	r3, r7, #12
 8007928:	4618      	mov	r0, r3
 800792a:	f7fd fe6d 	bl	8005608 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800792e:	6879      	ldr	r1, [r7, #4]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	9202      	str	r2, [sp, #8]
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	2302      	movs	r3, #2
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	2300      	movs	r3, #0
 800793e:	460a      	mov	r2, r1
 8007940:	4914      	ldr	r1, [pc, #80]	@ (8007994 <xTimerCreateTimerTask+0x94>)
 8007942:	4815      	ldr	r0, [pc, #84]	@ (8007998 <xTimerCreateTimerTask+0x98>)
 8007944:	f7fe fde6 	bl	8006514 <xTaskCreateStatic>
 8007948:	4603      	mov	r3, r0
 800794a:	4a14      	ldr	r2, [pc, #80]	@ (800799c <xTimerCreateTimerTask+0x9c>)
 800794c:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 800794e:	4b13      	ldr	r3, [pc, #76]	@ (800799c <xTimerCreateTimerTask+0x9c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 8007956:	2301      	movs	r3, #1
 8007958:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10b      	bne.n	8007978 <xTimerCreateTimerTask+0x78>
    __asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	613b      	str	r3, [r7, #16]
}
 8007972:	bf00      	nop
 8007974:	bf00      	nop
 8007976:	e7fd      	b.n	8007974 <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	4619      	mov	r1, r3
 800797c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8007980:	f002 f96a 	bl	8009c58 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8007984:	697b      	ldr	r3, [r7, #20]
    }
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20001390 	.word	0x20001390
 8007994:	0800ac14 	.word	0x0800ac14
 8007998:	08007a45 	.word	0x08007a45
 800799c:	20001394 	.word	0x20001394

080079a0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80079ac:	e008      	b.n	80079c0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	4413      	add	r3, r2
 80079b6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	699a      	ldr	r2, [r3, #24]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	18d1      	adds	r1, r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f8dd 	bl	8007b8c <prvInsertTimerInActiveList>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1ea      	bne.n	80079ae <prvReloadTimer+0xe>
        }
    }
 80079d8:	bf00      	nop
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079ee:	4b14      	ldr	r3, [pc, #80]	@ (8007a40 <prvProcessExpiredTimer+0x5c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3304      	adds	r3, #4
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fd fe89 	bl	8005714 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f7ff ffc3 	bl	80079a0 <prvReloadTimer>
 8007a1a:	e008      	b.n	8007a2e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a22:	f023 0301 	bic.w	r3, r3, #1
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	4798      	blx	r3
    }
 8007a36:	bf00      	nop
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20001388 	.word	0x20001388

08007a44 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a4c:	f107 0308 	add.w	r3, r7, #8
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 f859 	bl	8007b08 <prvGetNextExpireTime>
 8007a56:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 f805 	bl	8007a6c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007a62:	f000 f8d5 	bl	8007c10 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a66:	bf00      	nop
 8007a68:	e7f0      	b.n	8007a4c <prvTimerTask+0x8>
	...

08007a6c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007a76:	f7ff f829 	bl	8006acc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a7a:	f107 0308 	add.w	r3, r7, #8
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 f864 	bl	8007b4c <prvSampleTimeNow>
 8007a84:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d130      	bne.n	8007aee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10a      	bne.n	8007aa8 <prvProcessTimerOrBlockTask+0x3c>
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d806      	bhi.n	8007aa8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007a9a:	f7ff f825 	bl	8006ae8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a9e:	68f9      	ldr	r1, [r7, #12]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7ff ff9f 	bl	80079e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007aa6:	e024      	b.n	8007af2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d008      	beq.n	8007ac0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007aae:	4b13      	ldr	r3, [pc, #76]	@ (8007afc <prvProcessTimerOrBlockTask+0x90>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <prvProcessTimerOrBlockTask+0x50>
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e000      	b.n	8007abe <prvProcessTimerOrBlockTask+0x52>
 8007abc:	2300      	movs	r3, #0
 8007abe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8007b00 <prvProcessTimerOrBlockTask+0x94>)
 8007ac2:	6818      	ldr	r0, [r3, #0]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	4619      	mov	r1, r3
 8007ace:	f7fe fc89 	bl	80063e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007ad2:	f7ff f809 	bl	8006ae8 <xTaskResumeAll>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8007adc:	4b09      	ldr	r3, [pc, #36]	@ (8007b04 <prvProcessTimerOrBlockTask+0x98>)
 8007ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	f3bf 8f6f 	isb	sy
    }
 8007aec:	e001      	b.n	8007af2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007aee:	f7fe fffb 	bl	8006ae8 <xTaskResumeAll>
    }
 8007af2:	bf00      	nop
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	2000138c 	.word	0x2000138c
 8007b00:	20001390 	.word	0x20001390
 8007b04:	e000ed04 	.word	0xe000ed04

08007b08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b10:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <prvGetNextExpireTime+0x40>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <prvGetNextExpireTime+0x16>
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	e000      	b.n	8007b20 <prvGetNextExpireTime+0x18>
 8007b1e:	2200      	movs	r2, #0
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d105      	bne.n	8007b38 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b2c:	4b06      	ldr	r3, [pc, #24]	@ (8007b48 <prvGetNextExpireTime+0x40>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	60fb      	str	r3, [r7, #12]
 8007b36:	e001      	b.n	8007b3c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
    }
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bc80      	pop	{r7}
 8007b46:	4770      	bx	lr
 8007b48:	20001388 	.word	0x20001388

08007b4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8007b54:	f7ff f8da 	bl	8006d0c <xTaskGetTickCount>
 8007b58:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b88 <prvSampleTimeNow+0x3c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d205      	bcs.n	8007b70 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007b64:	f000 f938 	bl	8007dd8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	e002      	b.n	8007b76 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007b76:	4a04      	ldr	r2, [pc, #16]	@ (8007b88 <prvSampleTimeNow+0x3c>)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
    }
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20001398 	.word	0x20001398

08007b8c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d812      	bhi.n	8007bd8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d302      	bcc.n	8007bc6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	e01b      	b.n	8007bfe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bc6:	4b10      	ldr	r3, [pc, #64]	@ (8007c08 <prvInsertTimerInActiveList+0x7c>)
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	f7fd fd64 	bl	800569e <vListInsert>
 8007bd6:	e012      	b.n	8007bfe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d206      	bcs.n	8007bee <prvInsertTimerInActiveList+0x62>
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d302      	bcc.n	8007bee <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007be8:	2301      	movs	r3, #1
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	e007      	b.n	8007bfe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bee:	4b07      	ldr	r3, [pc, #28]	@ (8007c0c <prvInsertTimerInActiveList+0x80>)
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	f7fd fd50 	bl	800569e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007bfe:	697b      	ldr	r3, [r7, #20]
    }
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	2000138c 	.word	0x2000138c
 8007c0c:	20001388 	.word	0x20001388

08007c10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08a      	sub	sp, #40	@ 0x28
 8007c14:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8007c16:	1d3b      	adds	r3, r7, #4
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	605a      	str	r2, [r3, #4]
 8007c1e:	609a      	str	r2, [r3, #8]
 8007c20:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8007c22:	e0c7      	b.n	8007db4 <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	da19      	bge.n	8007c5e <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c2a:	1d3b      	adds	r3, r7, #4
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8007c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10b      	bne.n	8007c4e <prvProcessReceivedCommands+0x3e>
    __asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	61bb      	str	r3, [r7, #24]
}
 8007c48:	bf00      	nop
 8007c4a:	bf00      	nop
 8007c4c:	e7fd      	b.n	8007c4a <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c54:	6850      	ldr	r0, [r2, #4]
 8007c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c58:	6892      	ldr	r2, [r2, #8]
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f2c0 80a7 	blt.w	8007db4 <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8007c6a:	6a3b      	ldr	r3, [r7, #32]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d004      	beq.n	8007c7c <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	3304      	adds	r3, #4
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fd fd4c 	bl	8005714 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff ff64 	bl	8007b4c <prvSampleTimeNow>
 8007c84:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	2b08      	cmp	r3, #8
 8007c8c:	f200 808f 	bhi.w	8007dae <prvProcessReceivedCommands+0x19e>
 8007c90:	a201      	add	r2, pc, #4	@ (adr r2, 8007c98 <prvProcessReceivedCommands+0x88>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007cbd 	.word	0x08007cbd
 8007c9c:	08007cbd 	.word	0x08007cbd
 8007ca0:	08007d25 	.word	0x08007d25
 8007ca4:	08007d39 	.word	0x08007d39
 8007ca8:	08007d85 	.word	0x08007d85
 8007cac:	08007cbd 	.word	0x08007cbd
 8007cb0:	08007cbd 	.word	0x08007cbd
 8007cb4:	08007d25 	.word	0x08007d25
 8007cb8:	08007d39 	.word	0x08007d39
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cc2:	f043 0301 	orr.w	r3, r3, #1
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	18d1      	adds	r1, r2, r3
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	69fa      	ldr	r2, [r7, #28]
 8007cda:	6a38      	ldr	r0, [r7, #32]
 8007cdc:	f7ff ff56 	bl	8007b8c <prvInsertTimerInActiveList>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d065      	beq.n	8007db2 <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d009      	beq.n	8007d08 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	69fa      	ldr	r2, [r7, #28]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6a38      	ldr	r0, [r7, #32]
 8007d02:	f7ff fe4d 	bl	80079a0 <prvReloadTimer>
 8007d06:	e008      	b.n	8007d1a <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d0e:	f023 0301 	bic.w	r3, r3, #1
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	6a38      	ldr	r0, [r7, #32]
 8007d20:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007d22:	e046      	b.n	8007db2 <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d2a:	f023 0301 	bic.w	r3, r3, #1
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007d36:	e03d      	b.n	8007db4 <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d3e:	f043 0301 	orr.w	r3, r3, #1
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10b      	bne.n	8007d70 <prvProcessReceivedCommands+0x160>
    __asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	617b      	str	r3, [r7, #20]
}
 8007d6a:	bf00      	nop
 8007d6c:	bf00      	nop
 8007d6e:	e7fd      	b.n	8007d6c <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	699a      	ldr	r2, [r3, #24]
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	18d1      	adds	r1, r2, r3
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	69fa      	ldr	r2, [r7, #28]
 8007d7c:	6a38      	ldr	r0, [r7, #32]
 8007d7e:	f7ff ff05 	bl	8007b8c <prvInsertTimerInActiveList>
                        break;
 8007d82:	e017      	b.n	8007db4 <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d103      	bne.n	8007d9a <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 8007d92:	6a38      	ldr	r0, [r7, #32]
 8007d94:	f000 fc06 	bl	80085a4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007d98:	e00c      	b.n	8007db4 <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007da0:	f023 0301 	bic.w	r3, r3, #1
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007dac:	e002      	b.n	8007db4 <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007dae:	bf00      	nop
 8007db0:	e000      	b.n	8007db4 <prvProcessReceivedCommands+0x1a4>
                        break;
 8007db2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8007db4:	4b07      	ldr	r3, [pc, #28]	@ (8007dd4 <prvProcessReceivedCommands+0x1c4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	1d39      	adds	r1, r7, #4
 8007dba:	2200      	movs	r2, #0
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe f823 	bl	8005e08 <xQueueReceive>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f47f af2d 	bne.w	8007c24 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8007dca:	bf00      	nop
 8007dcc:	bf00      	nop
 8007dce:	3728      	adds	r7, #40	@ 0x28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20001390 	.word	0x20001390

08007dd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dde:	e009      	b.n	8007df4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007de0:	4b0e      	ldr	r3, [pc, #56]	@ (8007e1c <prvSwitchTimerLists+0x44>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007dea:	f04f 31ff 	mov.w	r1, #4294967295
 8007dee:	6838      	ldr	r0, [r7, #0]
 8007df0:	f7ff fdf8 	bl	80079e4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007df4:	4b09      	ldr	r3, [pc, #36]	@ (8007e1c <prvSwitchTimerLists+0x44>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1f0      	bne.n	8007de0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007dfe:	4b07      	ldr	r3, [pc, #28]	@ (8007e1c <prvSwitchTimerLists+0x44>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8007e04:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <prvSwitchTimerLists+0x48>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a04      	ldr	r2, [pc, #16]	@ (8007e1c <prvSwitchTimerLists+0x44>)
 8007e0a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007e0c:	4a04      	ldr	r2, [pc, #16]	@ (8007e20 <prvSwitchTimerLists+0x48>)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6013      	str	r3, [r2, #0]
    }
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20001388 	.word	0x20001388
 8007e20:	2000138c 	.word	0x2000138c

08007e24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007e2a:	f000 f97d 	bl	8008128 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007e2e:	4b15      	ldr	r3, [pc, #84]	@ (8007e84 <prvCheckForValidListAndQueue+0x60>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d120      	bne.n	8007e78 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8007e36:	4814      	ldr	r0, [pc, #80]	@ (8007e88 <prvCheckForValidListAndQueue+0x64>)
 8007e38:	f7fd fc00 	bl	800563c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007e3c:	4813      	ldr	r0, [pc, #76]	@ (8007e8c <prvCheckForValidListAndQueue+0x68>)
 8007e3e:	f7fd fbfd 	bl	800563c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007e42:	4b13      	ldr	r3, [pc, #76]	@ (8007e90 <prvCheckForValidListAndQueue+0x6c>)
 8007e44:	4a10      	ldr	r2, [pc, #64]	@ (8007e88 <prvCheckForValidListAndQueue+0x64>)
 8007e46:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007e48:	4b12      	ldr	r3, [pc, #72]	@ (8007e94 <prvCheckForValidListAndQueue+0x70>)
 8007e4a:	4a10      	ldr	r2, [pc, #64]	@ (8007e8c <prvCheckForValidListAndQueue+0x68>)
 8007e4c:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e4e:	2300      	movs	r3, #0
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	4b11      	ldr	r3, [pc, #68]	@ (8007e98 <prvCheckForValidListAndQueue+0x74>)
 8007e54:	4a11      	ldr	r2, [pc, #68]	@ (8007e9c <prvCheckForValidListAndQueue+0x78>)
 8007e56:	2110      	movs	r1, #16
 8007e58:	200a      	movs	r0, #10
 8007e5a:	f7fd fd21 	bl	80058a0 <xQueueGenericCreateStatic>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	4a08      	ldr	r2, [pc, #32]	@ (8007e84 <prvCheckForValidListAndQueue+0x60>)
 8007e62:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007e64:	4b07      	ldr	r3, [pc, #28]	@ (8007e84 <prvCheckForValidListAndQueue+0x60>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d005      	beq.n	8007e78 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e6c:	4b05      	ldr	r3, [pc, #20]	@ (8007e84 <prvCheckForValidListAndQueue+0x60>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	490b      	ldr	r1, [pc, #44]	@ (8007ea0 <prvCheckForValidListAndQueue+0x7c>)
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fe fa66 	bl	8006344 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007e78:	f000 f986 	bl	8008188 <vPortExitCritical>
    }
 8007e7c:	bf00      	nop
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20001390 	.word	0x20001390
 8007e88:	20001360 	.word	0x20001360
 8007e8c:	20001374 	.word	0x20001374
 8007e90:	20001388 	.word	0x20001388
 8007e94:	2000138c 	.word	0x2000138c
 8007e98:	2000143c 	.word	0x2000143c
 8007e9c:	2000139c 	.word	0x2000139c
 8007ea0:	0800ac1c 	.word	0x0800ac1c

08007ea4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3b04      	subs	r3, #4
 8007eb4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ebc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3b04      	subs	r3, #4
 8007ec2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f023 0201 	bic.w	r2, r3, #1
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007ed4:	4a08      	ldr	r2, [pc, #32]	@ (8007ef8 <pxPortInitialiseStack+0x54>)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3b14      	subs	r3, #20
 8007ede:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3b20      	subs	r3, #32
 8007eea:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007eec:	68fb      	ldr	r3, [r7, #12]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bc80      	pop	{r7}
 8007ef6:	4770      	bx	lr
 8007ef8:	08007efd 	.word	0x08007efd

08007efc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007f06:	4b12      	ldr	r3, [pc, #72]	@ (8007f50 <prvTaskExitError+0x54>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0e:	d00b      	beq.n	8007f28 <prvTaskExitError+0x2c>
    __asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	60fb      	str	r3, [r7, #12]
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <prvTaskExitError+0x28>
    __asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	60bb      	str	r3, [r7, #8]
}
 8007f3a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007f3c:	bf00      	nop
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0fc      	beq.n	8007f3e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr
 8007f50:	2000000c 	.word	0x2000000c
	...

08007f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007f60:	4b07      	ldr	r3, [pc, #28]	@ (8007f80 <pxCurrentTCBConst2>)
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	6808      	ldr	r0, [r1, #0]
 8007f66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f6a:	f380 8809 	msr	PSP, r0
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8811 	msr	BASEPRI, r0
 8007f7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007f7e:	4770      	bx	lr

08007f80 <pxCurrentTCBConst2>:
 8007f80:	20000e60 	.word	0x20000e60
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop

08007f88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8007f88:	4806      	ldr	r0, [pc, #24]	@ (8007fa4 <prvPortStartFirstTask+0x1c>)
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	6800      	ldr	r0, [r0, #0]
 8007f8e:	f380 8808 	msr	MSP, r0
 8007f92:	b662      	cpsie	i
 8007f94:	b661      	cpsie	f
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	df00      	svc	0
 8007fa0:	bf00      	nop
 8007fa2:	0000      	.short	0x0000
 8007fa4:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop

08007fac <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08a      	sub	sp, #40	@ 0x28
 8007fb0:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8007fb2:	4b54      	ldr	r3, [pc, #336]	@ (8008104 <xPortStartScheduler+0x158>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fba:	332c      	adds	r3, #44	@ 0x2c
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a52      	ldr	r2, [pc, #328]	@ (8008108 <xPortStartScheduler+0x15c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00b      	beq.n	8007fdc <xPortStartScheduler+0x30>
    __asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	61bb      	str	r3, [r7, #24]
}
 8007fd6:	bf00      	nop
 8007fd8:	bf00      	nop
 8007fda:	e7fd      	b.n	8007fd8 <xPortStartScheduler+0x2c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fde:	3338      	adds	r3, #56	@ 0x38
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a4a      	ldr	r2, [pc, #296]	@ (800810c <xPortStartScheduler+0x160>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00b      	beq.n	8008000 <xPortStartScheduler+0x54>
    __asm volatile
 8007fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	61fb      	str	r3, [r7, #28]
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	e7fd      	b.n	8007ffc <xPortStartScheduler+0x50>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008004:	4b42      	ldr	r3, [pc, #264]	@ (8008110 <xPortStartScheduler+0x164>)
 8008006:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	b2db      	uxtb	r3, r3
 800800e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	22ff      	movs	r2, #255	@ 0xff
 8008014:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800801e:	79fb      	ldrb	r3, [r7, #7]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008026:	b2da      	uxtb	r2, r3
 8008028:	4b3a      	ldr	r3, [pc, #232]	@ (8008114 <xPortStartScheduler+0x168>)
 800802a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800802c:	4b39      	ldr	r3, [pc, #228]	@ (8008114 <xPortStartScheduler+0x168>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10b      	bne.n	800804c <xPortStartScheduler+0xa0>
    __asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	617b      	str	r3, [r7, #20]
}
 8008046:	bf00      	nop
 8008048:	bf00      	nop
 800804a:	e7fd      	b.n	8008048 <xPortStartScheduler+0x9c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	b2db      	uxtb	r3, r3
 8008050:	43db      	mvns	r3, r3
 8008052:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008056:	2b00      	cmp	r3, #0
 8008058:	d013      	beq.n	8008082 <xPortStartScheduler+0xd6>
    __asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	613b      	str	r3, [r7, #16]
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	e7fd      	b.n	800806e <xPortStartScheduler+0xc2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	3301      	adds	r3, #1
 8008076:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	b2db      	uxtb	r3, r3
 8008080:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008082:	79fb      	ldrb	r3, [r7, #7]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800808a:	2b80      	cmp	r3, #128	@ 0x80
 800808c:	d0f1      	beq.n	8008072 <xPortStartScheduler+0xc6>
        }

        if( ulImplementedPrioBits == 8 )
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2b08      	cmp	r3, #8
 8008092:	d103      	bne.n	800809c <xPortStartScheduler+0xf0>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8008094:	4b20      	ldr	r3, [pc, #128]	@ (8008118 <xPortStartScheduler+0x16c>)
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	e004      	b.n	80080a6 <xPortStartScheduler+0xfa>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f1c3 0307 	rsb	r3, r3, #7
 80080a2:	4a1d      	ldr	r2, [pc, #116]	@ (8008118 <xPortStartScheduler+0x16c>)
 80080a4:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080a6:	4b1c      	ldr	r3, [pc, #112]	@ (8008118 <xPortStartScheduler+0x16c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	4a1a      	ldr	r2, [pc, #104]	@ (8008118 <xPortStartScheduler+0x16c>)
 80080ae:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080b0:	4b19      	ldr	r3, [pc, #100]	@ (8008118 <xPortStartScheduler+0x16c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080b8:	4a17      	ldr	r2, [pc, #92]	@ (8008118 <xPortStartScheduler+0x16c>)
 80080ba:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80080c4:	4b15      	ldr	r3, [pc, #84]	@ (800811c <xPortStartScheduler+0x170>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a14      	ldr	r2, [pc, #80]	@ (800811c <xPortStartScheduler+0x170>)
 80080ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ce:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80080d0:	4b12      	ldr	r3, [pc, #72]	@ (800811c <xPortStartScheduler+0x170>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a11      	ldr	r2, [pc, #68]	@ (800811c <xPortStartScheduler+0x170>)
 80080d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080da:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80080dc:	4b10      	ldr	r3, [pc, #64]	@ (8008120 <xPortStartScheduler+0x174>)
 80080de:	2200      	movs	r2, #0
 80080e0:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80080e2:	f000 f8cb 	bl	800827c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80080e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008124 <xPortStartScheduler+0x178>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80080ec:	f7ff ff4c 	bl	8007f88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80080f0:	f7fe ff66 	bl	8006fc0 <vTaskSwitchContext>
    prvTaskExitError();
 80080f4:	f7ff ff02 	bl	8007efc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3728      	adds	r7, #40	@ 0x28
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	e000ed08 	.word	0xe000ed08
 8008108:	08007f61 	.word	0x08007f61
 800810c:	080081e1 	.word	0x080081e1
 8008110:	e000e400 	.word	0xe000e400
 8008114:	2000148c 	.word	0x2000148c
 8008118:	20001490 	.word	0x20001490
 800811c:	e000ed20 	.word	0xe000ed20
 8008120:	e000ed1c 	.word	0xe000ed1c
 8008124:	2000000c 	.word	0x2000000c

08008128 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
    __asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	607b      	str	r3, [r7, #4]
}
 8008140:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008142:	4b0f      	ldr	r3, [pc, #60]	@ (8008180 <vPortEnterCritical+0x58>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3301      	adds	r3, #1
 8008148:	4a0d      	ldr	r2, [pc, #52]	@ (8008180 <vPortEnterCritical+0x58>)
 800814a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800814c:	4b0c      	ldr	r3, [pc, #48]	@ (8008180 <vPortEnterCritical+0x58>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d110      	bne.n	8008176 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008154:	4b0b      	ldr	r3, [pc, #44]	@ (8008184 <vPortEnterCritical+0x5c>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00b      	beq.n	8008176 <vPortEnterCritical+0x4e>
    __asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	603b      	str	r3, [r7, #0]
}
 8008170:	bf00      	nop
 8008172:	bf00      	nop
 8008174:	e7fd      	b.n	8008172 <vPortEnterCritical+0x4a>
    }
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	bc80      	pop	{r7}
 800817e:	4770      	bx	lr
 8008180:	2000000c 	.word	0x2000000c
 8008184:	e000ed04 	.word	0xe000ed04

08008188 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800818e:	4b12      	ldr	r3, [pc, #72]	@ (80081d8 <vPortExitCritical+0x50>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10b      	bne.n	80081ae <vPortExitCritical+0x26>
    __asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	607b      	str	r3, [r7, #4]
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	e7fd      	b.n	80081aa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80081ae:	4b0a      	ldr	r3, [pc, #40]	@ (80081d8 <vPortExitCritical+0x50>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	4a08      	ldr	r2, [pc, #32]	@ (80081d8 <vPortExitCritical+0x50>)
 80081b6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80081b8:	4b07      	ldr	r3, [pc, #28]	@ (80081d8 <vPortExitCritical+0x50>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d105      	bne.n	80081cc <vPortExitCritical+0x44>
 80081c0:	2300      	movs	r3, #0
 80081c2:	603b      	str	r3, [r7, #0]
    __asm volatile
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	f383 8811 	msr	BASEPRI, r3
}
 80081ca:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bc80      	pop	{r7}
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	2000000c 	.word	0x2000000c
 80081dc:	00000000 	.word	0x00000000

080081e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80081e0:	f3ef 8009 	mrs	r0, PSP
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008220 <pxCurrentTCBConst>)
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80081f0:	6010      	str	r0, [r2, #0]
 80081f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80081f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081fa:	f380 8811 	msr	BASEPRI, r0
 80081fe:	f7fe fedf 	bl	8006fc0 <vTaskSwitchContext>
 8008202:	f04f 0000 	mov.w	r0, #0
 8008206:	f380 8811 	msr	BASEPRI, r0
 800820a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800820e:	6819      	ldr	r1, [r3, #0]
 8008210:	6808      	ldr	r0, [r1, #0]
 8008212:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008216:	f380 8809 	msr	PSP, r0
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	4770      	bx	lr

08008220 <pxCurrentTCBConst>:
 8008220:	20000e60 	.word	0x20000e60
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop

08008228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
    __asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	607b      	str	r3, [r7, #4]
}
 8008240:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8008242:	f001 fc53 	bl	8009aec <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008246:	f7fe fd97 	bl	8006d78 <xTaskIncrementTick>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d006      	beq.n	800825e <xPortSysTickHandler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8008250:	f001 fcaa 	bl	8009ba8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008254:	4b08      	ldr	r3, [pc, #32]	@ (8008278 <xPortSysTickHandler+0x50>)
 8008256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	e001      	b.n	8008262 <xPortSysTickHandler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800825e:	f001 fc87 	bl	8009b70 <SEGGER_SYSVIEW_RecordExitISR>
 8008262:	2300      	movs	r3, #0
 8008264:	603b      	str	r3, [r7, #0]
    __asm volatile
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	f383 8811 	msr	BASEPRI, r3
}
 800826c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800826e:	bf00      	nop
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008280:	4b0a      	ldr	r3, [pc, #40]	@ (80082ac <vPortSetupTimerInterrupt+0x30>)
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008286:	4b0a      	ldr	r3, [pc, #40]	@ (80082b0 <vPortSetupTimerInterrupt+0x34>)
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800828c:	4b09      	ldr	r3, [pc, #36]	@ (80082b4 <vPortSetupTimerInterrupt+0x38>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a09      	ldr	r2, [pc, #36]	@ (80082b8 <vPortSetupTimerInterrupt+0x3c>)
 8008292:	fba2 2303 	umull	r2, r3, r2, r3
 8008296:	099b      	lsrs	r3, r3, #6
 8008298:	4a08      	ldr	r2, [pc, #32]	@ (80082bc <vPortSetupTimerInterrupt+0x40>)
 800829a:	3b01      	subs	r3, #1
 800829c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800829e:	4b03      	ldr	r3, [pc, #12]	@ (80082ac <vPortSetupTimerInterrupt+0x30>)
 80082a0:	2207      	movs	r2, #7
 80082a2:	601a      	str	r2, [r3, #0]
}
 80082a4:	bf00      	nop
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr
 80082ac:	e000e010 	.word	0xe000e010
 80082b0:	e000e018 	.word	0xe000e018
 80082b4:	20000000 	.word	0x20000000
 80082b8:	10624dd3 	.word	0x10624dd3
 80082bc:	e000e014 	.word	0xe000e014

080082c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80082c6:	f3ef 8305 	mrs	r3, IPSR
 80082ca:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b0f      	cmp	r3, #15
 80082d0:	d915      	bls.n	80082fe <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082d2:	4a17      	ldr	r2, [pc, #92]	@ (8008330 <vPortValidateInterruptPriority+0x70>)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	4413      	add	r3, r2
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082dc:	4b15      	ldr	r3, [pc, #84]	@ (8008334 <vPortValidateInterruptPriority+0x74>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	7afa      	ldrb	r2, [r7, #11]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d20b      	bcs.n	80082fe <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	607b      	str	r3, [r7, #4]
}
 80082f8:	bf00      	nop
 80082fa:	bf00      	nop
 80082fc:	e7fd      	b.n	80082fa <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008338 <vPortValidateInterruptPriority+0x78>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008306:	4b0d      	ldr	r3, [pc, #52]	@ (800833c <vPortValidateInterruptPriority+0x7c>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d90b      	bls.n	8008326 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	603b      	str	r3, [r7, #0]
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	e7fd      	b.n	8008322 <vPortValidateInterruptPriority+0x62>
    }
 8008326:	bf00      	nop
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	bc80      	pop	{r7}
 800832e:	4770      	bx	lr
 8008330:	e000e3f0 	.word	0xe000e3f0
 8008334:	2000148c 	.word	0x2000148c
 8008338:	e000ed0c 	.word	0xe000ed0c
 800833c:	20001490 	.word	0x20001490

08008340 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08e      	sub	sp, #56	@ 0x38
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008348:	2300      	movs	r3, #0
 800834a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d022      	beq.n	8008398 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8008352:	2308      	movs	r3, #8
 8008354:	43db      	mvns	r3, r3
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	429a      	cmp	r2, r3
 800835a:	d81b      	bhi.n	8008394 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800835c:	2208      	movs	r2, #8
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4413      	add	r3, r2
 8008362:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f003 0307 	and.w	r3, r3, #7
 800836a:	2b00      	cmp	r3, #0
 800836c:	d014      	beq.n	8008398 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f003 0307 	and.w	r3, r3, #7
 8008374:	f1c3 0308 	rsb	r3, r3, #8
 8008378:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	43db      	mvns	r3, r3
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	429a      	cmp	r2, r3
 8008382:	d804      	bhi.n	800838e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008388:	4413      	add	r3, r2
 800838a:	607b      	str	r3, [r7, #4]
 800838c:	e004      	b.n	8008398 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	607b      	str	r3, [r7, #4]
 8008392:	e001      	b.n	8008398 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8008398:	f7fe fb98 	bl	8006acc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800839c:	4b7a      	ldr	r3, [pc, #488]	@ (8008588 <pvPortMalloc+0x248>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80083a4:	f000 f974 	bl	8008690 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f2c0 80d3 	blt.w	8008556 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 80cf 	beq.w	8008556 <pvPortMalloc+0x216>
 80083b8:	4b74      	ldr	r3, [pc, #464]	@ (800858c <pvPortMalloc+0x24c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	429a      	cmp	r2, r3
 80083c0:	f200 80c9 	bhi.w	8008556 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80083c4:	4b72      	ldr	r3, [pc, #456]	@ (8008590 <pvPortMalloc+0x250>)
 80083c6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80083c8:	4b71      	ldr	r3, [pc, #452]	@ (8008590 <pvPortMalloc+0x250>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80083ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d0:	4a70      	ldr	r2, [pc, #448]	@ (8008594 <pvPortMalloc+0x254>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d305      	bcc.n	80083e2 <pvPortMalloc+0xa2>
 80083d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d8:	4a6f      	ldr	r2, [pc, #444]	@ (8008598 <pvPortMalloc+0x258>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d801      	bhi.n	80083e2 <pvPortMalloc+0xa2>
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <pvPortMalloc+0xa4>
 80083e2:	2300      	movs	r3, #0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d129      	bne.n	800843c <pvPortMalloc+0xfc>
    __asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	623b      	str	r3, [r7, #32]
}
 80083fa:	bf00      	nop
 80083fc:	bf00      	nop
 80083fe:	e7fd      	b.n	80083fc <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8008400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008402:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8008404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800840a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800840c:	4a61      	ldr	r2, [pc, #388]	@ (8008594 <pvPortMalloc+0x254>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d305      	bcc.n	800841e <pvPortMalloc+0xde>
 8008412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008414:	4a60      	ldr	r2, [pc, #384]	@ (8008598 <pvPortMalloc+0x258>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d801      	bhi.n	800841e <pvPortMalloc+0xde>
 800841a:	2301      	movs	r3, #1
 800841c:	e000      	b.n	8008420 <pvPortMalloc+0xe0>
 800841e:	2300      	movs	r3, #0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10b      	bne.n	800843c <pvPortMalloc+0xfc>
    __asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	61fb      	str	r3, [r7, #28]
}
 8008436:	bf00      	nop
 8008438:	bf00      	nop
 800843a:	e7fd      	b.n	8008438 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800843c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	429a      	cmp	r2, r3
 8008444:	d903      	bls.n	800844e <pvPortMalloc+0x10e>
 8008446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1d8      	bne.n	8008400 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800844e:	4b4e      	ldr	r3, [pc, #312]	@ (8008588 <pvPortMalloc+0x248>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008454:	429a      	cmp	r2, r3
 8008456:	d07e      	beq.n	8008556 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8008458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2208      	movs	r2, #8
 800845e:	4413      	add	r3, r2
 8008460:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8008462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008464:	4a4b      	ldr	r2, [pc, #300]	@ (8008594 <pvPortMalloc+0x254>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d305      	bcc.n	8008476 <pvPortMalloc+0x136>
 800846a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846c:	4a4a      	ldr	r2, [pc, #296]	@ (8008598 <pvPortMalloc+0x258>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d801      	bhi.n	8008476 <pvPortMalloc+0x136>
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <pvPortMalloc+0x138>
 8008476:	2300      	movs	r3, #0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10b      	bne.n	8008494 <pvPortMalloc+0x154>
    __asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	61bb      	str	r3, [r7, #24]
}
 800848e:	bf00      	nop
 8008490:	bf00      	nop
 8008492:	e7fd      	b.n	8008490 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800849c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d90b      	bls.n	80084be <pvPortMalloc+0x17e>
    __asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	617b      	str	r3, [r7, #20]
}
 80084b8:	bf00      	nop
 80084ba:	bf00      	nop
 80084bc:	e7fd      	b.n	80084ba <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c0:	685a      	ldr	r2, [r3, #4]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	1ad2      	subs	r2, r2, r3
 80084c6:	2308      	movs	r3, #8
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d924      	bls.n	8008518 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4413      	add	r3, r2
 80084d4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	f003 0307 	and.w	r3, r3, #7
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <pvPortMalloc+0x1b8>
    __asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	613b      	str	r3, [r7, #16]
}
 80084f2:	bf00      	nop
 80084f4:	bf00      	nop
 80084f6:	e7fd      	b.n	80084f4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	1ad2      	subs	r2, r2, r3
 8008500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008502:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008510:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8008512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008516:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008518:	4b1c      	ldr	r3, [pc, #112]	@ (800858c <pvPortMalloc+0x24c>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	4a1a      	ldr	r2, [pc, #104]	@ (800858c <pvPortMalloc+0x24c>)
 8008524:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008526:	4b19      	ldr	r3, [pc, #100]	@ (800858c <pvPortMalloc+0x24c>)
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	4b1c      	ldr	r3, [pc, #112]	@ (800859c <pvPortMalloc+0x25c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	429a      	cmp	r2, r3
 8008530:	d203      	bcs.n	800853a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008532:	4b16      	ldr	r3, [pc, #88]	@ (800858c <pvPortMalloc+0x24c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a19      	ldr	r2, [pc, #100]	@ (800859c <pvPortMalloc+0x25c>)
 8008538:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800853a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008544:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800854c:	4b14      	ldr	r3, [pc, #80]	@ (80085a0 <pvPortMalloc+0x260>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3301      	adds	r3, #1
 8008552:	4a13      	ldr	r2, [pc, #76]	@ (80085a0 <pvPortMalloc+0x260>)
 8008554:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008556:	f7fe fac7 	bl	8006ae8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800855a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855c:	f003 0307 	and.w	r3, r3, #7
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <pvPortMalloc+0x23c>
    __asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	60fb      	str	r3, [r7, #12]
}
 8008576:	bf00      	nop
 8008578:	bf00      	nop
 800857a:	e7fd      	b.n	8008578 <pvPortMalloc+0x238>
    return pvReturn;
 800857c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800857e:	4618      	mov	r0, r3
 8008580:	3738      	adds	r7, #56	@ 0x38
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20003bac 	.word	0x20003bac
 800858c:	20003bb0 	.word	0x20003bb0
 8008590:	20003ba4 	.word	0x20003ba4
 8008594:	20001494 	.word	0x20001494
 8008598:	20003ba3 	.word	0x20003ba3
 800859c:	20003bb4 	.word	0x20003bb4
 80085a0:	20003bb8 	.word	0x20003bb8

080085a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d060      	beq.n	8008678 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80085b6:	2308      	movs	r3, #8
 80085b8:	425b      	negs	r3, r3
 80085ba:	69fa      	ldr	r2, [r7, #28]
 80085bc:	4413      	add	r3, r2
 80085be:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	4a2e      	ldr	r2, [pc, #184]	@ (8008680 <vPortFree+0xdc>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d305      	bcc.n	80085d8 <vPortFree+0x34>
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	4a2d      	ldr	r2, [pc, #180]	@ (8008684 <vPortFree+0xe0>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d801      	bhi.n	80085d8 <vPortFree+0x34>
 80085d4:	2301      	movs	r3, #1
 80085d6:	e000      	b.n	80085da <vPortFree+0x36>
 80085d8:	2300      	movs	r3, #0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10b      	bne.n	80085f6 <vPortFree+0x52>
    __asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	617b      	str	r3, [r7, #20]
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	e7fd      	b.n	80085f2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	db0b      	blt.n	8008616 <vPortFree+0x72>
    __asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	613b      	str	r3, [r7, #16]
}
 8008610:	bf00      	nop
 8008612:	bf00      	nop
 8008614:	e7fd      	b.n	8008612 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00b      	beq.n	8008636 <vPortFree+0x92>
    __asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	60fb      	str	r3, [r7, #12]
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	e7fd      	b.n	8008632 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	da1c      	bge.n	8008678 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d118      	bne.n	8008678 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8008652:	f7fe fa3b 	bl	8006acc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	4b0b      	ldr	r3, [pc, #44]	@ (8008688 <vPortFree+0xe4>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4413      	add	r3, r2
 8008660:	4a09      	ldr	r2, [pc, #36]	@ (8008688 <vPortFree+0xe4>)
 8008662:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008664:	69b8      	ldr	r0, [r7, #24]
 8008666:	f000 f86d 	bl	8008744 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800866a:	4b08      	ldr	r3, [pc, #32]	@ (800868c <vPortFree+0xe8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3301      	adds	r3, #1
 8008670:	4a06      	ldr	r2, [pc, #24]	@ (800868c <vPortFree+0xe8>)
 8008672:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008674:	f7fe fa38 	bl	8006ae8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008678:	bf00      	nop
 800867a:	3720      	adds	r7, #32
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	20001494 	.word	0x20001494
 8008684:	20003ba3 	.word	0x20003ba3
 8008688:	20003bb0 	.word	0x20003bb0
 800868c:	20003bbc 	.word	0x20003bbc

08008690 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008696:	f242 7310 	movw	r3, #10000	@ 0x2710
 800869a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800869c:	4b24      	ldr	r3, [pc, #144]	@ (8008730 <prvHeapInit+0xa0>)
 800869e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00c      	beq.n	80086c4 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3307      	adds	r3, #7
 80086ae:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0307 	bic.w	r3, r3, #7
 80086b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	4a1c      	ldr	r2, [pc, #112]	@ (8008730 <prvHeapInit+0xa0>)
 80086c0:	4413      	add	r3, r2
 80086c2:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008734 <prvHeapInit+0xa4>)
 80086c8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80086ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008734 <prvHeapInit+0xa4>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	4413      	add	r3, r2
 80086d6:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80086d8:	2208      	movs	r2, #8
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	1a9b      	subs	r3, r3, r2
 80086de:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f023 0307 	bic.w	r3, r3, #7
 80086e6:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a13      	ldr	r2, [pc, #76]	@ (8008738 <prvHeapInit+0xa8>)
 80086ec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80086ee:	4b12      	ldr	r3, [pc, #72]	@ (8008738 <prvHeapInit+0xa8>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2200      	movs	r2, #0
 80086f4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80086f6:	4b10      	ldr	r3, [pc, #64]	@ (8008738 <prvHeapInit+0xa8>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	1ad2      	subs	r2, r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800870c:	4b0a      	ldr	r3, [pc, #40]	@ (8008738 <prvHeapInit+0xa8>)
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	4a08      	ldr	r2, [pc, #32]	@ (800873c <prvHeapInit+0xac>)
 800871a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	4a07      	ldr	r2, [pc, #28]	@ (8008740 <prvHeapInit+0xb0>)
 8008722:	6013      	str	r3, [r2, #0]
}
 8008724:	bf00      	nop
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	bc80      	pop	{r7}
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20001494 	.word	0x20001494
 8008734:	20003ba4 	.word	0x20003ba4
 8008738:	20003bac 	.word	0x20003bac
 800873c:	20003bb4 	.word	0x20003bb4
 8008740:	20003bb0 	.word	0x20003bb0

08008744 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800874c:	4b36      	ldr	r3, [pc, #216]	@ (8008828 <prvInsertBlockIntoFreeList+0xe4>)
 800874e:	617b      	str	r3, [r7, #20]
 8008750:	e002      	b.n	8008758 <prvInsertBlockIntoFreeList+0x14>
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	617b      	str	r3, [r7, #20]
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	429a      	cmp	r2, r3
 8008760:	d8f7      	bhi.n	8008752 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	4a30      	ldr	r2, [pc, #192]	@ (8008828 <prvInsertBlockIntoFreeList+0xe4>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d018      	beq.n	800879c <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	4a2f      	ldr	r2, [pc, #188]	@ (800882c <prvInsertBlockIntoFreeList+0xe8>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d305      	bcc.n	800877e <prvInsertBlockIntoFreeList+0x3a>
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	4a2e      	ldr	r2, [pc, #184]	@ (8008830 <prvInsertBlockIntoFreeList+0xec>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d801      	bhi.n	800877e <prvInsertBlockIntoFreeList+0x3a>
 800877a:	2301      	movs	r3, #1
 800877c:	e000      	b.n	8008780 <prvInsertBlockIntoFreeList+0x3c>
 800877e:	2300      	movs	r3, #0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10b      	bne.n	800879c <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	60fb      	str	r3, [r7, #12]
}
 8008796:	bf00      	nop
 8008798:	bf00      	nop
 800879a:	e7fd      	b.n	8008798 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4413      	add	r3, r2
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d108      	bne.n	80087c0 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	441a      	add	r2, r3
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	441a      	add	r2, r3
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d118      	bne.n	8008806 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	4b16      	ldr	r3, [pc, #88]	@ (8008834 <prvInsertBlockIntoFreeList+0xf0>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d00d      	beq.n	80087fc <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	441a      	add	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	e008      	b.n	800880e <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80087fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008834 <prvInsertBlockIntoFreeList+0xf0>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	e003      	b.n	800880e <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	429a      	cmp	r2, r3
 8008814:	d002      	beq.n	800881c <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800881c:	bf00      	nop
 800881e:	371c      	adds	r7, #28
 8008820:	46bd      	mov	sp, r7
 8008822:	bc80      	pop	{r7}
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	20003ba4 	.word	0x20003ba4
 800882c:	20001494 	.word	0x20001494
 8008830:	20003ba3 	.word	0x20003ba3
 8008834:	20003bac 	.word	0x20003bac

08008838 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800883c:	4803      	ldr	r0, [pc, #12]	@ (800884c <_cbSendSystemDesc+0x14>)
 800883e:	f001 f8ff 	bl	8009a40 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8008842:	4803      	ldr	r0, [pc, #12]	@ (8008850 <_cbSendSystemDesc+0x18>)
 8008844:	f001 f8fc 	bl	8009a40 <SEGGER_SYSVIEW_SendSysDesc>
}
 8008848:	bf00      	nop
 800884a:	bd80      	pop	{r7, pc}
 800884c:	0800ac24 	.word	0x0800ac24
 8008850:	0800ac58 	.word	0x0800ac58

08008854 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8008854:	b580      	push	{r7, lr}
 8008856:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8008858:	4b06      	ldr	r3, [pc, #24]	@ (8008874 <SEGGER_SYSVIEW_Conf+0x20>)
 800885a:	6818      	ldr	r0, [r3, #0]
 800885c:	4b05      	ldr	r3, [pc, #20]	@ (8008874 <SEGGER_SYSVIEW_Conf+0x20>)
 800885e:	6819      	ldr	r1, [r3, #0]
 8008860:	4b05      	ldr	r3, [pc, #20]	@ (8008878 <SEGGER_SYSVIEW_Conf+0x24>)
 8008862:	4a06      	ldr	r2, [pc, #24]	@ (800887c <SEGGER_SYSVIEW_Conf+0x28>)
 8008864:	f000 fd74 	bl	8009350 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008868:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 800886c:	f000 fdb4 	bl	80093d8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8008870:	bf00      	nop
 8008872:	bd80      	pop	{r7, pc}
 8008874:	20000000 	.word	0x20000000
 8008878:	08008839 	.word	0x08008839
 800887c:	0800ad6c 	.word	0x0800ad6c

08008880 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8008880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008882:	b085      	sub	sp, #20
 8008884:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008886:	2300      	movs	r3, #0
 8008888:	607b      	str	r3, [r7, #4]
 800888a:	e048      	b.n	800891e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800888c:	4929      	ldr	r1, [pc, #164]	@ (8008934 <_cbSendTaskList+0xb4>)
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	4613      	mov	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	440b      	add	r3, r1
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe fe85 	bl	80075ac <uxTaskGetStackHighWaterMark>
 80088a2:	4601      	mov	r1, r0
 80088a4:	4823      	ldr	r0, [pc, #140]	@ (8008934 <_cbSendTaskList+0xb4>)
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4403      	add	r3, r0
 80088b2:	3310      	adds	r3, #16
 80088b4:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80088b6:	491f      	ldr	r1, [pc, #124]	@ (8008934 <_cbSendTaskList+0xb4>)
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	440b      	add	r3, r1
 80088c4:	6818      	ldr	r0, [r3, #0]
 80088c6:	491b      	ldr	r1, [pc, #108]	@ (8008934 <_cbSendTaskList+0xb4>)
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	4613      	mov	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	3304      	adds	r3, #4
 80088d6:	6819      	ldr	r1, [r3, #0]
 80088d8:	4c16      	ldr	r4, [pc, #88]	@ (8008934 <_cbSendTaskList+0xb4>)
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	4613      	mov	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	4423      	add	r3, r4
 80088e6:	3308      	adds	r3, #8
 80088e8:	681c      	ldr	r4, [r3, #0]
 80088ea:	4d12      	ldr	r5, [pc, #72]	@ (8008934 <_cbSendTaskList+0xb4>)
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	4613      	mov	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	442b      	add	r3, r5
 80088f8:	330c      	adds	r3, #12
 80088fa:	681d      	ldr	r5, [r3, #0]
 80088fc:	4e0d      	ldr	r6, [pc, #52]	@ (8008934 <_cbSendTaskList+0xb4>)
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4433      	add	r3, r6
 800890a:	3310      	adds	r3, #16
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	462b      	mov	r3, r5
 8008912:	4622      	mov	r2, r4
 8008914:	f000 f8be 	bl	8008a94 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3301      	adds	r3, #1
 800891c:	607b      	str	r3, [r7, #4]
 800891e:	4b06      	ldr	r3, [pc, #24]	@ (8008938 <_cbSendTaskList+0xb8>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	429a      	cmp	r2, r3
 8008926:	d3b1      	bcc.n	800888c <_cbSendTaskList+0xc>
  }
}
 8008928:	bf00      	nop
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008932:	bf00      	nop
 8008934:	20003bc0 	.word	0x20003bc0
 8008938:	20003c60 	.word	0x20003c60

0800893c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800893c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008944:	f7fe f9f4 	bl	8006d30 <xTaskGetTickCountFromISR>
 8008948:	4603      	mov	r3, r0
 800894a:	2200      	movs	r2, #0
 800894c:	469a      	mov	sl, r3
 800894e:	4693      	mov	fp, r2
 8008950:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008954:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	f04f 0a00 	mov.w	sl, #0
 8008960:	f04f 0b00 	mov.w	fp, #0
 8008964:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008968:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800896c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008970:	4652      	mov	r2, sl
 8008972:	465b      	mov	r3, fp
 8008974:	1a14      	subs	r4, r2, r0
 8008976:	eb63 0501 	sbc.w	r5, r3, r1
 800897a:	f04f 0200 	mov.w	r2, #0
 800897e:	f04f 0300 	mov.w	r3, #0
 8008982:	00ab      	lsls	r3, r5, #2
 8008984:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008988:	00a2      	lsls	r2, r4, #2
 800898a:	4614      	mov	r4, r2
 800898c:	461d      	mov	r5, r3
 800898e:	eb14 0800 	adds.w	r8, r4, r0
 8008992:	eb45 0901 	adc.w	r9, r5, r1
 8008996:	f04f 0200 	mov.w	r2, #0
 800899a:	f04f 0300 	mov.w	r3, #0
 800899e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80089a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089aa:	4690      	mov	r8, r2
 80089ac:	4699      	mov	r9, r3
 80089ae:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80089b2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80089b6:	4610      	mov	r0, r2
 80089b8:	4619      	mov	r1, r3
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080089c4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80089d2:	2205      	movs	r2, #5
 80089d4:	492b      	ldr	r1, [pc, #172]	@ (8008a84 <SYSVIEW_AddTask+0xc0>)
 80089d6:	68b8      	ldr	r0, [r7, #8]
 80089d8:	f001 fc4c 	bl	800a274 <memcmp>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d04b      	beq.n	8008a7a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80089e2:	4b29      	ldr	r3, [pc, #164]	@ (8008a88 <SYSVIEW_AddTask+0xc4>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b07      	cmp	r3, #7
 80089e8:	d903      	bls.n	80089f2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80089ea:	4828      	ldr	r0, [pc, #160]	@ (8008a8c <SYSVIEW_AddTask+0xc8>)
 80089ec:	f001 fbc4 	bl	800a178 <SEGGER_SYSVIEW_Warn>
    return;
 80089f0:	e044      	b.n	8008a7c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80089f2:	4b25      	ldr	r3, [pc, #148]	@ (8008a88 <SYSVIEW_AddTask+0xc4>)
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	4926      	ldr	r1, [pc, #152]	@ (8008a90 <SYSVIEW_AddTask+0xcc>)
 80089f8:	4613      	mov	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	440b      	add	r3, r1
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8008a06:	4b20      	ldr	r3, [pc, #128]	@ (8008a88 <SYSVIEW_AddTask+0xc4>)
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	4921      	ldr	r1, [pc, #132]	@ (8008a90 <SYSVIEW_AddTask+0xcc>)
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	440b      	add	r3, r1
 8008a16:	3304      	adds	r3, #4
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8008a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8008a88 <SYSVIEW_AddTask+0xc4>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	491b      	ldr	r1, [pc, #108]	@ (8008a90 <SYSVIEW_AddTask+0xcc>)
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	440b      	add	r3, r1
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008a32:	4b15      	ldr	r3, [pc, #84]	@ (8008a88 <SYSVIEW_AddTask+0xc4>)
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	4916      	ldr	r1, [pc, #88]	@ (8008a90 <SYSVIEW_AddTask+0xcc>)
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	440b      	add	r3, r1
 8008a42:	330c      	adds	r3, #12
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008a48:	4b0f      	ldr	r3, [pc, #60]	@ (8008a88 <SYSVIEW_AddTask+0xc4>)
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	4910      	ldr	r1, [pc, #64]	@ (8008a90 <SYSVIEW_AddTask+0xcc>)
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	440b      	add	r3, r1
 8008a58:	3310      	adds	r3, #16
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8008a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a88 <SYSVIEW_AddTask+0xc4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3301      	adds	r3, #1
 8008a64:	4a08      	ldr	r2, [pc, #32]	@ (8008a88 <SYSVIEW_AddTask+0xc4>)
 8008a66:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	68b9      	ldr	r1, [r7, #8]
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 f80e 	bl	8008a94 <SYSVIEW_SendTaskInfo>
 8008a78:	e000      	b.n	8008a7c <SYSVIEW_AddTask+0xb8>
    return;
 8008a7a:	bf00      	nop

}
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	0800ac68 	.word	0x0800ac68
 8008a88:	20003c60 	.word	0x20003c60
 8008a8c:	0800ac70 	.word	0x0800ac70
 8008a90:	20003bc0 	.word	0x20003bc0

08008a94 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08a      	sub	sp, #40	@ 0x28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8008aa2:	f107 0310 	add.w	r3, r7, #16
 8008aa6:	2218      	movs	r2, #24
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f001 fbf2 	bl	800a294 <memset>
  TaskInfo.TaskID     = TaskID;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac2:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8008ac4:	f107 0310 	add.w	r3, r7, #16
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fec1 	bl	8009850 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8008ace:	bf00      	nop
 8008ad0:	3728      	adds	r7, #40	@ 0x28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8008ade:	4b25      	ldr	r3, [pc, #148]	@ (8008b74 <_DoInit+0x9c>)
 8008ae0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8008ae2:	22a8      	movs	r2, #168	@ 0xa8
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	6838      	ldr	r0, [r7, #0]
 8008ae8:	f001 fbd4 	bl	800a294 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2203      	movs	r2, #3
 8008af0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2203      	movs	r2, #3
 8008af6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	4a1f      	ldr	r2, [pc, #124]	@ (8008b78 <_DoInit+0xa0>)
 8008afc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	4a1e      	ldr	r2, [pc, #120]	@ (8008b7c <_DoInit+0xa4>)
 8008b02:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008b0a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	2200      	movs	r2, #0
 8008b16:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	4a15      	ldr	r2, [pc, #84]	@ (8008b78 <_DoInit+0xa0>)
 8008b22:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	4a16      	ldr	r2, [pc, #88]	@ (8008b80 <_DoInit+0xa8>)
 8008b28:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2210      	movs	r2, #16
 8008b2e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2200      	movs	r2, #0
 8008b34:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008b42:	2300      	movs	r3, #0
 8008b44:	607b      	str	r3, [r7, #4]
 8008b46:	e00c      	b.n	8008b62 <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f1c3 030f 	rsb	r3, r3, #15
 8008b4e:	4a0d      	ldr	r2, [pc, #52]	@ (8008b84 <_DoInit+0xac>)
 8008b50:	5cd1      	ldrb	r1, [r2, r3]
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4413      	add	r3, r2
 8008b58:	460a      	mov	r2, r1
 8008b5a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	607b      	str	r3, [r7, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b0f      	cmp	r3, #15
 8008b66:	d9ef      	bls.n	8008b48 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8008b68:	bf00      	nop
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20003c64 	.word	0x20003c64
 8008b78:	0800acc0 	.word	0x0800acc0
 8008b7c:	20003d0c 	.word	0x20003d0c
 8008b80:	2000410c 	.word	0x2000410c
 8008b84:	0800ad74 	.word	0x0800ad74

08008b88 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08c      	sub	sp, #48	@ 0x30
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008b94:	4b3e      	ldr	r3, [pc, #248]	@ (8008c90 <SEGGER_RTT_ReadNoLock+0x108>)
 8008b96:	623b      	str	r3, [r7, #32]
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b53      	cmp	r3, #83	@ 0x53
 8008ba0:	d001      	beq.n	8008ba6 <SEGGER_RTT_ReadNoLock+0x1e>
 8008ba2:	f7ff ff99 	bl	8008ad8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	4413      	add	r3, r2
 8008bae:	00db      	lsls	r3, r3, #3
 8008bb0:	3360      	adds	r3, #96	@ 0x60
 8008bb2:	4a37      	ldr	r2, [pc, #220]	@ (8008c90 <SEGGER_RTT_ReadNoLock+0x108>)
 8008bb4:	4413      	add	r3, r2
 8008bb6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008bcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d92b      	bls.n	8008c2c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	689a      	ldr	r2, [r3, #8]
 8008bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4293      	cmp	r3, r2
 8008be4:	bf28      	it	cs
 8008be6:	4613      	movcs	r3, r2
 8008be8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	685a      	ldr	r2, [r3, #4]
 8008bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf0:	4413      	add	r3, r2
 8008bf2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	6939      	ldr	r1, [r7, #16]
 8008bf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008bfa:	f001 fb7f 	bl	800a2fc <memcpy>
    NumBytesRead += NumBytesRem;
 8008bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	4413      	add	r3, r2
 8008c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8008c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008c16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d101      	bne.n	8008c2c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	bf28      	it	cs
 8008c3c:	4613      	movcs	r3, r2
 8008c3e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d019      	beq.n	8008c7a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4c:	4413      	add	r3, r2
 8008c4e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	6939      	ldr	r1, [r7, #16]
 8008c54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c56:	f001 fb51 	bl	800a2fc <memcpy>
    NumBytesRead += NumBytesRem;
 8008c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	4413      	add	r3, r2
 8008c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8008c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	4413      	add	r3, r2
 8008c68:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008c72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	4413      	add	r3, r2
 8008c78:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8008c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c84:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3730      	adds	r7, #48	@ 0x30
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	20003c64 	.word	0x20003c64

08008c94 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b088      	sub	sp, #32
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
 8008ca0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8008ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8008d94 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8008ca4:	61bb      	str	r3, [r7, #24]
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b53      	cmp	r3, #83	@ 0x53
 8008cae:	d001      	beq.n	8008cb4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8008cb0:	f7ff ff12 	bl	8008ad8 <_DoInit>
  SEGGER_RTT_LOCK();
 8008cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8008cb8:	f04f 0120 	mov.w	r1, #32
 8008cbc:	f381 8811 	msr	BASEPRI, r1
 8008cc0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008cc2:	4b34      	ldr	r3, [pc, #208]	@ (8008d94 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8008cc4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8008cca:	6939      	ldr	r1, [r7, #16]
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	4413      	add	r3, r2
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	440b      	add	r3, r1
 8008cda:	3304      	adds	r3, #4
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d008      	beq.n	8008cf4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	69fa      	ldr	r2, [r7, #28]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	dbeb      	blt.n	8008cca <SEGGER_RTT_AllocUpBuffer+0x36>
 8008cf2:	e000      	b.n	8008cf6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8008cf4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	69fa      	ldr	r2, [r7, #28]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	da3d      	bge.n	8008d7c <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8008d00:	6939      	ldr	r1, [r7, #16]
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	4613      	mov	r3, r2
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	4413      	add	r3, r2
 8008d0c:	00db      	lsls	r3, r3, #3
 8008d0e:	440b      	add	r3, r1
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8008d14:	6939      	ldr	r1, [r7, #16]
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	1c5a      	adds	r2, r3, #1
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	005b      	lsls	r3, r3, #1
 8008d1e:	4413      	add	r3, r2
 8008d20:	00db      	lsls	r3, r3, #3
 8008d22:	440b      	add	r3, r1
 8008d24:	3304      	adds	r3, #4
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8008d2a:	6939      	ldr	r1, [r7, #16]
 8008d2c:	69fa      	ldr	r2, [r7, #28]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	4413      	add	r3, r2
 8008d34:	00db      	lsls	r3, r3, #3
 8008d36:	440b      	add	r3, r1
 8008d38:	3320      	adds	r3, #32
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8008d3e:	6939      	ldr	r1, [r7, #16]
 8008d40:	69fa      	ldr	r2, [r7, #28]
 8008d42:	4613      	mov	r3, r2
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	4413      	add	r3, r2
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	440b      	add	r3, r1
 8008d4c:	3328      	adds	r3, #40	@ 0x28
 8008d4e:	2200      	movs	r2, #0
 8008d50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8008d52:	6939      	ldr	r1, [r7, #16]
 8008d54:	69fa      	ldr	r2, [r7, #28]
 8008d56:	4613      	mov	r3, r2
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	4413      	add	r3, r2
 8008d5c:	00db      	lsls	r3, r3, #3
 8008d5e:	440b      	add	r3, r1
 8008d60:	3324      	adds	r3, #36	@ 0x24
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8008d66:	6939      	ldr	r1, [r7, #16]
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	4413      	add	r3, r2
 8008d70:	00db      	lsls	r3, r3, #3
 8008d72:	440b      	add	r3, r1
 8008d74:	332c      	adds	r3, #44	@ 0x2c
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	e002      	b.n	8008d82 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8008d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d80:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8008d88:	69fb      	ldr	r3, [r7, #28]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3720      	adds	r7, #32
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	20003c64 	.word	0x20003c64

08008d98 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08a      	sub	sp, #40	@ 0x28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8008da6:	4b20      	ldr	r3, [pc, #128]	@ (8008e28 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8008da8:	623b      	str	r3, [r7, #32]
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b53      	cmp	r3, #83	@ 0x53
 8008db2:	d001      	beq.n	8008db8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8008db4:	f7ff fe90 	bl	8008ad8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008db8:	4b1b      	ldr	r3, [pc, #108]	@ (8008e28 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8008dba:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d82a      	bhi.n	8008e18 <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 8008dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8008dc6:	f04f 0120 	mov.w	r1, #32
 8008dca:	f381 8811 	msr	BASEPRI, r1
 8008dce:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	4413      	add	r3, r2
 8008dd8:	00db      	lsls	r3, r3, #3
 8008dda:	3360      	adds	r3, #96	@ 0x60
 8008ddc:	69fa      	ldr	r2, [r7, #28]
 8008dde:	4413      	add	r3, r2
 8008de0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00e      	beq.n	8008e06 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2200      	movs	r2, #0
 8008e04:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e0a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e16:	e002      	b.n	8008e1e <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 8008e18:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3728      	adds	r7, #40	@ 0x28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	20003c64 	.word	0x20003c64

08008e2c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d105      	bne.n	8008e4a <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	60fa      	str	r2, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	701a      	strb	r2, [r3, #0]
 8008e48:	e022      	b.n	8008e90 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	60fa      	str	r2, [r7, #12]
 8008e54:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b80      	cmp	r3, #128	@ 0x80
 8008e5a:	d90a      	bls.n	8008e72 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8008e5c:	2380      	movs	r3, #128	@ 0x80
 8008e5e:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8008e60:	e007      	b.n	8008e72 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	1c53      	adds	r3, r2, #1
 8008e66:	60bb      	str	r3, [r7, #8]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	1c59      	adds	r1, r3, #1
 8008e6c:	60f9      	str	r1, [r7, #12]
 8008e6e:	7812      	ldrb	r2, [r2, #0]
 8008e70:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	1e5a      	subs	r2, r3, #1
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <_EncodeStr+0x58>
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1ee      	bne.n	8008e62 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8008e90:	68fb      	ldr	r3, [r7, #12]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	371c      	adds	r7, #28
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bc80      	pop	{r7}
 8008e9a:	4770      	bx	lr

08008e9c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3307      	adds	r3, #7
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr
	...

08008eb4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008eba:	4b34      	ldr	r3, [pc, #208]	@ (8008f8c <_HandleIncomingPacket+0xd8>)
 8008ebc:	7e1b      	ldrb	r3, [r3, #24]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	1cfb      	adds	r3, r7, #3
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	f7ff fe5f 	bl	8008b88 <SEGGER_RTT_ReadNoLock>
 8008eca:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d057      	beq.n	8008f82 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8008ed2:	78fb      	ldrb	r3, [r7, #3]
 8008ed4:	2b80      	cmp	r3, #128	@ 0x80
 8008ed6:	d031      	beq.n	8008f3c <_HandleIncomingPacket+0x88>
 8008ed8:	2b80      	cmp	r3, #128	@ 0x80
 8008eda:	dc40      	bgt.n	8008f5e <_HandleIncomingPacket+0xaa>
 8008edc:	2b07      	cmp	r3, #7
 8008ede:	dc15      	bgt.n	8008f0c <_HandleIncomingPacket+0x58>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	dd3c      	ble.n	8008f5e <_HandleIncomingPacket+0xaa>
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	2b06      	cmp	r3, #6
 8008ee8:	d839      	bhi.n	8008f5e <_HandleIncomingPacket+0xaa>
 8008eea:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef0 <_HandleIncomingPacket+0x3c>)
 8008eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef0:	08008f13 	.word	0x08008f13
 8008ef4:	08008f19 	.word	0x08008f19
 8008ef8:	08008f1f 	.word	0x08008f1f
 8008efc:	08008f25 	.word	0x08008f25
 8008f00:	08008f2b 	.word	0x08008f2b
 8008f04:	08008f31 	.word	0x08008f31
 8008f08:	08008f37 	.word	0x08008f37
 8008f0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f0e:	d033      	beq.n	8008f78 <_HandleIncomingPacket+0xc4>
 8008f10:	e025      	b.n	8008f5e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008f12:	f000 fb23 	bl	800955c <SEGGER_SYSVIEW_Start>
      break;
 8008f16:	e034      	b.n	8008f82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8008f18:	f000 fbda 	bl	80096d0 <SEGGER_SYSVIEW_Stop>
      break;
 8008f1c:	e031      	b.n	8008f82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8008f1e:	f000 fdb3 	bl	8009a88 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008f22:	e02e      	b.n	8008f82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008f24:	f000 fd78 	bl	8009a18 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8008f28:	e02b      	b.n	8008f82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8008f2a:	f000 fbf7 	bl	800971c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8008f2e:	e028      	b.n	8008f82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008f30:	f001 f8e4 	bl	800a0fc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008f34:	e025      	b.n	8008f82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8008f36:	f001 f8c3 	bl	800a0c0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8008f3a:	e022      	b.n	8008f82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008f3c:	4b13      	ldr	r3, [pc, #76]	@ (8008f8c <_HandleIncomingPacket+0xd8>)
 8008f3e:	7e1b      	ldrb	r3, [r3, #24]
 8008f40:	4618      	mov	r0, r3
 8008f42:	1cfb      	adds	r3, r7, #3
 8008f44:	2201      	movs	r2, #1
 8008f46:	4619      	mov	r1, r3
 8008f48:	f7ff fe1e 	bl	8008b88 <SEGGER_RTT_ReadNoLock>
 8008f4c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d013      	beq.n	8008f7c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8008f54:	78fb      	ldrb	r3, [r7, #3]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f001 f828 	bl	8009fac <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8008f5c:	e00e      	b.n	8008f7c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	b25b      	sxtb	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da0c      	bge.n	8008f80 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008f66:	4b09      	ldr	r3, [pc, #36]	@ (8008f8c <_HandleIncomingPacket+0xd8>)
 8008f68:	7e1b      	ldrb	r3, [r3, #24]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	1cfb      	adds	r3, r7, #3
 8008f6e:	2201      	movs	r2, #1
 8008f70:	4619      	mov	r1, r3
 8008f72:	f7ff fe09 	bl	8008b88 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8008f76:	e003      	b.n	8008f80 <_HandleIncomingPacket+0xcc>
      break;
 8008f78:	bf00      	nop
 8008f7a:	e002      	b.n	8008f82 <_HandleIncomingPacket+0xce>
      break;
 8008f7c:	bf00      	nop
 8008f7e:	e000      	b.n	8008f82 <_HandleIncomingPacket+0xce>
      break;
 8008f80:	bf00      	nop
    }
  }
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	20004700 	.word	0x20004700

08008f90 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b08c      	sub	sp, #48	@ 0x30
 8008f94:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8008f96:	2301      	movs	r3, #1
 8008f98:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8008f9a:	1d3b      	adds	r3, r7, #4
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fa4:	4b31      	ldr	r3, [pc, #196]	@ (800906c <_TrySendOverflowPacket+0xdc>)
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008faa:	e00b      	b.n	8008fc4 <_TrySendOverflowPacket+0x34>
 8008fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb2:	1c59      	adds	r1, r3, #1
 8008fb4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8008fb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008fba:	b2d2      	uxtb	r2, r2
 8008fbc:	701a      	strb	r2, [r3, #0]
 8008fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc0:	09db      	lsrs	r3, r3, #7
 8008fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008fc8:	d8f0      	bhi.n	8008fac <_TrySendOverflowPacket+0x1c>
 8008fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fd2:	b2d2      	uxtb	r2, r2
 8008fd4:	701a      	strb	r2, [r3, #0]
 8008fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008fda:	4b25      	ldr	r3, [pc, #148]	@ (8009070 <_TrySendOverflowPacket+0xe0>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8008fe0:	4b22      	ldr	r3, [pc, #136]	@ (800906c <_TrySendOverflowPacket+0xdc>)
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	623b      	str	r3, [r7, #32]
 8008ff2:	e00b      	b.n	800900c <_TrySendOverflowPacket+0x7c>
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	b2da      	uxtb	r2, r3
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffa:	1c59      	adds	r1, r3, #1
 8008ffc:	6279      	str	r1, [r7, #36]	@ 0x24
 8008ffe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009002:	b2d2      	uxtb	r2, r2
 8009004:	701a      	strb	r2, [r3, #0]
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	09db      	lsrs	r3, r3, #7
 800900a:	623b      	str	r3, [r7, #32]
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009010:	d8f0      	bhi.n	8008ff4 <_TrySendOverflowPacket+0x64>
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	627a      	str	r2, [r7, #36]	@ 0x24
 8009018:	6a3a      	ldr	r2, [r7, #32]
 800901a:	b2d2      	uxtb	r2, r2
 800901c:	701a      	strb	r2, [r3, #0]
 800901e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009020:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8009022:	4b12      	ldr	r3, [pc, #72]	@ (800906c <_TrySendOverflowPacket+0xdc>)
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	4618      	mov	r0, r3
 8009028:	1d3b      	adds	r3, r7, #4
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	461a      	mov	r2, r3
 8009030:	1d3b      	adds	r3, r7, #4
 8009032:	4619      	mov	r1, r3
 8009034:	f7f7 f88c 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009038:	4603      	mov	r3, r0
 800903a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d009      	beq.n	8009056 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8009042:	4a0a      	ldr	r2, [pc, #40]	@ (800906c <_TrySendOverflowPacket+0xdc>)
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8009048:	4b08      	ldr	r3, [pc, #32]	@ (800906c <_TrySendOverflowPacket+0xdc>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	3b01      	subs	r3, #1
 800904e:	b2da      	uxtb	r2, r3
 8009050:	4b06      	ldr	r3, [pc, #24]	@ (800906c <_TrySendOverflowPacket+0xdc>)
 8009052:	701a      	strb	r2, [r3, #0]
 8009054:	e004      	b.n	8009060 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8009056:	4b05      	ldr	r3, [pc, #20]	@ (800906c <_TrySendOverflowPacket+0xdc>)
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	3301      	adds	r3, #1
 800905c:	4a03      	ldr	r2, [pc, #12]	@ (800906c <_TrySendOverflowPacket+0xdc>)
 800905e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8009060:	693b      	ldr	r3, [r7, #16]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3730      	adds	r7, #48	@ 0x30
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20004700 	.word	0x20004700
 8009070:	e0001004 	.word	0xe0001004

08009074 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8009074:	b580      	push	{r7, lr}
 8009076:	b08a      	sub	sp, #40	@ 0x28
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8009080:	4b98      	ldr	r3, [pc, #608]	@ (80092e4 <_SendPacket+0x270>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d010      	beq.n	80090aa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8009088:	4b96      	ldr	r3, [pc, #600]	@ (80092e4 <_SendPacket+0x270>)
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 812d 	beq.w	80092ec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8009092:	4b94      	ldr	r3, [pc, #592]	@ (80092e4 <_SendPacket+0x270>)
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d109      	bne.n	80090ae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800909a:	f7ff ff79 	bl	8008f90 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800909e:	4b91      	ldr	r3, [pc, #580]	@ (80092e4 <_SendPacket+0x270>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	f040 8124 	bne.w	80092f0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80090a8:	e001      	b.n	80090ae <_SendPacket+0x3a>
    goto Send;
 80090aa:	bf00      	nop
 80090ac:	e000      	b.n	80090b0 <_SendPacket+0x3c>
Send:
 80090ae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b1f      	cmp	r3, #31
 80090b4:	d809      	bhi.n	80090ca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80090b6:	4b8b      	ldr	r3, [pc, #556]	@ (80092e4 <_SendPacket+0x270>)
 80090b8:	69da      	ldr	r2, [r3, #28]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	fa22 f303 	lsr.w	r3, r2, r3
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f040 8115 	bne.w	80092f4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b17      	cmp	r3, #23
 80090ce:	d807      	bhi.n	80090e0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	701a      	strb	r2, [r3, #0]
 80090de:	e0c4      	b.n	800926a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80090ec:	d912      	bls.n	8009114 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	09da      	lsrs	r2, r3, #7
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	60fb      	str	r3, [r7, #12]
 80090f8:	b2d2      	uxtb	r2, r2
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	3a01      	subs	r2, #1
 8009106:	60fa      	str	r2, [r7, #12]
 8009108:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800910c:	b2da      	uxtb	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	701a      	strb	r2, [r3, #0]
 8009112:	e006      	b.n	8009122 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3b01      	subs	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	b2da      	uxtb	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b7e      	cmp	r3, #126	@ 0x7e
 8009126:	d807      	bhi.n	8009138 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3b01      	subs	r3, #1
 800912c:	60fb      	str	r3, [r7, #12]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	b2da      	uxtb	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	701a      	strb	r2, [r3, #0]
 8009136:	e098      	b.n	800926a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800913e:	d212      	bcs.n	8009166 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	09da      	lsrs	r2, r3, #7
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3b01      	subs	r3, #1
 8009148:	60fb      	str	r3, [r7, #12]
 800914a:	b2d2      	uxtb	r2, r2
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	3a01      	subs	r2, #1
 8009158:	60fa      	str	r2, [r7, #12]
 800915a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800915e:	b2da      	uxtb	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	701a      	strb	r2, [r3, #0]
 8009164:	e081      	b.n	800926a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800916c:	d21d      	bcs.n	80091aa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	0b9a      	lsrs	r2, r3, #14
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3b01      	subs	r3, #1
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	b2d2      	uxtb	r2, r2
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	09db      	lsrs	r3, r3, #7
 8009182:	b2db      	uxtb	r3, r3
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	3a01      	subs	r2, #1
 8009188:	60fa      	str	r2, [r7, #12]
 800918a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800918e:	b2da      	uxtb	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	b2db      	uxtb	r3, r3
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	3a01      	subs	r2, #1
 800919c:	60fa      	str	r2, [r7, #12]
 800919e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	701a      	strb	r2, [r3, #0]
 80091a8:	e05f      	b.n	800926a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091b0:	d228      	bcs.n	8009204 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	0d5a      	lsrs	r2, r3, #21
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	b2d2      	uxtb	r2, r2
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	0b9b      	lsrs	r3, r3, #14
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	3a01      	subs	r2, #1
 80091cc:	60fa      	str	r2, [r7, #12]
 80091ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	09db      	lsrs	r3, r3, #7
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	3a01      	subs	r2, #1
 80091e2:	60fa      	str	r2, [r7, #12]
 80091e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	3a01      	subs	r2, #1
 80091f6:	60fa      	str	r2, [r7, #12]
 80091f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	701a      	strb	r2, [r3, #0]
 8009202:	e032      	b.n	800926a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	0f1a      	lsrs	r2, r3, #28
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3b01      	subs	r3, #1
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	b2d2      	uxtb	r2, r2
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	0d5b      	lsrs	r3, r3, #21
 8009218:	b2db      	uxtb	r3, r3
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	3a01      	subs	r2, #1
 800921e:	60fa      	str	r2, [r7, #12]
 8009220:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009224:	b2da      	uxtb	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	0b9b      	lsrs	r3, r3, #14
 800922e:	b2db      	uxtb	r3, r3
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	3a01      	subs	r2, #1
 8009234:	60fa      	str	r2, [r7, #12]
 8009236:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800923a:	b2da      	uxtb	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	09db      	lsrs	r3, r3, #7
 8009244:	b2db      	uxtb	r3, r3
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	3a01      	subs	r2, #1
 800924a:	60fa      	str	r2, [r7, #12]
 800924c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009250:	b2da      	uxtb	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	b2db      	uxtb	r3, r3
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	3a01      	subs	r2, #1
 800925e:	60fa      	str	r2, [r7, #12]
 8009260:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009264:	b2da      	uxtb	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800926a:	4b1f      	ldr	r3, [pc, #124]	@ (80092e8 <_SendPacket+0x274>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009270:	4b1c      	ldr	r3, [pc, #112]	@ (80092e4 <_SendPacket+0x270>)
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	627b      	str	r3, [r7, #36]	@ 0x24
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	623b      	str	r3, [r7, #32]
 8009282:	e00b      	b.n	800929c <_SendPacket+0x228>
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	b2da      	uxtb	r2, r3
 8009288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928a:	1c59      	adds	r1, r3, #1
 800928c:	6279      	str	r1, [r7, #36]	@ 0x24
 800928e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009292:	b2d2      	uxtb	r2, r2
 8009294:	701a      	strb	r2, [r3, #0]
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	09db      	lsrs	r3, r3, #7
 800929a:	623b      	str	r3, [r7, #32]
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	2b7f      	cmp	r3, #127	@ 0x7f
 80092a0:	d8f0      	bhi.n	8009284 <_SendPacket+0x210>
 80092a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a4:	1c5a      	adds	r2, r3, #1
 80092a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80092a8:	6a3a      	ldr	r2, [r7, #32]
 80092aa:	b2d2      	uxtb	r2, r2
 80092ac:	701a      	strb	r2, [r3, #0]
 80092ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80092b2:	4b0c      	ldr	r3, [pc, #48]	@ (80092e4 <_SendPacket+0x270>)
 80092b4:	785b      	ldrb	r3, [r3, #1]
 80092b6:	4618      	mov	r0, r3
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	461a      	mov	r2, r3
 80092c0:	68f9      	ldr	r1, [r7, #12]
 80092c2:	f7f6 ff45 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80092c6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80092ce:	4a05      	ldr	r2, [pc, #20]	@ (80092e4 <_SendPacket+0x270>)
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	60d3      	str	r3, [r2, #12]
 80092d4:	e00f      	b.n	80092f6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80092d6:	4b03      	ldr	r3, [pc, #12]	@ (80092e4 <_SendPacket+0x270>)
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	3301      	adds	r3, #1
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	4b01      	ldr	r3, [pc, #4]	@ (80092e4 <_SendPacket+0x270>)
 80092e0:	701a      	strb	r2, [r3, #0]
 80092e2:	e008      	b.n	80092f6 <_SendPacket+0x282>
 80092e4:	20004700 	.word	0x20004700
 80092e8:	e0001004 	.word	0xe0001004
    goto SendDone;
 80092ec:	bf00      	nop
 80092ee:	e002      	b.n	80092f6 <_SendPacket+0x282>
      goto SendDone;
 80092f0:	bf00      	nop
 80092f2:	e000      	b.n	80092f6 <_SendPacket+0x282>
      goto SendDone;
 80092f4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80092f6:	4b14      	ldr	r3, [pc, #80]	@ (8009348 <_SendPacket+0x2d4>)
 80092f8:	7e1b      	ldrb	r3, [r3, #24]
 80092fa:	4619      	mov	r1, r3
 80092fc:	4a13      	ldr	r2, [pc, #76]	@ (800934c <_SendPacket+0x2d8>)
 80092fe:	460b      	mov	r3, r1
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	440b      	add	r3, r1
 8009304:	00db      	lsls	r3, r3, #3
 8009306:	4413      	add	r3, r2
 8009308:	336c      	adds	r3, #108	@ 0x6c
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	4b0e      	ldr	r3, [pc, #56]	@ (8009348 <_SendPacket+0x2d4>)
 800930e:	7e1b      	ldrb	r3, [r3, #24]
 8009310:	4618      	mov	r0, r3
 8009312:	490e      	ldr	r1, [pc, #56]	@ (800934c <_SendPacket+0x2d8>)
 8009314:	4603      	mov	r3, r0
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	4403      	add	r3, r0
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	440b      	add	r3, r1
 800931e:	3370      	adds	r3, #112	@ 0x70
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	429a      	cmp	r2, r3
 8009324:	d00b      	beq.n	800933e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8009326:	4b08      	ldr	r3, [pc, #32]	@ (8009348 <_SendPacket+0x2d4>)
 8009328:	789b      	ldrb	r3, [r3, #2]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d107      	bne.n	800933e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800932e:	4b06      	ldr	r3, [pc, #24]	@ (8009348 <_SendPacket+0x2d4>)
 8009330:	2201      	movs	r2, #1
 8009332:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8009334:	f7ff fdbe 	bl	8008eb4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8009338:	4b03      	ldr	r3, [pc, #12]	@ (8009348 <_SendPacket+0x2d4>)
 800933a:	2200      	movs	r2, #0
 800933c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800933e:	bf00      	nop
 8009340:	3728      	adds	r7, #40	@ 0x28
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20004700 	.word	0x20004700
 800934c:	20003c64 	.word	0x20003c64

08009350 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af02      	add	r7, sp, #8
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800935e:	2300      	movs	r3, #0
 8009360:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8009364:	4917      	ldr	r1, [pc, #92]	@ (80093c4 <SEGGER_SYSVIEW_Init+0x74>)
 8009366:	4818      	ldr	r0, [pc, #96]	@ (80093c8 <SEGGER_SYSVIEW_Init+0x78>)
 8009368:	f7ff fc94 	bl	8008c94 <SEGGER_RTT_AllocUpBuffer>
 800936c:	4603      	mov	r3, r0
 800936e:	b2da      	uxtb	r2, r3
 8009370:	4b16      	ldr	r3, [pc, #88]	@ (80093cc <SEGGER_SYSVIEW_Init+0x7c>)
 8009372:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8009374:	4b15      	ldr	r3, [pc, #84]	@ (80093cc <SEGGER_SYSVIEW_Init+0x7c>)
 8009376:	785a      	ldrb	r2, [r3, #1]
 8009378:	4b14      	ldr	r3, [pc, #80]	@ (80093cc <SEGGER_SYSVIEW_Init+0x7c>)
 800937a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800937c:	4b13      	ldr	r3, [pc, #76]	@ (80093cc <SEGGER_SYSVIEW_Init+0x7c>)
 800937e:	7e1b      	ldrb	r3, [r3, #24]
 8009380:	4618      	mov	r0, r3
 8009382:	2300      	movs	r3, #0
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	2308      	movs	r3, #8
 8009388:	4a11      	ldr	r2, [pc, #68]	@ (80093d0 <SEGGER_SYSVIEW_Init+0x80>)
 800938a:	490f      	ldr	r1, [pc, #60]	@ (80093c8 <SEGGER_SYSVIEW_Init+0x78>)
 800938c:	f7ff fd04 	bl	8008d98 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8009390:	4b0e      	ldr	r3, [pc, #56]	@ (80093cc <SEGGER_SYSVIEW_Init+0x7c>)
 8009392:	2200      	movs	r2, #0
 8009394:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009396:	4b0f      	ldr	r3, [pc, #60]	@ (80093d4 <SEGGER_SYSVIEW_Init+0x84>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a0c      	ldr	r2, [pc, #48]	@ (80093cc <SEGGER_SYSVIEW_Init+0x7c>)
 800939c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800939e:	4a0b      	ldr	r2, [pc, #44]	@ (80093cc <SEGGER_SYSVIEW_Init+0x7c>)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80093a4:	4a09      	ldr	r2, [pc, #36]	@ (80093cc <SEGGER_SYSVIEW_Init+0x7c>)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80093aa:	4a08      	ldr	r2, [pc, #32]	@ (80093cc <SEGGER_SYSVIEW_Init+0x7c>)
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80093b0:	4a06      	ldr	r2, [pc, #24]	@ (80093cc <SEGGER_SYSVIEW_Init+0x7c>)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80093b6:	4b05      	ldr	r3, [pc, #20]	@ (80093cc <SEGGER_SYSVIEW_Init+0x7c>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80093bc:	bf00      	nop
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	2000411c 	.word	0x2000411c
 80093c8:	0800acd4 	.word	0x0800acd4
 80093cc:	20004700 	.word	0x20004700
 80093d0:	200046f8 	.word	0x200046f8
 80093d4:	e0001004 	.word	0xe0001004

080093d8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80093e0:	4a03      	ldr	r2, [pc, #12]	@ (80093f0 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6113      	str	r3, [r2, #16]
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bc80      	pop	{r7}
 80093ee:	4770      	bx	lr
 80093f0:	20004700 	.word	0x20004700

080093f4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80093fc:	f3ef 8311 	mrs	r3, BASEPRI
 8009400:	f04f 0120 	mov.w	r1, #32
 8009404:	f381 8811 	msr	BASEPRI, r1
 8009408:	60fb      	str	r3, [r7, #12]
 800940a:	4808      	ldr	r0, [pc, #32]	@ (800942c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800940c:	f7ff fd46 	bl	8008e9c <_PreparePacket>
 8009410:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	68b9      	ldr	r1, [r7, #8]
 8009416:	68b8      	ldr	r0, [r7, #8]
 8009418:	f7ff fe2c 	bl	8009074 <_SendPacket>
  RECORD_END();
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f383 8811 	msr	BASEPRI, r3
}
 8009422:	bf00      	nop
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	20004730 	.word	0x20004730

08009430 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8009430:	b580      	push	{r7, lr}
 8009432:	b088      	sub	sp, #32
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800943a:	f3ef 8311 	mrs	r3, BASEPRI
 800943e:	f04f 0120 	mov.w	r1, #32
 8009442:	f381 8811 	msr	BASEPRI, r1
 8009446:	617b      	str	r3, [r7, #20]
 8009448:	4816      	ldr	r0, [pc, #88]	@ (80094a4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800944a:	f7ff fd27 	bl	8008e9c <_PreparePacket>
 800944e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	61fb      	str	r3, [r7, #28]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	61bb      	str	r3, [r7, #24]
 800945c:	e00b      	b.n	8009476 <SEGGER_SYSVIEW_RecordU32+0x46>
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	b2da      	uxtb	r2, r3
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	1c59      	adds	r1, r3, #1
 8009466:	61f9      	str	r1, [r7, #28]
 8009468:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800946c:	b2d2      	uxtb	r2, r2
 800946e:	701a      	strb	r2, [r3, #0]
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	09db      	lsrs	r3, r3, #7
 8009474:	61bb      	str	r3, [r7, #24]
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	2b7f      	cmp	r3, #127	@ 0x7f
 800947a:	d8f0      	bhi.n	800945e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	61fa      	str	r2, [r7, #28]
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	b2d2      	uxtb	r2, r2
 8009486:	701a      	strb	r2, [r3, #0]
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	68f9      	ldr	r1, [r7, #12]
 8009490:	6938      	ldr	r0, [r7, #16]
 8009492:	f7ff fdef 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f383 8811 	msr	BASEPRI, r3
}
 800949c:	bf00      	nop
 800949e:	3720      	adds	r7, #32
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	20004730 	.word	0x20004730

080094a8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08c      	sub	sp, #48	@ 0x30
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80094b4:	f3ef 8311 	mrs	r3, BASEPRI
 80094b8:	f04f 0120 	mov.w	r1, #32
 80094bc:	f381 8811 	msr	BASEPRI, r1
 80094c0:	61fb      	str	r3, [r7, #28]
 80094c2:	4825      	ldr	r0, [pc, #148]	@ (8009558 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80094c4:	f7ff fcea 	bl	8008e9c <_PreparePacket>
 80094c8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094d6:	e00b      	b.n	80094f0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80094d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094de:	1c59      	adds	r1, r3, #1
 80094e0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80094e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80094e6:	b2d2      	uxtb	r2, r2
 80094e8:	701a      	strb	r2, [r3, #0]
 80094ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ec:	09db      	lsrs	r3, r3, #7
 80094ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80094f4:	d8f0      	bhi.n	80094d8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80094f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094fe:	b2d2      	uxtb	r2, r2
 8009500:	701a      	strb	r2, [r3, #0]
 8009502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009504:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	627b      	str	r3, [r7, #36]	@ 0x24
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	623b      	str	r3, [r7, #32]
 800950e:	e00b      	b.n	8009528 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	b2da      	uxtb	r2, r3
 8009514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009516:	1c59      	adds	r1, r3, #1
 8009518:	6279      	str	r1, [r7, #36]	@ 0x24
 800951a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800951e:	b2d2      	uxtb	r2, r2
 8009520:	701a      	strb	r2, [r3, #0]
 8009522:	6a3b      	ldr	r3, [r7, #32]
 8009524:	09db      	lsrs	r3, r3, #7
 8009526:	623b      	str	r3, [r7, #32]
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	2b7f      	cmp	r3, #127	@ 0x7f
 800952c:	d8f0      	bhi.n	8009510 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800952e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009530:	1c5a      	adds	r2, r3, #1
 8009532:	627a      	str	r2, [r7, #36]	@ 0x24
 8009534:	6a3a      	ldr	r2, [r7, #32]
 8009536:	b2d2      	uxtb	r2, r2
 8009538:	701a      	strb	r2, [r3, #0]
 800953a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	6979      	ldr	r1, [r7, #20]
 8009542:	69b8      	ldr	r0, [r7, #24]
 8009544:	f7ff fd96 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	f383 8811 	msr	BASEPRI, r3
}
 800954e:	bf00      	nop
 8009550:	3730      	adds	r7, #48	@ 0x30
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20004730 	.word	0x20004730

0800955c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800955c:	b580      	push	{r7, lr}
 800955e:	b08c      	sub	sp, #48	@ 0x30
 8009560:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8009562:	4b58      	ldr	r3, [pc, #352]	@ (80096c4 <SEGGER_SYSVIEW_Start+0x168>)
 8009564:	2201      	movs	r2, #1
 8009566:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009568:	f3ef 8311 	mrs	r3, BASEPRI
 800956c:	f04f 0120 	mov.w	r1, #32
 8009570:	f381 8811 	msr	BASEPRI, r1
 8009574:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009576:	4b53      	ldr	r3, [pc, #332]	@ (80096c4 <SEGGER_SYSVIEW_Start+0x168>)
 8009578:	785b      	ldrb	r3, [r3, #1]
 800957a:	220a      	movs	r2, #10
 800957c:	4952      	ldr	r1, [pc, #328]	@ (80096c8 <SEGGER_SYSVIEW_Start+0x16c>)
 800957e:	4618      	mov	r0, r3
 8009580:	f7f6 fde6 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800958a:	200a      	movs	r0, #10
 800958c:	f7ff ff32 	bl	80093f4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009590:	f3ef 8311 	mrs	r3, BASEPRI
 8009594:	f04f 0120 	mov.w	r1, #32
 8009598:	f381 8811 	msr	BASEPRI, r1
 800959c:	60bb      	str	r3, [r7, #8]
 800959e:	484b      	ldr	r0, [pc, #300]	@ (80096cc <SEGGER_SYSVIEW_Start+0x170>)
 80095a0:	f7ff fc7c 	bl	8008e9c <_PreparePacket>
 80095a4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095ae:	4b45      	ldr	r3, [pc, #276]	@ (80096c4 <SEGGER_SYSVIEW_Start+0x168>)
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095b4:	e00b      	b.n	80095ce <SEGGER_SYSVIEW_Start+0x72>
 80095b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095bc:	1c59      	adds	r1, r3, #1
 80095be:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80095c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80095c4:	b2d2      	uxtb	r2, r2
 80095c6:	701a      	strb	r2, [r3, #0]
 80095c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ca:	09db      	lsrs	r3, r3, #7
 80095cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80095d2:	d8f0      	bhi.n	80095b6 <SEGGER_SYSVIEW_Start+0x5a>
 80095d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095dc:	b2d2      	uxtb	r2, r2
 80095de:	701a      	strb	r2, [r3, #0]
 80095e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80095e8:	4b36      	ldr	r3, [pc, #216]	@ (80096c4 <SEGGER_SYSVIEW_Start+0x168>)
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	623b      	str	r3, [r7, #32]
 80095ee:	e00b      	b.n	8009608 <SEGGER_SYSVIEW_Start+0xac>
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f6:	1c59      	adds	r1, r3, #1
 80095f8:	6279      	str	r1, [r7, #36]	@ 0x24
 80095fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80095fe:	b2d2      	uxtb	r2, r2
 8009600:	701a      	strb	r2, [r3, #0]
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	09db      	lsrs	r3, r3, #7
 8009606:	623b      	str	r3, [r7, #32]
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	2b7f      	cmp	r3, #127	@ 0x7f
 800960c:	d8f0      	bhi.n	80095f0 <SEGGER_SYSVIEW_Start+0x94>
 800960e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	627a      	str	r2, [r7, #36]	@ 0x24
 8009614:	6a3a      	ldr	r2, [r7, #32]
 8009616:	b2d2      	uxtb	r2, r2
 8009618:	701a      	strb	r2, [r3, #0]
 800961a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	61fb      	str	r3, [r7, #28]
 8009622:	4b28      	ldr	r3, [pc, #160]	@ (80096c4 <SEGGER_SYSVIEW_Start+0x168>)
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	61bb      	str	r3, [r7, #24]
 8009628:	e00b      	b.n	8009642 <SEGGER_SYSVIEW_Start+0xe6>
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	b2da      	uxtb	r2, r3
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	1c59      	adds	r1, r3, #1
 8009632:	61f9      	str	r1, [r7, #28]
 8009634:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009638:	b2d2      	uxtb	r2, r2
 800963a:	701a      	strb	r2, [r3, #0]
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	09db      	lsrs	r3, r3, #7
 8009640:	61bb      	str	r3, [r7, #24]
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2b7f      	cmp	r3, #127	@ 0x7f
 8009646:	d8f0      	bhi.n	800962a <SEGGER_SYSVIEW_Start+0xce>
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	61fa      	str	r2, [r7, #28]
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	b2d2      	uxtb	r2, r2
 8009652:	701a      	strb	r2, [r3, #0]
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	617b      	str	r3, [r7, #20]
 800965c:	2300      	movs	r3, #0
 800965e:	613b      	str	r3, [r7, #16]
 8009660:	e00b      	b.n	800967a <SEGGER_SYSVIEW_Start+0x11e>
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	b2da      	uxtb	r2, r3
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	1c59      	adds	r1, r3, #1
 800966a:	6179      	str	r1, [r7, #20]
 800966c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009670:	b2d2      	uxtb	r2, r2
 8009672:	701a      	strb	r2, [r3, #0]
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	09db      	lsrs	r3, r3, #7
 8009678:	613b      	str	r3, [r7, #16]
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	2b7f      	cmp	r3, #127	@ 0x7f
 800967e:	d8f0      	bhi.n	8009662 <SEGGER_SYSVIEW_Start+0x106>
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	617a      	str	r2, [r7, #20]
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	b2d2      	uxtb	r2, r2
 800968a:	701a      	strb	r2, [r3, #0]
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009690:	2218      	movs	r2, #24
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff fced 	bl	8009074 <_SendPacket>
      RECORD_END();
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80096a0:	4b08      	ldr	r3, [pc, #32]	@ (80096c4 <SEGGER_SYSVIEW_Start+0x168>)
 80096a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80096a8:	4b06      	ldr	r3, [pc, #24]	@ (80096c4 <SEGGER_SYSVIEW_Start+0x168>)
 80096aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ac:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80096ae:	f000 f9eb 	bl	8009a88 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80096b2:	f000 f9b1 	bl	8009a18 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80096b6:	f000 fd21 	bl	800a0fc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80096ba:	bf00      	nop
 80096bc:	3730      	adds	r7, #48	@ 0x30
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	20004700 	.word	0x20004700
 80096c8:	0800ad88 	.word	0x0800ad88
 80096cc:	20004730 	.word	0x20004730

080096d0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80096d6:	f3ef 8311 	mrs	r3, BASEPRI
 80096da:	f04f 0120 	mov.w	r1, #32
 80096de:	f381 8811 	msr	BASEPRI, r1
 80096e2:	607b      	str	r3, [r7, #4]
 80096e4:	480b      	ldr	r0, [pc, #44]	@ (8009714 <SEGGER_SYSVIEW_Stop+0x44>)
 80096e6:	f7ff fbd9 	bl	8008e9c <_PreparePacket>
 80096ea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80096ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009718 <SEGGER_SYSVIEW_Stop+0x48>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d007      	beq.n	8009704 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80096f4:	220b      	movs	r2, #11
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6838      	ldr	r0, [r7, #0]
 80096fa:	f7ff fcbb 	bl	8009074 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80096fe:	4b06      	ldr	r3, [pc, #24]	@ (8009718 <SEGGER_SYSVIEW_Stop+0x48>)
 8009700:	2200      	movs	r2, #0
 8009702:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f383 8811 	msr	BASEPRI, r3
}
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20004730 	.word	0x20004730
 8009718:	20004700 	.word	0x20004700

0800971c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800971c:	b580      	push	{r7, lr}
 800971e:	b08c      	sub	sp, #48	@ 0x30
 8009720:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009722:	f3ef 8311 	mrs	r3, BASEPRI
 8009726:	f04f 0120 	mov.w	r1, #32
 800972a:	f381 8811 	msr	BASEPRI, r1
 800972e:	60fb      	str	r3, [r7, #12]
 8009730:	4845      	ldr	r0, [pc, #276]	@ (8009848 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009732:	f7ff fbb3 	bl	8008e9c <_PreparePacket>
 8009736:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009740:	4b42      	ldr	r3, [pc, #264]	@ (800984c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009746:	e00b      	b.n	8009760 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974a:	b2da      	uxtb	r2, r3
 800974c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974e:	1c59      	adds	r1, r3, #1
 8009750:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009752:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009756:	b2d2      	uxtb	r2, r2
 8009758:	701a      	strb	r2, [r3, #0]
 800975a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975c:	09db      	lsrs	r3, r3, #7
 800975e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009762:	2b7f      	cmp	r3, #127	@ 0x7f
 8009764:	d8f0      	bhi.n	8009748 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8009766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800976c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800976e:	b2d2      	uxtb	r2, r2
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009774:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	627b      	str	r3, [r7, #36]	@ 0x24
 800977a:	4b34      	ldr	r3, [pc, #208]	@ (800984c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	623b      	str	r3, [r7, #32]
 8009780:	e00b      	b.n	800979a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	b2da      	uxtb	r2, r3
 8009786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009788:	1c59      	adds	r1, r3, #1
 800978a:	6279      	str	r1, [r7, #36]	@ 0x24
 800978c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009790:	b2d2      	uxtb	r2, r2
 8009792:	701a      	strb	r2, [r3, #0]
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	09db      	lsrs	r3, r3, #7
 8009798:	623b      	str	r3, [r7, #32]
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	2b7f      	cmp	r3, #127	@ 0x7f
 800979e:	d8f0      	bhi.n	8009782 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80097a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a2:	1c5a      	adds	r2, r3, #1
 80097a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80097a6:	6a3a      	ldr	r2, [r7, #32]
 80097a8:	b2d2      	uxtb	r2, r2
 80097aa:	701a      	strb	r2, [r3, #0]
 80097ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	61fb      	str	r3, [r7, #28]
 80097b4:	4b25      	ldr	r3, [pc, #148]	@ (800984c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	61bb      	str	r3, [r7, #24]
 80097ba:	e00b      	b.n	80097d4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	1c59      	adds	r1, r3, #1
 80097c4:	61f9      	str	r1, [r7, #28]
 80097c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80097ca:	b2d2      	uxtb	r2, r2
 80097cc:	701a      	strb	r2, [r3, #0]
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	09db      	lsrs	r3, r3, #7
 80097d2:	61bb      	str	r3, [r7, #24]
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80097d8:	d8f0      	bhi.n	80097bc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	1c5a      	adds	r2, r3, #1
 80097de:	61fa      	str	r2, [r7, #28]
 80097e0:	69ba      	ldr	r2, [r7, #24]
 80097e2:	b2d2      	uxtb	r2, r2
 80097e4:	701a      	strb	r2, [r3, #0]
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	617b      	str	r3, [r7, #20]
 80097ee:	2300      	movs	r3, #0
 80097f0:	613b      	str	r3, [r7, #16]
 80097f2:	e00b      	b.n	800980c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	1c59      	adds	r1, r3, #1
 80097fc:	6179      	str	r1, [r7, #20]
 80097fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009802:	b2d2      	uxtb	r2, r2
 8009804:	701a      	strb	r2, [r3, #0]
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	09db      	lsrs	r3, r3, #7
 800980a:	613b      	str	r3, [r7, #16]
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009810:	d8f0      	bhi.n	80097f4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	1c5a      	adds	r2, r3, #1
 8009816:	617a      	str	r2, [r7, #20]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	b2d2      	uxtb	r2, r2
 800981c:	701a      	strb	r2, [r3, #0]
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009822:	2218      	movs	r2, #24
 8009824:	6879      	ldr	r1, [r7, #4]
 8009826:	68b8      	ldr	r0, [r7, #8]
 8009828:	f7ff fc24 	bl	8009074 <_SendPacket>
  RECORD_END();
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009832:	4b06      	ldr	r3, [pc, #24]	@ (800984c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009836:	2b00      	cmp	r3, #0
 8009838:	d002      	beq.n	8009840 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800983a:	4b04      	ldr	r3, [pc, #16]	@ (800984c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800983c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800983e:	4798      	blx	r3
  }
}
 8009840:	bf00      	nop
 8009842:	3730      	adds	r7, #48	@ 0x30
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20004730 	.word	0x20004730
 800984c:	20004700 	.word	0x20004700

08009850 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8009850:	b580      	push	{r7, lr}
 8009852:	b092      	sub	sp, #72	@ 0x48
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8009858:	f3ef 8311 	mrs	r3, BASEPRI
 800985c:	f04f 0120 	mov.w	r1, #32
 8009860:	f381 8811 	msr	BASEPRI, r1
 8009864:	617b      	str	r3, [r7, #20]
 8009866:	486a      	ldr	r0, [pc, #424]	@ (8009a10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8009868:	f7ff fb18 	bl	8008e9c <_PreparePacket>
 800986c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	647b      	str	r3, [r7, #68]	@ 0x44
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	4b66      	ldr	r3, [pc, #408]	@ (8009a14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	643b      	str	r3, [r7, #64]	@ 0x40
 8009882:	e00b      	b.n	800989c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8009884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009886:	b2da      	uxtb	r2, r3
 8009888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800988a:	1c59      	adds	r1, r3, #1
 800988c:	6479      	str	r1, [r7, #68]	@ 0x44
 800988e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009892:	b2d2      	uxtb	r2, r2
 8009894:	701a      	strb	r2, [r3, #0]
 8009896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009898:	09db      	lsrs	r3, r3, #7
 800989a:	643b      	str	r3, [r7, #64]	@ 0x40
 800989c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800989e:	2b7f      	cmp	r3, #127	@ 0x7f
 80098a0:	d8f0      	bhi.n	8009884 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80098a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80098a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098aa:	b2d2      	uxtb	r2, r2
 80098ac:	701a      	strb	r2, [r3, #0]
 80098ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098bc:	e00b      	b.n	80098d6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80098be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098c4:	1c59      	adds	r1, r3, #1
 80098c6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80098c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80098cc:	b2d2      	uxtb	r2, r2
 80098ce:	701a      	strb	r2, [r3, #0]
 80098d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d2:	09db      	lsrs	r3, r3, #7
 80098d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80098da:	d8f0      	bhi.n	80098be <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80098dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80098e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098e4:	b2d2      	uxtb	r2, r2
 80098e6:	701a      	strb	r2, [r3, #0]
 80098e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ea:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	2220      	movs	r2, #32
 80098f2:	4619      	mov	r1, r3
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f7ff fa99 	bl	8008e2c <_EncodeStr>
 80098fa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80098fc:	2209      	movs	r2, #9
 80098fe:	68f9      	ldr	r1, [r7, #12]
 8009900:	6938      	ldr	r0, [r7, #16]
 8009902:	f7ff fbb7 	bl	8009074 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	637b      	str	r3, [r7, #52]	@ 0x34
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	4b40      	ldr	r3, [pc, #256]	@ (8009a14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	633b      	str	r3, [r7, #48]	@ 0x30
 800991a:	e00b      	b.n	8009934 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800991c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991e:	b2da      	uxtb	r2, r3
 8009920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009922:	1c59      	adds	r1, r3, #1
 8009924:	6379      	str	r1, [r7, #52]	@ 0x34
 8009926:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800992a:	b2d2      	uxtb	r2, r2
 800992c:	701a      	strb	r2, [r3, #0]
 800992e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009930:	09db      	lsrs	r3, r3, #7
 8009932:	633b      	str	r3, [r7, #48]	@ 0x30
 8009934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009936:	2b7f      	cmp	r3, #127	@ 0x7f
 8009938:	d8f0      	bhi.n	800991c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800993a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800993c:	1c5a      	adds	r2, r3, #1
 800993e:	637a      	str	r2, [r7, #52]	@ 0x34
 8009940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	701a      	strb	r2, [r3, #0]
 8009946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009948:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009954:	e00b      	b.n	800996e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8009956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009958:	b2da      	uxtb	r2, r3
 800995a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800995c:	1c59      	adds	r1, r3, #1
 800995e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009960:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009964:	b2d2      	uxtb	r2, r2
 8009966:	701a      	strb	r2, [r3, #0]
 8009968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800996a:	09db      	lsrs	r3, r3, #7
 800996c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	2b7f      	cmp	r3, #127	@ 0x7f
 8009972:	d8f0      	bhi.n	8009956 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8009974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009976:	1c5a      	adds	r2, r3, #1
 8009978:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800997a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800997c:	b2d2      	uxtb	r2, r2
 800997e:	701a      	strb	r2, [r3, #0]
 8009980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009982:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	627b      	str	r3, [r7, #36]	@ 0x24
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	623b      	str	r3, [r7, #32]
 800998e:	e00b      	b.n	80099a8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8009990:	6a3b      	ldr	r3, [r7, #32]
 8009992:	b2da      	uxtb	r2, r3
 8009994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009996:	1c59      	adds	r1, r3, #1
 8009998:	6279      	str	r1, [r7, #36]	@ 0x24
 800999a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800999e:	b2d2      	uxtb	r2, r2
 80099a0:	701a      	strb	r2, [r3, #0]
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	09db      	lsrs	r3, r3, #7
 80099a6:	623b      	str	r3, [r7, #32]
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80099ac:	d8f0      	bhi.n	8009990 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80099ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80099b4:	6a3a      	ldr	r2, [r7, #32]
 80099b6:	b2d2      	uxtb	r2, r2
 80099b8:	701a      	strb	r2, [r3, #0]
 80099ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	61fb      	str	r3, [r7, #28]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	61bb      	str	r3, [r7, #24]
 80099c8:	e00b      	b.n	80099e2 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	1c59      	adds	r1, r3, #1
 80099d2:	61f9      	str	r1, [r7, #28]
 80099d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80099d8:	b2d2      	uxtb	r2, r2
 80099da:	701a      	strb	r2, [r3, #0]
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	09db      	lsrs	r3, r3, #7
 80099e0:	61bb      	str	r3, [r7, #24]
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80099e6:	d8f0      	bhi.n	80099ca <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	1c5a      	adds	r2, r3, #1
 80099ec:	61fa      	str	r2, [r7, #28]
 80099ee:	69ba      	ldr	r2, [r7, #24]
 80099f0:	b2d2      	uxtb	r2, r2
 80099f2:	701a      	strb	r2, [r3, #0]
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80099f8:	2215      	movs	r2, #21
 80099fa:	68f9      	ldr	r1, [r7, #12]
 80099fc:	6938      	ldr	r0, [r7, #16]
 80099fe:	f7ff fb39 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f383 8811 	msr	BASEPRI, r3
}
 8009a08:	bf00      	nop
 8009a0a:	3748      	adds	r7, #72	@ 0x48
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	20004730 	.word	0x20004730
 8009a14:	20004700 	.word	0x20004700

08009a18 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8009a1c:	4b07      	ldr	r3, [pc, #28]	@ (8009a3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009a1e:	6a1b      	ldr	r3, [r3, #32]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d008      	beq.n	8009a36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8009a24:	4b05      	ldr	r3, [pc, #20]	@ (8009a3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8009a2e:	4b03      	ldr	r3, [pc, #12]	@ (8009a3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	4798      	blx	r3
  }
}
 8009a36:	bf00      	nop
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20004700 	.word	0x20004700

08009a40 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009a48:	f3ef 8311 	mrs	r3, BASEPRI
 8009a4c:	f04f 0120 	mov.w	r1, #32
 8009a50:	f381 8811 	msr	BASEPRI, r1
 8009a54:	617b      	str	r3, [r7, #20]
 8009a56:	480b      	ldr	r0, [pc, #44]	@ (8009a84 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8009a58:	f7ff fa20 	bl	8008e9c <_PreparePacket>
 8009a5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009a5e:	2280      	movs	r2, #128	@ 0x80
 8009a60:	6879      	ldr	r1, [r7, #4]
 8009a62:	6938      	ldr	r0, [r7, #16]
 8009a64:	f7ff f9e2 	bl	8008e2c <_EncodeStr>
 8009a68:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8009a6a:	220e      	movs	r2, #14
 8009a6c:	68f9      	ldr	r1, [r7, #12]
 8009a6e:	6938      	ldr	r0, [r7, #16]
 8009a70:	f7ff fb00 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f383 8811 	msr	BASEPRI, r3
}
 8009a7a:	bf00      	nop
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	20004730 	.word	0x20004730

08009a88 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8009a88:	b590      	push	{r4, r7, lr}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8009a8e:	4b15      	ldr	r3, [pc, #84]	@ (8009ae4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d01a      	beq.n	8009acc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8009a96:	4b13      	ldr	r3, [pc, #76]	@ (8009ae4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d015      	beq.n	8009acc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8009aa0:	4b10      	ldr	r3, [pc, #64]	@ (8009ae4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009aa2:	6a1b      	ldr	r3, [r3, #32]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4798      	blx	r3
 8009aa8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009aac:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8009aae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ab2:	f04f 0200 	mov.w	r2, #0
 8009ab6:	f04f 0300 	mov.w	r3, #0
 8009aba:	000a      	movs	r2, r1
 8009abc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009abe:	4613      	mov	r3, r2
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	200d      	movs	r0, #13
 8009ac6:	f7ff fcef 	bl	80094a8 <SEGGER_SYSVIEW_RecordU32x2>
 8009aca:	e006      	b.n	8009ada <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8009acc:	4b06      	ldr	r3, [pc, #24]	@ (8009ae8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	200c      	movs	r0, #12
 8009ad4:	f7ff fcac 	bl	8009430 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8009ad8:	bf00      	nop
 8009ada:	bf00      	nop
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd90      	pop	{r4, r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20004700 	.word	0x20004700
 8009ae8:	e0001004 	.word	0xe0001004

08009aec <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009af2:	f3ef 8311 	mrs	r3, BASEPRI
 8009af6:	f04f 0120 	mov.w	r1, #32
 8009afa:	f381 8811 	msr	BASEPRI, r1
 8009afe:	60fb      	str	r3, [r7, #12]
 8009b00:	4819      	ldr	r0, [pc, #100]	@ (8009b68 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8009b02:	f7ff f9cb 	bl	8008e9c <_PreparePacket>
 8009b06:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8009b0c:	4b17      	ldr	r3, [pc, #92]	@ (8009b6c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b14:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	617b      	str	r3, [r7, #20]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	613b      	str	r3, [r7, #16]
 8009b1e:	e00b      	b.n	8009b38 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	1c59      	adds	r1, r3, #1
 8009b28:	6179      	str	r1, [r7, #20]
 8009b2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009b2e:	b2d2      	uxtb	r2, r2
 8009b30:	701a      	strb	r2, [r3, #0]
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	09db      	lsrs	r3, r3, #7
 8009b36:	613b      	str	r3, [r7, #16]
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b3c:	d8f0      	bhi.n	8009b20 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	617a      	str	r2, [r7, #20]
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	b2d2      	uxtb	r2, r2
 8009b48:	701a      	strb	r2, [r3, #0]
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8009b4e:	2202      	movs	r2, #2
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	68b8      	ldr	r0, [r7, #8]
 8009b54:	f7ff fa8e 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f383 8811 	msr	BASEPRI, r3
}
 8009b5e:	bf00      	nop
 8009b60:	3718      	adds	r7, #24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20004730 	.word	0x20004730
 8009b6c:	e000ed04 	.word	0xe000ed04

08009b70 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009b76:	f3ef 8311 	mrs	r3, BASEPRI
 8009b7a:	f04f 0120 	mov.w	r1, #32
 8009b7e:	f381 8811 	msr	BASEPRI, r1
 8009b82:	607b      	str	r3, [r7, #4]
 8009b84:	4807      	ldr	r0, [pc, #28]	@ (8009ba4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8009b86:	f7ff f989 	bl	8008e9c <_PreparePacket>
 8009b8a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8009b8c:	2203      	movs	r2, #3
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	6838      	ldr	r0, [r7, #0]
 8009b92:	f7ff fa6f 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f383 8811 	msr	BASEPRI, r3
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20004730 	.word	0x20004730

08009ba8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009bae:	f3ef 8311 	mrs	r3, BASEPRI
 8009bb2:	f04f 0120 	mov.w	r1, #32
 8009bb6:	f381 8811 	msr	BASEPRI, r1
 8009bba:	607b      	str	r3, [r7, #4]
 8009bbc:	4807      	ldr	r0, [pc, #28]	@ (8009bdc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8009bbe:	f7ff f96d 	bl	8008e9c <_PreparePacket>
 8009bc2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8009bc4:	2212      	movs	r2, #18
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	6838      	ldr	r0, [r7, #0]
 8009bca:	f7ff fa53 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f383 8811 	msr	BASEPRI, r3
}
 8009bd4:	bf00      	nop
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	20004730 	.word	0x20004730

08009be0 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009be8:	f3ef 8311 	mrs	r3, BASEPRI
 8009bec:	f04f 0120 	mov.w	r1, #32
 8009bf0:	f381 8811 	msr	BASEPRI, r1
 8009bf4:	617b      	str	r3, [r7, #20]
 8009bf6:	4817      	ldr	r0, [pc, #92]	@ (8009c54 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8009bf8:	f7ff f950 	bl	8008e9c <_PreparePacket>
 8009bfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	61fb      	str	r3, [r7, #28]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	61bb      	str	r3, [r7, #24]
 8009c0a:	e00b      	b.n	8009c24 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	1c59      	adds	r1, r3, #1
 8009c14:	61f9      	str	r1, [r7, #28]
 8009c16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009c1a:	b2d2      	uxtb	r2, r2
 8009c1c:	701a      	strb	r2, [r3, #0]
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	09db      	lsrs	r3, r3, #7
 8009c22:	61bb      	str	r3, [r7, #24]
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c28:	d8f0      	bhi.n	8009c0c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	61fa      	str	r2, [r7, #28]
 8009c30:	69ba      	ldr	r2, [r7, #24]
 8009c32:	b2d2      	uxtb	r2, r2
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8009c3a:	221c      	movs	r2, #28
 8009c3c:	68f9      	ldr	r1, [r7, #12]
 8009c3e:	6938      	ldr	r0, [r7, #16]
 8009c40:	f7ff fa18 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f383 8811 	msr	BASEPRI, r3
}
 8009c4a:	bf00      	nop
 8009c4c:	3720      	adds	r7, #32
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	20004730 	.word	0x20004730

08009c58 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08a      	sub	sp, #40	@ 0x28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009c62:	f3ef 8311 	mrs	r3, BASEPRI
 8009c66:	f04f 0120 	mov.w	r1, #32
 8009c6a:	f381 8811 	msr	BASEPRI, r1
 8009c6e:	617b      	str	r3, [r7, #20]
 8009c70:	4824      	ldr	r0, [pc, #144]	@ (8009d04 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8009c72:	f7ff f913 	bl	8008e9c <_PreparePacket>
 8009c76:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	623b      	str	r3, [r7, #32]
 8009c84:	e00b      	b.n	8009c9e <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	b2da      	uxtb	r2, r3
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8c:	1c59      	adds	r1, r3, #1
 8009c8e:	6279      	str	r1, [r7, #36]	@ 0x24
 8009c90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009c94:	b2d2      	uxtb	r2, r2
 8009c96:	701a      	strb	r2, [r3, #0]
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	09db      	lsrs	r3, r3, #7
 8009c9c:	623b      	str	r3, [r7, #32]
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ca2:	d8f0      	bhi.n	8009c86 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca6:	1c5a      	adds	r2, r3, #1
 8009ca8:	627a      	str	r2, [r7, #36]	@ 0x24
 8009caa:	6a3a      	ldr	r2, [r7, #32]
 8009cac:	b2d2      	uxtb	r2, r2
 8009cae:	701a      	strb	r2, [r3, #0]
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	61fb      	str	r3, [r7, #28]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	61bb      	str	r3, [r7, #24]
 8009cbc:	e00b      	b.n	8009cd6 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	1c59      	adds	r1, r3, #1
 8009cc6:	61f9      	str	r1, [r7, #28]
 8009cc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009ccc:	b2d2      	uxtb	r2, r2
 8009cce:	701a      	strb	r2, [r3, #0]
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	09db      	lsrs	r3, r3, #7
 8009cd4:	61bb      	str	r3, [r7, #24]
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8009cda:	d8f0      	bhi.n	8009cbe <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	1c5a      	adds	r2, r3, #1
 8009ce0:	61fa      	str	r2, [r7, #28]
 8009ce2:	69ba      	ldr	r2, [r7, #24]
 8009ce4:	b2d2      	uxtb	r2, r2
 8009ce6:	701a      	strb	r2, [r3, #0]
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8009cec:	221c      	movs	r2, #28
 8009cee:	68f9      	ldr	r1, [r7, #12]
 8009cf0:	6938      	ldr	r0, [r7, #16]
 8009cf2:	f7ff f9bf 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f383 8811 	msr	BASEPRI, r3
}
 8009cfc:	bf00      	nop
 8009cfe:	3728      	adds	r7, #40	@ 0x28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20004730 	.word	0x20004730

08009d08 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8009d12:	f04f 0120 	mov.w	r1, #32
 8009d16:	f381 8811 	msr	BASEPRI, r1
 8009d1a:	607b      	str	r3, [r7, #4]
 8009d1c:	4807      	ldr	r0, [pc, #28]	@ (8009d3c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8009d1e:	f7ff f8bd 	bl	8008e9c <_PreparePacket>
 8009d22:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8009d24:	2211      	movs	r2, #17
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6838      	ldr	r0, [r7, #0]
 8009d2a:	f7ff f9a3 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f383 8811 	msr	BASEPRI, r3
}
 8009d34:	bf00      	nop
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	20004730 	.word	0x20004730

08009d40 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b088      	sub	sp, #32
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009d48:	f3ef 8311 	mrs	r3, BASEPRI
 8009d4c:	f04f 0120 	mov.w	r1, #32
 8009d50:	f381 8811 	msr	BASEPRI, r1
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	4819      	ldr	r0, [pc, #100]	@ (8009dbc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8009d58:	f7ff f8a0 	bl	8008e9c <_PreparePacket>
 8009d5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009d62:	4b17      	ldr	r3, [pc, #92]	@ (8009dc0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	61fb      	str	r3, [r7, #28]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	61bb      	str	r3, [r7, #24]
 8009d74:	e00b      	b.n	8009d8e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	1c59      	adds	r1, r3, #1
 8009d7e:	61f9      	str	r1, [r7, #28]
 8009d80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009d84:	b2d2      	uxtb	r2, r2
 8009d86:	701a      	strb	r2, [r3, #0]
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	09db      	lsrs	r3, r3, #7
 8009d8c:	61bb      	str	r3, [r7, #24]
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d92:	d8f0      	bhi.n	8009d76 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	61fa      	str	r2, [r7, #28]
 8009d9a:	69ba      	ldr	r2, [r7, #24]
 8009d9c:	b2d2      	uxtb	r2, r2
 8009d9e:	701a      	strb	r2, [r3, #0]
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8009da4:	2208      	movs	r2, #8
 8009da6:	68f9      	ldr	r1, [r7, #12]
 8009da8:	6938      	ldr	r0, [r7, #16]
 8009daa:	f7ff f963 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f383 8811 	msr	BASEPRI, r3
}
 8009db4:	bf00      	nop
 8009db6:	3720      	adds	r7, #32
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20004730 	.word	0x20004730
 8009dc0:	20004700 	.word	0x20004700

08009dc4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8009dd0:	f04f 0120 	mov.w	r1, #32
 8009dd4:	f381 8811 	msr	BASEPRI, r1
 8009dd8:	617b      	str	r3, [r7, #20]
 8009dda:	4819      	ldr	r0, [pc, #100]	@ (8009e40 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8009ddc:	f7ff f85e 	bl	8008e9c <_PreparePacket>
 8009de0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009de6:	4b17      	ldr	r3, [pc, #92]	@ (8009e44 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	61fb      	str	r3, [r7, #28]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	61bb      	str	r3, [r7, #24]
 8009df8:	e00b      	b.n	8009e12 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	1c59      	adds	r1, r3, #1
 8009e02:	61f9      	str	r1, [r7, #28]
 8009e04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009e08:	b2d2      	uxtb	r2, r2
 8009e0a:	701a      	strb	r2, [r3, #0]
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	09db      	lsrs	r3, r3, #7
 8009e10:	61bb      	str	r3, [r7, #24]
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e16:	d8f0      	bhi.n	8009dfa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	1c5a      	adds	r2, r3, #1
 8009e1c:	61fa      	str	r2, [r7, #28]
 8009e1e:	69ba      	ldr	r2, [r7, #24]
 8009e20:	b2d2      	uxtb	r2, r2
 8009e22:	701a      	strb	r2, [r3, #0]
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009e28:	2204      	movs	r2, #4
 8009e2a:	68f9      	ldr	r1, [r7, #12]
 8009e2c:	6938      	ldr	r0, [r7, #16]
 8009e2e:	f7ff f921 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f383 8811 	msr	BASEPRI, r3
}
 8009e38:	bf00      	nop
 8009e3a:	3720      	adds	r7, #32
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	20004730 	.word	0x20004730
 8009e44:	20004700 	.word	0x20004700

08009e48 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009e50:	f3ef 8311 	mrs	r3, BASEPRI
 8009e54:	f04f 0120 	mov.w	r1, #32
 8009e58:	f381 8811 	msr	BASEPRI, r1
 8009e5c:	617b      	str	r3, [r7, #20]
 8009e5e:	4819      	ldr	r0, [pc, #100]	@ (8009ec4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8009e60:	f7ff f81c 	bl	8008e9c <_PreparePacket>
 8009e64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009e6a:	4b17      	ldr	r3, [pc, #92]	@ (8009ec8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	61fb      	str	r3, [r7, #28]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	61bb      	str	r3, [r7, #24]
 8009e7c:	e00b      	b.n	8009e96 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	1c59      	adds	r1, r3, #1
 8009e86:	61f9      	str	r1, [r7, #28]
 8009e88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009e8c:	b2d2      	uxtb	r2, r2
 8009e8e:	701a      	strb	r2, [r3, #0]
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	09db      	lsrs	r3, r3, #7
 8009e94:	61bb      	str	r3, [r7, #24]
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e9a:	d8f0      	bhi.n	8009e7e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	61fa      	str	r2, [r7, #28]
 8009ea2:	69ba      	ldr	r2, [r7, #24]
 8009ea4:	b2d2      	uxtb	r2, r2
 8009ea6:	701a      	strb	r2, [r3, #0]
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8009eac:	2206      	movs	r2, #6
 8009eae:	68f9      	ldr	r1, [r7, #12]
 8009eb0:	6938      	ldr	r0, [r7, #16]
 8009eb2:	f7ff f8df 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f383 8811 	msr	BASEPRI, r3
}
 8009ebc:	bf00      	nop
 8009ebe:	3720      	adds	r7, #32
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	20004730 	.word	0x20004730
 8009ec8:	20004700 	.word	0x20004700

08009ecc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b08a      	sub	sp, #40	@ 0x28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8009eda:	f04f 0120 	mov.w	r1, #32
 8009ede:	f381 8811 	msr	BASEPRI, r1
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	4827      	ldr	r0, [pc, #156]	@ (8009f84 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8009ee6:	f7fe ffd9 	bl	8008e9c <_PreparePacket>
 8009eea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009ef0:	4b25      	ldr	r3, [pc, #148]	@ (8009f88 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	623b      	str	r3, [r7, #32]
 8009f02:	e00b      	b.n	8009f1c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0a:	1c59      	adds	r1, r3, #1
 8009f0c:	6279      	str	r1, [r7, #36]	@ 0x24
 8009f0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	09db      	lsrs	r3, r3, #7
 8009f1a:	623b      	str	r3, [r7, #32]
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f20:	d8f0      	bhi.n	8009f04 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8009f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f24:	1c5a      	adds	r2, r3, #1
 8009f26:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f28:	6a3a      	ldr	r2, [r7, #32]
 8009f2a:	b2d2      	uxtb	r2, r2
 8009f2c:	701a      	strb	r2, [r3, #0]
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	61fb      	str	r3, [r7, #28]
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	61bb      	str	r3, [r7, #24]
 8009f3a:	e00b      	b.n	8009f54 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	1c59      	adds	r1, r3, #1
 8009f44:	61f9      	str	r1, [r7, #28]
 8009f46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f4a:	b2d2      	uxtb	r2, r2
 8009f4c:	701a      	strb	r2, [r3, #0]
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	09db      	lsrs	r3, r3, #7
 8009f52:	61bb      	str	r3, [r7, #24]
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f58:	d8f0      	bhi.n	8009f3c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	61fa      	str	r2, [r7, #28]
 8009f60:	69ba      	ldr	r2, [r7, #24]
 8009f62:	b2d2      	uxtb	r2, r2
 8009f64:	701a      	strb	r2, [r3, #0]
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8009f6a:	2207      	movs	r2, #7
 8009f6c:	68f9      	ldr	r1, [r7, #12]
 8009f6e:	6938      	ldr	r0, [r7, #16]
 8009f70:	f7ff f880 	bl	8009074 <_SendPacket>
  RECORD_END();
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f383 8811 	msr	BASEPRI, r3
}
 8009f7a:	bf00      	nop
 8009f7c:	3728      	adds	r7, #40	@ 0x28
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	20004730 	.word	0x20004730
 8009f88:	20004700 	.word	0x20004700

08009f8c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8009f94:	4b04      	ldr	r3, [pc, #16]	@ (8009fa8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	1ad3      	subs	r3, r2, r3
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bc80      	pop	{r7}
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	20004700 	.word	0x20004700

08009fac <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08c      	sub	sp, #48	@ 0x30
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8009fb6:	4b40      	ldr	r3, [pc, #256]	@ (800a0b8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d077      	beq.n	800a0ae <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8009fbe:	4b3e      	ldr	r3, [pc, #248]	@ (800a0b8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fc8:	e008      	b.n	8009fdc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8009fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8009fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d007      	beq.n	8009fe6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8009fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd8:	3301      	adds	r3, #1
 8009fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fdc:	79fb      	ldrb	r3, [r7, #7]
 8009fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d3f2      	bcc.n	8009fca <SEGGER_SYSVIEW_SendModule+0x1e>
 8009fe4:	e000      	b.n	8009fe8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8009fe6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8009fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d055      	beq.n	800a09a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009fee:	f3ef 8311 	mrs	r3, BASEPRI
 8009ff2:	f04f 0120 	mov.w	r1, #32
 8009ff6:	f381 8811 	msr	BASEPRI, r1
 8009ffa:	617b      	str	r3, [r7, #20]
 8009ffc:	482f      	ldr	r0, [pc, #188]	@ (800a0bc <SEGGER_SYSVIEW_SendModule+0x110>)
 8009ffe:	f7fe ff4d 	bl	8008e9c <_PreparePacket>
 800a002:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a00c:	79fb      	ldrb	r3, [r7, #7]
 800a00e:	623b      	str	r3, [r7, #32]
 800a010:	e00b      	b.n	800a02a <SEGGER_SYSVIEW_SendModule+0x7e>
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	b2da      	uxtb	r2, r3
 800a016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a018:	1c59      	adds	r1, r3, #1
 800a01a:	6279      	str	r1, [r7, #36]	@ 0x24
 800a01c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a020:	b2d2      	uxtb	r2, r2
 800a022:	701a      	strb	r2, [r3, #0]
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	09db      	lsrs	r3, r3, #7
 800a028:	623b      	str	r3, [r7, #32]
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a02e:	d8f0      	bhi.n	800a012 <SEGGER_SYSVIEW_SendModule+0x66>
 800a030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a032:	1c5a      	adds	r2, r3, #1
 800a034:	627a      	str	r2, [r7, #36]	@ 0x24
 800a036:	6a3a      	ldr	r2, [r7, #32]
 800a038:	b2d2      	uxtb	r2, r2
 800a03a:	701a      	strb	r2, [r3, #0]
 800a03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	61fb      	str	r3, [r7, #28]
 800a044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	61bb      	str	r3, [r7, #24]
 800a04a:	e00b      	b.n	800a064 <SEGGER_SYSVIEW_SendModule+0xb8>
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	1c59      	adds	r1, r3, #1
 800a054:	61f9      	str	r1, [r7, #28]
 800a056:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a05a:	b2d2      	uxtb	r2, r2
 800a05c:	701a      	strb	r2, [r3, #0]
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	09db      	lsrs	r3, r3, #7
 800a062:	61bb      	str	r3, [r7, #24]
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	2b7f      	cmp	r3, #127	@ 0x7f
 800a068:	d8f0      	bhi.n	800a04c <SEGGER_SYSVIEW_SendModule+0xa0>
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	61fa      	str	r2, [r7, #28]
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	b2d2      	uxtb	r2, r2
 800a074:	701a      	strb	r2, [r3, #0]
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a07a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2280      	movs	r2, #128	@ 0x80
 800a080:	4619      	mov	r1, r3
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7fe fed2 	bl	8008e2c <_EncodeStr>
 800a088:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800a08a:	2216      	movs	r2, #22
 800a08c:	68f9      	ldr	r1, [r7, #12]
 800a08e:	6938      	ldr	r0, [r7, #16]
 800a090:	f7fe fff0 	bl	8009074 <_SendPacket>
      RECORD_END();
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800a09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d006      	beq.n	800a0ae <SEGGER_SYSVIEW_SendModule+0x102>
 800a0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800a0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	4798      	blx	r3
    }
  }
}
 800a0ae:	bf00      	nop
 800a0b0:	3730      	adds	r7, #48	@ 0x30
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20004728 	.word	0x20004728
 800a0bc:	20004730 	.word	0x20004730

0800a0c0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800a0c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00f      	beq.n	800a0ee <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800a0ce:	4b0a      	ldr	r3, [pc, #40]	@ (800a0f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1f2      	bne.n	800a0d4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800a0ee:	bf00      	nop
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20004728 	.word	0x20004728

0800a0fc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800a102:	f3ef 8311 	mrs	r3, BASEPRI
 800a106:	f04f 0120 	mov.w	r1, #32
 800a10a:	f381 8811 	msr	BASEPRI, r1
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	4817      	ldr	r0, [pc, #92]	@ (800a170 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800a112:	f7fe fec3 	bl	8008e9c <_PreparePacket>
 800a116:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	4b14      	ldr	r3, [pc, #80]	@ (800a174 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	613b      	str	r3, [r7, #16]
 800a126:	e00b      	b.n	800a140 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	b2da      	uxtb	r2, r3
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	1c59      	adds	r1, r3, #1
 800a130:	6179      	str	r1, [r7, #20]
 800a132:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a136:	b2d2      	uxtb	r2, r2
 800a138:	701a      	strb	r2, [r3, #0]
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	09db      	lsrs	r3, r3, #7
 800a13e:	613b      	str	r3, [r7, #16]
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	2b7f      	cmp	r3, #127	@ 0x7f
 800a144:	d8f0      	bhi.n	800a128 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	1c5a      	adds	r2, r3, #1
 800a14a:	617a      	str	r2, [r7, #20]
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	b2d2      	uxtb	r2, r2
 800a150:	701a      	strb	r2, [r3, #0]
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800a156:	221b      	movs	r2, #27
 800a158:	6879      	ldr	r1, [r7, #4]
 800a15a:	68b8      	ldr	r0, [r7, #8]
 800a15c:	f7fe ff8a 	bl	8009074 <_SendPacket>
  RECORD_END();
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f383 8811 	msr	BASEPRI, r3
}
 800a166:	bf00      	nop
 800a168:	3718      	adds	r7, #24
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	20004730 	.word	0x20004730
 800a174:	2000472c 	.word	0x2000472c

0800a178 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08a      	sub	sp, #40	@ 0x28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a180:	f3ef 8311 	mrs	r3, BASEPRI
 800a184:	f04f 0120 	mov.w	r1, #32
 800a188:	f381 8811 	msr	BASEPRI, r1
 800a18c:	617b      	str	r3, [r7, #20]
 800a18e:	4827      	ldr	r0, [pc, #156]	@ (800a22c <SEGGER_SYSVIEW_Warn+0xb4>)
 800a190:	f7fe fe84 	bl	8008e9c <_PreparePacket>
 800a194:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a196:	2280      	movs	r2, #128	@ 0x80
 800a198:	6879      	ldr	r1, [r7, #4]
 800a19a:	6938      	ldr	r0, [r7, #16]
 800a19c:	f7fe fe46 	bl	8008e2c <_EncodeStr>
 800a1a0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	623b      	str	r3, [r7, #32]
 800a1aa:	e00b      	b.n	800a1c4 <SEGGER_SYSVIEW_Warn+0x4c>
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b2:	1c59      	adds	r1, r3, #1
 800a1b4:	6279      	str	r1, [r7, #36]	@ 0x24
 800a1b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a1ba:	b2d2      	uxtb	r2, r2
 800a1bc:	701a      	strb	r2, [r3, #0]
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	09db      	lsrs	r3, r3, #7
 800a1c2:	623b      	str	r3, [r7, #32]
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800a1c8:	d8f0      	bhi.n	800a1ac <SEGGER_SYSVIEW_Warn+0x34>
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1cc:	1c5a      	adds	r2, r3, #1
 800a1ce:	627a      	str	r2, [r7, #36]	@ 0x24
 800a1d0:	6a3a      	ldr	r2, [r7, #32]
 800a1d2:	b2d2      	uxtb	r2, r2
 800a1d4:	701a      	strb	r2, [r3, #0]
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	61fb      	str	r3, [r7, #28]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	61bb      	str	r3, [r7, #24]
 800a1e2:	e00b      	b.n	800a1fc <SEGGER_SYSVIEW_Warn+0x84>
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	1c59      	adds	r1, r3, #1
 800a1ec:	61f9      	str	r1, [r7, #28]
 800a1ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a1f2:	b2d2      	uxtb	r2, r2
 800a1f4:	701a      	strb	r2, [r3, #0]
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	09db      	lsrs	r3, r3, #7
 800a1fa:	61bb      	str	r3, [r7, #24]
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800a200:	d8f0      	bhi.n	800a1e4 <SEGGER_SYSVIEW_Warn+0x6c>
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	1c5a      	adds	r2, r3, #1
 800a206:	61fa      	str	r2, [r7, #28]
 800a208:	69ba      	ldr	r2, [r7, #24]
 800a20a:	b2d2      	uxtb	r2, r2
 800a20c:	701a      	strb	r2, [r3, #0]
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a212:	221a      	movs	r2, #26
 800a214:	68f9      	ldr	r1, [r7, #12]
 800a216:	6938      	ldr	r0, [r7, #16]
 800a218:	f7fe ff2c 	bl	8009074 <_SendPacket>
  RECORD_END();
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	f383 8811 	msr	BASEPRI, r3
}
 800a222:	bf00      	nop
 800a224:	3728      	adds	r7, #40	@ 0x28
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20004730 	.word	0x20004730

0800a230 <siprintf>:
 800a230:	b40e      	push	{r1, r2, r3}
 800a232:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a236:	b510      	push	{r4, lr}
 800a238:	2400      	movs	r4, #0
 800a23a:	b09d      	sub	sp, #116	@ 0x74
 800a23c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a23e:	9002      	str	r0, [sp, #8]
 800a240:	9006      	str	r0, [sp, #24]
 800a242:	9107      	str	r1, [sp, #28]
 800a244:	9104      	str	r1, [sp, #16]
 800a246:	4809      	ldr	r0, [pc, #36]	@ (800a26c <siprintf+0x3c>)
 800a248:	4909      	ldr	r1, [pc, #36]	@ (800a270 <siprintf+0x40>)
 800a24a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a24e:	9105      	str	r1, [sp, #20]
 800a250:	6800      	ldr	r0, [r0, #0]
 800a252:	a902      	add	r1, sp, #8
 800a254:	9301      	str	r3, [sp, #4]
 800a256:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a258:	f000 f9b0 	bl	800a5bc <_svfiprintf_r>
 800a25c:	9b02      	ldr	r3, [sp, #8]
 800a25e:	701c      	strb	r4, [r3, #0]
 800a260:	b01d      	add	sp, #116	@ 0x74
 800a262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a266:	b003      	add	sp, #12
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	20000010 	.word	0x20000010
 800a270:	ffff0208 	.word	0xffff0208

0800a274 <memcmp>:
 800a274:	b510      	push	{r4, lr}
 800a276:	3901      	subs	r1, #1
 800a278:	4402      	add	r2, r0
 800a27a:	4290      	cmp	r0, r2
 800a27c:	d101      	bne.n	800a282 <memcmp+0xe>
 800a27e:	2000      	movs	r0, #0
 800a280:	e005      	b.n	800a28e <memcmp+0x1a>
 800a282:	7803      	ldrb	r3, [r0, #0]
 800a284:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d001      	beq.n	800a290 <memcmp+0x1c>
 800a28c:	1b18      	subs	r0, r3, r4
 800a28e:	bd10      	pop	{r4, pc}
 800a290:	3001      	adds	r0, #1
 800a292:	e7f2      	b.n	800a27a <memcmp+0x6>

0800a294 <memset>:
 800a294:	4603      	mov	r3, r0
 800a296:	4402      	add	r2, r0
 800a298:	4293      	cmp	r3, r2
 800a29a:	d100      	bne.n	800a29e <memset+0xa>
 800a29c:	4770      	bx	lr
 800a29e:	f803 1b01 	strb.w	r1, [r3], #1
 800a2a2:	e7f9      	b.n	800a298 <memset+0x4>

0800a2a4 <__errno>:
 800a2a4:	4b01      	ldr	r3, [pc, #4]	@ (800a2ac <__errno+0x8>)
 800a2a6:	6818      	ldr	r0, [r3, #0]
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	20000010 	.word	0x20000010

0800a2b0 <__libc_init_array>:
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	2600      	movs	r6, #0
 800a2b4:	4d0c      	ldr	r5, [pc, #48]	@ (800a2e8 <__libc_init_array+0x38>)
 800a2b6:	4c0d      	ldr	r4, [pc, #52]	@ (800a2ec <__libc_init_array+0x3c>)
 800a2b8:	1b64      	subs	r4, r4, r5
 800a2ba:	10a4      	asrs	r4, r4, #2
 800a2bc:	42a6      	cmp	r6, r4
 800a2be:	d109      	bne.n	800a2d4 <__libc_init_array+0x24>
 800a2c0:	f000 fc76 	bl	800abb0 <_init>
 800a2c4:	2600      	movs	r6, #0
 800a2c6:	4d0a      	ldr	r5, [pc, #40]	@ (800a2f0 <__libc_init_array+0x40>)
 800a2c8:	4c0a      	ldr	r4, [pc, #40]	@ (800a2f4 <__libc_init_array+0x44>)
 800a2ca:	1b64      	subs	r4, r4, r5
 800a2cc:	10a4      	asrs	r4, r4, #2
 800a2ce:	42a6      	cmp	r6, r4
 800a2d0:	d105      	bne.n	800a2de <__libc_init_array+0x2e>
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2d8:	4798      	blx	r3
 800a2da:	3601      	adds	r6, #1
 800a2dc:	e7ee      	b.n	800a2bc <__libc_init_array+0xc>
 800a2de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2e2:	4798      	blx	r3
 800a2e4:	3601      	adds	r6, #1
 800a2e6:	e7f2      	b.n	800a2ce <__libc_init_array+0x1e>
 800a2e8:	0800adc8 	.word	0x0800adc8
 800a2ec:	0800adc8 	.word	0x0800adc8
 800a2f0:	0800adc8 	.word	0x0800adc8
 800a2f4:	0800adcc 	.word	0x0800adcc

0800a2f8 <__retarget_lock_acquire_recursive>:
 800a2f8:	4770      	bx	lr

0800a2fa <__retarget_lock_release_recursive>:
 800a2fa:	4770      	bx	lr

0800a2fc <memcpy>:
 800a2fc:	440a      	add	r2, r1
 800a2fe:	4291      	cmp	r1, r2
 800a300:	f100 33ff 	add.w	r3, r0, #4294967295
 800a304:	d100      	bne.n	800a308 <memcpy+0xc>
 800a306:	4770      	bx	lr
 800a308:	b510      	push	{r4, lr}
 800a30a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a30e:	4291      	cmp	r1, r2
 800a310:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a314:	d1f9      	bne.n	800a30a <memcpy+0xe>
 800a316:	bd10      	pop	{r4, pc}

0800a318 <_free_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4605      	mov	r5, r0
 800a31c:	2900      	cmp	r1, #0
 800a31e:	d040      	beq.n	800a3a2 <_free_r+0x8a>
 800a320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a324:	1f0c      	subs	r4, r1, #4
 800a326:	2b00      	cmp	r3, #0
 800a328:	bfb8      	it	lt
 800a32a:	18e4      	addlt	r4, r4, r3
 800a32c:	f000 f8de 	bl	800a4ec <__malloc_lock>
 800a330:	4a1c      	ldr	r2, [pc, #112]	@ (800a3a4 <_free_r+0x8c>)
 800a332:	6813      	ldr	r3, [r2, #0]
 800a334:	b933      	cbnz	r3, 800a344 <_free_r+0x2c>
 800a336:	6063      	str	r3, [r4, #4]
 800a338:	6014      	str	r4, [r2, #0]
 800a33a:	4628      	mov	r0, r5
 800a33c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a340:	f000 b8da 	b.w	800a4f8 <__malloc_unlock>
 800a344:	42a3      	cmp	r3, r4
 800a346:	d908      	bls.n	800a35a <_free_r+0x42>
 800a348:	6820      	ldr	r0, [r4, #0]
 800a34a:	1821      	adds	r1, r4, r0
 800a34c:	428b      	cmp	r3, r1
 800a34e:	bf01      	itttt	eq
 800a350:	6819      	ldreq	r1, [r3, #0]
 800a352:	685b      	ldreq	r3, [r3, #4]
 800a354:	1809      	addeq	r1, r1, r0
 800a356:	6021      	streq	r1, [r4, #0]
 800a358:	e7ed      	b.n	800a336 <_free_r+0x1e>
 800a35a:	461a      	mov	r2, r3
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	b10b      	cbz	r3, 800a364 <_free_r+0x4c>
 800a360:	42a3      	cmp	r3, r4
 800a362:	d9fa      	bls.n	800a35a <_free_r+0x42>
 800a364:	6811      	ldr	r1, [r2, #0]
 800a366:	1850      	adds	r0, r2, r1
 800a368:	42a0      	cmp	r0, r4
 800a36a:	d10b      	bne.n	800a384 <_free_r+0x6c>
 800a36c:	6820      	ldr	r0, [r4, #0]
 800a36e:	4401      	add	r1, r0
 800a370:	1850      	adds	r0, r2, r1
 800a372:	4283      	cmp	r3, r0
 800a374:	6011      	str	r1, [r2, #0]
 800a376:	d1e0      	bne.n	800a33a <_free_r+0x22>
 800a378:	6818      	ldr	r0, [r3, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	4408      	add	r0, r1
 800a37e:	6010      	str	r0, [r2, #0]
 800a380:	6053      	str	r3, [r2, #4]
 800a382:	e7da      	b.n	800a33a <_free_r+0x22>
 800a384:	d902      	bls.n	800a38c <_free_r+0x74>
 800a386:	230c      	movs	r3, #12
 800a388:	602b      	str	r3, [r5, #0]
 800a38a:	e7d6      	b.n	800a33a <_free_r+0x22>
 800a38c:	6820      	ldr	r0, [r4, #0]
 800a38e:	1821      	adds	r1, r4, r0
 800a390:	428b      	cmp	r3, r1
 800a392:	bf01      	itttt	eq
 800a394:	6819      	ldreq	r1, [r3, #0]
 800a396:	685b      	ldreq	r3, [r3, #4]
 800a398:	1809      	addeq	r1, r1, r0
 800a39a:	6021      	streq	r1, [r4, #0]
 800a39c:	6063      	str	r3, [r4, #4]
 800a39e:	6054      	str	r4, [r2, #4]
 800a3a0:	e7cb      	b.n	800a33a <_free_r+0x22>
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	20004958 	.word	0x20004958

0800a3a8 <sbrk_aligned>:
 800a3a8:	b570      	push	{r4, r5, r6, lr}
 800a3aa:	4e0f      	ldr	r6, [pc, #60]	@ (800a3e8 <sbrk_aligned+0x40>)
 800a3ac:	460c      	mov	r4, r1
 800a3ae:	6831      	ldr	r1, [r6, #0]
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	b911      	cbnz	r1, 800a3ba <sbrk_aligned+0x12>
 800a3b4:	f000 fba8 	bl	800ab08 <_sbrk_r>
 800a3b8:	6030      	str	r0, [r6, #0]
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	4628      	mov	r0, r5
 800a3be:	f000 fba3 	bl	800ab08 <_sbrk_r>
 800a3c2:	1c43      	adds	r3, r0, #1
 800a3c4:	d103      	bne.n	800a3ce <sbrk_aligned+0x26>
 800a3c6:	f04f 34ff 	mov.w	r4, #4294967295
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	bd70      	pop	{r4, r5, r6, pc}
 800a3ce:	1cc4      	adds	r4, r0, #3
 800a3d0:	f024 0403 	bic.w	r4, r4, #3
 800a3d4:	42a0      	cmp	r0, r4
 800a3d6:	d0f8      	beq.n	800a3ca <sbrk_aligned+0x22>
 800a3d8:	1a21      	subs	r1, r4, r0
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f000 fb94 	bl	800ab08 <_sbrk_r>
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d1f2      	bne.n	800a3ca <sbrk_aligned+0x22>
 800a3e4:	e7ef      	b.n	800a3c6 <sbrk_aligned+0x1e>
 800a3e6:	bf00      	nop
 800a3e8:	20004954 	.word	0x20004954

0800a3ec <_malloc_r>:
 800a3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f0:	1ccd      	adds	r5, r1, #3
 800a3f2:	f025 0503 	bic.w	r5, r5, #3
 800a3f6:	3508      	adds	r5, #8
 800a3f8:	2d0c      	cmp	r5, #12
 800a3fa:	bf38      	it	cc
 800a3fc:	250c      	movcc	r5, #12
 800a3fe:	2d00      	cmp	r5, #0
 800a400:	4606      	mov	r6, r0
 800a402:	db01      	blt.n	800a408 <_malloc_r+0x1c>
 800a404:	42a9      	cmp	r1, r5
 800a406:	d904      	bls.n	800a412 <_malloc_r+0x26>
 800a408:	230c      	movs	r3, #12
 800a40a:	6033      	str	r3, [r6, #0]
 800a40c:	2000      	movs	r0, #0
 800a40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4e8 <_malloc_r+0xfc>
 800a416:	f000 f869 	bl	800a4ec <__malloc_lock>
 800a41a:	f8d8 3000 	ldr.w	r3, [r8]
 800a41e:	461c      	mov	r4, r3
 800a420:	bb44      	cbnz	r4, 800a474 <_malloc_r+0x88>
 800a422:	4629      	mov	r1, r5
 800a424:	4630      	mov	r0, r6
 800a426:	f7ff ffbf 	bl	800a3a8 <sbrk_aligned>
 800a42a:	1c43      	adds	r3, r0, #1
 800a42c:	4604      	mov	r4, r0
 800a42e:	d158      	bne.n	800a4e2 <_malloc_r+0xf6>
 800a430:	f8d8 4000 	ldr.w	r4, [r8]
 800a434:	4627      	mov	r7, r4
 800a436:	2f00      	cmp	r7, #0
 800a438:	d143      	bne.n	800a4c2 <_malloc_r+0xd6>
 800a43a:	2c00      	cmp	r4, #0
 800a43c:	d04b      	beq.n	800a4d6 <_malloc_r+0xea>
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	4639      	mov	r1, r7
 800a442:	4630      	mov	r0, r6
 800a444:	eb04 0903 	add.w	r9, r4, r3
 800a448:	f000 fb5e 	bl	800ab08 <_sbrk_r>
 800a44c:	4581      	cmp	r9, r0
 800a44e:	d142      	bne.n	800a4d6 <_malloc_r+0xea>
 800a450:	6821      	ldr	r1, [r4, #0]
 800a452:	4630      	mov	r0, r6
 800a454:	1a6d      	subs	r5, r5, r1
 800a456:	4629      	mov	r1, r5
 800a458:	f7ff ffa6 	bl	800a3a8 <sbrk_aligned>
 800a45c:	3001      	adds	r0, #1
 800a45e:	d03a      	beq.n	800a4d6 <_malloc_r+0xea>
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	442b      	add	r3, r5
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	f8d8 3000 	ldr.w	r3, [r8]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	bb62      	cbnz	r2, 800a4c8 <_malloc_r+0xdc>
 800a46e:	f8c8 7000 	str.w	r7, [r8]
 800a472:	e00f      	b.n	800a494 <_malloc_r+0xa8>
 800a474:	6822      	ldr	r2, [r4, #0]
 800a476:	1b52      	subs	r2, r2, r5
 800a478:	d420      	bmi.n	800a4bc <_malloc_r+0xd0>
 800a47a:	2a0b      	cmp	r2, #11
 800a47c:	d917      	bls.n	800a4ae <_malloc_r+0xc2>
 800a47e:	1961      	adds	r1, r4, r5
 800a480:	42a3      	cmp	r3, r4
 800a482:	6025      	str	r5, [r4, #0]
 800a484:	bf18      	it	ne
 800a486:	6059      	strne	r1, [r3, #4]
 800a488:	6863      	ldr	r3, [r4, #4]
 800a48a:	bf08      	it	eq
 800a48c:	f8c8 1000 	streq.w	r1, [r8]
 800a490:	5162      	str	r2, [r4, r5]
 800a492:	604b      	str	r3, [r1, #4]
 800a494:	4630      	mov	r0, r6
 800a496:	f000 f82f 	bl	800a4f8 <__malloc_unlock>
 800a49a:	f104 000b 	add.w	r0, r4, #11
 800a49e:	1d23      	adds	r3, r4, #4
 800a4a0:	f020 0007 	bic.w	r0, r0, #7
 800a4a4:	1ac2      	subs	r2, r0, r3
 800a4a6:	bf1c      	itt	ne
 800a4a8:	1a1b      	subne	r3, r3, r0
 800a4aa:	50a3      	strne	r3, [r4, r2]
 800a4ac:	e7af      	b.n	800a40e <_malloc_r+0x22>
 800a4ae:	6862      	ldr	r2, [r4, #4]
 800a4b0:	42a3      	cmp	r3, r4
 800a4b2:	bf0c      	ite	eq
 800a4b4:	f8c8 2000 	streq.w	r2, [r8]
 800a4b8:	605a      	strne	r2, [r3, #4]
 800a4ba:	e7eb      	b.n	800a494 <_malloc_r+0xa8>
 800a4bc:	4623      	mov	r3, r4
 800a4be:	6864      	ldr	r4, [r4, #4]
 800a4c0:	e7ae      	b.n	800a420 <_malloc_r+0x34>
 800a4c2:	463c      	mov	r4, r7
 800a4c4:	687f      	ldr	r7, [r7, #4]
 800a4c6:	e7b6      	b.n	800a436 <_malloc_r+0x4a>
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	42a3      	cmp	r3, r4
 800a4ce:	d1fb      	bne.n	800a4c8 <_malloc_r+0xdc>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	6053      	str	r3, [r2, #4]
 800a4d4:	e7de      	b.n	800a494 <_malloc_r+0xa8>
 800a4d6:	230c      	movs	r3, #12
 800a4d8:	4630      	mov	r0, r6
 800a4da:	6033      	str	r3, [r6, #0]
 800a4dc:	f000 f80c 	bl	800a4f8 <__malloc_unlock>
 800a4e0:	e794      	b.n	800a40c <_malloc_r+0x20>
 800a4e2:	6005      	str	r5, [r0, #0]
 800a4e4:	e7d6      	b.n	800a494 <_malloc_r+0xa8>
 800a4e6:	bf00      	nop
 800a4e8:	20004958 	.word	0x20004958

0800a4ec <__malloc_lock>:
 800a4ec:	4801      	ldr	r0, [pc, #4]	@ (800a4f4 <__malloc_lock+0x8>)
 800a4ee:	f7ff bf03 	b.w	800a2f8 <__retarget_lock_acquire_recursive>
 800a4f2:	bf00      	nop
 800a4f4:	20004950 	.word	0x20004950

0800a4f8 <__malloc_unlock>:
 800a4f8:	4801      	ldr	r0, [pc, #4]	@ (800a500 <__malloc_unlock+0x8>)
 800a4fa:	f7ff befe 	b.w	800a2fa <__retarget_lock_release_recursive>
 800a4fe:	bf00      	nop
 800a500:	20004950 	.word	0x20004950

0800a504 <__ssputs_r>:
 800a504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a508:	461f      	mov	r7, r3
 800a50a:	688e      	ldr	r6, [r1, #8]
 800a50c:	4682      	mov	sl, r0
 800a50e:	42be      	cmp	r6, r7
 800a510:	460c      	mov	r4, r1
 800a512:	4690      	mov	r8, r2
 800a514:	680b      	ldr	r3, [r1, #0]
 800a516:	d82d      	bhi.n	800a574 <__ssputs_r+0x70>
 800a518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a51c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a520:	d026      	beq.n	800a570 <__ssputs_r+0x6c>
 800a522:	6965      	ldr	r5, [r4, #20]
 800a524:	6909      	ldr	r1, [r1, #16]
 800a526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a52a:	eba3 0901 	sub.w	r9, r3, r1
 800a52e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a532:	1c7b      	adds	r3, r7, #1
 800a534:	444b      	add	r3, r9
 800a536:	106d      	asrs	r5, r5, #1
 800a538:	429d      	cmp	r5, r3
 800a53a:	bf38      	it	cc
 800a53c:	461d      	movcc	r5, r3
 800a53e:	0553      	lsls	r3, r2, #21
 800a540:	d527      	bpl.n	800a592 <__ssputs_r+0x8e>
 800a542:	4629      	mov	r1, r5
 800a544:	f7ff ff52 	bl	800a3ec <_malloc_r>
 800a548:	4606      	mov	r6, r0
 800a54a:	b360      	cbz	r0, 800a5a6 <__ssputs_r+0xa2>
 800a54c:	464a      	mov	r2, r9
 800a54e:	6921      	ldr	r1, [r4, #16]
 800a550:	f7ff fed4 	bl	800a2fc <memcpy>
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a55a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a55e:	81a3      	strh	r3, [r4, #12]
 800a560:	6126      	str	r6, [r4, #16]
 800a562:	444e      	add	r6, r9
 800a564:	6026      	str	r6, [r4, #0]
 800a566:	463e      	mov	r6, r7
 800a568:	6165      	str	r5, [r4, #20]
 800a56a:	eba5 0509 	sub.w	r5, r5, r9
 800a56e:	60a5      	str	r5, [r4, #8]
 800a570:	42be      	cmp	r6, r7
 800a572:	d900      	bls.n	800a576 <__ssputs_r+0x72>
 800a574:	463e      	mov	r6, r7
 800a576:	4632      	mov	r2, r6
 800a578:	4641      	mov	r1, r8
 800a57a:	6820      	ldr	r0, [r4, #0]
 800a57c:	f000 faaa 	bl	800aad4 <memmove>
 800a580:	2000      	movs	r0, #0
 800a582:	68a3      	ldr	r3, [r4, #8]
 800a584:	1b9b      	subs	r3, r3, r6
 800a586:	60a3      	str	r3, [r4, #8]
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	4433      	add	r3, r6
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a592:	462a      	mov	r2, r5
 800a594:	f000 fad6 	bl	800ab44 <_realloc_r>
 800a598:	4606      	mov	r6, r0
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d1e0      	bne.n	800a560 <__ssputs_r+0x5c>
 800a59e:	4650      	mov	r0, sl
 800a5a0:	6921      	ldr	r1, [r4, #16]
 800a5a2:	f7ff feb9 	bl	800a318 <_free_r>
 800a5a6:	230c      	movs	r3, #12
 800a5a8:	f8ca 3000 	str.w	r3, [sl]
 800a5ac:	89a3      	ldrh	r3, [r4, #12]
 800a5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5b6:	81a3      	strh	r3, [r4, #12]
 800a5b8:	e7e9      	b.n	800a58e <__ssputs_r+0x8a>
	...

0800a5bc <_svfiprintf_r>:
 800a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	4698      	mov	r8, r3
 800a5c2:	898b      	ldrh	r3, [r1, #12]
 800a5c4:	4607      	mov	r7, r0
 800a5c6:	061b      	lsls	r3, r3, #24
 800a5c8:	460d      	mov	r5, r1
 800a5ca:	4614      	mov	r4, r2
 800a5cc:	b09d      	sub	sp, #116	@ 0x74
 800a5ce:	d510      	bpl.n	800a5f2 <_svfiprintf_r+0x36>
 800a5d0:	690b      	ldr	r3, [r1, #16]
 800a5d2:	b973      	cbnz	r3, 800a5f2 <_svfiprintf_r+0x36>
 800a5d4:	2140      	movs	r1, #64	@ 0x40
 800a5d6:	f7ff ff09 	bl	800a3ec <_malloc_r>
 800a5da:	6028      	str	r0, [r5, #0]
 800a5dc:	6128      	str	r0, [r5, #16]
 800a5de:	b930      	cbnz	r0, 800a5ee <_svfiprintf_r+0x32>
 800a5e0:	230c      	movs	r3, #12
 800a5e2:	603b      	str	r3, [r7, #0]
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	b01d      	add	sp, #116	@ 0x74
 800a5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ee:	2340      	movs	r3, #64	@ 0x40
 800a5f0:	616b      	str	r3, [r5, #20]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5f6:	2320      	movs	r3, #32
 800a5f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5fc:	2330      	movs	r3, #48	@ 0x30
 800a5fe:	f04f 0901 	mov.w	r9, #1
 800a602:	f8cd 800c 	str.w	r8, [sp, #12]
 800a606:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a7a0 <_svfiprintf_r+0x1e4>
 800a60a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a60e:	4623      	mov	r3, r4
 800a610:	469a      	mov	sl, r3
 800a612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a616:	b10a      	cbz	r2, 800a61c <_svfiprintf_r+0x60>
 800a618:	2a25      	cmp	r2, #37	@ 0x25
 800a61a:	d1f9      	bne.n	800a610 <_svfiprintf_r+0x54>
 800a61c:	ebba 0b04 	subs.w	fp, sl, r4
 800a620:	d00b      	beq.n	800a63a <_svfiprintf_r+0x7e>
 800a622:	465b      	mov	r3, fp
 800a624:	4622      	mov	r2, r4
 800a626:	4629      	mov	r1, r5
 800a628:	4638      	mov	r0, r7
 800a62a:	f7ff ff6b 	bl	800a504 <__ssputs_r>
 800a62e:	3001      	adds	r0, #1
 800a630:	f000 80a7 	beq.w	800a782 <_svfiprintf_r+0x1c6>
 800a634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a636:	445a      	add	r2, fp
 800a638:	9209      	str	r2, [sp, #36]	@ 0x24
 800a63a:	f89a 3000 	ldrb.w	r3, [sl]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f000 809f 	beq.w	800a782 <_svfiprintf_r+0x1c6>
 800a644:	2300      	movs	r3, #0
 800a646:	f04f 32ff 	mov.w	r2, #4294967295
 800a64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a64e:	f10a 0a01 	add.w	sl, sl, #1
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	9307      	str	r3, [sp, #28]
 800a656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a65a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a65c:	4654      	mov	r4, sl
 800a65e:	2205      	movs	r2, #5
 800a660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a664:	484e      	ldr	r0, [pc, #312]	@ (800a7a0 <_svfiprintf_r+0x1e4>)
 800a666:	f000 fa5f 	bl	800ab28 <memchr>
 800a66a:	9a04      	ldr	r2, [sp, #16]
 800a66c:	b9d8      	cbnz	r0, 800a6a6 <_svfiprintf_r+0xea>
 800a66e:	06d0      	lsls	r0, r2, #27
 800a670:	bf44      	itt	mi
 800a672:	2320      	movmi	r3, #32
 800a674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a678:	0711      	lsls	r1, r2, #28
 800a67a:	bf44      	itt	mi
 800a67c:	232b      	movmi	r3, #43	@ 0x2b
 800a67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a682:	f89a 3000 	ldrb.w	r3, [sl]
 800a686:	2b2a      	cmp	r3, #42	@ 0x2a
 800a688:	d015      	beq.n	800a6b6 <_svfiprintf_r+0xfa>
 800a68a:	4654      	mov	r4, sl
 800a68c:	2000      	movs	r0, #0
 800a68e:	f04f 0c0a 	mov.w	ip, #10
 800a692:	9a07      	ldr	r2, [sp, #28]
 800a694:	4621      	mov	r1, r4
 800a696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a69a:	3b30      	subs	r3, #48	@ 0x30
 800a69c:	2b09      	cmp	r3, #9
 800a69e:	d94b      	bls.n	800a738 <_svfiprintf_r+0x17c>
 800a6a0:	b1b0      	cbz	r0, 800a6d0 <_svfiprintf_r+0x114>
 800a6a2:	9207      	str	r2, [sp, #28]
 800a6a4:	e014      	b.n	800a6d0 <_svfiprintf_r+0x114>
 800a6a6:	eba0 0308 	sub.w	r3, r0, r8
 800a6aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	46a2      	mov	sl, r4
 800a6b2:	9304      	str	r3, [sp, #16]
 800a6b4:	e7d2      	b.n	800a65c <_svfiprintf_r+0xa0>
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	1d19      	adds	r1, r3, #4
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	9103      	str	r1, [sp, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	bfbb      	ittet	lt
 800a6c2:	425b      	neglt	r3, r3
 800a6c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a6c8:	9307      	strge	r3, [sp, #28]
 800a6ca:	9307      	strlt	r3, [sp, #28]
 800a6cc:	bfb8      	it	lt
 800a6ce:	9204      	strlt	r2, [sp, #16]
 800a6d0:	7823      	ldrb	r3, [r4, #0]
 800a6d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6d4:	d10a      	bne.n	800a6ec <_svfiprintf_r+0x130>
 800a6d6:	7863      	ldrb	r3, [r4, #1]
 800a6d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6da:	d132      	bne.n	800a742 <_svfiprintf_r+0x186>
 800a6dc:	9b03      	ldr	r3, [sp, #12]
 800a6de:	3402      	adds	r4, #2
 800a6e0:	1d1a      	adds	r2, r3, #4
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	9203      	str	r2, [sp, #12]
 800a6e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6ea:	9305      	str	r3, [sp, #20]
 800a6ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a7a4 <_svfiprintf_r+0x1e8>
 800a6f0:	2203      	movs	r2, #3
 800a6f2:	4650      	mov	r0, sl
 800a6f4:	7821      	ldrb	r1, [r4, #0]
 800a6f6:	f000 fa17 	bl	800ab28 <memchr>
 800a6fa:	b138      	cbz	r0, 800a70c <_svfiprintf_r+0x150>
 800a6fc:	2240      	movs	r2, #64	@ 0x40
 800a6fe:	9b04      	ldr	r3, [sp, #16]
 800a700:	eba0 000a 	sub.w	r0, r0, sl
 800a704:	4082      	lsls	r2, r0
 800a706:	4313      	orrs	r3, r2
 800a708:	3401      	adds	r4, #1
 800a70a:	9304      	str	r3, [sp, #16]
 800a70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a710:	2206      	movs	r2, #6
 800a712:	4825      	ldr	r0, [pc, #148]	@ (800a7a8 <_svfiprintf_r+0x1ec>)
 800a714:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a718:	f000 fa06 	bl	800ab28 <memchr>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d036      	beq.n	800a78e <_svfiprintf_r+0x1d2>
 800a720:	4b22      	ldr	r3, [pc, #136]	@ (800a7ac <_svfiprintf_r+0x1f0>)
 800a722:	bb1b      	cbnz	r3, 800a76c <_svfiprintf_r+0x1b0>
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	3307      	adds	r3, #7
 800a728:	f023 0307 	bic.w	r3, r3, #7
 800a72c:	3308      	adds	r3, #8
 800a72e:	9303      	str	r3, [sp, #12]
 800a730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a732:	4433      	add	r3, r6
 800a734:	9309      	str	r3, [sp, #36]	@ 0x24
 800a736:	e76a      	b.n	800a60e <_svfiprintf_r+0x52>
 800a738:	460c      	mov	r4, r1
 800a73a:	2001      	movs	r0, #1
 800a73c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a740:	e7a8      	b.n	800a694 <_svfiprintf_r+0xd8>
 800a742:	2300      	movs	r3, #0
 800a744:	f04f 0c0a 	mov.w	ip, #10
 800a748:	4619      	mov	r1, r3
 800a74a:	3401      	adds	r4, #1
 800a74c:	9305      	str	r3, [sp, #20]
 800a74e:	4620      	mov	r0, r4
 800a750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a754:	3a30      	subs	r2, #48	@ 0x30
 800a756:	2a09      	cmp	r2, #9
 800a758:	d903      	bls.n	800a762 <_svfiprintf_r+0x1a6>
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d0c6      	beq.n	800a6ec <_svfiprintf_r+0x130>
 800a75e:	9105      	str	r1, [sp, #20]
 800a760:	e7c4      	b.n	800a6ec <_svfiprintf_r+0x130>
 800a762:	4604      	mov	r4, r0
 800a764:	2301      	movs	r3, #1
 800a766:	fb0c 2101 	mla	r1, ip, r1, r2
 800a76a:	e7f0      	b.n	800a74e <_svfiprintf_r+0x192>
 800a76c:	ab03      	add	r3, sp, #12
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	462a      	mov	r2, r5
 800a772:	4638      	mov	r0, r7
 800a774:	4b0e      	ldr	r3, [pc, #56]	@ (800a7b0 <_svfiprintf_r+0x1f4>)
 800a776:	a904      	add	r1, sp, #16
 800a778:	f3af 8000 	nop.w
 800a77c:	1c42      	adds	r2, r0, #1
 800a77e:	4606      	mov	r6, r0
 800a780:	d1d6      	bne.n	800a730 <_svfiprintf_r+0x174>
 800a782:	89ab      	ldrh	r3, [r5, #12]
 800a784:	065b      	lsls	r3, r3, #25
 800a786:	f53f af2d 	bmi.w	800a5e4 <_svfiprintf_r+0x28>
 800a78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a78c:	e72c      	b.n	800a5e8 <_svfiprintf_r+0x2c>
 800a78e:	ab03      	add	r3, sp, #12
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	462a      	mov	r2, r5
 800a794:	4638      	mov	r0, r7
 800a796:	4b06      	ldr	r3, [pc, #24]	@ (800a7b0 <_svfiprintf_r+0x1f4>)
 800a798:	a904      	add	r1, sp, #16
 800a79a:	f000 f87d 	bl	800a898 <_printf_i>
 800a79e:	e7ed      	b.n	800a77c <_svfiprintf_r+0x1c0>
 800a7a0:	0800ad92 	.word	0x0800ad92
 800a7a4:	0800ad98 	.word	0x0800ad98
 800a7a8:	0800ad9c 	.word	0x0800ad9c
 800a7ac:	00000000 	.word	0x00000000
 800a7b0:	0800a505 	.word	0x0800a505

0800a7b4 <_printf_common>:
 800a7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b8:	4616      	mov	r6, r2
 800a7ba:	4698      	mov	r8, r3
 800a7bc:	688a      	ldr	r2, [r1, #8]
 800a7be:	690b      	ldr	r3, [r1, #16]
 800a7c0:	4607      	mov	r7, r0
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	bfb8      	it	lt
 800a7c6:	4613      	movlt	r3, r2
 800a7c8:	6033      	str	r3, [r6, #0]
 800a7ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7d4:	b10a      	cbz	r2, 800a7da <_printf_common+0x26>
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	6033      	str	r3, [r6, #0]
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	0699      	lsls	r1, r3, #26
 800a7de:	bf42      	ittt	mi
 800a7e0:	6833      	ldrmi	r3, [r6, #0]
 800a7e2:	3302      	addmi	r3, #2
 800a7e4:	6033      	strmi	r3, [r6, #0]
 800a7e6:	6825      	ldr	r5, [r4, #0]
 800a7e8:	f015 0506 	ands.w	r5, r5, #6
 800a7ec:	d106      	bne.n	800a7fc <_printf_common+0x48>
 800a7ee:	f104 0a19 	add.w	sl, r4, #25
 800a7f2:	68e3      	ldr	r3, [r4, #12]
 800a7f4:	6832      	ldr	r2, [r6, #0]
 800a7f6:	1a9b      	subs	r3, r3, r2
 800a7f8:	42ab      	cmp	r3, r5
 800a7fa:	dc2b      	bgt.n	800a854 <_printf_common+0xa0>
 800a7fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a800:	6822      	ldr	r2, [r4, #0]
 800a802:	3b00      	subs	r3, #0
 800a804:	bf18      	it	ne
 800a806:	2301      	movne	r3, #1
 800a808:	0692      	lsls	r2, r2, #26
 800a80a:	d430      	bmi.n	800a86e <_printf_common+0xba>
 800a80c:	4641      	mov	r1, r8
 800a80e:	4638      	mov	r0, r7
 800a810:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a814:	47c8      	blx	r9
 800a816:	3001      	adds	r0, #1
 800a818:	d023      	beq.n	800a862 <_printf_common+0xae>
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	6922      	ldr	r2, [r4, #16]
 800a81e:	f003 0306 	and.w	r3, r3, #6
 800a822:	2b04      	cmp	r3, #4
 800a824:	bf14      	ite	ne
 800a826:	2500      	movne	r5, #0
 800a828:	6833      	ldreq	r3, [r6, #0]
 800a82a:	f04f 0600 	mov.w	r6, #0
 800a82e:	bf08      	it	eq
 800a830:	68e5      	ldreq	r5, [r4, #12]
 800a832:	f104 041a 	add.w	r4, r4, #26
 800a836:	bf08      	it	eq
 800a838:	1aed      	subeq	r5, r5, r3
 800a83a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a83e:	bf08      	it	eq
 800a840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a844:	4293      	cmp	r3, r2
 800a846:	bfc4      	itt	gt
 800a848:	1a9b      	subgt	r3, r3, r2
 800a84a:	18ed      	addgt	r5, r5, r3
 800a84c:	42b5      	cmp	r5, r6
 800a84e:	d11a      	bne.n	800a886 <_printf_common+0xd2>
 800a850:	2000      	movs	r0, #0
 800a852:	e008      	b.n	800a866 <_printf_common+0xb2>
 800a854:	2301      	movs	r3, #1
 800a856:	4652      	mov	r2, sl
 800a858:	4641      	mov	r1, r8
 800a85a:	4638      	mov	r0, r7
 800a85c:	47c8      	blx	r9
 800a85e:	3001      	adds	r0, #1
 800a860:	d103      	bne.n	800a86a <_printf_common+0xb6>
 800a862:	f04f 30ff 	mov.w	r0, #4294967295
 800a866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a86a:	3501      	adds	r5, #1
 800a86c:	e7c1      	b.n	800a7f2 <_printf_common+0x3e>
 800a86e:	2030      	movs	r0, #48	@ 0x30
 800a870:	18e1      	adds	r1, r4, r3
 800a872:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a876:	1c5a      	adds	r2, r3, #1
 800a878:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a87c:	4422      	add	r2, r4
 800a87e:	3302      	adds	r3, #2
 800a880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a884:	e7c2      	b.n	800a80c <_printf_common+0x58>
 800a886:	2301      	movs	r3, #1
 800a888:	4622      	mov	r2, r4
 800a88a:	4641      	mov	r1, r8
 800a88c:	4638      	mov	r0, r7
 800a88e:	47c8      	blx	r9
 800a890:	3001      	adds	r0, #1
 800a892:	d0e6      	beq.n	800a862 <_printf_common+0xae>
 800a894:	3601      	adds	r6, #1
 800a896:	e7d9      	b.n	800a84c <_printf_common+0x98>

0800a898 <_printf_i>:
 800a898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a89c:	7e0f      	ldrb	r7, [r1, #24]
 800a89e:	4691      	mov	r9, r2
 800a8a0:	2f78      	cmp	r7, #120	@ 0x78
 800a8a2:	4680      	mov	r8, r0
 800a8a4:	460c      	mov	r4, r1
 800a8a6:	469a      	mov	sl, r3
 800a8a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8ae:	d807      	bhi.n	800a8c0 <_printf_i+0x28>
 800a8b0:	2f62      	cmp	r7, #98	@ 0x62
 800a8b2:	d80a      	bhi.n	800a8ca <_printf_i+0x32>
 800a8b4:	2f00      	cmp	r7, #0
 800a8b6:	f000 80d1 	beq.w	800aa5c <_printf_i+0x1c4>
 800a8ba:	2f58      	cmp	r7, #88	@ 0x58
 800a8bc:	f000 80b8 	beq.w	800aa30 <_printf_i+0x198>
 800a8c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8c8:	e03a      	b.n	800a940 <_printf_i+0xa8>
 800a8ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8ce:	2b15      	cmp	r3, #21
 800a8d0:	d8f6      	bhi.n	800a8c0 <_printf_i+0x28>
 800a8d2:	a101      	add	r1, pc, #4	@ (adr r1, 800a8d8 <_printf_i+0x40>)
 800a8d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8d8:	0800a931 	.word	0x0800a931
 800a8dc:	0800a945 	.word	0x0800a945
 800a8e0:	0800a8c1 	.word	0x0800a8c1
 800a8e4:	0800a8c1 	.word	0x0800a8c1
 800a8e8:	0800a8c1 	.word	0x0800a8c1
 800a8ec:	0800a8c1 	.word	0x0800a8c1
 800a8f0:	0800a945 	.word	0x0800a945
 800a8f4:	0800a8c1 	.word	0x0800a8c1
 800a8f8:	0800a8c1 	.word	0x0800a8c1
 800a8fc:	0800a8c1 	.word	0x0800a8c1
 800a900:	0800a8c1 	.word	0x0800a8c1
 800a904:	0800aa43 	.word	0x0800aa43
 800a908:	0800a96f 	.word	0x0800a96f
 800a90c:	0800a9fd 	.word	0x0800a9fd
 800a910:	0800a8c1 	.word	0x0800a8c1
 800a914:	0800a8c1 	.word	0x0800a8c1
 800a918:	0800aa65 	.word	0x0800aa65
 800a91c:	0800a8c1 	.word	0x0800a8c1
 800a920:	0800a96f 	.word	0x0800a96f
 800a924:	0800a8c1 	.word	0x0800a8c1
 800a928:	0800a8c1 	.word	0x0800a8c1
 800a92c:	0800aa05 	.word	0x0800aa05
 800a930:	6833      	ldr	r3, [r6, #0]
 800a932:	1d1a      	adds	r2, r3, #4
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	6032      	str	r2, [r6, #0]
 800a938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a93c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a940:	2301      	movs	r3, #1
 800a942:	e09c      	b.n	800aa7e <_printf_i+0x1e6>
 800a944:	6833      	ldr	r3, [r6, #0]
 800a946:	6820      	ldr	r0, [r4, #0]
 800a948:	1d19      	adds	r1, r3, #4
 800a94a:	6031      	str	r1, [r6, #0]
 800a94c:	0606      	lsls	r6, r0, #24
 800a94e:	d501      	bpl.n	800a954 <_printf_i+0xbc>
 800a950:	681d      	ldr	r5, [r3, #0]
 800a952:	e003      	b.n	800a95c <_printf_i+0xc4>
 800a954:	0645      	lsls	r5, r0, #25
 800a956:	d5fb      	bpl.n	800a950 <_printf_i+0xb8>
 800a958:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a95c:	2d00      	cmp	r5, #0
 800a95e:	da03      	bge.n	800a968 <_printf_i+0xd0>
 800a960:	232d      	movs	r3, #45	@ 0x2d
 800a962:	426d      	negs	r5, r5
 800a964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a968:	230a      	movs	r3, #10
 800a96a:	4858      	ldr	r0, [pc, #352]	@ (800aacc <_printf_i+0x234>)
 800a96c:	e011      	b.n	800a992 <_printf_i+0xfa>
 800a96e:	6821      	ldr	r1, [r4, #0]
 800a970:	6833      	ldr	r3, [r6, #0]
 800a972:	0608      	lsls	r0, r1, #24
 800a974:	f853 5b04 	ldr.w	r5, [r3], #4
 800a978:	d402      	bmi.n	800a980 <_printf_i+0xe8>
 800a97a:	0649      	lsls	r1, r1, #25
 800a97c:	bf48      	it	mi
 800a97e:	b2ad      	uxthmi	r5, r5
 800a980:	2f6f      	cmp	r7, #111	@ 0x6f
 800a982:	6033      	str	r3, [r6, #0]
 800a984:	bf14      	ite	ne
 800a986:	230a      	movne	r3, #10
 800a988:	2308      	moveq	r3, #8
 800a98a:	4850      	ldr	r0, [pc, #320]	@ (800aacc <_printf_i+0x234>)
 800a98c:	2100      	movs	r1, #0
 800a98e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a992:	6866      	ldr	r6, [r4, #4]
 800a994:	2e00      	cmp	r6, #0
 800a996:	60a6      	str	r6, [r4, #8]
 800a998:	db05      	blt.n	800a9a6 <_printf_i+0x10e>
 800a99a:	6821      	ldr	r1, [r4, #0]
 800a99c:	432e      	orrs	r6, r5
 800a99e:	f021 0104 	bic.w	r1, r1, #4
 800a9a2:	6021      	str	r1, [r4, #0]
 800a9a4:	d04b      	beq.n	800aa3e <_printf_i+0x1a6>
 800a9a6:	4616      	mov	r6, r2
 800a9a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9ac:	fb03 5711 	mls	r7, r3, r1, r5
 800a9b0:	5dc7      	ldrb	r7, [r0, r7]
 800a9b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9b6:	462f      	mov	r7, r5
 800a9b8:	42bb      	cmp	r3, r7
 800a9ba:	460d      	mov	r5, r1
 800a9bc:	d9f4      	bls.n	800a9a8 <_printf_i+0x110>
 800a9be:	2b08      	cmp	r3, #8
 800a9c0:	d10b      	bne.n	800a9da <_printf_i+0x142>
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	07df      	lsls	r7, r3, #31
 800a9c6:	d508      	bpl.n	800a9da <_printf_i+0x142>
 800a9c8:	6923      	ldr	r3, [r4, #16]
 800a9ca:	6861      	ldr	r1, [r4, #4]
 800a9cc:	4299      	cmp	r1, r3
 800a9ce:	bfde      	ittt	le
 800a9d0:	2330      	movle	r3, #48	@ 0x30
 800a9d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9da:	1b92      	subs	r2, r2, r6
 800a9dc:	6122      	str	r2, [r4, #16]
 800a9de:	464b      	mov	r3, r9
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	4640      	mov	r0, r8
 800a9e4:	f8cd a000 	str.w	sl, [sp]
 800a9e8:	aa03      	add	r2, sp, #12
 800a9ea:	f7ff fee3 	bl	800a7b4 <_printf_common>
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	d14a      	bne.n	800aa88 <_printf_i+0x1f0>
 800a9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f6:	b004      	add	sp, #16
 800a9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9fc:	6823      	ldr	r3, [r4, #0]
 800a9fe:	f043 0320 	orr.w	r3, r3, #32
 800aa02:	6023      	str	r3, [r4, #0]
 800aa04:	2778      	movs	r7, #120	@ 0x78
 800aa06:	4832      	ldr	r0, [pc, #200]	@ (800aad0 <_printf_i+0x238>)
 800aa08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	6831      	ldr	r1, [r6, #0]
 800aa10:	061f      	lsls	r7, r3, #24
 800aa12:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa16:	d402      	bmi.n	800aa1e <_printf_i+0x186>
 800aa18:	065f      	lsls	r7, r3, #25
 800aa1a:	bf48      	it	mi
 800aa1c:	b2ad      	uxthmi	r5, r5
 800aa1e:	6031      	str	r1, [r6, #0]
 800aa20:	07d9      	lsls	r1, r3, #31
 800aa22:	bf44      	itt	mi
 800aa24:	f043 0320 	orrmi.w	r3, r3, #32
 800aa28:	6023      	strmi	r3, [r4, #0]
 800aa2a:	b11d      	cbz	r5, 800aa34 <_printf_i+0x19c>
 800aa2c:	2310      	movs	r3, #16
 800aa2e:	e7ad      	b.n	800a98c <_printf_i+0xf4>
 800aa30:	4826      	ldr	r0, [pc, #152]	@ (800aacc <_printf_i+0x234>)
 800aa32:	e7e9      	b.n	800aa08 <_printf_i+0x170>
 800aa34:	6823      	ldr	r3, [r4, #0]
 800aa36:	f023 0320 	bic.w	r3, r3, #32
 800aa3a:	6023      	str	r3, [r4, #0]
 800aa3c:	e7f6      	b.n	800aa2c <_printf_i+0x194>
 800aa3e:	4616      	mov	r6, r2
 800aa40:	e7bd      	b.n	800a9be <_printf_i+0x126>
 800aa42:	6833      	ldr	r3, [r6, #0]
 800aa44:	6825      	ldr	r5, [r4, #0]
 800aa46:	1d18      	adds	r0, r3, #4
 800aa48:	6961      	ldr	r1, [r4, #20]
 800aa4a:	6030      	str	r0, [r6, #0]
 800aa4c:	062e      	lsls	r6, r5, #24
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	d501      	bpl.n	800aa56 <_printf_i+0x1be>
 800aa52:	6019      	str	r1, [r3, #0]
 800aa54:	e002      	b.n	800aa5c <_printf_i+0x1c4>
 800aa56:	0668      	lsls	r0, r5, #25
 800aa58:	d5fb      	bpl.n	800aa52 <_printf_i+0x1ba>
 800aa5a:	8019      	strh	r1, [r3, #0]
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	4616      	mov	r6, r2
 800aa60:	6123      	str	r3, [r4, #16]
 800aa62:	e7bc      	b.n	800a9de <_printf_i+0x146>
 800aa64:	6833      	ldr	r3, [r6, #0]
 800aa66:	2100      	movs	r1, #0
 800aa68:	1d1a      	adds	r2, r3, #4
 800aa6a:	6032      	str	r2, [r6, #0]
 800aa6c:	681e      	ldr	r6, [r3, #0]
 800aa6e:	6862      	ldr	r2, [r4, #4]
 800aa70:	4630      	mov	r0, r6
 800aa72:	f000 f859 	bl	800ab28 <memchr>
 800aa76:	b108      	cbz	r0, 800aa7c <_printf_i+0x1e4>
 800aa78:	1b80      	subs	r0, r0, r6
 800aa7a:	6060      	str	r0, [r4, #4]
 800aa7c:	6863      	ldr	r3, [r4, #4]
 800aa7e:	6123      	str	r3, [r4, #16]
 800aa80:	2300      	movs	r3, #0
 800aa82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa86:	e7aa      	b.n	800a9de <_printf_i+0x146>
 800aa88:	4632      	mov	r2, r6
 800aa8a:	4649      	mov	r1, r9
 800aa8c:	4640      	mov	r0, r8
 800aa8e:	6923      	ldr	r3, [r4, #16]
 800aa90:	47d0      	blx	sl
 800aa92:	3001      	adds	r0, #1
 800aa94:	d0ad      	beq.n	800a9f2 <_printf_i+0x15a>
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	079b      	lsls	r3, r3, #30
 800aa9a:	d413      	bmi.n	800aac4 <_printf_i+0x22c>
 800aa9c:	68e0      	ldr	r0, [r4, #12]
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	4298      	cmp	r0, r3
 800aaa2:	bfb8      	it	lt
 800aaa4:	4618      	movlt	r0, r3
 800aaa6:	e7a6      	b.n	800a9f6 <_printf_i+0x15e>
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	4632      	mov	r2, r6
 800aaac:	4649      	mov	r1, r9
 800aaae:	4640      	mov	r0, r8
 800aab0:	47d0      	blx	sl
 800aab2:	3001      	adds	r0, #1
 800aab4:	d09d      	beq.n	800a9f2 <_printf_i+0x15a>
 800aab6:	3501      	adds	r5, #1
 800aab8:	68e3      	ldr	r3, [r4, #12]
 800aaba:	9903      	ldr	r1, [sp, #12]
 800aabc:	1a5b      	subs	r3, r3, r1
 800aabe:	42ab      	cmp	r3, r5
 800aac0:	dcf2      	bgt.n	800aaa8 <_printf_i+0x210>
 800aac2:	e7eb      	b.n	800aa9c <_printf_i+0x204>
 800aac4:	2500      	movs	r5, #0
 800aac6:	f104 0619 	add.w	r6, r4, #25
 800aaca:	e7f5      	b.n	800aab8 <_printf_i+0x220>
 800aacc:	0800ada3 	.word	0x0800ada3
 800aad0:	0800adb4 	.word	0x0800adb4

0800aad4 <memmove>:
 800aad4:	4288      	cmp	r0, r1
 800aad6:	b510      	push	{r4, lr}
 800aad8:	eb01 0402 	add.w	r4, r1, r2
 800aadc:	d902      	bls.n	800aae4 <memmove+0x10>
 800aade:	4284      	cmp	r4, r0
 800aae0:	4623      	mov	r3, r4
 800aae2:	d807      	bhi.n	800aaf4 <memmove+0x20>
 800aae4:	1e43      	subs	r3, r0, #1
 800aae6:	42a1      	cmp	r1, r4
 800aae8:	d008      	beq.n	800aafc <memmove+0x28>
 800aaea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aaf2:	e7f8      	b.n	800aae6 <memmove+0x12>
 800aaf4:	4601      	mov	r1, r0
 800aaf6:	4402      	add	r2, r0
 800aaf8:	428a      	cmp	r2, r1
 800aafa:	d100      	bne.n	800aafe <memmove+0x2a>
 800aafc:	bd10      	pop	{r4, pc}
 800aafe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab06:	e7f7      	b.n	800aaf8 <memmove+0x24>

0800ab08 <_sbrk_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	4d05      	ldr	r5, [pc, #20]	@ (800ab24 <_sbrk_r+0x1c>)
 800ab0e:	4604      	mov	r4, r0
 800ab10:	4608      	mov	r0, r1
 800ab12:	602b      	str	r3, [r5, #0]
 800ab14:	f7f6 fa20 	bl	8000f58 <_sbrk>
 800ab18:	1c43      	adds	r3, r0, #1
 800ab1a:	d102      	bne.n	800ab22 <_sbrk_r+0x1a>
 800ab1c:	682b      	ldr	r3, [r5, #0]
 800ab1e:	b103      	cbz	r3, 800ab22 <_sbrk_r+0x1a>
 800ab20:	6023      	str	r3, [r4, #0]
 800ab22:	bd38      	pop	{r3, r4, r5, pc}
 800ab24:	2000494c 	.word	0x2000494c

0800ab28 <memchr>:
 800ab28:	4603      	mov	r3, r0
 800ab2a:	b510      	push	{r4, lr}
 800ab2c:	b2c9      	uxtb	r1, r1
 800ab2e:	4402      	add	r2, r0
 800ab30:	4293      	cmp	r3, r2
 800ab32:	4618      	mov	r0, r3
 800ab34:	d101      	bne.n	800ab3a <memchr+0x12>
 800ab36:	2000      	movs	r0, #0
 800ab38:	e003      	b.n	800ab42 <memchr+0x1a>
 800ab3a:	7804      	ldrb	r4, [r0, #0]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	428c      	cmp	r4, r1
 800ab40:	d1f6      	bne.n	800ab30 <memchr+0x8>
 800ab42:	bd10      	pop	{r4, pc}

0800ab44 <_realloc_r>:
 800ab44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab48:	4607      	mov	r7, r0
 800ab4a:	4614      	mov	r4, r2
 800ab4c:	460d      	mov	r5, r1
 800ab4e:	b921      	cbnz	r1, 800ab5a <_realloc_r+0x16>
 800ab50:	4611      	mov	r1, r2
 800ab52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab56:	f7ff bc49 	b.w	800a3ec <_malloc_r>
 800ab5a:	b92a      	cbnz	r2, 800ab68 <_realloc_r+0x24>
 800ab5c:	f7ff fbdc 	bl	800a318 <_free_r>
 800ab60:	4625      	mov	r5, r4
 800ab62:	4628      	mov	r0, r5
 800ab64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab68:	f000 f81a 	bl	800aba0 <_malloc_usable_size_r>
 800ab6c:	4284      	cmp	r4, r0
 800ab6e:	4606      	mov	r6, r0
 800ab70:	d802      	bhi.n	800ab78 <_realloc_r+0x34>
 800ab72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab76:	d8f4      	bhi.n	800ab62 <_realloc_r+0x1e>
 800ab78:	4621      	mov	r1, r4
 800ab7a:	4638      	mov	r0, r7
 800ab7c:	f7ff fc36 	bl	800a3ec <_malloc_r>
 800ab80:	4680      	mov	r8, r0
 800ab82:	b908      	cbnz	r0, 800ab88 <_realloc_r+0x44>
 800ab84:	4645      	mov	r5, r8
 800ab86:	e7ec      	b.n	800ab62 <_realloc_r+0x1e>
 800ab88:	42b4      	cmp	r4, r6
 800ab8a:	4622      	mov	r2, r4
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	bf28      	it	cs
 800ab90:	4632      	movcs	r2, r6
 800ab92:	f7ff fbb3 	bl	800a2fc <memcpy>
 800ab96:	4629      	mov	r1, r5
 800ab98:	4638      	mov	r0, r7
 800ab9a:	f7ff fbbd 	bl	800a318 <_free_r>
 800ab9e:	e7f1      	b.n	800ab84 <_realloc_r+0x40>

0800aba0 <_malloc_usable_size_r>:
 800aba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aba4:	1f18      	subs	r0, r3, #4
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	bfbc      	itt	lt
 800abaa:	580b      	ldrlt	r3, [r1, r0]
 800abac:	18c0      	addlt	r0, r0, r3
 800abae:	4770      	bx	lr

0800abb0 <_init>:
 800abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb2:	bf00      	nop
 800abb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb6:	bc08      	pop	{r3}
 800abb8:	469e      	mov	lr, r3
 800abba:	4770      	bx	lr

0800abbc <_fini>:
 800abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbe:	bf00      	nop
 800abc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abc2:	bc08      	pop	{r3}
 800abc4:	469e      	mov	lr, r3
 800abc6:	4770      	bx	lr
