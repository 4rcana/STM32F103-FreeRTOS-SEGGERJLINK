
STM32F103-FreeRTOS-SEGGERJLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005210  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005320  08005320  00006320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f8  080054f8  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080054f8  080054f8  00007064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080054f8  080054f8  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f8  080054f8  000064f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054fc  080054fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005500  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c50  20000064  08005564  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003cb4  08005564  00007cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121cb  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f33  00000000  00000000  00019258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  0001c190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db8  00000000  00000000  0001d370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e60  00000000  00000000  0001e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f96  00000000  00000000  00036f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000929dd  00000000  00000000  00049f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc8fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f30  00000000  00000000  000dc940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e1870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08005308 	.word	0x08005308

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08005308 	.word	0x08005308

08000150 <LEDGreen>:
 */

#include "LEDS.h"
#include "main.h"

void LEDGreen(){
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000156:	463b      	mov	r3, r7
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]
 8000160:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin;
 8000162:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000166:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000168:	2301      	movs	r3, #1
 800016a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800016c:	2300      	movs	r3, #0
 800016e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000170:	2302      	movs	r3, #2
 8000172:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000174:	463b      	mov	r3, r7
 8000176:	4619      	mov	r1, r3
 8000178:	480f      	ldr	r0, [pc, #60]	@ (80001b8 <LEDGreen+0x68>)
 800017a:	f000 fd95 	bl	8000ca8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED4_Pin|LED2_Pin;
 800017e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000182:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000184:	2300      	movs	r3, #0
 8000186:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000188:	2300      	movs	r3, #0
 800018a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800018c:	2302      	movs	r3, #2
 800018e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000190:	463b      	mov	r3, r7
 8000192:	4619      	mov	r1, r3
 8000194:	4808      	ldr	r0, [pc, #32]	@ (80001b8 <LEDGreen+0x68>)
 8000196:	f000 fd87 	bl	8000ca8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 800019a:	2200      	movs	r2, #0
 800019c:	2180      	movs	r1, #128	@ 0x80
 800019e:	4806      	ldr	r0, [pc, #24]	@ (80001b8 <LEDGreen+0x68>)
 80001a0:	f000 ff06 	bl	8000fb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80001a4:	2201      	movs	r2, #1
 80001a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001aa:	4803      	ldr	r0, [pc, #12]	@ (80001b8 <LEDGreen+0x68>)
 80001ac:	f000 ff00 	bl	8000fb0 <HAL_GPIO_WritePin>
}
 80001b0:	bf00      	nop
 80001b2:	3710      	adds	r7, #16
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	40010c00 	.word	0x40010c00

080001bc <LEDBlue>:

void LEDBlue(){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c2:	463b      	mov	r3, r7
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 80001ce:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80001d2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d4:	2301      	movs	r3, #1
 80001d6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d8:	2300      	movs	r3, #0
 80001da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001dc:	2302      	movs	r3, #2
 80001de:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001e0:	463b      	mov	r3, r7
 80001e2:	4619      	mov	r1, r3
 80001e4:	480f      	ldr	r0, [pc, #60]	@ (8000224 <LEDBlue+0x68>)
 80001e6:	f000 fd5f 	bl	8000ca8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin;
 80001ea:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80001ee:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001f0:	2300      	movs	r3, #0
 80001f2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f4:	2300      	movs	r3, #0
 80001f6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f8:	2302      	movs	r3, #2
 80001fa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001fc:	463b      	mov	r3, r7
 80001fe:	4619      	mov	r1, r3
 8000200:	4808      	ldr	r0, [pc, #32]	@ (8000224 <LEDBlue+0x68>)
 8000202:	f000 fd51 	bl	8000ca8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800020c:	4805      	ldr	r0, [pc, #20]	@ (8000224 <LEDBlue+0x68>)
 800020e:	f000 fecf 	bl	8000fb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	2180      	movs	r1, #128	@ 0x80
 8000216:	4803      	ldr	r0, [pc, #12]	@ (8000224 <LEDBlue+0x68>)
 8000218:	f000 feca 	bl	8000fb0 <HAL_GPIO_WritePin>
}
 800021c:	bf00      	nop
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	40010c00 	.word	0x40010c00

08000228 <LEDRed>:

void LEDRed(){
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022e:	463b      	mov	r3, r7
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 800023a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800023e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000240:	2301      	movs	r3, #1
 8000242:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000244:	2300      	movs	r3, #0
 8000246:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000248:	2302      	movs	r3, #2
 800024a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800024c:	463b      	mov	r3, r7
 800024e:	4619      	mov	r1, r3
 8000250:	480f      	ldr	r0, [pc, #60]	@ (8000290 <LEDRed+0x68>)
 8000252:	f000 fd29 	bl	8000ca8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin;
 8000256:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800025a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800025c:	2300      	movs	r3, #0
 800025e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000260:	2300      	movs	r3, #0
 8000262:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000264:	2302      	movs	r3, #2
 8000266:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000268:	463b      	mov	r3, r7
 800026a:	4619      	mov	r1, r3
 800026c:	4808      	ldr	r0, [pc, #32]	@ (8000290 <LEDRed+0x68>)
 800026e:	f000 fd1b 	bl	8000ca8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 8000272:	2201      	movs	r2, #1
 8000274:	2180      	movs	r1, #128	@ 0x80
 8000276:	4806      	ldr	r0, [pc, #24]	@ (8000290 <LEDRed+0x68>)
 8000278:	f000 fe9a 	bl	8000fb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000282:	4803      	ldr	r0, [pc, #12]	@ (8000290 <LEDRed+0x68>)
 8000284:	f000 fe94 	bl	8000fb0 <HAL_GPIO_WritePin>
}
 8000288:	bf00      	nop
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40010c00 	.word	0x40010c00

08000294 <LEDOff>:

void LEDOff(){
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029a:	463b      	mov	r3, r7
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 80002a6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80002aa:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ac:	2300      	movs	r3, #0
 80002ae:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b4:	2302      	movs	r3, #2
 80002b6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002b8:	463b      	mov	r3, r7
 80002ba:	4619      	mov	r1, r3
 80002bc:	4803      	ldr	r0, [pc, #12]	@ (80002cc <LEDOff+0x38>)
 80002be:	f000 fcf3 	bl	8000ca8 <HAL_GPIO_Init>
}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40010c00 	.word	0x40010c00

080002d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80002e0:	f003 0301 	and.w	r3, r3, #1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d013      	beq.n	8000310 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80002f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d00b      	beq.n	8000310 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002f8:	e000      	b.n	80002fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80002fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d0f9      	beq.n	80002fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000306:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000310:	687b      	ldr	r3, [r7, #4]
}
 8000312:	4618      	mov	r0, r3
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000320:	f000 fbb0 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000324:	f000 f84e 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000328:	f000 f88e 	bl	8000448 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800032c:	f001 fd1e 	bl	8001d6c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000330:	4a15      	ldr	r2, [pc, #84]	@ (8000388 <main+0x6c>)
 8000332:	2100      	movs	r1, #0
 8000334:	4815      	ldr	r0, [pc, #84]	@ (800038c <main+0x70>)
 8000336:	f001 fd61 	bl	8001dfc <osThreadNew>
 800033a:	4603      	mov	r3, r0
 800033c:	4a14      	ldr	r2, [pc, #80]	@ (8000390 <main+0x74>)
 800033e:	6013      	str	r3, [r2, #0]

  /* creation of GreenTask */
  GreenTaskHandle = osThreadNew(GreenLED, NULL, &GreenTask_attributes);
 8000340:	4a14      	ldr	r2, [pc, #80]	@ (8000394 <main+0x78>)
 8000342:	2100      	movs	r1, #0
 8000344:	4814      	ldr	r0, [pc, #80]	@ (8000398 <main+0x7c>)
 8000346:	f001 fd59 	bl	8001dfc <osThreadNew>
 800034a:	4603      	mov	r3, r0
 800034c:	4a13      	ldr	r2, [pc, #76]	@ (800039c <main+0x80>)
 800034e:	6013      	str	r3, [r2, #0]

  /* creation of BlueTask */
  BlueTaskHandle = osThreadNew(BlueLED, NULL, &BlueTask_attributes);
 8000350:	4a13      	ldr	r2, [pc, #76]	@ (80003a0 <main+0x84>)
 8000352:	2100      	movs	r1, #0
 8000354:	4813      	ldr	r0, [pc, #76]	@ (80003a4 <main+0x88>)
 8000356:	f001 fd51 	bl	8001dfc <osThreadNew>
 800035a:	4603      	mov	r3, r0
 800035c:	4a12      	ldr	r2, [pc, #72]	@ (80003a8 <main+0x8c>)
 800035e:	6013      	str	r3, [r2, #0]

  /* creation of RedTask */
  RedTaskHandle = osThreadNew(RedLED, NULL, &RedTask_attributes);
 8000360:	4a12      	ldr	r2, [pc, #72]	@ (80003ac <main+0x90>)
 8000362:	2100      	movs	r1, #0
 8000364:	4812      	ldr	r0, [pc, #72]	@ (80003b0 <main+0x94>)
 8000366:	f001 fd49 	bl	8001dfc <osThreadNew>
 800036a:	4603      	mov	r3, r0
 800036c:	4a11      	ldr	r2, [pc, #68]	@ (80003b4 <main+0x98>)
 800036e:	6013      	str	r3, [r2, #0]

  /* creation of LedMUX */
  LedMUXHandle = osThreadNew(StartLedMUX, NULL, &LedMUX_attributes);
 8000370:	4a11      	ldr	r2, [pc, #68]	@ (80003b8 <main+0x9c>)
 8000372:	2100      	movs	r1, #0
 8000374:	4811      	ldr	r0, [pc, #68]	@ (80003bc <main+0xa0>)
 8000376:	f001 fd41 	bl	8001dfc <osThreadNew>
 800037a:	4603      	mov	r3, r0
 800037c:	4a10      	ldr	r2, [pc, #64]	@ (80003c0 <main+0xa4>)
 800037e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000380:	f001 fd16 	bl	8001db0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <main+0x68>
 8000388:	080053e4 	.word	0x080053e4
 800038c:	0800057d 	.word	0x0800057d
 8000390:	20000080 	.word	0x20000080
 8000394:	08005408 	.word	0x08005408
 8000398:	0800058d 	.word	0x0800058d
 800039c:	20000084 	.word	0x20000084
 80003a0:	0800542c 	.word	0x0800542c
 80003a4:	08000641 	.word	0x08000641
 80003a8:	20000088 	.word	0x20000088
 80003ac:	08005450 	.word	0x08005450
 80003b0:	08000691 	.word	0x08000691
 80003b4:	2000008c 	.word	0x2000008c
 80003b8:	08005474 	.word	0x08005474
 80003bc:	080006e1 	.word	0x080006e1
 80003c0:	20000090 	.word	0x20000090

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b090      	sub	sp, #64	@ 0x40
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0318 	add.w	r3, r7, #24
 80003ce:	2228      	movs	r2, #40	@ 0x28
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f004 fb0a 	bl	80049ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ea:	2301      	movs	r3, #1
 80003ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ee:	2310      	movs	r3, #16
 80003f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f2:	2302      	movs	r3, #2
 80003f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003f6:	2300      	movs	r3, #0
 80003f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003fa:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80003fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000400:	f107 0318 	add.w	r3, r7, #24
 8000404:	4618      	mov	r0, r3
 8000406:	f000 fe03 	bl	8001010 <HAL_RCC_OscConfig>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000410:	f000 f9e5 	bl	80007de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000414:	230f      	movs	r3, #15
 8000416:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000418:	2302      	movs	r3, #2
 800041a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000420:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2102      	movs	r1, #2
 800042e:	4618      	mov	r0, r3
 8000430:	f001 f870 	bl	8001514 <HAL_RCC_ClockConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800043a:	f000 f9d0 	bl	80007de <Error_Handler>
  }
}
 800043e:	bf00      	nop
 8000440:	3740      	adds	r7, #64	@ 0x40
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045c:	4b42      	ldr	r3, [pc, #264]	@ (8000568 <MX_GPIO_Init+0x120>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a41      	ldr	r2, [pc, #260]	@ (8000568 <MX_GPIO_Init+0x120>)
 8000462:	f043 0310 	orr.w	r3, r3, #16
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b3f      	ldr	r3, [pc, #252]	@ (8000568 <MX_GPIO_Init+0x120>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0310 	and.w	r3, r3, #16
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b3c      	ldr	r3, [pc, #240]	@ (8000568 <MX_GPIO_Init+0x120>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a3b      	ldr	r2, [pc, #236]	@ (8000568 <MX_GPIO_Init+0x120>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b39      	ldr	r3, [pc, #228]	@ (8000568 <MX_GPIO_Init+0x120>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048c:	4b36      	ldr	r3, [pc, #216]	@ (8000568 <MX_GPIO_Init+0x120>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a35      	ldr	r2, [pc, #212]	@ (8000568 <MX_GPIO_Init+0x120>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b33      	ldr	r3, [pc, #204]	@ (8000568 <MX_GPIO_Init+0x120>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0308 	and.w	r3, r3, #8
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2120      	movs	r1, #32
 80004a8:	4830      	ldr	r0, [pc, #192]	@ (800056c <MX_GPIO_Init+0x124>)
 80004aa:	f000 fd81 	bl	8000fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80004b4:	482e      	ldr	r0, [pc, #184]	@ (8000570 <MX_GPIO_Init+0x128>)
 80004b6:	f000 fd7b 	bl	8000fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000574 <MX_GPIO_Init+0x12c>)
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4619      	mov	r1, r3
 80004ce:	482a      	ldr	r0, [pc, #168]	@ (8000578 <MX_GPIO_Init+0x130>)
 80004d0:	f000 fbea 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004d4:	2320      	movs	r3, #32
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	2301      	movs	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e0:	2302      	movs	r3, #2
 80004e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4820      	ldr	r0, [pc, #128]	@ (800056c <MX_GPIO_Init+0x124>)
 80004ec:	f000 fbdc 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Left_Button_Pin */
  GPIO_InitStruct.Pin = Left_Button_Pin;
 80004f0:	2301      	movs	r3, #1
 80004f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000574 <MX_GPIO_Init+0x12c>)
 80004f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004f8:	2301      	movs	r3, #1
 80004fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Left_Button_GPIO_Port, &GPIO_InitStruct);
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	4619      	mov	r1, r3
 8000502:	481b      	ldr	r0, [pc, #108]	@ (8000570 <MX_GPIO_Init+0x128>)
 8000504:	f000 fbd0 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin;
 8000508:	23c0      	movs	r3, #192	@ 0xc0
 800050a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	4619      	mov	r1, r3
 800051a:	4815      	ldr	r0, [pc, #84]	@ (8000570 <MX_GPIO_Init+0x128>)
 800051c:	f000 fbc4 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000520:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2302      	movs	r3, #2
 8000530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4619      	mov	r1, r3
 8000538:	480d      	ldr	r0, [pc, #52]	@ (8000570 <MX_GPIO_Init+0x128>)
 800053a:	f000 fbb5 	bl	8000ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2105      	movs	r1, #5
 8000542:	2006      	movs	r0, #6
 8000544:	f000 fb85 	bl	8000c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000548:	2006      	movs	r0, #6
 800054a:	f000 fb9e 	bl	8000c8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2105      	movs	r1, #5
 8000552:	2028      	movs	r0, #40	@ 0x28
 8000554:	f000 fb7d 	bl	8000c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000558:	2028      	movs	r0, #40	@ 0x28
 800055a:	f000 fb96 	bl	8000c8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800055e:	bf00      	nop
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	40010800 	.word	0x40010800
 8000570:	40010c00 	.word	0x40010c00
 8000574:	10210000 	.word	0x10210000
 8000578:	40011000 	.word	0x40011000

0800057c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000584:	2001      	movs	r0, #1
 8000586:	f001 fcf9 	bl	8001f7c <osDelay>
 800058a:	e7fb      	b.n	8000584 <StartDefaultTask+0x8>

0800058c <GreenLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenLED */
void GreenLED(void *argument)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenLED */
  uint8_t counter = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	if(GreenState == OFF) {
 8000598:	4b20      	ldr	r3, [pc, #128]	@ (800061c <GreenLED+0x90>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d103      	bne.n	80005a8 <GreenLED+0x1c>
		GreenState = ON;
 80005a0:	4b1e      	ldr	r3, [pc, #120]	@ (800061c <GreenLED+0x90>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	e002      	b.n	80005ae <GreenLED+0x22>
	}
	else {
		GreenState = OFF;
 80005a8:	4b1c      	ldr	r3, [pc, #112]	@ (800061c <GreenLED+0x90>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
	}

	counter++;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	3301      	adds	r3, #1
 80005b2:	73fb      	strb	r3, [r7, #15]

	sprintf(message_buffer,"GreenTask counter = %d\n",counter);
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	461a      	mov	r2, r3
 80005b8:	4919      	ldr	r1, [pc, #100]	@ (8000620 <GreenLED+0x94>)
 80005ba:	481a      	ldr	r0, [pc, #104]	@ (8000624 <GreenLED+0x98>)
 80005bc:	f004 f9f4 	bl	80049a8 <siprintf>
	ITM_Print(message_buffer);
 80005c0:	4818      	ldr	r0, [pc, #96]	@ (8000624 <GreenLED+0x98>)
 80005c2:	f000 f8f7 	bl	80007b4 <ITM_Print>

	if(Left_Button_State == PRESSED){
 80005c6:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <GreenLED+0x9c>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10e      	bne.n	80005ec <GreenLED+0x60>
		sprintf(message_buffer,"Terminating GreenTask\n");
 80005ce:	4917      	ldr	r1, [pc, #92]	@ (800062c <GreenLED+0xa0>)
 80005d0:	4814      	ldr	r0, [pc, #80]	@ (8000624 <GreenLED+0x98>)
 80005d2:	f004 f9e9 	bl	80049a8 <siprintf>
		ITM_Print(message_buffer);
 80005d6:	4813      	ldr	r0, [pc, #76]	@ (8000624 <GreenLED+0x98>)
 80005d8:	f000 f8ec 	bl	80007b4 <ITM_Print>
		GreenState = OFF;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <GreenLED+0x90>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
		osThreadTerminate(GreenTaskHandle);
 80005e2:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <GreenLED+0xa4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fc9b 	bl	8001f22 <osThreadTerminate>
	}

	if(counter==5){
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	2b05      	cmp	r3, #5
 80005f0:	d10e      	bne.n	8000610 <GreenLED+0x84>
		sprintf(message_buffer,"Terminating RedTask\n");
 80005f2:	4910      	ldr	r1, [pc, #64]	@ (8000634 <GreenLED+0xa8>)
 80005f4:	480b      	ldr	r0, [pc, #44]	@ (8000624 <GreenLED+0x98>)
 80005f6:	f004 f9d7 	bl	80049a8 <siprintf>
		ITM_Print(message_buffer);
 80005fa:	480a      	ldr	r0, [pc, #40]	@ (8000624 <GreenLED+0x98>)
 80005fc:	f000 f8da 	bl	80007b4 <ITM_Print>
		osThreadTerminate(RedTaskHandle);
 8000600:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <GreenLED+0xac>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fc8c 	bl	8001f22 <osThreadTerminate>
		RedState = OFF;
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <GreenLED+0xb0>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
	}

    osDelay(1000);
 8000610:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000614:	f001 fcb2 	bl	8001f7c <osDelay>
	if(GreenState == OFF) {
 8000618:	e7be      	b.n	8000598 <GreenLED+0xc>
 800061a:	bf00      	nop
 800061c:	20000001 	.word	0x20000001
 8000620:	08005354 	.word	0x08005354
 8000624:	20000094 	.word	0x20000094
 8000628:	20000000 	.word	0x20000000
 800062c:	0800536c 	.word	0x0800536c
 8000630:	20000084 	.word	0x20000084
 8000634:	08005384 	.word	0x08005384
 8000638:	2000008c 	.word	0x2000008c
 800063c:	20000002 	.word	0x20000002

08000640 <BlueLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BlueLED */
void BlueLED(void *argument)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlueLED */
  uint8_t counter=0;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	if(BlueState == OFF) {
 800064c:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <BlueLED+0x44>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d103      	bne.n	800065c <BlueLED+0x1c>
		BlueState = ON;
 8000654:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <BlueLED+0x44>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
 800065a:	e002      	b.n	8000662 <BlueLED+0x22>
	}
	else {
		BlueState = OFF;
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <BlueLED+0x44>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
	}

	counter++;
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	3301      	adds	r3, #1
 8000666:	73fb      	strb	r3, [r7, #15]

	sprintf(message_buffer,"BlueTask counter = %d\n",counter);
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	461a      	mov	r2, r3
 800066c:	4906      	ldr	r1, [pc, #24]	@ (8000688 <BlueLED+0x48>)
 800066e:	4807      	ldr	r0, [pc, #28]	@ (800068c <BlueLED+0x4c>)
 8000670:	f004 f99a 	bl	80049a8 <siprintf>
	ITM_Print(message_buffer);
 8000674:	4805      	ldr	r0, [pc, #20]	@ (800068c <BlueLED+0x4c>)
 8000676:	f000 f89d 	bl	80007b4 <ITM_Print>

    osDelay(2000);
 800067a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800067e:	f001 fc7d 	bl	8001f7c <osDelay>
	if(BlueState == OFF) {
 8000682:	e7e3      	b.n	800064c <BlueLED+0xc>
 8000684:	20000003 	.word	0x20000003
 8000688:	0800539c 	.word	0x0800539c
 800068c:	20000094 	.word	0x20000094

08000690 <RedLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedLED */
void RedLED(void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedLED */
  uint8_t counter=0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	if(RedState == OFF) {
 800069c:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <RedLED+0x44>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d103      	bne.n	80006ac <RedLED+0x1c>
		RedState = ON;
 80006a4:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <RedLED+0x44>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e002      	b.n	80006b2 <RedLED+0x22>
	}
	else {
		RedState = OFF;
 80006ac:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <RedLED+0x44>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
	}
	counter++;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	3301      	adds	r3, #1
 80006b6:	73fb      	strb	r3, [r7, #15]

	sprintf(message_buffer,"RedTask counter = %d\n",counter);
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	461a      	mov	r2, r3
 80006bc:	4906      	ldr	r1, [pc, #24]	@ (80006d8 <RedLED+0x48>)
 80006be:	4807      	ldr	r0, [pc, #28]	@ (80006dc <RedLED+0x4c>)
 80006c0:	f004 f972 	bl	80049a8 <siprintf>
	ITM_Print(message_buffer);
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <RedLED+0x4c>)
 80006c6:	f000 f875 	bl	80007b4 <ITM_Print>

    osDelay(3000);
 80006ca:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006ce:	f001 fc55 	bl	8001f7c <osDelay>
	if(RedState == OFF) {
 80006d2:	e7e3      	b.n	800069c <RedLED+0xc>
 80006d4:	20000002 	.word	0x20000002
 80006d8:	080053b4 	.word	0x080053b4
 80006dc:	20000094 	.word	0x20000094

080006e0 <StartLedMUX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedMUX */
void StartLedMUX(void *argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedMUX */
  /* Infinite loop */
  for(;;)
  {
	if(GreenState == ON){
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <StartLedMUX+0x70>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d106      	bne.n	80006fe <StartLedMUX+0x1e>
		LEDOff();
 80006f0:	f7ff fdd0 	bl	8000294 <LEDOff>
		LEDGreen();
 80006f4:	f7ff fd2c 	bl	8000150 <LEDGreen>
		osDelay(1);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f001 fc3f 	bl	8001f7c <osDelay>
	}

	if(BlueState == ON){
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <StartLedMUX+0x74>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d106      	bne.n	8000714 <StartLedMUX+0x34>
		LEDOff();
 8000706:	f7ff fdc5 	bl	8000294 <LEDOff>
		LEDBlue();
 800070a:	f7ff fd57 	bl	80001bc <LEDBlue>
		osDelay(1);
 800070e:	2001      	movs	r0, #1
 8000710:	f001 fc34 	bl	8001f7c <osDelay>
	}

	if(RedState == ON){
 8000714:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <StartLedMUX+0x78>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d106      	bne.n	800072a <StartLedMUX+0x4a>
		LEDOff();
 800071c:	f7ff fdba 	bl	8000294 <LEDOff>
		LEDRed();
 8000720:	f7ff fd82 	bl	8000228 <LEDRed>
		osDelay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f001 fc29 	bl	8001f7c <osDelay>
	}

	if(GreenState == OFF && BlueState == OFF && RedState == OFF){
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <StartLedMUX+0x70>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d1da      	bne.n	80006e8 <StartLedMUX+0x8>
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <StartLedMUX+0x74>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d1d6      	bne.n	80006e8 <StartLedMUX+0x8>
 800073a:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <StartLedMUX+0x78>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d1d2      	bne.n	80006e8 <StartLedMUX+0x8>
		LEDOff();
 8000742:	f7ff fda7 	bl	8000294 <LEDOff>
		osDelay(100);
 8000746:	2064      	movs	r0, #100	@ 0x64
 8000748:	f001 fc18 	bl	8001f7c <osDelay>
	if(GreenState == ON){
 800074c:	e7cc      	b.n	80006e8 <StartLedMUX+0x8>
 800074e:	bf00      	nop
 8000750:	20000001 	.word	0x20000001
 8000754:	20000003 	.word	0x20000003
 8000758:	20000002 	.word	0x20000002

0800075c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a04      	ldr	r2, [pc, #16]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d101      	bne.n	8000772 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800076e:	f000 f99f 	bl	8000ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40000800 	.word	0x40000800

08000780 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);

	if(GPIO_Pin == Left_Button_Pin){
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d10a      	bne.n	80007a6 <HAL_GPIO_EXTI_Callback+0x26>
		if(Left_Button_State == WAIT){
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d103      	bne.n	80007a0 <HAL_GPIO_EXTI_Callback+0x20>
			Left_Button_State = PRESSED;
 8000798:	4b05      	ldr	r3, [pc, #20]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x30>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
		}
		else{
			Left_Button_State = WAIT;
		}
	}
}
 800079e:	e002      	b.n	80007a6 <HAL_GPIO_EXTI_Callback+0x26>
			Left_Button_State = WAIT;
 80007a0:	4b03      	ldr	r3, [pc, #12]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x30>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	20000000 	.word	0x20000000

080007b4 <ITM_Print>:

void ITM_Print(const char *message_buffer){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	while(*message_buffer){
 80007bc:	e006      	b.n	80007cc <ITM_Print+0x18>
		ITM_SendChar(*message_buffer++);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fd82 	bl	80002d0 <ITM_SendChar>
	while(*message_buffer){
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f4      	bne.n	80007be <ITM_Print+0xa>
	}
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e2:	b672      	cpsid	i
}
 80007e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e6:	bf00      	nop
 80007e8:	e7fd      	b.n	80007e6 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_MspInit+0x68>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a17      	ldr	r2, [pc, #92]	@ (8000854 <HAL_MspInit+0x68>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_MspInit+0x68>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <HAL_MspInit+0x68>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a11      	ldr	r2, [pc, #68]	@ (8000854 <HAL_MspInit+0x68>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <HAL_MspInit+0x68>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	210f      	movs	r1, #15
 8000826:	f06f 0001 	mvn.w	r0, #1
 800082a:	f000 fa12 	bl	8000c52 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800082e:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <HAL_MspInit+0x6c>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	4a04      	ldr	r2, [pc, #16]	@ (8000858 <HAL_MspInit+0x6c>)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	40010000 	.word	0x40010000

0800085c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	@ 0x38
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800086c:	2300      	movs	r3, #0
 800086e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000872:	4b34      	ldr	r3, [pc, #208]	@ (8000944 <HAL_InitTick+0xe8>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a33      	ldr	r2, [pc, #204]	@ (8000944 <HAL_InitTick+0xe8>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b31      	ldr	r3, [pc, #196]	@ (8000944 <HAL_InitTick+0xe8>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800088a:	f107 0210 	add.w	r2, r7, #16
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f000 ff99 	bl	80017cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800089e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d103      	bne.n	80008ac <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008a4:	f000 ff7e 	bl	80017a4 <HAL_RCC_GetPCLK1Freq>
 80008a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80008aa:	e004      	b.n	80008b6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008ac:	f000 ff7a 	bl	80017a4 <HAL_RCC_GetPCLK1Freq>
 80008b0:	4603      	mov	r3, r0
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008b8:	4a23      	ldr	r2, [pc, #140]	@ (8000948 <HAL_InitTick+0xec>)
 80008ba:	fba2 2303 	umull	r2, r3, r2, r3
 80008be:	0c9b      	lsrs	r3, r3, #18
 80008c0:	3b01      	subs	r3, #1
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008c4:	4b21      	ldr	r3, [pc, #132]	@ (800094c <HAL_InitTick+0xf0>)
 80008c6:	4a22      	ldr	r2, [pc, #136]	@ (8000950 <HAL_InitTick+0xf4>)
 80008c8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008ca:	4b20      	ldr	r3, [pc, #128]	@ (800094c <HAL_InitTick+0xf0>)
 80008cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008d0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008d2:	4a1e      	ldr	r2, [pc, #120]	@ (800094c <HAL_InitTick+0xf0>)
 80008d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008d6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008d8:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <HAL_InitTick+0xf0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <HAL_InitTick+0xf0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e4:	4b19      	ldr	r3, [pc, #100]	@ (800094c <HAL_InitTick+0xf0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80008ea:	4818      	ldr	r0, [pc, #96]	@ (800094c <HAL_InitTick+0xf0>)
 80008ec:	f000 ffbc 	bl	8001868 <HAL_TIM_Base_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d11b      	bne.n	8000936 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80008fe:	4813      	ldr	r0, [pc, #76]	@ (800094c <HAL_InitTick+0xf0>)
 8000900:	f001 f80a 	bl	8001918 <HAL_TIM_Base_Start_IT>
 8000904:	4603      	mov	r3, r0
 8000906:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800090a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800090e:	2b00      	cmp	r3, #0
 8000910:	d111      	bne.n	8000936 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000912:	201e      	movs	r0, #30
 8000914:	f000 f9b9 	bl	8000c8a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b0f      	cmp	r3, #15
 800091c:	d808      	bhi.n	8000930 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800091e:	2200      	movs	r2, #0
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	201e      	movs	r0, #30
 8000924:	f000 f995 	bl	8000c52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000928:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <HAL_InitTick+0xf8>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	e002      	b.n	8000936 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000936:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800093a:	4618      	mov	r0, r3
 800093c:	3738      	adds	r7, #56	@ 0x38
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000
 8000948:	431bde83 	.word	0x431bde83
 800094c:	200000bc 	.word	0x200000bc
 8000950:	40000800 	.word	0x40000800
 8000954:	20000008 	.word	0x20000008

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <NMI_Handler+0x4>

08000960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <MemManage_Handler+0x4>

08000970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <UsageFault_Handler+0x4>

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_Button_Pin);
 8000990:	2001      	movs	r0, #1
 8000992:	f000 fb25 	bl	8000fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <TIM4_IRQHandler+0x10>)
 80009a2:	f001 f80b 	bl	80019bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000bc 	.word	0x200000bc

080009b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009b8:	f000 fb12 	bl	8000fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c8:	4a14      	ldr	r2, [pc, #80]	@ (8000a1c <_sbrk+0x5c>)
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <_sbrk+0x60>)
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <_sbrk+0x64>)
 80009de:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <_sbrk+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d207      	bcs.n	8000a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f0:	f004 f804 	bl	80049fc <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	e009      	b.n	8000a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a06:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <_sbrk+0x64>)
 8000a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20005000 	.word	0x20005000
 8000a20:	00000400 	.word	0x00000400
 8000a24:	20000104 	.word	0x20000104
 8000a28:	20003cb8 	.word	0x20003cb8

08000a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a38:	f7ff fff8 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a3e:	490c      	ldr	r1, [pc, #48]	@ (8000a70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a40:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a09      	ldr	r2, [pc, #36]	@ (8000a78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a54:	4c09      	ldr	r4, [pc, #36]	@ (8000a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a62:	f003 ffd1 	bl	8004a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a66:	f7ff fc59 	bl	800031c <main>
  bx lr
 8000a6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000a74:	08005500 	.word	0x08005500
  ldr r2, =_sbss
 8000a78:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000a7c:	20003cb4 	.word	0x20003cb4

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <HAL_Init+0x28>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	@ (8000aac <HAL_Init+0x28>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f8d1 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f7ff fede 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fea4 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <HAL_IncTick+0x1c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <HAL_IncTick+0x20>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a03      	ldr	r2, [pc, #12]	@ (8000ad0 <HAL_IncTick+0x20>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	2000000c 	.word	0x2000000c
 8000ad0:	20000108 	.word	0x20000108

08000ad4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b02      	ldr	r3, [pc, #8]	@ (8000ae4 <HAL_GetTick+0x10>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	20000108 	.word	0x20000108

08000ae8 <__NVIC_SetPriorityGrouping>:
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	@ (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_EnableIRQ>:
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db0b      	blt.n	8000b76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 021f 	and.w	r2, r3, #31
 8000b64:	4906      	ldr	r1, [pc, #24]	@ (8000b80 <__NVIC_EnableIRQ+0x34>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	095b      	lsrs	r3, r3, #5
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_SetPriority>:
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db0a      	blt.n	8000bae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	@ (8000bd0 <__NVIC_SetPriority+0x4c>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000bac:	e00a      	b.n	8000bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4908      	ldr	r1, [pc, #32]	@ (8000bd4 <__NVIC_SetPriority+0x50>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	761a      	strb	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_EncodePriority>:
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	@ 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f1c3 0307 	rsb	r3, r3, #7
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2304      	movcs	r3, #4
 8000bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d902      	bls.n	8000c08 <NVIC_EncodePriority+0x30>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3b03      	subs	r3, #3
 8000c06:	e000      	b.n	8000c0a <NVIC_EncodePriority+0x32>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43da      	mvns	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43d9      	mvns	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	4313      	orrs	r3, r2
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3724      	adds	r7, #36	@ 0x24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff4f 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff64 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ffb2 	bl	8000bd8 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff81 	bl	8000b84 <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff57 	bl	8000b4c <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b08b      	sub	sp, #44	@ 0x2c
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cba:	e169      	b.n	8000f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	69fa      	ldr	r2, [r7, #28]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 8158 	bne.w	8000f8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	4a9a      	ldr	r2, [pc, #616]	@ (8000f48 <HAL_GPIO_Init+0x2a0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d05e      	beq.n	8000da2 <HAL_GPIO_Init+0xfa>
 8000ce4:	4a98      	ldr	r2, [pc, #608]	@ (8000f48 <HAL_GPIO_Init+0x2a0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d875      	bhi.n	8000dd6 <HAL_GPIO_Init+0x12e>
 8000cea:	4a98      	ldr	r2, [pc, #608]	@ (8000f4c <HAL_GPIO_Init+0x2a4>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d058      	beq.n	8000da2 <HAL_GPIO_Init+0xfa>
 8000cf0:	4a96      	ldr	r2, [pc, #600]	@ (8000f4c <HAL_GPIO_Init+0x2a4>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d86f      	bhi.n	8000dd6 <HAL_GPIO_Init+0x12e>
 8000cf6:	4a96      	ldr	r2, [pc, #600]	@ (8000f50 <HAL_GPIO_Init+0x2a8>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d052      	beq.n	8000da2 <HAL_GPIO_Init+0xfa>
 8000cfc:	4a94      	ldr	r2, [pc, #592]	@ (8000f50 <HAL_GPIO_Init+0x2a8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d869      	bhi.n	8000dd6 <HAL_GPIO_Init+0x12e>
 8000d02:	4a94      	ldr	r2, [pc, #592]	@ (8000f54 <HAL_GPIO_Init+0x2ac>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d04c      	beq.n	8000da2 <HAL_GPIO_Init+0xfa>
 8000d08:	4a92      	ldr	r2, [pc, #584]	@ (8000f54 <HAL_GPIO_Init+0x2ac>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d863      	bhi.n	8000dd6 <HAL_GPIO_Init+0x12e>
 8000d0e:	4a92      	ldr	r2, [pc, #584]	@ (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d046      	beq.n	8000da2 <HAL_GPIO_Init+0xfa>
 8000d14:	4a90      	ldr	r2, [pc, #576]	@ (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d85d      	bhi.n	8000dd6 <HAL_GPIO_Init+0x12e>
 8000d1a:	2b12      	cmp	r3, #18
 8000d1c:	d82a      	bhi.n	8000d74 <HAL_GPIO_Init+0xcc>
 8000d1e:	2b12      	cmp	r3, #18
 8000d20:	d859      	bhi.n	8000dd6 <HAL_GPIO_Init+0x12e>
 8000d22:	a201      	add	r2, pc, #4	@ (adr r2, 8000d28 <HAL_GPIO_Init+0x80>)
 8000d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d28:	08000da3 	.word	0x08000da3
 8000d2c:	08000d7d 	.word	0x08000d7d
 8000d30:	08000d8f 	.word	0x08000d8f
 8000d34:	08000dd1 	.word	0x08000dd1
 8000d38:	08000dd7 	.word	0x08000dd7
 8000d3c:	08000dd7 	.word	0x08000dd7
 8000d40:	08000dd7 	.word	0x08000dd7
 8000d44:	08000dd7 	.word	0x08000dd7
 8000d48:	08000dd7 	.word	0x08000dd7
 8000d4c:	08000dd7 	.word	0x08000dd7
 8000d50:	08000dd7 	.word	0x08000dd7
 8000d54:	08000dd7 	.word	0x08000dd7
 8000d58:	08000dd7 	.word	0x08000dd7
 8000d5c:	08000dd7 	.word	0x08000dd7
 8000d60:	08000dd7 	.word	0x08000dd7
 8000d64:	08000dd7 	.word	0x08000dd7
 8000d68:	08000dd7 	.word	0x08000dd7
 8000d6c:	08000d85 	.word	0x08000d85
 8000d70:	08000d99 	.word	0x08000d99
 8000d74:	4a79      	ldr	r2, [pc, #484]	@ (8000f5c <HAL_GPIO_Init+0x2b4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d013      	beq.n	8000da2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d7a:	e02c      	b.n	8000dd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	623b      	str	r3, [r7, #32]
          break;
 8000d82:	e029      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	623b      	str	r3, [r7, #32]
          break;
 8000d8c:	e024      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	3308      	adds	r3, #8
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e01f      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	330c      	adds	r3, #12
 8000d9e:	623b      	str	r3, [r7, #32]
          break;
 8000da0:	e01a      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d102      	bne.n	8000db0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000daa:	2304      	movs	r3, #4
 8000dac:	623b      	str	r3, [r7, #32]
          break;
 8000dae:	e013      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d105      	bne.n	8000dc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000db8:	2308      	movs	r3, #8
 8000dba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69fa      	ldr	r2, [r7, #28]
 8000dc0:	611a      	str	r2, [r3, #16]
          break;
 8000dc2:	e009      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69fa      	ldr	r2, [r7, #28]
 8000dcc:	615a      	str	r2, [r3, #20]
          break;
 8000dce:	e003      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
          break;
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x130>
          break;
 8000dd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2bff      	cmp	r3, #255	@ 0xff
 8000ddc:	d801      	bhi.n	8000de2 <HAL_GPIO_Init+0x13a>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	e001      	b.n	8000de6 <HAL_GPIO_Init+0x13e>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3304      	adds	r3, #4
 8000de6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	2bff      	cmp	r3, #255	@ 0xff
 8000dec:	d802      	bhi.n	8000df4 <HAL_GPIO_Init+0x14c>
 8000dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	e002      	b.n	8000dfa <HAL_GPIO_Init+0x152>
 8000df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df6:	3b08      	subs	r3, #8
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	210f      	movs	r1, #15
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	6a39      	ldr	r1, [r7, #32]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	431a      	orrs	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 80b1 	beq.w	8000f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e28:	4b4d      	ldr	r3, [pc, #308]	@ (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b4a      	ldr	r3, [pc, #296]	@ (8000f60 <HAL_GPIO_Init+0x2b8>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e40:	4a48      	ldr	r2, [pc, #288]	@ (8000f64 <HAL_GPIO_Init+0x2bc>)
 8000e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	3302      	adds	r3, #2
 8000e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	220f      	movs	r2, #15
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	4013      	ands	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a40      	ldr	r2, [pc, #256]	@ (8000f68 <HAL_GPIO_Init+0x2c0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d013      	beq.n	8000e94 <HAL_GPIO_Init+0x1ec>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f6c <HAL_GPIO_Init+0x2c4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d00d      	beq.n	8000e90 <HAL_GPIO_Init+0x1e8>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a3e      	ldr	r2, [pc, #248]	@ (8000f70 <HAL_GPIO_Init+0x2c8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d007      	beq.n	8000e8c <HAL_GPIO_Init+0x1e4>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a3d      	ldr	r2, [pc, #244]	@ (8000f74 <HAL_GPIO_Init+0x2cc>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d101      	bne.n	8000e88 <HAL_GPIO_Init+0x1e0>
 8000e84:	2303      	movs	r3, #3
 8000e86:	e006      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e88:	2304      	movs	r3, #4
 8000e8a:	e004      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <HAL_GPIO_Init+0x1ee>
 8000e94:	2300      	movs	r3, #0
 8000e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e98:	f002 0203 	and.w	r2, r2, #3
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	4093      	lsls	r3, r2
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ea6:	492f      	ldr	r1, [pc, #188]	@ (8000f64 <HAL_GPIO_Init+0x2bc>)
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d006      	beq.n	8000ece <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	492c      	ldr	r1, [pc, #176]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	608b      	str	r3, [r1, #8]
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ece:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	4928      	ldr	r1, [pc, #160]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d006      	beq.n	8000ef6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ee8:	4b23      	ldr	r3, [pc, #140]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	4922      	ldr	r1, [pc, #136]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	60cb      	str	r3, [r1, #12]
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ef6:	4b20      	ldr	r3, [pc, #128]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	491e      	ldr	r1, [pc, #120]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d006      	beq.n	8000f1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f10:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	4918      	ldr	r1, [pc, #96]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	604b      	str	r3, [r1, #4]
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f1e:	4b16      	ldr	r3, [pc, #88]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	4914      	ldr	r1, [pc, #80]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f28:	4013      	ands	r3, r2
 8000f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d021      	beq.n	8000f7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f38:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	490e      	ldr	r1, [pc, #56]	@ (8000f78 <HAL_GPIO_Init+0x2d0>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	600b      	str	r3, [r1, #0]
 8000f44:	e021      	b.n	8000f8a <HAL_GPIO_Init+0x2e2>
 8000f46:	bf00      	nop
 8000f48:	10320000 	.word	0x10320000
 8000f4c:	10310000 	.word	0x10310000
 8000f50:	10220000 	.word	0x10220000
 8000f54:	10210000 	.word	0x10210000
 8000f58:	10120000 	.word	0x10120000
 8000f5c:	10110000 	.word	0x10110000
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010000 	.word	0x40010000
 8000f68:	40010800 	.word	0x40010800
 8000f6c:	40010c00 	.word	0x40010c00
 8000f70:	40011000 	.word	0x40011000
 8000f74:	40011400 	.word	0x40011400
 8000f78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <HAL_GPIO_Init+0x304>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	4909      	ldr	r1, [pc, #36]	@ (8000fac <HAL_GPIO_Init+0x304>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f96:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f47f ae8e 	bne.w	8000cbc <HAL_GPIO_Init+0x14>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	372c      	adds	r7, #44	@ 0x2c
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40010400 	.word	0x40010400

08000fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc0:	787b      	ldrb	r3, [r7, #1]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc6:	887a      	ldrh	r2, [r7, #2]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fcc:	e003      	b.n	8000fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	041a      	lsls	r2, r3, #16
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	611a      	str	r2, [r3, #16]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fbbe 	bl	8000780 <HAL_GPIO_EXTI_Callback>
  }
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40010400 	.word	0x40010400

08001010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e272      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8087 	beq.w	800113e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001030:	4b92      	ldr	r3, [pc, #584]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b04      	cmp	r3, #4
 800103a:	d00c      	beq.n	8001056 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800103c:	4b8f      	ldr	r3, [pc, #572]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b08      	cmp	r3, #8
 8001046:	d112      	bne.n	800106e <HAL_RCC_OscConfig+0x5e>
 8001048:	4b8c      	ldr	r3, [pc, #560]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001054:	d10b      	bne.n	800106e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001056:	4b89      	ldr	r3, [pc, #548]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d06c      	beq.n	800113c <HAL_RCC_OscConfig+0x12c>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d168      	bne.n	800113c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e24c      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x76>
 8001078:	4b80      	ldr	r3, [pc, #512]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a7f      	ldr	r2, [pc, #508]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800107e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e02e      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x98>
 800108e:	4b7b      	ldr	r3, [pc, #492]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a7a      	ldr	r2, [pc, #488]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b78      	ldr	r3, [pc, #480]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a77      	ldr	r2, [pc, #476]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e01d      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0xbc>
 80010b2:	4b72      	ldr	r3, [pc, #456]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a71      	ldr	r2, [pc, #452]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b6f      	ldr	r3, [pc, #444]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a6e      	ldr	r2, [pc, #440]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e00b      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 80010cc:	4b6b      	ldr	r3, [pc, #428]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a6a      	ldr	r2, [pc, #424]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b68      	ldr	r3, [pc, #416]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a67      	ldr	r2, [pc, #412]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d013      	beq.n	8001114 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fcf2 	bl	8000ad4 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fcee 	bl	8000ad4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	@ 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e200      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	4b5d      	ldr	r3, [pc, #372]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0xe4>
 8001112:	e014      	b.n	800113e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fcde 	bl	8000ad4 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fcda 	bl	8000ad4 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	@ 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e1ec      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112e:	4b53      	ldr	r3, [pc, #332]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x10c>
 800113a:	e000      	b.n	800113e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d063      	beq.n	8001212 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800114a:	4b4c      	ldr	r3, [pc, #304]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00b      	beq.n	800116e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001156:	4b49      	ldr	r3, [pc, #292]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b08      	cmp	r3, #8
 8001160:	d11c      	bne.n	800119c <HAL_RCC_OscConfig+0x18c>
 8001162:	4b46      	ldr	r3, [pc, #280]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d116      	bne.n	800119c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	4b43      	ldr	r3, [pc, #268]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d005      	beq.n	8001186 <HAL_RCC_OscConfig+0x176>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d001      	beq.n	8001186 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e1c0      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001186:	4b3d      	ldr	r3, [pc, #244]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4939      	ldr	r1, [pc, #228]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	e03a      	b.n	8001212 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d020      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a4:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <HAL_RCC_OscConfig+0x270>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011aa:	f7ff fc93 	bl	8000ad4 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fc8f 	bl	8000ad4 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e1a1      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c4:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4927      	ldr	r1, [pc, #156]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
 80011e4:	e015      	b.n	8001212 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <HAL_RCC_OscConfig+0x270>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc72 	bl	8000ad4 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff fc6e 	bl	8000ad4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e180      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d03a      	beq.n	8001294 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d019      	beq.n	800125a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <HAL_RCC_OscConfig+0x274>)
 8001228:	2201      	movs	r2, #1
 800122a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122c:	f7ff fc52 	bl	8000ad4 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff fc4e 	bl	8000ad4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e160      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001246:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001252:	2001      	movs	r0, #1
 8001254:	f000 faea 	bl	800182c <RCC_Delay>
 8001258:	e01c      	b.n	8001294 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_RCC_OscConfig+0x274>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001260:	f7ff fc38 	bl	8000ad4 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001266:	e00f      	b.n	8001288 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff fc34 	bl	8000ad4 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d908      	bls.n	8001288 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e146      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	42420000 	.word	0x42420000
 8001284:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	4b92      	ldr	r3, [pc, #584]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1e9      	bne.n	8001268 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80a6 	beq.w	80013ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a6:	4b8b      	ldr	r3, [pc, #556]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10d      	bne.n	80012ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b88      	ldr	r3, [pc, #544]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a87      	ldr	r2, [pc, #540]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b85      	ldr	r3, [pc, #532]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ce:	4b82      	ldr	r3, [pc, #520]	@ (80014d8 <HAL_RCC_OscConfig+0x4c8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d118      	bne.n	800130c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012da:	4b7f      	ldr	r3, [pc, #508]	@ (80014d8 <HAL_RCC_OscConfig+0x4c8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a7e      	ldr	r2, [pc, #504]	@ (80014d8 <HAL_RCC_OscConfig+0x4c8>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fbf5 	bl	8000ad4 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ee:	f7ff fbf1 	bl	8000ad4 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b64      	cmp	r3, #100	@ 0x64
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e103      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001300:	4b75      	ldr	r3, [pc, #468]	@ (80014d8 <HAL_RCC_OscConfig+0x4c8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x312>
 8001314:	4b6f      	ldr	r3, [pc, #444]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4a6e      	ldr	r2, [pc, #440]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6213      	str	r3, [r2, #32]
 8001320:	e02d      	b.n	800137e <HAL_RCC_OscConfig+0x36e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x334>
 800132a:	4b6a      	ldr	r3, [pc, #424]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4a69      	ldr	r2, [pc, #420]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	6213      	str	r3, [r2, #32]
 8001336:	4b67      	ldr	r3, [pc, #412]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a66      	ldr	r2, [pc, #408]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	f023 0304 	bic.w	r3, r3, #4
 8001340:	6213      	str	r3, [r2, #32]
 8001342:	e01c      	b.n	800137e <HAL_RCC_OscConfig+0x36e>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b05      	cmp	r3, #5
 800134a:	d10c      	bne.n	8001366 <HAL_RCC_OscConfig+0x356>
 800134c:	4b61      	ldr	r3, [pc, #388]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4a60      	ldr	r2, [pc, #384]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6213      	str	r3, [r2, #32]
 8001358:	4b5e      	ldr	r3, [pc, #376]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4a5d      	ldr	r2, [pc, #372]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6213      	str	r3, [r2, #32]
 8001364:	e00b      	b.n	800137e <HAL_RCC_OscConfig+0x36e>
 8001366:	4b5b      	ldr	r3, [pc, #364]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a5a      	ldr	r2, [pc, #360]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6213      	str	r3, [r2, #32]
 8001372:	4b58      	ldr	r3, [pc, #352]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a57      	ldr	r2, [pc, #348]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d015      	beq.n	80013b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff fba5 	bl	8000ad4 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f7ff fba1 	bl	8000ad4 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139c:	4293      	cmp	r3, r2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e0b1      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a4:	4b4b      	ldr	r3, [pc, #300]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0ee      	beq.n	800138e <HAL_RCC_OscConfig+0x37e>
 80013b0:	e014      	b.n	80013dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fb8f 	bl	8000ad4 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff fb8b 	bl	8000ad4 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e09b      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d0:	4b40      	ldr	r3, [pc, #256]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1ee      	bne.n	80013ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d105      	bne.n	80013ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e2:	4b3c      	ldr	r3, [pc, #240]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a3b      	ldr	r2, [pc, #236]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8087 	beq.w	8001506 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f8:	4b36      	ldr	r3, [pc, #216]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b08      	cmp	r3, #8
 8001402:	d061      	beq.n	80014c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d146      	bne.n	800149a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140c:	4b33      	ldr	r3, [pc, #204]	@ (80014dc <HAL_RCC_OscConfig+0x4cc>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001412:	f7ff fb5f 	bl	8000ad4 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff fb5b 	bl	8000ad4 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e06d      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142c:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001440:	d108      	bne.n	8001454 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001442:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	4921      	ldr	r1, [pc, #132]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001454:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a19      	ldr	r1, [r3, #32]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	430b      	orrs	r3, r1
 8001466:	491b      	ldr	r1, [pc, #108]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800146c:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <HAL_RCC_OscConfig+0x4cc>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff fb2f 	bl	8000ad4 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147a:	f7ff fb2b 	bl	8000ad4 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e03d      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x46a>
 8001498:	e035      	b.n	8001506 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <HAL_RCC_OscConfig+0x4cc>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb18 	bl	8000ad4 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff fb14 	bl	8000ad4 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e026      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x498>
 80014c6:	e01e      	b.n	8001506 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d107      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e019      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40007000 	.word	0x40007000
 80014dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <HAL_RCC_OscConfig+0x500>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0d0      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001528:	4b6a      	ldr	r3, [pc, #424]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d910      	bls.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b67      	ldr	r3, [pc, #412]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 0207 	bic.w	r2, r3, #7
 800153e:	4965      	ldr	r1, [pc, #404]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b63      	ldr	r3, [pc, #396]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0b8      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001570:	4b59      	ldr	r3, [pc, #356]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a58      	ldr	r2, [pc, #352]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800157a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001588:	4b53      	ldr	r3, [pc, #332]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a52      	ldr	r2, [pc, #328]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001592:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b50      	ldr	r3, [pc, #320]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	494d      	ldr	r1, [pc, #308]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d040      	beq.n	8001634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b47      	ldr	r3, [pc, #284]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d115      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e07f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b41      	ldr	r3, [pc, #260]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e073      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	4b3d      	ldr	r3, [pc, #244]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e06b      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f2:	4b39      	ldr	r3, [pc, #228]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f023 0203 	bic.w	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4936      	ldr	r1, [pc, #216]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001604:	f7ff fa66 	bl	8000ad4 <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	e00a      	b.n	8001622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160c:	f7ff fa62 	bl	8000ad4 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e053      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	4b2d      	ldr	r3, [pc, #180]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 020c 	and.w	r2, r3, #12
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d1eb      	bne.n	800160c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001634:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d210      	bcs.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 0207 	bic.w	r2, r3, #7
 800164a:	4922      	ldr	r1, [pc, #136]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e032      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4916      	ldr	r1, [pc, #88]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	490e      	ldr	r1, [pc, #56]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016a2:	f000 f821 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 80016a6:	4602      	mov	r2, r0
 80016a8:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	490a      	ldr	r1, [pc, #40]	@ (80016dc <HAL_RCC_ClockConfig+0x1c8>)
 80016b4:	5ccb      	ldrb	r3, [r1, r3]
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	4a09      	ldr	r2, [pc, #36]	@ (80016e0 <HAL_RCC_ClockConfig+0x1cc>)
 80016bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <HAL_RCC_ClockConfig+0x1d0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f8ca 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000
 80016d8:	40021000 	.word	0x40021000
 80016dc:	08005498 	.word	0x08005498
 80016e0:	20000004 	.word	0x20000004
 80016e4:	20000008 	.word	0x20000008

080016e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001702:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <HAL_RCC_GetSysClockFreq+0x94>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b04      	cmp	r3, #4
 8001710:	d002      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0x30>
 8001712:	2b08      	cmp	r3, #8
 8001714:	d003      	beq.n	800171e <HAL_RCC_GetSysClockFreq+0x36>
 8001716:	e027      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001718:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x98>)
 800171a:	613b      	str	r3, [r7, #16]
      break;
 800171c:	e027      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	0c9b      	lsrs	r3, r3, #18
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	4a17      	ldr	r2, [pc, #92]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001728:	5cd3      	ldrb	r3, [r2, r3]
 800172a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d010      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_RCC_GetSysClockFreq+0x94>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	0c5b      	lsrs	r3, r3, #17
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	4a11      	ldr	r2, [pc, #68]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x98>)
 800174a:	fb03 f202 	mul.w	r2, r3, r2
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	fbb2 f3f3 	udiv	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e004      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a0c      	ldr	r2, [pc, #48]	@ (800178c <HAL_RCC_GetSysClockFreq+0xa4>)
 800175c:	fb02 f303 	mul.w	r3, r2, r3
 8001760:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	613b      	str	r3, [r7, #16]
      break;
 8001766:	e002      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x98>)
 800176a:	613b      	str	r3, [r7, #16]
      break;
 800176c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800176e:	693b      	ldr	r3, [r7, #16]
}
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	007a1200 	.word	0x007a1200
 8001784:	080054b0 	.word	0x080054b0
 8001788:	080054c0 	.word	0x080054c0
 800178c:	003d0900 	.word	0x003d0900

08001790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001794:	4b02      	ldr	r3, [pc, #8]	@ (80017a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017a8:	f7ff fff2 	bl	8001790 <HAL_RCC_GetHCLKFreq>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	4903      	ldr	r1, [pc, #12]	@ (80017c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ba:	5ccb      	ldrb	r3, [r1, r3]
 80017bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	080054a8 	.word	0x080054a8

080017cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	220f      	movs	r2, #15
 80017da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_RCC_GetClockConfig+0x58>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0203 	and.w	r2, r3, #3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_RCC_GetClockConfig+0x58>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_RCC_GetClockConfig+0x58>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001800:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <HAL_RCC_GetClockConfig+0x58>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_RCC_GetClockConfig+0x5c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0207 	and.w	r2, r3, #7
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	40021000 	.word	0x40021000
 8001828:	40022000 	.word	0x40022000

0800182c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <RCC_Delay+0x34>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <RCC_Delay+0x38>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0a5b      	lsrs	r3, r3, #9
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001848:	bf00      	nop
  }
  while (Delay --);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1e5a      	subs	r2, r3, #1
 800184e:	60fa      	str	r2, [r7, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f9      	bne.n	8001848 <RCC_Delay+0x1c>
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	20000004 	.word	0x20000004
 8001864:	10624dd3 	.word	0x10624dd3

08001868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e041      	b.n	80018fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f839 	bl	8001906 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3304      	adds	r3, #4
 80018a4:	4619      	mov	r1, r3
 80018a6:	4610      	mov	r0, r2
 80018a8:	f000 f99c 	bl	8001be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b01      	cmp	r3, #1
 800192a:	d001      	beq.n	8001930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e03a      	b.n	80019a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a18      	ldr	r2, [pc, #96]	@ (80019b0 <HAL_TIM_Base_Start_IT+0x98>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00e      	beq.n	8001970 <HAL_TIM_Base_Start_IT+0x58>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800195a:	d009      	beq.n	8001970 <HAL_TIM_Base_Start_IT+0x58>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a14      	ldr	r2, [pc, #80]	@ (80019b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d004      	beq.n	8001970 <HAL_TIM_Base_Start_IT+0x58>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a13      	ldr	r2, [pc, #76]	@ (80019b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d111      	bne.n	8001994 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b06      	cmp	r3, #6
 8001980:	d010      	beq.n	80019a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001992:	e007      	b.n	80019a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	40000400 	.word	0x40000400
 80019b8:	40000800 	.word	0x40000800

080019bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d020      	beq.n	8001a20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01b      	beq.n	8001a20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f06f 0202 	mvn.w	r2, #2
 80019f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f8d1 	bl	8001bae <HAL_TIM_IC_CaptureCallback>
 8001a0c:	e005      	b.n	8001a1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f8c4 	bl	8001b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f8d3 	bl	8001bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d020      	beq.n	8001a6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01b      	beq.n	8001a6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0204 	mvn.w	r2, #4
 8001a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2202      	movs	r2, #2
 8001a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f8ab 	bl	8001bae <HAL_TIM_IC_CaptureCallback>
 8001a58:	e005      	b.n	8001a66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f89e 	bl	8001b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f8ad 	bl	8001bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d020      	beq.n	8001ab8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01b      	beq.n	8001ab8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f06f 0208 	mvn.w	r2, #8
 8001a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f885 	bl	8001bae <HAL_TIM_IC_CaptureCallback>
 8001aa4:	e005      	b.n	8001ab2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f878 	bl	8001b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f887 	bl	8001bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d020      	beq.n	8001b04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01b      	beq.n	8001b04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0210 	mvn.w	r2, #16
 8001ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2208      	movs	r2, #8
 8001ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f85f 	bl	8001bae <HAL_TIM_IC_CaptureCallback>
 8001af0:	e005      	b.n	8001afe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f852 	bl	8001b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f861 	bl	8001bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00c      	beq.n	8001b28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d007      	beq.n	8001b28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0201 	mvn.w	r2, #1
 8001b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7fe fe1a 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00c      	beq.n	8001b4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f8c3 	bl	8001cd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00c      	beq.n	8001b70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f831 	bl	8001bd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00c      	beq.n	8001b94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0220 	mvn.w	r2, #32
 8001b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f896 	bl	8001cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb4 <TIM_Base_SetConfig+0xd0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00b      	beq.n	8001c14 <TIM_Base_SetConfig+0x30>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c02:	d007      	beq.n	8001c14 <TIM_Base_SetConfig+0x30>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a2c      	ldr	r2, [pc, #176]	@ (8001cb8 <TIM_Base_SetConfig+0xd4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d003      	beq.n	8001c14 <TIM_Base_SetConfig+0x30>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a2b      	ldr	r2, [pc, #172]	@ (8001cbc <TIM_Base_SetConfig+0xd8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d108      	bne.n	8001c26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a22      	ldr	r2, [pc, #136]	@ (8001cb4 <TIM_Base_SetConfig+0xd0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00b      	beq.n	8001c46 <TIM_Base_SetConfig+0x62>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c34:	d007      	beq.n	8001c46 <TIM_Base_SetConfig+0x62>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb8 <TIM_Base_SetConfig+0xd4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d003      	beq.n	8001c46 <TIM_Base_SetConfig+0x62>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a1e      	ldr	r2, [pc, #120]	@ (8001cbc <TIM_Base_SetConfig+0xd8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d108      	bne.n	8001c58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <TIM_Base_SetConfig+0xd0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d103      	bne.n	8001c8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f023 0201 	bic.w	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	611a      	str	r2, [r3, #16]
  }
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	40012c00 	.word	0x40012c00
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	40000800 	.word	0x40000800

08001cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <__NVIC_SetPriority>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	@ (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	@ (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <SysTick_Handler+0x1c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001d40:	f001 fe18 	bl	8003974 <xTaskGetSchedulerState>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d001      	beq.n	8001d4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001d4a:	f002 fbbd 	bl	80044c8 <xPortSysTickHandler>
  }
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	e000e010 	.word	0xe000e010

08001d58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	f06f 0004 	mvn.w	r0, #4
 8001d62:	f7ff ffbf 	bl	8001ce4 <__NVIC_SetPriority>
#endif
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d72:	f3ef 8305 	mrs	r3, IPSR
 8001d76:	603b      	str	r3, [r7, #0]
  return(result);
 8001d78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001d7e:	f06f 0305 	mvn.w	r3, #5
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	e00c      	b.n	8001da0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001d86:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <osKernelInitialize+0x40>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d105      	bne.n	8001d9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <osKernelInitialize+0x40>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	e002      	b.n	8001da0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001da0:	687b      	ldr	r3, [r7, #4]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	2000010c 	.word	0x2000010c

08001db0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001db6:	f3ef 8305 	mrs	r3, IPSR
 8001dba:	603b      	str	r3, [r7, #0]
  return(result);
 8001dbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <osKernelStart+0x1a>
    stat = osErrorISR;
 8001dc2:	f06f 0305 	mvn.w	r3, #5
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	e010      	b.n	8001dec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001dca:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <osKernelStart+0x48>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d109      	bne.n	8001de6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001dd2:	f7ff ffc1 	bl	8001d58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <osKernelStart+0x48>)
 8001dd8:	2202      	movs	r2, #2
 8001dda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001ddc:	f001 f97e 	bl	80030dc <vTaskStartScheduler>
      stat = osOK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	e002      	b.n	8001dec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001dec:	687b      	ldr	r3, [r7, #4]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000010c 	.word	0x2000010c

08001dfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	@ 0x38
 8001e00:	af04      	add	r7, sp, #16
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e0c:	f3ef 8305 	mrs	r3, IPSR
 8001e10:	617b      	str	r3, [r7, #20]
  return(result);
 8001e12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d17f      	bne.n	8001f18 <osThreadNew+0x11c>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d07c      	beq.n	8001f18 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8001e1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e22:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001e24:	2318      	movs	r3, #24
 8001e26:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d045      	beq.n	8001ec4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <osThreadNew+0x4a>
        name = attr->name;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d008      	beq.n	8001e6c <osThreadNew+0x70>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	2b38      	cmp	r3, #56	@ 0x38
 8001e5e:	d805      	bhi.n	8001e6c <osThreadNew+0x70>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <osThreadNew+0x74>
        return (NULL);
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e054      	b.n	8001f1a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00e      	beq.n	8001ea6 <osThreadNew+0xaa>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b5b      	cmp	r3, #91	@ 0x5b
 8001e8e:	d90a      	bls.n	8001ea6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d006      	beq.n	8001ea6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <osThreadNew+0xaa>
        mem = 1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	e010      	b.n	8001ec8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10c      	bne.n	8001ec8 <osThreadNew+0xcc>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d108      	bne.n	8001ec8 <osThreadNew+0xcc>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <osThreadNew+0xcc>
          mem = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	e001      	b.n	8001ec8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d110      	bne.n	8001ef0 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ed6:	9202      	str	r2, [sp, #8]
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	6a3a      	ldr	r2, [r7, #32]
 8001ee2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 fe41 	bl	8002b6c <xTaskCreateStatic>
 8001eea:	4603      	mov	r3, r0
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	e013      	b.n	8001f18 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d110      	bne.n	8001f18 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	f107 0310 	add.w	r3, r7, #16
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 fe8f 	bl	8002c2c <xTaskCreate>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d001      	beq.n	8001f18 <osThreadNew+0x11c>
            hTask = NULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001f18:	693b      	ldr	r3, [r7, #16]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3728      	adds	r7, #40	@ 0x28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f2e:	f3ef 8305 	mrs	r3, IPSR
 8001f32:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8001f3a:	f06f 0305 	mvn.w	r3, #5
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	e017      	b.n	8001f72 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d103      	bne.n	8001f50 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8001f48:	f06f 0303 	mvn.w	r3, #3
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e010      	b.n	8001f72 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8001f50:	6938      	ldr	r0, [r7, #16]
 8001f52:	f001 f85b 	bl	800300c <eTaskGetState>
 8001f56:	4603      	mov	r3, r0
 8001f58:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d005      	beq.n	8001f6c <osThreadTerminate+0x4a>
      stat = osOK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8001f64:	6938      	ldr	r0, [r7, #16]
 8001f66:	f000 ffa7 	bl	8002eb8 <vTaskDelete>
 8001f6a:	e002      	b.n	8001f72 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8001f6c:	f06f 0302 	mvn.w	r3, #2
 8001f70:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8001f72:	697b      	ldr	r3, [r7, #20]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f84:	f3ef 8305 	mrs	r3, IPSR
 8001f88:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <osDelay+0x1c>
    stat = osErrorISR;
 8001f90:	f06f 0305 	mvn.w	r3, #5
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	e007      	b.n	8001fa8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fffc 	bl	8002fa0 <vTaskDelay>
    }
  }

  return (stat);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4a07      	ldr	r2, [pc, #28]	@ (8001fe0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	4a06      	ldr	r2, [pc, #24]	@ (8001fe4 <vApplicationGetIdleTaskMemory+0x30>)
 8001fca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fd2:	601a      	str	r2, [r3, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000110 	.word	0x20000110
 8001fe4:	2000016c 	.word	0x2000016c

08001fe8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4a07      	ldr	r2, [pc, #28]	@ (8002014 <vApplicationGetTimerTaskMemory+0x2c>)
 8001ff8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	4a06      	ldr	r2, [pc, #24]	@ (8002018 <vApplicationGetTimerTaskMemory+0x30>)
 8001ffe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	2000056c 	.word	0x2000056c
 8002018:	200005c8 	.word	0x200005c8

0800201c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f103 0208 	add.w	r2, r3, #8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f103 0208 	add.w	r2, r3, #8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f103 0208 	add.w	r2, r3, #8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002072:	b480      	push	{r7}
 8002074:	b085      	sub	sp, #20
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	601a      	str	r2, [r3, #0]
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ce:	d103      	bne.n	80020d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e00c      	b.n	80020f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3308      	adds	r3, #8
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	e002      	b.n	80020e6 <vListInsert+0x2e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d2f6      	bcs.n	80020e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	601a      	str	r2, [r3, #0]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6892      	ldr	r2, [r2, #8]
 800213e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6852      	ldr	r2, [r2, #4]
 8002148:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	d103      	bne.n	800215c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1e5a      	subs	r2, r3, #1
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
	...

0800217c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10b      	bne.n	80021a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002194:	f383 8811 	msr	BASEPRI, r3
 8002198:	f3bf 8f6f 	isb	sy
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80021a8:	f002 f910 	bl	80043cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b4:	68f9      	ldr	r1, [r7, #12]
 80021b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	441a      	add	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d8:	3b01      	subs	r3, #1
 80021da:	68f9      	ldr	r1, [r7, #12]
 80021dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	441a      	add	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	22ff      	movs	r2, #255	@ 0xff
 80021ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	22ff      	movs	r2, #255	@ 0xff
 80021f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d114      	bne.n	8002228 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01a      	beq.n	800223c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3310      	adds	r3, #16
 800220a:	4618      	mov	r0, r3
 800220c:	f001 f9f2 	bl	80035f4 <xTaskRemoveFromEventList>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d012      	beq.n	800223c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <xQueueGenericReset+0xd0>)
 8002218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	f3bf 8f4f 	dsb	sy
 8002222:	f3bf 8f6f 	isb	sy
 8002226:	e009      	b.n	800223c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3310      	adds	r3, #16
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fef5 	bl	800201c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3324      	adds	r3, #36	@ 0x24
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fef0 	bl	800201c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800223c:	f002 f8f6 	bl	800442c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002240:	2301      	movs	r3, #1
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000ed04 	.word	0xe000ed04

08002250 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08e      	sub	sp, #56	@ 0x38
 8002254:	af02      	add	r7, sp, #8
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10b      	bne.n	800227c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002268:	f383 8811 	msr	BASEPRI, r3
 800226c:	f3bf 8f6f 	isb	sy
 8002270:	f3bf 8f4f 	dsb	sy
 8002274:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002276:	bf00      	nop
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10b      	bne.n	800229a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	e7fd      	b.n	8002296 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <xQueueGenericCreateStatic+0x56>
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <xQueueGenericCreateStatic+0x5a>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <xQueueGenericCreateStatic+0x5c>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10b      	bne.n	80022c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80022b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b4:	f383 8811 	msr	BASEPRI, r3
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	f3bf 8f4f 	dsb	sy
 80022c0:	623b      	str	r3, [r7, #32]
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <xQueueGenericCreateStatic+0x84>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <xQueueGenericCreateStatic+0x88>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <xQueueGenericCreateStatic+0x8a>
 80022d8:	2300      	movs	r3, #0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10b      	bne.n	80022f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80022de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022e2:	f383 8811 	msr	BASEPRI, r3
 80022e6:	f3bf 8f6f 	isb	sy
 80022ea:	f3bf 8f4f 	dsb	sy
 80022ee:	61fb      	str	r3, [r7, #28]
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	e7fd      	b.n	80022f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80022f6:	2350      	movs	r3, #80	@ 0x50
 80022f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b50      	cmp	r3, #80	@ 0x50
 80022fe:	d00b      	beq.n	8002318 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002304:	f383 8811 	msr	BASEPRI, r3
 8002308:	f3bf 8f6f 	isb	sy
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	61bb      	str	r3, [r7, #24]
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002318:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800231e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00d      	beq.n	8002340 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800232c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f805 	bl	800234a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002342:	4618      	mov	r0, r3
 8002344:	3730      	adds	r7, #48	@ 0x30
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e002      	b.n	800236c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002378:	2101      	movs	r1, #1
 800237a:	69b8      	ldr	r0, [r7, #24]
 800237c:	f7ff fefe 	bl	800217c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08e      	sub	sp, #56	@ 0x38
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800239e:	2300      	movs	r3, #0
 80023a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80023a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10b      	bne.n	80023c4 <xQueueGenericSend+0x34>
	__asm volatile
 80023ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b0:	f383 8811 	msr	BASEPRI, r3
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <xQueueGenericSend+0x42>
 80023ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <xQueueGenericSend+0x46>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <xQueueGenericSend+0x48>
 80023d6:	2300      	movs	r3, #0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <xQueueGenericSend+0x64>
	__asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d103      	bne.n	8002402 <xQueueGenericSend+0x72>
 80023fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <xQueueGenericSend+0x76>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <xQueueGenericSend+0x78>
 8002406:	2300      	movs	r3, #0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10b      	bne.n	8002424 <xQueueGenericSend+0x94>
	__asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	623b      	str	r3, [r7, #32]
}
 800241e:	bf00      	nop
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002424:	f001 faa6 	bl	8003974 <xTaskGetSchedulerState>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <xQueueGenericSend+0xa4>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <xQueueGenericSend+0xa8>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <xQueueGenericSend+0xaa>
 8002438:	2300      	movs	r3, #0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10b      	bne.n	8002456 <xQueueGenericSend+0xc6>
	__asm volatile
 800243e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	61fb      	str	r3, [r7, #28]
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	e7fd      	b.n	8002452 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002456:	f001 ffb9 	bl	80043cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800245a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800245e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002462:	429a      	cmp	r2, r3
 8002464:	d302      	bcc.n	800246c <xQueueGenericSend+0xdc>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d129      	bne.n	80024c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002472:	f000 fa0f 	bl	8002894 <prvCopyDataToQueue>
 8002476:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	2b00      	cmp	r3, #0
 800247e:	d010      	beq.n	80024a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002482:	3324      	adds	r3, #36	@ 0x24
 8002484:	4618      	mov	r0, r3
 8002486:	f001 f8b5 	bl	80035f4 <xTaskRemoveFromEventList>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002490:	4b3f      	ldr	r3, [pc, #252]	@ (8002590 <xQueueGenericSend+0x200>)
 8002492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	e00a      	b.n	80024b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024a8:	4b39      	ldr	r3, [pc, #228]	@ (8002590 <xQueueGenericSend+0x200>)
 80024aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024b8:	f001 ffb8 	bl	800442c <vPortExitCritical>
				return pdPASS;
 80024bc:	2301      	movs	r3, #1
 80024be:	e063      	b.n	8002588 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024c6:	f001 ffb1 	bl	800442c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e05c      	b.n	8002588 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d106      	bne.n	80024e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4618      	mov	r0, r3
 80024da:	f001 f8ef 	bl	80036bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024de:	2301      	movs	r3, #1
 80024e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024e2:	f001 ffa3 	bl	800442c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024e6:	f000 fe61 	bl	80031ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024ea:	f001 ff6f 	bl	80043cc <vPortEnterCritical>
 80024ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024f4:	b25b      	sxtb	r3, r3
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d103      	bne.n	8002504 <xQueueGenericSend+0x174>
 80024fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002506:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800250a:	b25b      	sxtb	r3, r3
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d103      	bne.n	800251a <xQueueGenericSend+0x18a>
 8002512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800251a:	f001 ff87 	bl	800442c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800251e:	1d3a      	adds	r2, r7, #4
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f001 f8de 	bl	80036e8 <xTaskCheckForTimeOut>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d124      	bne.n	800257c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002532:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002534:	f000 faa6 	bl	8002a84 <prvIsQueueFull>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d018      	beq.n	8002570 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800253e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002540:	3310      	adds	r3, #16
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f001 f802 	bl	8003550 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800254c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800254e:	f000 fa31 	bl	80029b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002552:	f000 fe39 	bl	80031c8 <xTaskResumeAll>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	f47f af7c 	bne.w	8002456 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800255e:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <xQueueGenericSend+0x200>)
 8002560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	e772      	b.n	8002456 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002570:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002572:	f000 fa1f 	bl	80029b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002576:	f000 fe27 	bl	80031c8 <xTaskResumeAll>
 800257a:	e76c      	b.n	8002456 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800257c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800257e:	f000 fa19 	bl	80029b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002582:	f000 fe21 	bl	80031c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002586:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002588:	4618      	mov	r0, r3
 800258a:	3738      	adds	r7, #56	@ 0x38
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	e000ed04 	.word	0xe000ed04

08002594 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b090      	sub	sp, #64	@ 0x40
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80025a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10b      	bne.n	80025c4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025be:	bf00      	nop
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <xQueueGenericSendFromISR+0x3e>
 80025ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <xQueueGenericSendFromISR+0x42>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <xQueueGenericSendFromISR+0x44>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80025ee:	bf00      	nop
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d103      	bne.n	8002602 <xQueueGenericSendFromISR+0x6e>
 80025fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <xQueueGenericSendFromISR+0x72>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <xQueueGenericSendFromISR+0x74>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10b      	bne.n	8002624 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800260c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002610:	f383 8811 	msr	BASEPRI, r3
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	623b      	str	r3, [r7, #32]
}
 800261e:	bf00      	nop
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002624:	f001 ff94 	bl	8004550 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002628:	f3ef 8211 	mrs	r2, BASEPRI
 800262c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	61fa      	str	r2, [r7, #28]
 800263e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002640:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002642:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002646:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800264a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264c:	429a      	cmp	r2, r3
 800264e:	d302      	bcc.n	8002656 <xQueueGenericSendFromISR+0xc2>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d12f      	bne.n	80026b6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002658:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800265c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002664:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800266c:	f000 f912 	bl	8002894 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002670:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d112      	bne.n	80026a0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800267a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	2b00      	cmp	r3, #0
 8002680:	d016      	beq.n	80026b0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002684:	3324      	adds	r3, #36	@ 0x24
 8002686:	4618      	mov	r0, r3
 8002688:	f000 ffb4 	bl	80035f4 <xTaskRemoveFromEventList>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00e      	beq.n	80026b0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e007      	b.n	80026b0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026a4:	3301      	adds	r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	b25a      	sxtb	r2, r3
 80026aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80026b0:	2301      	movs	r3, #1
 80026b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80026b4:	e001      	b.n	80026ba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026bc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3740      	adds	r7, #64	@ 0x40
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	@ 0x30
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10b      	bne.n	8002702 <xQueueReceive+0x32>
	__asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	623b      	str	r3, [r7, #32]
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	e7fd      	b.n	80026fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d103      	bne.n	8002710 <xQueueReceive+0x40>
 8002708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <xQueueReceive+0x44>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <xQueueReceive+0x46>
 8002714:	2300      	movs	r3, #0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10b      	bne.n	8002732 <xQueueReceive+0x62>
	__asm volatile
 800271a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	61fb      	str	r3, [r7, #28]
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	e7fd      	b.n	800272e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002732:	f001 f91f 	bl	8003974 <xTaskGetSchedulerState>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <xQueueReceive+0x72>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <xQueueReceive+0x76>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <xQueueReceive+0x78>
 8002746:	2300      	movs	r3, #0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <xQueueReceive+0x94>
	__asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	61bb      	str	r3, [r7, #24]
}
 800275e:	bf00      	nop
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002764:	f001 fe32 	bl	80043cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01f      	beq.n	80027b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002778:	f000 f8f6 	bl	8002968 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277e:	1e5a      	subs	r2, r3, #1
 8002780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002782:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00f      	beq.n	80027ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800278c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278e:	3310      	adds	r3, #16
 8002790:	4618      	mov	r0, r3
 8002792:	f000 ff2f 	bl	80035f4 <xTaskRemoveFromEventList>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800279c:	4b3c      	ldr	r3, [pc, #240]	@ (8002890 <xQueueReceive+0x1c0>)
 800279e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027ac:	f001 fe3e 	bl	800442c <vPortExitCritical>
				return pdPASS;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e069      	b.n	8002888 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d103      	bne.n	80027c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027ba:	f001 fe37 	bl	800442c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027be:	2300      	movs	r3, #0
 80027c0:	e062      	b.n	8002888 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d106      	bne.n	80027d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 ff75 	bl	80036bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027d2:	2301      	movs	r3, #1
 80027d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027d6:	f001 fe29 	bl	800442c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027da:	f000 fce7 	bl	80031ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027de:	f001 fdf5 	bl	80043cc <vPortEnterCritical>
 80027e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027e8:	b25b      	sxtb	r3, r3
 80027ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ee:	d103      	bne.n	80027f8 <xQueueReceive+0x128>
 80027f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d103      	bne.n	800280e <xQueueReceive+0x13e>
 8002806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800280e:	f001 fe0d 	bl	800442c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002812:	1d3a      	adds	r2, r7, #4
 8002814:	f107 0310 	add.w	r3, r7, #16
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f000 ff64 	bl	80036e8 <xTaskCheckForTimeOut>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d123      	bne.n	800286e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002828:	f000 f916 	bl	8002a58 <prvIsQueueEmpty>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d017      	beq.n	8002862 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002834:	3324      	adds	r3, #36	@ 0x24
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fe88 	bl	8003550 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002840:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002842:	f000 f8b7 	bl	80029b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002846:	f000 fcbf 	bl	80031c8 <xTaskResumeAll>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d189      	bne.n	8002764 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002850:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <xQueueReceive+0x1c0>)
 8002852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	e780      	b.n	8002764 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002864:	f000 f8a6 	bl	80029b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002868:	f000 fcae 	bl	80031c8 <xTaskResumeAll>
 800286c:	e77a      	b.n	8002764 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800286e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002870:	f000 f8a0 	bl	80029b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002874:	f000 fca8 	bl	80031c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002878:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800287a:	f000 f8ed 	bl	8002a58 <prvIsQueueEmpty>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	f43f af6f 	beq.w	8002764 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002886:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002888:	4618      	mov	r0, r3
 800288a:	3730      	adds	r7, #48	@ 0x30
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	e000ed04 	.word	0xe000ed04

08002894 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10d      	bne.n	80028ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d14d      	bne.n	8002956 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 f876 	bl	80039b0 <xTaskPriorityDisinherit>
 80028c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e043      	b.n	8002956 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d119      	bne.n	8002908 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6858      	ldr	r0, [r3, #4]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	461a      	mov	r2, r3
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	f002 f8b8 	bl	8004a54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	441a      	add	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d32b      	bcc.n	8002956 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	e026      	b.n	8002956 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68d8      	ldr	r0, [r3, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	461a      	mov	r2, r3
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	f002 f89e 	bl	8004a54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	425b      	negs	r3, r3
 8002922:	441a      	add	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d207      	bcs.n	8002944 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	425b      	negs	r3, r3
 800293e:	441a      	add	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d105      	bne.n	8002956 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	3b01      	subs	r3, #1
 8002954:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800295e:	697b      	ldr	r3, [r7, #20]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d018      	beq.n	80029ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	441a      	add	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	429a      	cmp	r2, r3
 8002992:	d303      	bcc.n	800299c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68d9      	ldr	r1, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	461a      	mov	r2, r3
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	f002 f854 	bl	8004a54 <memcpy>
	}
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029bc:	f001 fd06 	bl	80043cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029c8:	e011      	b.n	80029ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d012      	beq.n	80029f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3324      	adds	r3, #36	@ 0x24
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fe0c 	bl	80035f4 <xTaskRemoveFromEventList>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029e2:	f000 fee5 	bl	80037b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	dce9      	bgt.n	80029ca <prvUnlockQueue+0x16>
 80029f6:	e000      	b.n	80029fa <prvUnlockQueue+0x46>
					break;
 80029f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	22ff      	movs	r2, #255	@ 0xff
 80029fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002a02:	f001 fd13 	bl	800442c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a06:	f001 fce1 	bl	80043cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a12:	e011      	b.n	8002a38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3310      	adds	r3, #16
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fde7 	bl	80035f4 <xTaskRemoveFromEventList>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a2c:	f000 fec0 	bl	80037b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	dce9      	bgt.n	8002a14 <prvUnlockQueue+0x60>
 8002a40:	e000      	b.n	8002a44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	22ff      	movs	r2, #255	@ 0xff
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002a4c:	f001 fcee 	bl	800442c <vPortExitCritical>
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a60:	f001 fcb4 	bl	80043cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e001      	b.n	8002a76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a76:	f001 fcd9 	bl	800442c <vPortExitCritical>

	return xReturn;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a8c:	f001 fc9e 	bl	80043cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d102      	bne.n	8002aa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e001      	b.n	8002aa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002aa6:	f001 fcc1 	bl	800442c <vPortExitCritical>

	return xReturn;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	e014      	b.n	8002aee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ac4:	4a0e      	ldr	r2, [pc, #56]	@ (8002b00 <vQueueAddToRegistry+0x4c>)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ad0:	490b      	ldr	r1, [pc, #44]	@ (8002b00 <vQueueAddToRegistry+0x4c>)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ada:	4a09      	ldr	r2, [pc, #36]	@ (8002b00 <vQueueAddToRegistry+0x4c>)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ae6:	e006      	b.n	8002af6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3301      	adds	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b07      	cmp	r3, #7
 8002af2:	d9e7      	bls.n	8002ac4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	20000dc8 	.word	0x20000dc8

08002b04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b14:	f001 fc5a 	bl	80043cc <vPortEnterCritical>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b1e:	b25b      	sxtb	r3, r3
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d103      	bne.n	8002b2e <vQueueWaitForMessageRestricted+0x2a>
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b34:	b25b      	sxtb	r3, r3
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d103      	bne.n	8002b44 <vQueueWaitForMessageRestricted+0x40>
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b44:	f001 fc72 	bl	800442c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d106      	bne.n	8002b5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3324      	adds	r3, #36	@ 0x24
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fd1f 	bl	800359c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b5e:	6978      	ldr	r0, [r7, #20]
 8002b60:	f7ff ff28 	bl	80029b4 <prvUnlockQueue>
	}
 8002b64:	bf00      	nop
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08e      	sub	sp, #56	@ 0x38
 8002b70:	af04      	add	r7, sp, #16
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	623b      	str	r3, [r7, #32]
}
 8002b92:	bf00      	nop
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	61fb      	str	r3, [r7, #28]
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	e7fd      	b.n	8002bb2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bb6:	235c      	movs	r3, #92	@ 0x5c
 8002bb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b5c      	cmp	r3, #92	@ 0x5c
 8002bbe:	d00b      	beq.n	8002bd8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	61bb      	str	r3, [r7, #24]
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002bd8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01e      	beq.n	8002c1e <xTaskCreateStatic+0xb2>
 8002be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d01b      	beq.n	8002c1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9303      	str	r3, [sp, #12]
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	9302      	str	r3, [sp, #8]
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f850 	bl	8002cb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c18:	f000 f8de 	bl	8002dd8 <prvAddNewTaskToReadyList>
 8002c1c:	e001      	b.n	8002c22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c22:	697b      	ldr	r3, [r7, #20]
	}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3728      	adds	r7, #40	@ 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	@ 0x30
 8002c30:	af04      	add	r7, sp, #16
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 fcc5 	bl	80045d0 <pvPortMalloc>
 8002c46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00e      	beq.n	8002c6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c4e:	205c      	movs	r0, #92	@ 0x5c
 8002c50:	f001 fcbe 	bl	80045d0 <pvPortMalloc>
 8002c54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c62:	e005      	b.n	8002c70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c64:	6978      	ldr	r0, [r7, #20]
 8002c66:	f001 fd81 	bl	800476c <vPortFree>
 8002c6a:	e001      	b.n	8002c70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d017      	beq.n	8002ca6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	2300      	movs	r3, #0
 8002c82:	9303      	str	r3, [sp, #12]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	9302      	str	r3, [sp, #8]
 8002c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f80e 	bl	8002cb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c9a:	69f8      	ldr	r0, [r7, #28]
 8002c9c:	f000 f89c 	bl	8002dd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	e002      	b.n	8002cac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cac:	69bb      	ldr	r3, [r7, #24]
	}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b088      	sub	sp, #32
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	21a5      	movs	r1, #165	@ 0xa5
 8002cd0:	f001 fe8c 	bl	80049ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f023 0307 	bic.w	r3, r3, #7
 8002cec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	617b      	str	r3, [r7, #20]
}
 8002d0a:	bf00      	nop
 8002d0c:	bf00      	nop
 8002d0e:	e7fd      	b.n	8002d0c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01f      	beq.n	8002d56 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	e012      	b.n	8002d42 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	7819      	ldrb	r1, [r3, #0]
 8002d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	3334      	adds	r3, #52	@ 0x34
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	4413      	add	r3, r2
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2b0f      	cmp	r3, #15
 8002d46:	d9e9      	bls.n	8002d1c <prvInitialiseNewTask+0x66>
 8002d48:	e000      	b.n	8002d4c <prvInitialiseNewTask+0x96>
			{
				break;
 8002d4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d54:	e003      	b.n	8002d5e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d60:	2b37      	cmp	r3, #55	@ 0x37
 8002d62:	d901      	bls.n	8002d68 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d64:	2337      	movs	r3, #55	@ 0x37
 8002d66:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d72:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d76:	2200      	movs	r2, #0
 8002d78:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff f96b 	bl	800205a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d86:	3318      	adds	r3, #24
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff f966 	bl	800205a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002da2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da6:	2200      	movs	r2, #0
 8002da8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	68f9      	ldr	r1, [r7, #12]
 8002db6:	69b8      	ldr	r0, [r7, #24]
 8002db8:	f001 fa16 	bl	80041e8 <pxPortInitialiseStack>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dce:	bf00      	nop
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002de0:	f001 faf4 	bl	80043cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002de4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e9c <prvAddNewTaskToReadyList+0xc4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	4a2c      	ldr	r2, [pc, #176]	@ (8002e9c <prvAddNewTaskToReadyList+0xc4>)
 8002dec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002dee:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea0 <prvAddNewTaskToReadyList+0xc8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002df6:	4a2a      	ldr	r2, [pc, #168]	@ (8002ea0 <prvAddNewTaskToReadyList+0xc8>)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002dfc:	4b27      	ldr	r3, [pc, #156]	@ (8002e9c <prvAddNewTaskToReadyList+0xc4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d110      	bne.n	8002e26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e04:	f000 fcf8 	bl	80037f8 <prvInitialiseTaskLists>
 8002e08:	e00d      	b.n	8002e26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e0a:	4b26      	ldr	r3, [pc, #152]	@ (8002ea4 <prvAddNewTaskToReadyList+0xcc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e12:	4b23      	ldr	r3, [pc, #140]	@ (8002ea0 <prvAddNewTaskToReadyList+0xc8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d802      	bhi.n	8002e26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea0 <prvAddNewTaskToReadyList+0xc8>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e26:	4b20      	ldr	r3, [pc, #128]	@ (8002ea8 <prvAddNewTaskToReadyList+0xd0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea8 <prvAddNewTaskToReadyList+0xd0>)
 8002e2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <prvAddNewTaskToReadyList+0xd0>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <prvAddNewTaskToReadyList+0xd4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d903      	bls.n	8002e4c <prvAddNewTaskToReadyList+0x74>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	4a18      	ldr	r2, [pc, #96]	@ (8002eac <prvAddNewTaskToReadyList+0xd4>)
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4a15      	ldr	r2, [pc, #84]	@ (8002eb0 <prvAddNewTaskToReadyList+0xd8>)
 8002e5a:	441a      	add	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4610      	mov	r0, r2
 8002e64:	f7ff f905 	bl	8002072 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e68:	f001 fae0 	bl	800442c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea4 <prvAddNewTaskToReadyList+0xcc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00e      	beq.n	8002e92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea0 <prvAddNewTaskToReadyList+0xc8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d207      	bcs.n	8002e92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e82:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb4 <prvAddNewTaskToReadyList+0xdc>)
 8002e84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200012dc 	.word	0x200012dc
 8002ea0:	20000e08 	.word	0x20000e08
 8002ea4:	200012e8 	.word	0x200012e8
 8002ea8:	200012f8 	.word	0x200012f8
 8002eac:	200012e4 	.word	0x200012e4
 8002eb0:	20000e0c 	.word	0x20000e0c
 8002eb4:	e000ed04 	.word	0xe000ed04

08002eb8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002ec0:	f001 fa84 	bl	80043cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <vTaskDelete+0x18>
 8002eca:	4b2d      	ldr	r3, [pc, #180]	@ (8002f80 <vTaskDelete+0xc8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	e000      	b.n	8002ed2 <vTaskDelete+0x1a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f925 	bl	8002128 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d004      	beq.n	8002ef0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3318      	adds	r3, #24
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff f91c 	bl	8002128 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002ef0:	4b24      	ldr	r3, [pc, #144]	@ (8002f84 <vTaskDelete+0xcc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	4a23      	ldr	r2, [pc, #140]	@ (8002f84 <vTaskDelete+0xcc>)
 8002ef8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002efa:	4b21      	ldr	r3, [pc, #132]	@ (8002f80 <vTaskDelete+0xc8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d10b      	bne.n	8002f1c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4619      	mov	r1, r3
 8002f0a:	481f      	ldr	r0, [pc, #124]	@ (8002f88 <vTaskDelete+0xd0>)
 8002f0c:	f7ff f8b1 	bl	8002072 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002f10:	4b1e      	ldr	r3, [pc, #120]	@ (8002f8c <vTaskDelete+0xd4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3301      	adds	r3, #1
 8002f16:	4a1d      	ldr	r2, [pc, #116]	@ (8002f8c <vTaskDelete+0xd4>)
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e009      	b.n	8002f30 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002f90 <vTaskDelete+0xd8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	4a1b      	ldr	r2, [pc, #108]	@ (8002f90 <vTaskDelete+0xd8>)
 8002f24:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fcd4 	bl	80038d4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002f2c:	f000 fd02 	bl	8003934 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8002f30:	f001 fa7c 	bl	800442c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002f34:	4b17      	ldr	r3, [pc, #92]	@ (8002f94 <vTaskDelete+0xdc>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01c      	beq.n	8002f76 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8002f3c:	4b10      	ldr	r3, [pc, #64]	@ (8002f80 <vTaskDelete+0xc8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d117      	bne.n	8002f76 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002f46:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <vTaskDelete+0xe0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <vTaskDelete+0xae>
	__asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	60bb      	str	r3, [r7, #8]
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop
 8002f64:	e7fd      	b.n	8002f62 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8002f66:	4b0d      	ldr	r3, [pc, #52]	@ (8002f9c <vTaskDelete+0xe4>)
 8002f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000e08 	.word	0x20000e08
 8002f84:	200012f8 	.word	0x200012f8
 8002f88:	200012b0 	.word	0x200012b0
 8002f8c:	200012c4 	.word	0x200012c4
 8002f90:	200012dc 	.word	0x200012dc
 8002f94:	200012e8 	.word	0x200012e8
 8002f98:	20001304 	.word	0x20001304
 8002f9c:	e000ed04 	.word	0xe000ed04

08002fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d018      	beq.n	8002fe4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002fb2:	4b14      	ldr	r3, [pc, #80]	@ (8003004 <vTaskDelay+0x64>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <vTaskDelay+0x32>
	__asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	60bb      	str	r3, [r7, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	e7fd      	b.n	8002fce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002fd2:	f000 f8eb 	bl	80031ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fd59 	bl	8003a90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002fde:	f000 f8f3 	bl	80031c8 <xTaskResumeAll>
 8002fe2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d107      	bne.n	8002ffa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002fea:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <vTaskDelay+0x68>)
 8002fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20001304 	.word	0x20001304
 8003008:	e000ed04 	.word	0xe000ed04

0800300c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10b      	bne.n	8003036 <eTaskGetState+0x2a>
	__asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	60bb      	str	r3, [r7, #8]
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	e7fd      	b.n	8003032 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8003036:	4b24      	ldr	r3, [pc, #144]	@ (80030c8 <eTaskGetState+0xbc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	429a      	cmp	r2, r3
 800303e:	d102      	bne.n	8003046 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8003040:	2300      	movs	r3, #0
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e03a      	b.n	80030bc <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8003046:	f001 f9c1 	bl	80043cc <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8003050:	4b1e      	ldr	r3, [pc, #120]	@ (80030cc <eTaskGetState+0xc0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003056:	4b1e      	ldr	r3, [pc, #120]	@ (80030d0 <eTaskGetState+0xc4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800305c:	f001 f9e6 	bl	800442c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d003      	beq.n	8003070 <eTaskGetState+0x64>
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	429a      	cmp	r2, r3
 800306e:	d102      	bne.n	8003076 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8003070:	2302      	movs	r3, #2
 8003072:	77fb      	strb	r3, [r7, #31]
 8003074:	e022      	b.n	80030bc <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	4a16      	ldr	r2, [pc, #88]	@ (80030d4 <eTaskGetState+0xc8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d112      	bne.n	80030a4 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10b      	bne.n	800309e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d102      	bne.n	8003098 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8003092:	2302      	movs	r3, #2
 8003094:	77fb      	strb	r3, [r7, #31]
 8003096:	e011      	b.n	80030bc <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8003098:	2303      	movs	r3, #3
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e00e      	b.n	80030bc <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800309e:	2302      	movs	r3, #2
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	e00b      	b.n	80030bc <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	4a0c      	ldr	r2, [pc, #48]	@ (80030d8 <eTaskGetState+0xcc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d002      	beq.n	80030b2 <eTaskGetState+0xa6>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d102      	bne.n	80030b8 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80030b2:	2304      	movs	r3, #4
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e001      	b.n	80030bc <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80030b8:	2301      	movs	r3, #1
 80030ba:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80030bc:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80030be:	4618      	mov	r0, r3
 80030c0:	3720      	adds	r7, #32
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000e08 	.word	0x20000e08
 80030cc:	20001294 	.word	0x20001294
 80030d0:	20001298 	.word	0x20001298
 80030d4:	200012c8 	.word	0x200012c8
 80030d8:	200012b0 	.word	0x200012b0

080030dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	@ 0x28
 80030e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030ea:	463a      	mov	r2, r7
 80030ec:	1d39      	adds	r1, r7, #4
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe ff5e 	bl	8001fb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	9202      	str	r2, [sp, #8]
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	2300      	movs	r3, #0
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2300      	movs	r3, #0
 8003108:	460a      	mov	r2, r1
 800310a:	4922      	ldr	r1, [pc, #136]	@ (8003194 <vTaskStartScheduler+0xb8>)
 800310c:	4822      	ldr	r0, [pc, #136]	@ (8003198 <vTaskStartScheduler+0xbc>)
 800310e:	f7ff fd2d 	bl	8002b6c <xTaskCreateStatic>
 8003112:	4603      	mov	r3, r0
 8003114:	4a21      	ldr	r2, [pc, #132]	@ (800319c <vTaskStartScheduler+0xc0>)
 8003116:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003118:	4b20      	ldr	r3, [pc, #128]	@ (800319c <vTaskStartScheduler+0xc0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003120:	2301      	movs	r3, #1
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	e001      	b.n	800312a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d102      	bne.n	8003136 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003130:	f000 fd02 	bl	8003b38 <xTimerCreateTimerTask>
 8003134:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d116      	bne.n	800316a <vTaskStartScheduler+0x8e>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	613b      	str	r3, [r7, #16]
}
 800314e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003150:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <vTaskStartScheduler+0xc4>)
 8003152:	f04f 32ff 	mov.w	r2, #4294967295
 8003156:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003158:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <vTaskStartScheduler+0xc8>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800315e:	4b12      	ldr	r3, [pc, #72]	@ (80031a8 <vTaskStartScheduler+0xcc>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003164:	f001 f8c0 	bl	80042e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003168:	e00f      	b.n	800318a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d10b      	bne.n	800318a <vTaskStartScheduler+0xae>
	__asm volatile
 8003172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	60fb      	str	r3, [r7, #12]
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	e7fd      	b.n	8003186 <vTaskStartScheduler+0xaa>
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	080053cc 	.word	0x080053cc
 8003198:	080037c9 	.word	0x080037c9
 800319c:	20001300 	.word	0x20001300
 80031a0:	200012fc 	.word	0x200012fc
 80031a4:	200012e8 	.word	0x200012e8
 80031a8:	200012e0 	.word	0x200012e0

080031ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80031b0:	4b04      	ldr	r3, [pc, #16]	@ (80031c4 <vTaskSuspendAll+0x18>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	4a03      	ldr	r2, [pc, #12]	@ (80031c4 <vTaskSuspendAll+0x18>)
 80031b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20001304 	.word	0x20001304

080031c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031d6:	4b42      	ldr	r3, [pc, #264]	@ (80032e0 <xTaskResumeAll+0x118>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10b      	bne.n	80031f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	603b      	str	r3, [r7, #0]
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	e7fd      	b.n	80031f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031f6:	f001 f8e9 	bl	80043cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031fa:	4b39      	ldr	r3, [pc, #228]	@ (80032e0 <xTaskResumeAll+0x118>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3b01      	subs	r3, #1
 8003200:	4a37      	ldr	r2, [pc, #220]	@ (80032e0 <xTaskResumeAll+0x118>)
 8003202:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003204:	4b36      	ldr	r3, [pc, #216]	@ (80032e0 <xTaskResumeAll+0x118>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d162      	bne.n	80032d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800320c:	4b35      	ldr	r3, [pc, #212]	@ (80032e4 <xTaskResumeAll+0x11c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d05e      	beq.n	80032d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003214:	e02f      	b.n	8003276 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003216:	4b34      	ldr	r3, [pc, #208]	@ (80032e8 <xTaskResumeAll+0x120>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3318      	adds	r3, #24
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe ff80 	bl	8002128 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3304      	adds	r3, #4
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe ff7b 	bl	8002128 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003236:	4b2d      	ldr	r3, [pc, #180]	@ (80032ec <xTaskResumeAll+0x124>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d903      	bls.n	8003246 <xTaskResumeAll+0x7e>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003242:	4a2a      	ldr	r2, [pc, #168]	@ (80032ec <xTaskResumeAll+0x124>)
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4a27      	ldr	r2, [pc, #156]	@ (80032f0 <xTaskResumeAll+0x128>)
 8003254:	441a      	add	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3304      	adds	r3, #4
 800325a:	4619      	mov	r1, r3
 800325c:	4610      	mov	r0, r2
 800325e:	f7fe ff08 	bl	8002072 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003266:	4b23      	ldr	r3, [pc, #140]	@ (80032f4 <xTaskResumeAll+0x12c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	429a      	cmp	r2, r3
 800326e:	d302      	bcc.n	8003276 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003270:	4b21      	ldr	r3, [pc, #132]	@ (80032f8 <xTaskResumeAll+0x130>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003276:	4b1c      	ldr	r3, [pc, #112]	@ (80032e8 <xTaskResumeAll+0x120>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1cb      	bne.n	8003216 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003284:	f000 fb56 	bl	8003934 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003288:	4b1c      	ldr	r3, [pc, #112]	@ (80032fc <xTaskResumeAll+0x134>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d010      	beq.n	80032b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003294:	f000 f844 	bl	8003320 <xTaskIncrementTick>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800329e:	4b16      	ldr	r3, [pc, #88]	@ (80032f8 <xTaskResumeAll+0x130>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f1      	bne.n	8003294 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80032b0:	4b12      	ldr	r3, [pc, #72]	@ (80032fc <xTaskResumeAll+0x134>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032b6:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <xTaskResumeAll+0x130>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032be:	2301      	movs	r3, #1
 80032c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003300 <xTaskResumeAll+0x138>)
 80032c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032d2:	f001 f8ab 	bl	800442c <vPortExitCritical>

	return xAlreadyYielded;
 80032d6:	68bb      	ldr	r3, [r7, #8]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20001304 	.word	0x20001304
 80032e4:	200012dc 	.word	0x200012dc
 80032e8:	2000129c 	.word	0x2000129c
 80032ec:	200012e4 	.word	0x200012e4
 80032f0:	20000e0c 	.word	0x20000e0c
 80032f4:	20000e08 	.word	0x20000e08
 80032f8:	200012f0 	.word	0x200012f0
 80032fc:	200012ec 	.word	0x200012ec
 8003300:	e000ed04 	.word	0xe000ed04

08003304 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800330a:	4b04      	ldr	r3, [pc, #16]	@ (800331c <xTaskGetTickCount+0x18>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003310:	687b      	ldr	r3, [r7, #4]
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	200012e0 	.word	0x200012e0

08003320 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800332a:	4b4f      	ldr	r3, [pc, #316]	@ (8003468 <xTaskIncrementTick+0x148>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 8090 	bne.w	8003454 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003334:	4b4d      	ldr	r3, [pc, #308]	@ (800346c <xTaskIncrementTick+0x14c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800333c:	4a4b      	ldr	r2, [pc, #300]	@ (800346c <xTaskIncrementTick+0x14c>)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d121      	bne.n	800338c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003348:	4b49      	ldr	r3, [pc, #292]	@ (8003470 <xTaskIncrementTick+0x150>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	603b      	str	r3, [r7, #0]
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	e7fd      	b.n	8003366 <xTaskIncrementTick+0x46>
 800336a:	4b41      	ldr	r3, [pc, #260]	@ (8003470 <xTaskIncrementTick+0x150>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	4b40      	ldr	r3, [pc, #256]	@ (8003474 <xTaskIncrementTick+0x154>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a3e      	ldr	r2, [pc, #248]	@ (8003470 <xTaskIncrementTick+0x150>)
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4a3e      	ldr	r2, [pc, #248]	@ (8003474 <xTaskIncrementTick+0x154>)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b3e      	ldr	r3, [pc, #248]	@ (8003478 <xTaskIncrementTick+0x158>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	4a3c      	ldr	r2, [pc, #240]	@ (8003478 <xTaskIncrementTick+0x158>)
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	f000 fad4 	bl	8003934 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800338c:	4b3b      	ldr	r3, [pc, #236]	@ (800347c <xTaskIncrementTick+0x15c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	429a      	cmp	r2, r3
 8003394:	d349      	bcc.n	800342a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003396:	4b36      	ldr	r3, [pc, #216]	@ (8003470 <xTaskIncrementTick+0x150>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d104      	bne.n	80033aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033a0:	4b36      	ldr	r3, [pc, #216]	@ (800347c <xTaskIncrementTick+0x15c>)
 80033a2:	f04f 32ff 	mov.w	r2, #4294967295
 80033a6:	601a      	str	r2, [r3, #0]
					break;
 80033a8:	e03f      	b.n	800342a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033aa:	4b31      	ldr	r3, [pc, #196]	@ (8003470 <xTaskIncrementTick+0x150>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d203      	bcs.n	80033ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033c2:	4a2e      	ldr	r2, [pc, #184]	@ (800347c <xTaskIncrementTick+0x15c>)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033c8:	e02f      	b.n	800342a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	3304      	adds	r3, #4
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe feaa 	bl	8002128 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	3318      	adds	r3, #24
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fe fea1 	bl	8002128 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ea:	4b25      	ldr	r3, [pc, #148]	@ (8003480 <xTaskIncrementTick+0x160>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d903      	bls.n	80033fa <xTaskIncrementTick+0xda>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f6:	4a22      	ldr	r2, [pc, #136]	@ (8003480 <xTaskIncrementTick+0x160>)
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4a1f      	ldr	r2, [pc, #124]	@ (8003484 <xTaskIncrementTick+0x164>)
 8003408:	441a      	add	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	3304      	adds	r3, #4
 800340e:	4619      	mov	r1, r3
 8003410:	4610      	mov	r0, r2
 8003412:	f7fe fe2e 	bl	8002072 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800341a:	4b1b      	ldr	r3, [pc, #108]	@ (8003488 <xTaskIncrementTick+0x168>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	429a      	cmp	r2, r3
 8003422:	d3b8      	bcc.n	8003396 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003424:	2301      	movs	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003428:	e7b5      	b.n	8003396 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800342a:	4b17      	ldr	r3, [pc, #92]	@ (8003488 <xTaskIncrementTick+0x168>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003430:	4914      	ldr	r1, [pc, #80]	@ (8003484 <xTaskIncrementTick+0x164>)
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d901      	bls.n	8003446 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003442:	2301      	movs	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003446:	4b11      	ldr	r3, [pc, #68]	@ (800348c <xTaskIncrementTick+0x16c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800344e:	2301      	movs	r3, #1
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	e004      	b.n	800345e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003454:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <xTaskIncrementTick+0x170>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	4a0d      	ldr	r2, [pc, #52]	@ (8003490 <xTaskIncrementTick+0x170>)
 800345c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800345e:	697b      	ldr	r3, [r7, #20]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20001304 	.word	0x20001304
 800346c:	200012e0 	.word	0x200012e0
 8003470:	20001294 	.word	0x20001294
 8003474:	20001298 	.word	0x20001298
 8003478:	200012f4 	.word	0x200012f4
 800347c:	200012fc 	.word	0x200012fc
 8003480:	200012e4 	.word	0x200012e4
 8003484:	20000e0c 	.word	0x20000e0c
 8003488:	20000e08 	.word	0x20000e08
 800348c:	200012f0 	.word	0x200012f0
 8003490:	200012ec 	.word	0x200012ec

08003494 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800349a:	4b28      	ldr	r3, [pc, #160]	@ (800353c <vTaskSwitchContext+0xa8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034a2:	4b27      	ldr	r3, [pc, #156]	@ (8003540 <vTaskSwitchContext+0xac>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034a8:	e042      	b.n	8003530 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80034aa:	4b25      	ldr	r3, [pc, #148]	@ (8003540 <vTaskSwitchContext+0xac>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034b0:	4b24      	ldr	r3, [pc, #144]	@ (8003544 <vTaskSwitchContext+0xb0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	e011      	b.n	80034dc <vTaskSwitchContext+0x48>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <vTaskSwitchContext+0x42>
	__asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	607b      	str	r3, [r7, #4]
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	e7fd      	b.n	80034d2 <vTaskSwitchContext+0x3e>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3b01      	subs	r3, #1
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	491a      	ldr	r1, [pc, #104]	@ (8003548 <vTaskSwitchContext+0xb4>)
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0e3      	beq.n	80034b8 <vTaskSwitchContext+0x24>
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4a13      	ldr	r2, [pc, #76]	@ (8003548 <vTaskSwitchContext+0xb4>)
 80034fc:	4413      	add	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	3308      	adds	r3, #8
 8003512:	429a      	cmp	r2, r3
 8003514:	d104      	bne.n	8003520 <vTaskSwitchContext+0x8c>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	4a09      	ldr	r2, [pc, #36]	@ (800354c <vTaskSwitchContext+0xb8>)
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	4a06      	ldr	r2, [pc, #24]	@ (8003544 <vTaskSwitchContext+0xb0>)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20001304 	.word	0x20001304
 8003540:	200012f0 	.word	0x200012f0
 8003544:	200012e4 	.word	0x200012e4
 8003548:	20000e0c 	.word	0x20000e0c
 800354c:	20000e08 	.word	0x20000e08

08003550 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	60fb      	str	r3, [r7, #12]
}
 8003572:	bf00      	nop
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003578:	4b07      	ldr	r3, [pc, #28]	@ (8003598 <vTaskPlaceOnEventList+0x48>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3318      	adds	r3, #24
 800357e:	4619      	mov	r1, r3
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7fe fd99 	bl	80020b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003586:	2101      	movs	r1, #1
 8003588:	6838      	ldr	r0, [r7, #0]
 800358a:	f000 fa81 	bl	8003a90 <prvAddCurrentTaskToDelayedList>
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000e08 	.word	0x20000e08

0800359c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10b      	bne.n	80035c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	617b      	str	r3, [r7, #20]
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	e7fd      	b.n	80035c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035c6:	4b0a      	ldr	r3, [pc, #40]	@ (80035f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3318      	adds	r3, #24
 80035cc:	4619      	mov	r1, r3
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7fe fd4f 	bl	8002072 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	68b8      	ldr	r0, [r7, #8]
 80035e4:	f000 fa54 	bl	8003a90 <prvAddCurrentTaskToDelayedList>
	}
 80035e8:	bf00      	nop
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000e08 	.word	0x20000e08

080035f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10b      	bne.n	8003622 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	60fb      	str	r3, [r7, #12]
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	e7fd      	b.n	800361e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	3318      	adds	r3, #24
 8003626:	4618      	mov	r0, r3
 8003628:	f7fe fd7e 	bl	8002128 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800362c:	4b1d      	ldr	r3, [pc, #116]	@ (80036a4 <xTaskRemoveFromEventList+0xb0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d11d      	bne.n	8003670 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	3304      	adds	r3, #4
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe fd75 	bl	8002128 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003642:	4b19      	ldr	r3, [pc, #100]	@ (80036a8 <xTaskRemoveFromEventList+0xb4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d903      	bls.n	8003652 <xTaskRemoveFromEventList+0x5e>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364e:	4a16      	ldr	r2, [pc, #88]	@ (80036a8 <xTaskRemoveFromEventList+0xb4>)
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4a13      	ldr	r2, [pc, #76]	@ (80036ac <xTaskRemoveFromEventList+0xb8>)
 8003660:	441a      	add	r2, r3
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	3304      	adds	r3, #4
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f7fe fd02 	bl	8002072 <vListInsertEnd>
 800366e:	e005      	b.n	800367c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	3318      	adds	r3, #24
 8003674:	4619      	mov	r1, r3
 8003676:	480e      	ldr	r0, [pc, #56]	@ (80036b0 <xTaskRemoveFromEventList+0xbc>)
 8003678:	f7fe fcfb 	bl	8002072 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003680:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <xTaskRemoveFromEventList+0xc0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003686:	429a      	cmp	r2, r3
 8003688:	d905      	bls.n	8003696 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800368a:	2301      	movs	r3, #1
 800368c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800368e:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <xTaskRemoveFromEventList+0xc4>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e001      	b.n	800369a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800369a:	697b      	ldr	r3, [r7, #20]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20001304 	.word	0x20001304
 80036a8:	200012e4 	.word	0x200012e4
 80036ac:	20000e0c 	.word	0x20000e0c
 80036b0:	2000129c 	.word	0x2000129c
 80036b4:	20000e08 	.word	0x20000e08
 80036b8:	200012f0 	.word	0x200012f0

080036bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <vTaskInternalSetTimeOutState+0x24>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036cc:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <vTaskInternalSetTimeOutState+0x28>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	605a      	str	r2, [r3, #4]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	200012f4 	.word	0x200012f4
 80036e4:	200012e0 	.word	0x200012e0

080036e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	613b      	str	r3, [r7, #16]
}
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	60fb      	str	r3, [r7, #12]
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	e7fd      	b.n	800372a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800372e:	f000 fe4d 	bl	80043cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003732:	4b1d      	ldr	r3, [pc, #116]	@ (80037a8 <xTaskCheckForTimeOut+0xc0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d102      	bne.n	8003752 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e023      	b.n	800379a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b15      	ldr	r3, [pc, #84]	@ (80037ac <xTaskCheckForTimeOut+0xc4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d007      	beq.n	800376e <xTaskCheckForTimeOut+0x86>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	429a      	cmp	r2, r3
 8003766:	d302      	bcc.n	800376e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003768:	2301      	movs	r3, #1
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	e015      	b.n	800379a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	429a      	cmp	r2, r3
 8003776:	d20b      	bcs.n	8003790 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	1ad2      	subs	r2, r2, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff99 	bl	80036bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	e004      	b.n	800379a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003796:	2301      	movs	r3, #1
 8003798:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800379a:	f000 fe47 	bl	800442c <vPortExitCritical>

	return xReturn;
 800379e:	69fb      	ldr	r3, [r7, #28]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	200012e0 	.word	0x200012e0
 80037ac:	200012f4 	.word	0x200012f4

080037b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037b4:	4b03      	ldr	r3, [pc, #12]	@ (80037c4 <vTaskMissedYield+0x14>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
}
 80037ba:	bf00      	nop
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	200012f0 	.word	0x200012f0

080037c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037d0:	f000 f852 	bl	8003878 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037d4:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <prvIdleTask+0x28>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d9f9      	bls.n	80037d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80037dc:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <prvIdleTask+0x2c>)
 80037de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037ec:	e7f0      	b.n	80037d0 <prvIdleTask+0x8>
 80037ee:	bf00      	nop
 80037f0:	20000e0c 	.word	0x20000e0c
 80037f4:	e000ed04 	.word	0xe000ed04

080037f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037fe:	2300      	movs	r3, #0
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	e00c      	b.n	800381e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4a12      	ldr	r2, [pc, #72]	@ (8003858 <prvInitialiseTaskLists+0x60>)
 8003810:	4413      	add	r3, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe fc02 	bl	800201c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3301      	adds	r3, #1
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b37      	cmp	r3, #55	@ 0x37
 8003822:	d9ef      	bls.n	8003804 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003824:	480d      	ldr	r0, [pc, #52]	@ (800385c <prvInitialiseTaskLists+0x64>)
 8003826:	f7fe fbf9 	bl	800201c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800382a:	480d      	ldr	r0, [pc, #52]	@ (8003860 <prvInitialiseTaskLists+0x68>)
 800382c:	f7fe fbf6 	bl	800201c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003830:	480c      	ldr	r0, [pc, #48]	@ (8003864 <prvInitialiseTaskLists+0x6c>)
 8003832:	f7fe fbf3 	bl	800201c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003836:	480c      	ldr	r0, [pc, #48]	@ (8003868 <prvInitialiseTaskLists+0x70>)
 8003838:	f7fe fbf0 	bl	800201c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800383c:	480b      	ldr	r0, [pc, #44]	@ (800386c <prvInitialiseTaskLists+0x74>)
 800383e:	f7fe fbed 	bl	800201c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003842:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <prvInitialiseTaskLists+0x78>)
 8003844:	4a05      	ldr	r2, [pc, #20]	@ (800385c <prvInitialiseTaskLists+0x64>)
 8003846:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003848:	4b0a      	ldr	r3, [pc, #40]	@ (8003874 <prvInitialiseTaskLists+0x7c>)
 800384a:	4a05      	ldr	r2, [pc, #20]	@ (8003860 <prvInitialiseTaskLists+0x68>)
 800384c:	601a      	str	r2, [r3, #0]
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000e0c 	.word	0x20000e0c
 800385c:	2000126c 	.word	0x2000126c
 8003860:	20001280 	.word	0x20001280
 8003864:	2000129c 	.word	0x2000129c
 8003868:	200012b0 	.word	0x200012b0
 800386c:	200012c8 	.word	0x200012c8
 8003870:	20001294 	.word	0x20001294
 8003874:	20001298 	.word	0x20001298

08003878 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800387e:	e019      	b.n	80038b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003880:	f000 fda4 	bl	80043cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003884:	4b10      	ldr	r3, [pc, #64]	@ (80038c8 <prvCheckTasksWaitingTermination+0x50>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4618      	mov	r0, r3
 8003892:	f7fe fc49 	bl	8002128 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003896:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <prvCheckTasksWaitingTermination+0x54>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3b01      	subs	r3, #1
 800389c:	4a0b      	ldr	r2, [pc, #44]	@ (80038cc <prvCheckTasksWaitingTermination+0x54>)
 800389e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038a0:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <prvCheckTasksWaitingTermination+0x58>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	4a0a      	ldr	r2, [pc, #40]	@ (80038d0 <prvCheckTasksWaitingTermination+0x58>)
 80038a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038aa:	f000 fdbf 	bl	800442c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f810 	bl	80038d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038b4:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <prvCheckTasksWaitingTermination+0x58>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e1      	bne.n	8003880 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200012b0 	.word	0x200012b0
 80038cc:	200012dc 	.word	0x200012dc
 80038d0:	200012c4 	.word	0x200012c4

080038d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d108      	bne.n	80038f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 ff3e 	bl	800476c <vPortFree>
				vPortFree( pxTCB );
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 ff3b 	bl	800476c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038f6:	e019      	b.n	800392c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d103      	bne.n	800390a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 ff32 	bl	800476c <vPortFree>
	}
 8003908:	e010      	b.n	800392c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003910:	2b02      	cmp	r3, #2
 8003912:	d00b      	beq.n	800392c <prvDeleteTCB+0x58>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	60fb      	str	r3, [r7, #12]
}
 8003926:	bf00      	nop
 8003928:	bf00      	nop
 800392a:	e7fd      	b.n	8003928 <prvDeleteTCB+0x54>
	}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800393a:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <prvResetNextTaskUnblockTime+0x38>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d104      	bne.n	800394e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <prvResetNextTaskUnblockTime+0x3c>)
 8003946:	f04f 32ff 	mov.w	r2, #4294967295
 800394a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800394c:	e008      	b.n	8003960 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800394e:	4b07      	ldr	r3, [pc, #28]	@ (800396c <prvResetNextTaskUnblockTime+0x38>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4a04      	ldr	r2, [pc, #16]	@ (8003970 <prvResetNextTaskUnblockTime+0x3c>)
 800395e:	6013      	str	r3, [r2, #0]
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20001294 	.word	0x20001294
 8003970:	200012fc 	.word	0x200012fc

08003974 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800397a:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <xTaskGetSchedulerState+0x34>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003982:	2301      	movs	r3, #1
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	e008      	b.n	800399a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003988:	4b08      	ldr	r3, [pc, #32]	@ (80039ac <xTaskGetSchedulerState+0x38>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003990:	2302      	movs	r3, #2
 8003992:	607b      	str	r3, [r7, #4]
 8003994:	e001      	b.n	800399a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003996:	2300      	movs	r3, #0
 8003998:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800399a:	687b      	ldr	r3, [r7, #4]
	}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	200012e8 	.word	0x200012e8
 80039ac:	20001304 	.word	0x20001304

080039b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d058      	beq.n	8003a78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a84 <xTaskPriorityDisinherit+0xd4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d00b      	beq.n	80039e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	60fb      	str	r3, [r7, #12]
}
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
 80039e6:	e7fd      	b.n	80039e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	60bb      	str	r3, [r7, #8]
}
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	e7fd      	b.n	8003a04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0c:	1e5a      	subs	r2, r3, #1
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d02c      	beq.n	8003a78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d128      	bne.n	8003a78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fb7c 	bl	8002128 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a48:	4b0f      	ldr	r3, [pc, #60]	@ (8003a88 <xTaskPriorityDisinherit+0xd8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d903      	bls.n	8003a58 <xTaskPriorityDisinherit+0xa8>
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a54:	4a0c      	ldr	r2, [pc, #48]	@ (8003a88 <xTaskPriorityDisinherit+0xd8>)
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4a09      	ldr	r2, [pc, #36]	@ (8003a8c <xTaskPriorityDisinherit+0xdc>)
 8003a66:	441a      	add	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f7fe faff 	bl	8002072 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a78:	697b      	ldr	r3, [r7, #20]
	}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000e08 	.word	0x20000e08
 8003a88:	200012e4 	.word	0x200012e4
 8003a8c:	20000e0c 	.word	0x20000e0c

08003a90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a9a:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aa0:	4b20      	ldr	r3, [pc, #128]	@ (8003b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe fb3e 	bl	8002128 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	d10a      	bne.n	8003aca <prvAddCurrentTaskToDelayedList+0x3a>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aba:	4b1a      	ldr	r3, [pc, #104]	@ (8003b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4819      	ldr	r0, [pc, #100]	@ (8003b28 <prvAddCurrentTaskToDelayedList+0x98>)
 8003ac4:	f7fe fad5 	bl	8002072 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ac8:	e026      	b.n	8003b18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4413      	add	r3, r2
 8003ad0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ad2:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d209      	bcs.n	8003af6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ae2:	4b12      	ldr	r3, [pc, #72]	@ (8003b2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f7fe fae2 	bl	80020b8 <vListInsert>
}
 8003af4:	e010      	b.n	8003b18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003af6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f7fe fad8 	bl	80020b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d202      	bcs.n	8003b18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b12:	4a08      	ldr	r2, [pc, #32]	@ (8003b34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6013      	str	r3, [r2, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	200012e0 	.word	0x200012e0
 8003b24:	20000e08 	.word	0x20000e08
 8003b28:	200012c8 	.word	0x200012c8
 8003b2c:	20001298 	.word	0x20001298
 8003b30:	20001294 	.word	0x20001294
 8003b34:	200012fc 	.word	0x200012fc

08003b38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	@ 0x28
 8003b3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b42:	f000 fb11 	bl	8004168 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b46:	4b1d      	ldr	r3, [pc, #116]	@ (8003bbc <xTimerCreateTimerTask+0x84>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d021      	beq.n	8003b92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b56:	1d3a      	adds	r2, r7, #4
 8003b58:	f107 0108 	add.w	r1, r7, #8
 8003b5c:	f107 030c 	add.w	r3, r7, #12
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe fa41 	bl	8001fe8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	9202      	str	r2, [sp, #8]
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	2302      	movs	r3, #2
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	460a      	mov	r2, r1
 8003b78:	4911      	ldr	r1, [pc, #68]	@ (8003bc0 <xTimerCreateTimerTask+0x88>)
 8003b7a:	4812      	ldr	r0, [pc, #72]	@ (8003bc4 <xTimerCreateTimerTask+0x8c>)
 8003b7c:	f7fe fff6 	bl	8002b6c <xTaskCreateStatic>
 8003b80:	4603      	mov	r3, r0
 8003b82:	4a11      	ldr	r2, [pc, #68]	@ (8003bc8 <xTimerCreateTimerTask+0x90>)
 8003b84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b86:	4b10      	ldr	r3, [pc, #64]	@ (8003bc8 <xTimerCreateTimerTask+0x90>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10b      	bne.n	8003bb0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	613b      	str	r3, [r7, #16]
}
 8003baa:	bf00      	nop
 8003bac:	bf00      	nop
 8003bae:	e7fd      	b.n	8003bac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003bb0:	697b      	ldr	r3, [r7, #20]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20001338 	.word	0x20001338
 8003bc0:	080053d4 	.word	0x080053d4
 8003bc4:	08003d05 	.word	0x08003d05
 8003bc8:	2000133c 	.word	0x2000133c

08003bcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	@ 0x28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <xTimerGenericCommand+0x30>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	623b      	str	r3, [r7, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003bfc:	4b19      	ldr	r3, [pc, #100]	@ (8003c64 <xTimerGenericCommand+0x98>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d02a      	beq.n	8003c5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b05      	cmp	r3, #5
 8003c14:	dc18      	bgt.n	8003c48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c16:	f7ff fead 	bl	8003974 <xTaskGetSchedulerState>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d109      	bne.n	8003c34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c20:	4b10      	ldr	r3, [pc, #64]	@ (8003c64 <xTimerGenericCommand+0x98>)
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	f107 0110 	add.w	r1, r7, #16
 8003c28:	2300      	movs	r3, #0
 8003c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c2c:	f7fe fbb0 	bl	8002390 <xQueueGenericSend>
 8003c30:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c32:	e012      	b.n	8003c5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c34:	4b0b      	ldr	r3, [pc, #44]	@ (8003c64 <xTimerGenericCommand+0x98>)
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	f107 0110 	add.w	r1, r7, #16
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f7fe fba6 	bl	8002390 <xQueueGenericSend>
 8003c44:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c46:	e008      	b.n	8003c5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c48:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <xTimerGenericCommand+0x98>)
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	f107 0110 	add.w	r1, r7, #16
 8003c50:	2300      	movs	r3, #0
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	f7fe fc9e 	bl	8002594 <xQueueGenericSendFromISR>
 8003c58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3728      	adds	r7, #40	@ 0x28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20001338 	.word	0x20001338

08003c68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c72:	4b23      	ldr	r3, [pc, #140]	@ (8003d00 <prvProcessExpiredTimer+0x98>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe fa51 	bl	8002128 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d023      	beq.n	8003cdc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	18d1      	adds	r1, r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	6978      	ldr	r0, [r7, #20]
 8003ca2:	f000 f8d3 	bl	8003e4c <prvInsertTimerInActiveList>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d020      	beq.n	8003cee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cac:	2300      	movs	r3, #0
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	6978      	ldr	r0, [r7, #20]
 8003cb8:	f7ff ff88 	bl	8003bcc <xTimerGenericCommand>
 8003cbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d114      	bne.n	8003cee <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	60fb      	str	r3, [r7, #12]
}
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	e7fd      	b.n	8003cd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	6978      	ldr	r0, [r7, #20]
 8003cf4:	4798      	blx	r3
}
 8003cf6:	bf00      	nop
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20001330 	.word	0x20001330

08003d04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d0c:	f107 0308 	add.w	r3, r7, #8
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f859 	bl	8003dc8 <prvGetNextExpireTime>
 8003d16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f805 	bl	8003d2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d22:	f000 f8d5 	bl	8003ed0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d26:	bf00      	nop
 8003d28:	e7f0      	b.n	8003d0c <prvTimerTask+0x8>
	...

08003d2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d36:	f7ff fa39 	bl	80031ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d3a:	f107 0308 	add.w	r3, r7, #8
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 f864 	bl	8003e0c <prvSampleTimeNow>
 8003d44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d130      	bne.n	8003dae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10a      	bne.n	8003d68 <prvProcessTimerOrBlockTask+0x3c>
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d806      	bhi.n	8003d68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d5a:	f7ff fa35 	bl	80031c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff81 	bl	8003c68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d66:	e024      	b.n	8003db2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d6e:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <prvProcessTimerOrBlockTask+0x90>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <prvProcessTimerOrBlockTask+0x50>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <prvProcessTimerOrBlockTask+0x52>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d80:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc0 <prvProcessTimerOrBlockTask+0x94>)
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f7fe feb9 	bl	8002b04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d92:	f7ff fa19 	bl	80031c8 <xTaskResumeAll>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d9c:	4b09      	ldr	r3, [pc, #36]	@ (8003dc4 <prvProcessTimerOrBlockTask+0x98>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	f3bf 8f6f 	isb	sy
}
 8003dac:	e001      	b.n	8003db2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003dae:	f7ff fa0b 	bl	80031c8 <xTaskResumeAll>
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20001334 	.word	0x20001334
 8003dc0:	20001338 	.word	0x20001338
 8003dc4:	e000ed04 	.word	0xe000ed04

08003dc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <prvGetNextExpireTime+0x40>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <prvGetNextExpireTime+0x16>
 8003dda:	2201      	movs	r2, #1
 8003ddc:	e000      	b.n	8003de0 <prvGetNextExpireTime+0x18>
 8003dde:	2200      	movs	r2, #0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dec:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <prvGetNextExpireTime+0x40>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e001      	b.n	8003dfc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	20001330 	.word	0x20001330

08003e0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e14:	f7ff fa76 	bl	8003304 <xTaskGetTickCount>
 8003e18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <prvSampleTimeNow+0x3c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d205      	bcs.n	8003e30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e24:	f000 f93a 	bl	800409c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e002      	b.n	8003e36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e36:	4a04      	ldr	r2, [pc, #16]	@ (8003e48 <prvSampleTimeNow+0x3c>)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20001340 	.word	0x20001340

08003e4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d812      	bhi.n	8003e98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	1ad2      	subs	r2, r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d302      	bcc.n	8003e86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	e01b      	b.n	8003ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e86:	4b10      	ldr	r3, [pc, #64]	@ (8003ec8 <prvInsertTimerInActiveList+0x7c>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f7fe f911 	bl	80020b8 <vListInsert>
 8003e96:	e012      	b.n	8003ebe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d206      	bcs.n	8003eae <prvInsertTimerInActiveList+0x62>
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d302      	bcc.n	8003eae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	e007      	b.n	8003ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eae:	4b07      	ldr	r3, [pc, #28]	@ (8003ecc <prvInsertTimerInActiveList+0x80>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4610      	mov	r0, r2
 8003eba:	f7fe f8fd 	bl	80020b8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003ebe:	697b      	ldr	r3, [r7, #20]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20001334 	.word	0x20001334
 8003ecc:	20001330 	.word	0x20001330

08003ed0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08e      	sub	sp, #56	@ 0x38
 8003ed4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ed6:	e0ce      	b.n	8004076 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da19      	bge.n	8003f12 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	61fb      	str	r3, [r7, #28]
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	e7fd      	b.n	8003efe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f08:	6850      	ldr	r0, [r2, #4]
 8003f0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f0c:	6892      	ldr	r2, [r2, #8]
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f2c0 80ae 	blt.w	8004076 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d004      	beq.n	8003f30 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe f8fc 	bl	8002128 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f30:	463b      	mov	r3, r7
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff6a 	bl	8003e0c <prvSampleTimeNow>
 8003f38:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b09      	cmp	r3, #9
 8003f3e:	f200 8097 	bhi.w	8004070 <prvProcessReceivedCommands+0x1a0>
 8003f42:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <prvProcessReceivedCommands+0x78>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f71 	.word	0x08003f71
 8003f4c:	08003f71 	.word	0x08003f71
 8003f50:	08003f71 	.word	0x08003f71
 8003f54:	08003fe7 	.word	0x08003fe7
 8003f58:	08003ffb 	.word	0x08003ffb
 8003f5c:	08004047 	.word	0x08004047
 8003f60:	08003f71 	.word	0x08003f71
 8003f64:	08003f71 	.word	0x08003f71
 8003f68:	08003fe7 	.word	0x08003fe7
 8003f6c:	08003ffb 	.word	0x08003ffb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	18d1      	adds	r1, r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f90:	f7ff ff5c 	bl	8003e4c <prvInsertTimerInActiveList>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d06c      	beq.n	8004074 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fa0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d061      	beq.n	8004074 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	441a      	add	r2, r3
 8003fb8:	2300      	movs	r3, #0
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fc2:	f7ff fe03 	bl	8003bcc <xTimerGenericCommand>
 8003fc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d152      	bne.n	8004074 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	61bb      	str	r3, [r7, #24]
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	e7fd      	b.n	8003fe2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003ff8:	e03d      	b.n	8004076 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	b2da      	uxtb	r2, r3
 8004006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004008:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004010:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800401a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	617b      	str	r3, [r7, #20]
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	e7fd      	b.n	800402e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	18d1      	adds	r1, r2, r3
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004040:	f7ff ff04 	bl	8003e4c <prvInsertTimerInActiveList>
					break;
 8004044:	e017      	b.n	8004076 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004048:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d103      	bne.n	800405c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004054:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004056:	f000 fb89 	bl	800476c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800405a:	e00c      	b.n	8004076 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800405c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	b2da      	uxtb	r2, r3
 8004068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800406e:	e002      	b.n	8004076 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004070:	bf00      	nop
 8004072:	e000      	b.n	8004076 <prvProcessReceivedCommands+0x1a6>
					break;
 8004074:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004076:	4b08      	ldr	r3, [pc, #32]	@ (8004098 <prvProcessReceivedCommands+0x1c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	1d39      	adds	r1, r7, #4
 800407c:	2200      	movs	r2, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fb26 	bl	80026d0 <xQueueReceive>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	f47f af26 	bne.w	8003ed8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	3730      	adds	r7, #48	@ 0x30
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20001338 	.word	0x20001338

0800409c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040a2:	e049      	b.n	8004138 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004160 <prvSwitchTimerLists+0xc4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004160 <prvSwitchTimerLists+0xc4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3304      	adds	r3, #4
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fe f833 	bl	8002128 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d02f      	beq.n	8004138 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4413      	add	r3, r2
 80040e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d90e      	bls.n	8004108 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004160 <prvSwitchTimerLists+0xc4>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3304      	adds	r3, #4
 80040fe:	4619      	mov	r1, r3
 8004100:	4610      	mov	r0, r2
 8004102:	f7fd ffd9 	bl	80020b8 <vListInsert>
 8004106:	e017      	b.n	8004138 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004108:	2300      	movs	r3, #0
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	2300      	movs	r3, #0
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	2100      	movs	r1, #0
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f7ff fd5a 	bl	8003bcc <xTimerGenericCommand>
 8004118:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	603b      	str	r3, [r7, #0]
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004138:	4b09      	ldr	r3, [pc, #36]	@ (8004160 <prvSwitchTimerLists+0xc4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1b0      	bne.n	80040a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004142:	4b07      	ldr	r3, [pc, #28]	@ (8004160 <prvSwitchTimerLists+0xc4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004148:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <prvSwitchTimerLists+0xc8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a04      	ldr	r2, [pc, #16]	@ (8004160 <prvSwitchTimerLists+0xc4>)
 800414e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004150:	4a04      	ldr	r2, [pc, #16]	@ (8004164 <prvSwitchTimerLists+0xc8>)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	6013      	str	r3, [r2, #0]
}
 8004156:	bf00      	nop
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20001330 	.word	0x20001330
 8004164:	20001334 	.word	0x20001334

08004168 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800416e:	f000 f92d 	bl	80043cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004172:	4b15      	ldr	r3, [pc, #84]	@ (80041c8 <prvCheckForValidListAndQueue+0x60>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d120      	bne.n	80041bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800417a:	4814      	ldr	r0, [pc, #80]	@ (80041cc <prvCheckForValidListAndQueue+0x64>)
 800417c:	f7fd ff4e 	bl	800201c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004180:	4813      	ldr	r0, [pc, #76]	@ (80041d0 <prvCheckForValidListAndQueue+0x68>)
 8004182:	f7fd ff4b 	bl	800201c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004186:	4b13      	ldr	r3, [pc, #76]	@ (80041d4 <prvCheckForValidListAndQueue+0x6c>)
 8004188:	4a10      	ldr	r2, [pc, #64]	@ (80041cc <prvCheckForValidListAndQueue+0x64>)
 800418a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800418c:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <prvCheckForValidListAndQueue+0x70>)
 800418e:	4a10      	ldr	r2, [pc, #64]	@ (80041d0 <prvCheckForValidListAndQueue+0x68>)
 8004190:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004192:	2300      	movs	r3, #0
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <prvCheckForValidListAndQueue+0x74>)
 8004198:	4a11      	ldr	r2, [pc, #68]	@ (80041e0 <prvCheckForValidListAndQueue+0x78>)
 800419a:	2110      	movs	r1, #16
 800419c:	200a      	movs	r0, #10
 800419e:	f7fe f857 	bl	8002250 <xQueueGenericCreateStatic>
 80041a2:	4603      	mov	r3, r0
 80041a4:	4a08      	ldr	r2, [pc, #32]	@ (80041c8 <prvCheckForValidListAndQueue+0x60>)
 80041a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80041a8:	4b07      	ldr	r3, [pc, #28]	@ (80041c8 <prvCheckForValidListAndQueue+0x60>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041b0:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <prvCheckForValidListAndQueue+0x60>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	490b      	ldr	r1, [pc, #44]	@ (80041e4 <prvCheckForValidListAndQueue+0x7c>)
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fe fc7c 	bl	8002ab4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041bc:	f000 f936 	bl	800442c <vPortExitCritical>
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20001338 	.word	0x20001338
 80041cc:	20001308 	.word	0x20001308
 80041d0:	2000131c 	.word	0x2000131c
 80041d4:	20001330 	.word	0x20001330
 80041d8:	20001334 	.word	0x20001334
 80041dc:	200013e4 	.word	0x200013e4
 80041e0:	20001344 	.word	0x20001344
 80041e4:	080053dc 	.word	0x080053dc

080041e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3b04      	subs	r3, #4
 80041f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3b04      	subs	r3, #4
 8004206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f023 0201 	bic.w	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3b04      	subs	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004218:	4a08      	ldr	r2, [pc, #32]	@ (800423c <pxPortInitialiseStack+0x54>)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3b14      	subs	r3, #20
 8004222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3b20      	subs	r3, #32
 800422e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004230:	68fb      	ldr	r3, [r7, #12]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	08004241 	.word	0x08004241

08004240 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800424a:	4b12      	ldr	r3, [pc, #72]	@ (8004294 <prvTaskExitError+0x54>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d00b      	beq.n	800426c <prvTaskExitError+0x2c>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	60fb      	str	r3, [r7, #12]
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <prvTaskExitError+0x28>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	60bb      	str	r3, [r7, #8]
}
 800427e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004280:	bf00      	nop
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0fc      	beq.n	8004282 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	20000010 	.word	0x20000010
	...

080042a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042a0:	4b07      	ldr	r3, [pc, #28]	@ (80042c0 <pxCurrentTCBConst2>)
 80042a2:	6819      	ldr	r1, [r3, #0]
 80042a4:	6808      	ldr	r0, [r1, #0]
 80042a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042aa:	f380 8809 	msr	PSP, r0
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f04f 0000 	mov.w	r0, #0
 80042b6:	f380 8811 	msr	BASEPRI, r0
 80042ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80042be:	4770      	bx	lr

080042c0 <pxCurrentTCBConst2>:
 80042c0:	20000e08 	.word	0x20000e08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop

080042c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80042c8:	4806      	ldr	r0, [pc, #24]	@ (80042e4 <prvPortStartFirstTask+0x1c>)
 80042ca:	6800      	ldr	r0, [r0, #0]
 80042cc:	6800      	ldr	r0, [r0, #0]
 80042ce:	f380 8808 	msr	MSP, r0
 80042d2:	b662      	cpsie	i
 80042d4:	b661      	cpsie	f
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	df00      	svc	0
 80042e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042e2:	bf00      	nop
 80042e4:	e000ed08 	.word	0xe000ed08

080042e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ee:	4b32      	ldr	r3, [pc, #200]	@ (80043b8 <xPortStartScheduler+0xd0>)
 80042f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	22ff      	movs	r2, #255	@ 0xff
 80042fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004310:	b2da      	uxtb	r2, r3
 8004312:	4b2a      	ldr	r3, [pc, #168]	@ (80043bc <xPortStartScheduler+0xd4>)
 8004314:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004316:	4b2a      	ldr	r3, [pc, #168]	@ (80043c0 <xPortStartScheduler+0xd8>)
 8004318:	2207      	movs	r2, #7
 800431a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800431c:	e009      	b.n	8004332 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800431e:	4b28      	ldr	r3, [pc, #160]	@ (80043c0 <xPortStartScheduler+0xd8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3b01      	subs	r3, #1
 8004324:	4a26      	ldr	r2, [pc, #152]	@ (80043c0 <xPortStartScheduler+0xd8>)
 8004326:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	b2db      	uxtb	r3, r3
 8004330:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433a:	2b80      	cmp	r3, #128	@ 0x80
 800433c:	d0ef      	beq.n	800431e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800433e:	4b20      	ldr	r3, [pc, #128]	@ (80043c0 <xPortStartScheduler+0xd8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f1c3 0307 	rsb	r3, r3, #7
 8004346:	2b04      	cmp	r3, #4
 8004348:	d00b      	beq.n	8004362 <xPortStartScheduler+0x7a>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	60bb      	str	r3, [r7, #8]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004362:	4b17      	ldr	r3, [pc, #92]	@ (80043c0 <xPortStartScheduler+0xd8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	4a15      	ldr	r2, [pc, #84]	@ (80043c0 <xPortStartScheduler+0xd8>)
 800436a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800436c:	4b14      	ldr	r3, [pc, #80]	@ (80043c0 <xPortStartScheduler+0xd8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004374:	4a12      	ldr	r2, [pc, #72]	@ (80043c0 <xPortStartScheduler+0xd8>)
 8004376:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	b2da      	uxtb	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004380:	4b10      	ldr	r3, [pc, #64]	@ (80043c4 <xPortStartScheduler+0xdc>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0f      	ldr	r2, [pc, #60]	@ (80043c4 <xPortStartScheduler+0xdc>)
 8004386:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800438a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800438c:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <xPortStartScheduler+0xdc>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0c      	ldr	r2, [pc, #48]	@ (80043c4 <xPortStartScheduler+0xdc>)
 8004392:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004396:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004398:	f000 f8b8 	bl	800450c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800439c:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <xPortStartScheduler+0xe0>)
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043a2:	f7ff ff91 	bl	80042c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043a6:	f7ff f875 	bl	8003494 <vTaskSwitchContext>
	prvTaskExitError();
 80043aa:	f7ff ff49 	bl	8004240 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000e400 	.word	0xe000e400
 80043bc:	20001434 	.word	0x20001434
 80043c0:	20001438 	.word	0x20001438
 80043c4:	e000ed20 	.word	0xe000ed20
 80043c8:	20000010 	.word	0x20000010

080043cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	607b      	str	r3, [r7, #4]
}
 80043e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004424 <vPortEnterCritical+0x58>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3301      	adds	r3, #1
 80043ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004424 <vPortEnterCritical+0x58>)
 80043ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004424 <vPortEnterCritical+0x58>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d110      	bne.n	800441a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <vPortEnterCritical+0x5c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <vPortEnterCritical+0x4e>
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	603b      	str	r3, [r7, #0]
}
 8004414:	bf00      	nop
 8004416:	bf00      	nop
 8004418:	e7fd      	b.n	8004416 <vPortEnterCritical+0x4a>
	}
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	20000010 	.word	0x20000010
 8004428:	e000ed04 	.word	0xe000ed04

0800442c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004432:	4b12      	ldr	r3, [pc, #72]	@ (800447c <vPortExitCritical+0x50>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10b      	bne.n	8004452 <vPortExitCritical+0x26>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	607b      	str	r3, [r7, #4]
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	e7fd      	b.n	800444e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004452:	4b0a      	ldr	r3, [pc, #40]	@ (800447c <vPortExitCritical+0x50>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3b01      	subs	r3, #1
 8004458:	4a08      	ldr	r2, [pc, #32]	@ (800447c <vPortExitCritical+0x50>)
 800445a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800445c:	4b07      	ldr	r3, [pc, #28]	@ (800447c <vPortExitCritical+0x50>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <vPortExitCritical+0x44>
 8004464:	2300      	movs	r3, #0
 8004466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f383 8811 	msr	BASEPRI, r3
}
 800446e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000010 	.word	0x20000010

08004480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004480:	f3ef 8009 	mrs	r0, PSP
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <pxCurrentTCBConst>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004490:	6010      	str	r0, [r2, #0]
 8004492:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004496:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800449a:	f380 8811 	msr	BASEPRI, r0
 800449e:	f7fe fff9 	bl	8003494 <vTaskSwitchContext>
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f380 8811 	msr	BASEPRI, r0
 80044aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80044ae:	6819      	ldr	r1, [r3, #0]
 80044b0:	6808      	ldr	r0, [r1, #0]
 80044b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044b6:	f380 8809 	msr	PSP, r0
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	4770      	bx	lr

080044c0 <pxCurrentTCBConst>:
 80044c0:	20000e08 	.word	0x20000e08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop

080044c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	607b      	str	r3, [r7, #4]
}
 80044e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044e2:	f7fe ff1d 	bl	8003320 <xTaskIncrementTick>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044ec:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <xPortSysTickHandler+0x40>)
 80044ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	2300      	movs	r3, #0
 80044f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f383 8811 	msr	BASEPRI, r3
}
 80044fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004500:	bf00      	nop
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	e000ed04 	.word	0xe000ed04

0800450c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004510:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <vPortSetupTimerInterrupt+0x30>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004516:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <vPortSetupTimerInterrupt+0x34>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800451c:	4b09      	ldr	r3, [pc, #36]	@ (8004544 <vPortSetupTimerInterrupt+0x38>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a09      	ldr	r2, [pc, #36]	@ (8004548 <vPortSetupTimerInterrupt+0x3c>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	099b      	lsrs	r3, r3, #6
 8004528:	4a08      	ldr	r2, [pc, #32]	@ (800454c <vPortSetupTimerInterrupt+0x40>)
 800452a:	3b01      	subs	r3, #1
 800452c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800452e:	4b03      	ldr	r3, [pc, #12]	@ (800453c <vPortSetupTimerInterrupt+0x30>)
 8004530:	2207      	movs	r2, #7
 8004532:	601a      	str	r2, [r3, #0]
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr
 800453c:	e000e010 	.word	0xe000e010
 8004540:	e000e018 	.word	0xe000e018
 8004544:	20000004 	.word	0x20000004
 8004548:	10624dd3 	.word	0x10624dd3
 800454c:	e000e014 	.word	0xe000e014

08004550 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004556:	f3ef 8305 	mrs	r3, IPSR
 800455a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	d915      	bls.n	800458e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004562:	4a17      	ldr	r2, [pc, #92]	@ (80045c0 <vPortValidateInterruptPriority+0x70>)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800456c:	4b15      	ldr	r3, [pc, #84]	@ (80045c4 <vPortValidateInterruptPriority+0x74>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	7afa      	ldrb	r2, [r7, #11]
 8004572:	429a      	cmp	r2, r3
 8004574:	d20b      	bcs.n	800458e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	607b      	str	r3, [r7, #4]
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	e7fd      	b.n	800458a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800458e:	4b0e      	ldr	r3, [pc, #56]	@ (80045c8 <vPortValidateInterruptPriority+0x78>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004596:	4b0d      	ldr	r3, [pc, #52]	@ (80045cc <vPortValidateInterruptPriority+0x7c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d90b      	bls.n	80045b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	603b      	str	r3, [r7, #0]
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	e7fd      	b.n	80045b2 <vPortValidateInterruptPriority+0x62>
	}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr
 80045c0:	e000e3f0 	.word	0xe000e3f0
 80045c4:	20001434 	.word	0x20001434
 80045c8:	e000ed0c 	.word	0xe000ed0c
 80045cc:	20001438 	.word	0x20001438

080045d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	@ 0x28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045dc:	f7fe fde6 	bl	80031ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045e0:	4b5c      	ldr	r3, [pc, #368]	@ (8004754 <pvPortMalloc+0x184>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045e8:	f000 f924 	bl	8004834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045ec:	4b5a      	ldr	r3, [pc, #360]	@ (8004758 <pvPortMalloc+0x188>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f040 8095 	bne.w	8004724 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01e      	beq.n	800463e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004600:	2208      	movs	r2, #8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4413      	add	r3, r2
 8004606:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	2b00      	cmp	r3, #0
 8004610:	d015      	beq.n	800463e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f023 0307 	bic.w	r3, r3, #7
 8004618:	3308      	adds	r3, #8
 800461a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <pvPortMalloc+0x6e>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	617b      	str	r3, [r7, #20]
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	e7fd      	b.n	800463a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d06f      	beq.n	8004724 <pvPortMalloc+0x154>
 8004644:	4b45      	ldr	r3, [pc, #276]	@ (800475c <pvPortMalloc+0x18c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	429a      	cmp	r2, r3
 800464c:	d86a      	bhi.n	8004724 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800464e:	4b44      	ldr	r3, [pc, #272]	@ (8004760 <pvPortMalloc+0x190>)
 8004650:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004652:	4b43      	ldr	r3, [pc, #268]	@ (8004760 <pvPortMalloc+0x190>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004658:	e004      	b.n	8004664 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	d903      	bls.n	8004676 <pvPortMalloc+0xa6>
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f1      	bne.n	800465a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004676:	4b37      	ldr	r3, [pc, #220]	@ (8004754 <pvPortMalloc+0x184>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467c:	429a      	cmp	r2, r3
 800467e:	d051      	beq.n	8004724 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2208      	movs	r2, #8
 8004686:	4413      	add	r3, r2
 8004688:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	1ad2      	subs	r2, r2, r3
 800469a:	2308      	movs	r3, #8
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	429a      	cmp	r2, r3
 80046a0:	d920      	bls.n	80046e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4413      	add	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00b      	beq.n	80046cc <pvPortMalloc+0xfc>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	613b      	str	r3, [r7, #16]
}
 80046c6:	bf00      	nop
 80046c8:	bf00      	nop
 80046ca:	e7fd      	b.n	80046c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046de:	69b8      	ldr	r0, [r7, #24]
 80046e0:	f000 f90a 	bl	80048f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046e4:	4b1d      	ldr	r3, [pc, #116]	@ (800475c <pvPortMalloc+0x18c>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	4a1b      	ldr	r2, [pc, #108]	@ (800475c <pvPortMalloc+0x18c>)
 80046f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046f2:	4b1a      	ldr	r3, [pc, #104]	@ (800475c <pvPortMalloc+0x18c>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004764 <pvPortMalloc+0x194>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d203      	bcs.n	8004706 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046fe:	4b17      	ldr	r3, [pc, #92]	@ (800475c <pvPortMalloc+0x18c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a18      	ldr	r2, [pc, #96]	@ (8004764 <pvPortMalloc+0x194>)
 8004704:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	4b13      	ldr	r3, [pc, #76]	@ (8004758 <pvPortMalloc+0x188>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	431a      	orrs	r2, r3
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800471a:	4b13      	ldr	r3, [pc, #76]	@ (8004768 <pvPortMalloc+0x198>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	4a11      	ldr	r2, [pc, #68]	@ (8004768 <pvPortMalloc+0x198>)
 8004722:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004724:	f7fe fd50 	bl	80031c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <pvPortMalloc+0x17a>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	60fb      	str	r3, [r7, #12]
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	e7fd      	b.n	8004746 <pvPortMalloc+0x176>
	return pvReturn;
 800474a:	69fb      	ldr	r3, [r7, #28]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3728      	adds	r7, #40	@ 0x28
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20003b54 	.word	0x20003b54
 8004758:	20003b68 	.word	0x20003b68
 800475c:	20003b58 	.word	0x20003b58
 8004760:	20003b4c 	.word	0x20003b4c
 8004764:	20003b5c 	.word	0x20003b5c
 8004768:	20003b60 	.word	0x20003b60

0800476c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d04f      	beq.n	800481e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800477e:	2308      	movs	r3, #8
 8004780:	425b      	negs	r3, r3
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4413      	add	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	4b25      	ldr	r3, [pc, #148]	@ (8004828 <vPortFree+0xbc>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4013      	ands	r3, r2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10b      	bne.n	80047b2 <vPortFree+0x46>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60fb      	str	r3, [r7, #12]
}
 80047ac:	bf00      	nop
 80047ae:	bf00      	nop
 80047b0:	e7fd      	b.n	80047ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <vPortFree+0x66>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	60bb      	str	r3, [r7, #8]
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	e7fd      	b.n	80047ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	4b14      	ldr	r3, [pc, #80]	@ (8004828 <vPortFree+0xbc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4013      	ands	r3, r2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01e      	beq.n	800481e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d11a      	bne.n	800481e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004828 <vPortFree+0xbc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	401a      	ands	r2, r3
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047f8:	f7fe fcd8 	bl	80031ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	4b0a      	ldr	r3, [pc, #40]	@ (800482c <vPortFree+0xc0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4413      	add	r3, r2
 8004806:	4a09      	ldr	r2, [pc, #36]	@ (800482c <vPortFree+0xc0>)
 8004808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800480a:	6938      	ldr	r0, [r7, #16]
 800480c:	f000 f874 	bl	80048f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004810:	4b07      	ldr	r3, [pc, #28]	@ (8004830 <vPortFree+0xc4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	4a06      	ldr	r2, [pc, #24]	@ (8004830 <vPortFree+0xc4>)
 8004818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800481a:	f7fe fcd5 	bl	80031c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800481e:	bf00      	nop
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20003b68 	.word	0x20003b68
 800482c:	20003b58 	.word	0x20003b58
 8004830:	20003b64 	.word	0x20003b64

08004834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800483a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800483e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004840:	4b27      	ldr	r3, [pc, #156]	@ (80048e0 <prvHeapInit+0xac>)
 8004842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00c      	beq.n	8004868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3307      	adds	r3, #7
 8004852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0307 	bic.w	r3, r3, #7
 800485a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	4a1f      	ldr	r2, [pc, #124]	@ (80048e0 <prvHeapInit+0xac>)
 8004864:	4413      	add	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800486c:	4a1d      	ldr	r2, [pc, #116]	@ (80048e4 <prvHeapInit+0xb0>)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004872:	4b1c      	ldr	r3, [pc, #112]	@ (80048e4 <prvHeapInit+0xb0>)
 8004874:	2200      	movs	r2, #0
 8004876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4413      	add	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004880:	2208      	movs	r2, #8
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0307 	bic.w	r3, r3, #7
 800488e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a15      	ldr	r2, [pc, #84]	@ (80048e8 <prvHeapInit+0xb4>)
 8004894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004896:	4b14      	ldr	r3, [pc, #80]	@ (80048e8 <prvHeapInit+0xb4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2200      	movs	r2, #0
 800489c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800489e:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <prvHeapInit+0xb4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	1ad2      	subs	r2, r2, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048b4:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <prvHeapInit+0xb4>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4a0a      	ldr	r2, [pc, #40]	@ (80048ec <prvHeapInit+0xb8>)
 80048c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4a09      	ldr	r2, [pc, #36]	@ (80048f0 <prvHeapInit+0xbc>)
 80048ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048cc:	4b09      	ldr	r3, [pc, #36]	@ (80048f4 <prvHeapInit+0xc0>)
 80048ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	2000143c 	.word	0x2000143c
 80048e4:	20003b4c 	.word	0x20003b4c
 80048e8:	20003b54 	.word	0x20003b54
 80048ec:	20003b5c 	.word	0x20003b5c
 80048f0:	20003b58 	.word	0x20003b58
 80048f4:	20003b68 	.word	0x20003b68

080048f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004900:	4b27      	ldr	r3, [pc, #156]	@ (80049a0 <prvInsertBlockIntoFreeList+0xa8>)
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e002      	b.n	800490c <prvInsertBlockIntoFreeList+0x14>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	429a      	cmp	r2, r3
 8004914:	d8f7      	bhi.n	8004906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	4413      	add	r3, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	d108      	bne.n	800493a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	441a      	add	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	441a      	add	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d118      	bne.n	8004980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4b14      	ldr	r3, [pc, #80]	@ (80049a4 <prvInsertBlockIntoFreeList+0xac>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d00d      	beq.n	8004976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	441a      	add	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	e008      	b.n	8004988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004976:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <prvInsertBlockIntoFreeList+0xac>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e003      	b.n	8004988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	429a      	cmp	r2, r3
 800498e:	d002      	beq.n	8004996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	20003b4c 	.word	0x20003b4c
 80049a4:	20003b54 	.word	0x20003b54

080049a8 <siprintf>:
 80049a8:	b40e      	push	{r1, r2, r3}
 80049aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049ae:	b510      	push	{r4, lr}
 80049b0:	2400      	movs	r4, #0
 80049b2:	b09d      	sub	sp, #116	@ 0x74
 80049b4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80049b6:	9002      	str	r0, [sp, #8]
 80049b8:	9006      	str	r0, [sp, #24]
 80049ba:	9107      	str	r1, [sp, #28]
 80049bc:	9104      	str	r1, [sp, #16]
 80049be:	4809      	ldr	r0, [pc, #36]	@ (80049e4 <siprintf+0x3c>)
 80049c0:	4909      	ldr	r1, [pc, #36]	@ (80049e8 <siprintf+0x40>)
 80049c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80049c6:	9105      	str	r1, [sp, #20]
 80049c8:	6800      	ldr	r0, [r0, #0]
 80049ca:	a902      	add	r1, sp, #8
 80049cc:	9301      	str	r3, [sp, #4]
 80049ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80049d0:	f000 f9a0 	bl	8004d14 <_svfiprintf_r>
 80049d4:	9b02      	ldr	r3, [sp, #8]
 80049d6:	701c      	strb	r4, [r3, #0]
 80049d8:	b01d      	add	sp, #116	@ 0x74
 80049da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049de:	b003      	add	sp, #12
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000014 	.word	0x20000014
 80049e8:	ffff0208 	.word	0xffff0208

080049ec <memset>:
 80049ec:	4603      	mov	r3, r0
 80049ee:	4402      	add	r2, r0
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d100      	bne.n	80049f6 <memset+0xa>
 80049f4:	4770      	bx	lr
 80049f6:	f803 1b01 	strb.w	r1, [r3], #1
 80049fa:	e7f9      	b.n	80049f0 <memset+0x4>

080049fc <__errno>:
 80049fc:	4b01      	ldr	r3, [pc, #4]	@ (8004a04 <__errno+0x8>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000014 	.word	0x20000014

08004a08 <__libc_init_array>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	2600      	movs	r6, #0
 8004a0c:	4d0c      	ldr	r5, [pc, #48]	@ (8004a40 <__libc_init_array+0x38>)
 8004a0e:	4c0d      	ldr	r4, [pc, #52]	@ (8004a44 <__libc_init_array+0x3c>)
 8004a10:	1b64      	subs	r4, r4, r5
 8004a12:	10a4      	asrs	r4, r4, #2
 8004a14:	42a6      	cmp	r6, r4
 8004a16:	d109      	bne.n	8004a2c <__libc_init_array+0x24>
 8004a18:	f000 fc76 	bl	8005308 <_init>
 8004a1c:	2600      	movs	r6, #0
 8004a1e:	4d0a      	ldr	r5, [pc, #40]	@ (8004a48 <__libc_init_array+0x40>)
 8004a20:	4c0a      	ldr	r4, [pc, #40]	@ (8004a4c <__libc_init_array+0x44>)
 8004a22:	1b64      	subs	r4, r4, r5
 8004a24:	10a4      	asrs	r4, r4, #2
 8004a26:	42a6      	cmp	r6, r4
 8004a28:	d105      	bne.n	8004a36 <__libc_init_array+0x2e>
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a30:	4798      	blx	r3
 8004a32:	3601      	adds	r6, #1
 8004a34:	e7ee      	b.n	8004a14 <__libc_init_array+0xc>
 8004a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3a:	4798      	blx	r3
 8004a3c:	3601      	adds	r6, #1
 8004a3e:	e7f2      	b.n	8004a26 <__libc_init_array+0x1e>
 8004a40:	080054f8 	.word	0x080054f8
 8004a44:	080054f8 	.word	0x080054f8
 8004a48:	080054f8 	.word	0x080054f8
 8004a4c:	080054fc 	.word	0x080054fc

08004a50 <__retarget_lock_acquire_recursive>:
 8004a50:	4770      	bx	lr

08004a52 <__retarget_lock_release_recursive>:
 8004a52:	4770      	bx	lr

08004a54 <memcpy>:
 8004a54:	440a      	add	r2, r1
 8004a56:	4291      	cmp	r1, r2
 8004a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a5c:	d100      	bne.n	8004a60 <memcpy+0xc>
 8004a5e:	4770      	bx	lr
 8004a60:	b510      	push	{r4, lr}
 8004a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a66:	4291      	cmp	r1, r2
 8004a68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a6c:	d1f9      	bne.n	8004a62 <memcpy+0xe>
 8004a6e:	bd10      	pop	{r4, pc}

08004a70 <_free_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4605      	mov	r5, r0
 8004a74:	2900      	cmp	r1, #0
 8004a76:	d040      	beq.n	8004afa <_free_r+0x8a>
 8004a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a7c:	1f0c      	subs	r4, r1, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bfb8      	it	lt
 8004a82:	18e4      	addlt	r4, r4, r3
 8004a84:	f000 f8de 	bl	8004c44 <__malloc_lock>
 8004a88:	4a1c      	ldr	r2, [pc, #112]	@ (8004afc <_free_r+0x8c>)
 8004a8a:	6813      	ldr	r3, [r2, #0]
 8004a8c:	b933      	cbnz	r3, 8004a9c <_free_r+0x2c>
 8004a8e:	6063      	str	r3, [r4, #4]
 8004a90:	6014      	str	r4, [r2, #0]
 8004a92:	4628      	mov	r0, r5
 8004a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a98:	f000 b8da 	b.w	8004c50 <__malloc_unlock>
 8004a9c:	42a3      	cmp	r3, r4
 8004a9e:	d908      	bls.n	8004ab2 <_free_r+0x42>
 8004aa0:	6820      	ldr	r0, [r4, #0]
 8004aa2:	1821      	adds	r1, r4, r0
 8004aa4:	428b      	cmp	r3, r1
 8004aa6:	bf01      	itttt	eq
 8004aa8:	6819      	ldreq	r1, [r3, #0]
 8004aaa:	685b      	ldreq	r3, [r3, #4]
 8004aac:	1809      	addeq	r1, r1, r0
 8004aae:	6021      	streq	r1, [r4, #0]
 8004ab0:	e7ed      	b.n	8004a8e <_free_r+0x1e>
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	b10b      	cbz	r3, 8004abc <_free_r+0x4c>
 8004ab8:	42a3      	cmp	r3, r4
 8004aba:	d9fa      	bls.n	8004ab2 <_free_r+0x42>
 8004abc:	6811      	ldr	r1, [r2, #0]
 8004abe:	1850      	adds	r0, r2, r1
 8004ac0:	42a0      	cmp	r0, r4
 8004ac2:	d10b      	bne.n	8004adc <_free_r+0x6c>
 8004ac4:	6820      	ldr	r0, [r4, #0]
 8004ac6:	4401      	add	r1, r0
 8004ac8:	1850      	adds	r0, r2, r1
 8004aca:	4283      	cmp	r3, r0
 8004acc:	6011      	str	r1, [r2, #0]
 8004ace:	d1e0      	bne.n	8004a92 <_free_r+0x22>
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4408      	add	r0, r1
 8004ad6:	6010      	str	r0, [r2, #0]
 8004ad8:	6053      	str	r3, [r2, #4]
 8004ada:	e7da      	b.n	8004a92 <_free_r+0x22>
 8004adc:	d902      	bls.n	8004ae4 <_free_r+0x74>
 8004ade:	230c      	movs	r3, #12
 8004ae0:	602b      	str	r3, [r5, #0]
 8004ae2:	e7d6      	b.n	8004a92 <_free_r+0x22>
 8004ae4:	6820      	ldr	r0, [r4, #0]
 8004ae6:	1821      	adds	r1, r4, r0
 8004ae8:	428b      	cmp	r3, r1
 8004aea:	bf01      	itttt	eq
 8004aec:	6819      	ldreq	r1, [r3, #0]
 8004aee:	685b      	ldreq	r3, [r3, #4]
 8004af0:	1809      	addeq	r1, r1, r0
 8004af2:	6021      	streq	r1, [r4, #0]
 8004af4:	6063      	str	r3, [r4, #4]
 8004af6:	6054      	str	r4, [r2, #4]
 8004af8:	e7cb      	b.n	8004a92 <_free_r+0x22>
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	20003cb0 	.word	0x20003cb0

08004b00 <sbrk_aligned>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	4e0f      	ldr	r6, [pc, #60]	@ (8004b40 <sbrk_aligned+0x40>)
 8004b04:	460c      	mov	r4, r1
 8004b06:	6831      	ldr	r1, [r6, #0]
 8004b08:	4605      	mov	r5, r0
 8004b0a:	b911      	cbnz	r1, 8004b12 <sbrk_aligned+0x12>
 8004b0c:	f000 fba8 	bl	8005260 <_sbrk_r>
 8004b10:	6030      	str	r0, [r6, #0]
 8004b12:	4621      	mov	r1, r4
 8004b14:	4628      	mov	r0, r5
 8004b16:	f000 fba3 	bl	8005260 <_sbrk_r>
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	d103      	bne.n	8004b26 <sbrk_aligned+0x26>
 8004b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004b22:	4620      	mov	r0, r4
 8004b24:	bd70      	pop	{r4, r5, r6, pc}
 8004b26:	1cc4      	adds	r4, r0, #3
 8004b28:	f024 0403 	bic.w	r4, r4, #3
 8004b2c:	42a0      	cmp	r0, r4
 8004b2e:	d0f8      	beq.n	8004b22 <sbrk_aligned+0x22>
 8004b30:	1a21      	subs	r1, r4, r0
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 fb94 	bl	8005260 <_sbrk_r>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d1f2      	bne.n	8004b22 <sbrk_aligned+0x22>
 8004b3c:	e7ef      	b.n	8004b1e <sbrk_aligned+0x1e>
 8004b3e:	bf00      	nop
 8004b40:	20003cac 	.word	0x20003cac

08004b44 <_malloc_r>:
 8004b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b48:	1ccd      	adds	r5, r1, #3
 8004b4a:	f025 0503 	bic.w	r5, r5, #3
 8004b4e:	3508      	adds	r5, #8
 8004b50:	2d0c      	cmp	r5, #12
 8004b52:	bf38      	it	cc
 8004b54:	250c      	movcc	r5, #12
 8004b56:	2d00      	cmp	r5, #0
 8004b58:	4606      	mov	r6, r0
 8004b5a:	db01      	blt.n	8004b60 <_malloc_r+0x1c>
 8004b5c:	42a9      	cmp	r1, r5
 8004b5e:	d904      	bls.n	8004b6a <_malloc_r+0x26>
 8004b60:	230c      	movs	r3, #12
 8004b62:	6033      	str	r3, [r6, #0]
 8004b64:	2000      	movs	r0, #0
 8004b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c40 <_malloc_r+0xfc>
 8004b6e:	f000 f869 	bl	8004c44 <__malloc_lock>
 8004b72:	f8d8 3000 	ldr.w	r3, [r8]
 8004b76:	461c      	mov	r4, r3
 8004b78:	bb44      	cbnz	r4, 8004bcc <_malloc_r+0x88>
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f7ff ffbf 	bl	8004b00 <sbrk_aligned>
 8004b82:	1c43      	adds	r3, r0, #1
 8004b84:	4604      	mov	r4, r0
 8004b86:	d158      	bne.n	8004c3a <_malloc_r+0xf6>
 8004b88:	f8d8 4000 	ldr.w	r4, [r8]
 8004b8c:	4627      	mov	r7, r4
 8004b8e:	2f00      	cmp	r7, #0
 8004b90:	d143      	bne.n	8004c1a <_malloc_r+0xd6>
 8004b92:	2c00      	cmp	r4, #0
 8004b94:	d04b      	beq.n	8004c2e <_malloc_r+0xea>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	4639      	mov	r1, r7
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	eb04 0903 	add.w	r9, r4, r3
 8004ba0:	f000 fb5e 	bl	8005260 <_sbrk_r>
 8004ba4:	4581      	cmp	r9, r0
 8004ba6:	d142      	bne.n	8004c2e <_malloc_r+0xea>
 8004ba8:	6821      	ldr	r1, [r4, #0]
 8004baa:	4630      	mov	r0, r6
 8004bac:	1a6d      	subs	r5, r5, r1
 8004bae:	4629      	mov	r1, r5
 8004bb0:	f7ff ffa6 	bl	8004b00 <sbrk_aligned>
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d03a      	beq.n	8004c2e <_malloc_r+0xea>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	442b      	add	r3, r5
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	bb62      	cbnz	r2, 8004c20 <_malloc_r+0xdc>
 8004bc6:	f8c8 7000 	str.w	r7, [r8]
 8004bca:	e00f      	b.n	8004bec <_malloc_r+0xa8>
 8004bcc:	6822      	ldr	r2, [r4, #0]
 8004bce:	1b52      	subs	r2, r2, r5
 8004bd0:	d420      	bmi.n	8004c14 <_malloc_r+0xd0>
 8004bd2:	2a0b      	cmp	r2, #11
 8004bd4:	d917      	bls.n	8004c06 <_malloc_r+0xc2>
 8004bd6:	1961      	adds	r1, r4, r5
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	6025      	str	r5, [r4, #0]
 8004bdc:	bf18      	it	ne
 8004bde:	6059      	strne	r1, [r3, #4]
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	bf08      	it	eq
 8004be4:	f8c8 1000 	streq.w	r1, [r8]
 8004be8:	5162      	str	r2, [r4, r5]
 8004bea:	604b      	str	r3, [r1, #4]
 8004bec:	4630      	mov	r0, r6
 8004bee:	f000 f82f 	bl	8004c50 <__malloc_unlock>
 8004bf2:	f104 000b 	add.w	r0, r4, #11
 8004bf6:	1d23      	adds	r3, r4, #4
 8004bf8:	f020 0007 	bic.w	r0, r0, #7
 8004bfc:	1ac2      	subs	r2, r0, r3
 8004bfe:	bf1c      	itt	ne
 8004c00:	1a1b      	subne	r3, r3, r0
 8004c02:	50a3      	strne	r3, [r4, r2]
 8004c04:	e7af      	b.n	8004b66 <_malloc_r+0x22>
 8004c06:	6862      	ldr	r2, [r4, #4]
 8004c08:	42a3      	cmp	r3, r4
 8004c0a:	bf0c      	ite	eq
 8004c0c:	f8c8 2000 	streq.w	r2, [r8]
 8004c10:	605a      	strne	r2, [r3, #4]
 8004c12:	e7eb      	b.n	8004bec <_malloc_r+0xa8>
 8004c14:	4623      	mov	r3, r4
 8004c16:	6864      	ldr	r4, [r4, #4]
 8004c18:	e7ae      	b.n	8004b78 <_malloc_r+0x34>
 8004c1a:	463c      	mov	r4, r7
 8004c1c:	687f      	ldr	r7, [r7, #4]
 8004c1e:	e7b6      	b.n	8004b8e <_malloc_r+0x4a>
 8004c20:	461a      	mov	r2, r3
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	d1fb      	bne.n	8004c20 <_malloc_r+0xdc>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	6053      	str	r3, [r2, #4]
 8004c2c:	e7de      	b.n	8004bec <_malloc_r+0xa8>
 8004c2e:	230c      	movs	r3, #12
 8004c30:	4630      	mov	r0, r6
 8004c32:	6033      	str	r3, [r6, #0]
 8004c34:	f000 f80c 	bl	8004c50 <__malloc_unlock>
 8004c38:	e794      	b.n	8004b64 <_malloc_r+0x20>
 8004c3a:	6005      	str	r5, [r0, #0]
 8004c3c:	e7d6      	b.n	8004bec <_malloc_r+0xa8>
 8004c3e:	bf00      	nop
 8004c40:	20003cb0 	.word	0x20003cb0

08004c44 <__malloc_lock>:
 8004c44:	4801      	ldr	r0, [pc, #4]	@ (8004c4c <__malloc_lock+0x8>)
 8004c46:	f7ff bf03 	b.w	8004a50 <__retarget_lock_acquire_recursive>
 8004c4a:	bf00      	nop
 8004c4c:	20003ca8 	.word	0x20003ca8

08004c50 <__malloc_unlock>:
 8004c50:	4801      	ldr	r0, [pc, #4]	@ (8004c58 <__malloc_unlock+0x8>)
 8004c52:	f7ff befe 	b.w	8004a52 <__retarget_lock_release_recursive>
 8004c56:	bf00      	nop
 8004c58:	20003ca8 	.word	0x20003ca8

08004c5c <__ssputs_r>:
 8004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	461f      	mov	r7, r3
 8004c62:	688e      	ldr	r6, [r1, #8]
 8004c64:	4682      	mov	sl, r0
 8004c66:	42be      	cmp	r6, r7
 8004c68:	460c      	mov	r4, r1
 8004c6a:	4690      	mov	r8, r2
 8004c6c:	680b      	ldr	r3, [r1, #0]
 8004c6e:	d82d      	bhi.n	8004ccc <__ssputs_r+0x70>
 8004c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c78:	d026      	beq.n	8004cc8 <__ssputs_r+0x6c>
 8004c7a:	6965      	ldr	r5, [r4, #20]
 8004c7c:	6909      	ldr	r1, [r1, #16]
 8004c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c82:	eba3 0901 	sub.w	r9, r3, r1
 8004c86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c8a:	1c7b      	adds	r3, r7, #1
 8004c8c:	444b      	add	r3, r9
 8004c8e:	106d      	asrs	r5, r5, #1
 8004c90:	429d      	cmp	r5, r3
 8004c92:	bf38      	it	cc
 8004c94:	461d      	movcc	r5, r3
 8004c96:	0553      	lsls	r3, r2, #21
 8004c98:	d527      	bpl.n	8004cea <__ssputs_r+0x8e>
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	f7ff ff52 	bl	8004b44 <_malloc_r>
 8004ca0:	4606      	mov	r6, r0
 8004ca2:	b360      	cbz	r0, 8004cfe <__ssputs_r+0xa2>
 8004ca4:	464a      	mov	r2, r9
 8004ca6:	6921      	ldr	r1, [r4, #16]
 8004ca8:	f7ff fed4 	bl	8004a54 <memcpy>
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb6:	81a3      	strh	r3, [r4, #12]
 8004cb8:	6126      	str	r6, [r4, #16]
 8004cba:	444e      	add	r6, r9
 8004cbc:	6026      	str	r6, [r4, #0]
 8004cbe:	463e      	mov	r6, r7
 8004cc0:	6165      	str	r5, [r4, #20]
 8004cc2:	eba5 0509 	sub.w	r5, r5, r9
 8004cc6:	60a5      	str	r5, [r4, #8]
 8004cc8:	42be      	cmp	r6, r7
 8004cca:	d900      	bls.n	8004cce <__ssputs_r+0x72>
 8004ccc:	463e      	mov	r6, r7
 8004cce:	4632      	mov	r2, r6
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	6820      	ldr	r0, [r4, #0]
 8004cd4:	f000 faaa 	bl	800522c <memmove>
 8004cd8:	2000      	movs	r0, #0
 8004cda:	68a3      	ldr	r3, [r4, #8]
 8004cdc:	1b9b      	subs	r3, r3, r6
 8004cde:	60a3      	str	r3, [r4, #8]
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	4433      	add	r3, r6
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cea:	462a      	mov	r2, r5
 8004cec:	f000 fad6 	bl	800529c <_realloc_r>
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d1e0      	bne.n	8004cb8 <__ssputs_r+0x5c>
 8004cf6:	4650      	mov	r0, sl
 8004cf8:	6921      	ldr	r1, [r4, #16]
 8004cfa:	f7ff feb9 	bl	8004a70 <_free_r>
 8004cfe:	230c      	movs	r3, #12
 8004d00:	f8ca 3000 	str.w	r3, [sl]
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d0e:	81a3      	strh	r3, [r4, #12]
 8004d10:	e7e9      	b.n	8004ce6 <__ssputs_r+0x8a>
	...

08004d14 <_svfiprintf_r>:
 8004d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d18:	4698      	mov	r8, r3
 8004d1a:	898b      	ldrh	r3, [r1, #12]
 8004d1c:	4607      	mov	r7, r0
 8004d1e:	061b      	lsls	r3, r3, #24
 8004d20:	460d      	mov	r5, r1
 8004d22:	4614      	mov	r4, r2
 8004d24:	b09d      	sub	sp, #116	@ 0x74
 8004d26:	d510      	bpl.n	8004d4a <_svfiprintf_r+0x36>
 8004d28:	690b      	ldr	r3, [r1, #16]
 8004d2a:	b973      	cbnz	r3, 8004d4a <_svfiprintf_r+0x36>
 8004d2c:	2140      	movs	r1, #64	@ 0x40
 8004d2e:	f7ff ff09 	bl	8004b44 <_malloc_r>
 8004d32:	6028      	str	r0, [r5, #0]
 8004d34:	6128      	str	r0, [r5, #16]
 8004d36:	b930      	cbnz	r0, 8004d46 <_svfiprintf_r+0x32>
 8004d38:	230c      	movs	r3, #12
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d40:	b01d      	add	sp, #116	@ 0x74
 8004d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d46:	2340      	movs	r3, #64	@ 0x40
 8004d48:	616b      	str	r3, [r5, #20]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d4e:	2320      	movs	r3, #32
 8004d50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d54:	2330      	movs	r3, #48	@ 0x30
 8004d56:	f04f 0901 	mov.w	r9, #1
 8004d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d5e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004ef8 <_svfiprintf_r+0x1e4>
 8004d62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d66:	4623      	mov	r3, r4
 8004d68:	469a      	mov	sl, r3
 8004d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d6e:	b10a      	cbz	r2, 8004d74 <_svfiprintf_r+0x60>
 8004d70:	2a25      	cmp	r2, #37	@ 0x25
 8004d72:	d1f9      	bne.n	8004d68 <_svfiprintf_r+0x54>
 8004d74:	ebba 0b04 	subs.w	fp, sl, r4
 8004d78:	d00b      	beq.n	8004d92 <_svfiprintf_r+0x7e>
 8004d7a:	465b      	mov	r3, fp
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	4629      	mov	r1, r5
 8004d80:	4638      	mov	r0, r7
 8004d82:	f7ff ff6b 	bl	8004c5c <__ssputs_r>
 8004d86:	3001      	adds	r0, #1
 8004d88:	f000 80a7 	beq.w	8004eda <_svfiprintf_r+0x1c6>
 8004d8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d8e:	445a      	add	r2, fp
 8004d90:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d92:	f89a 3000 	ldrb.w	r3, [sl]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 809f 	beq.w	8004eda <_svfiprintf_r+0x1c6>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004da6:	f10a 0a01 	add.w	sl, sl, #1
 8004daa:	9304      	str	r3, [sp, #16]
 8004dac:	9307      	str	r3, [sp, #28]
 8004dae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004db2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004db4:	4654      	mov	r4, sl
 8004db6:	2205      	movs	r2, #5
 8004db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dbc:	484e      	ldr	r0, [pc, #312]	@ (8004ef8 <_svfiprintf_r+0x1e4>)
 8004dbe:	f000 fa5f 	bl	8005280 <memchr>
 8004dc2:	9a04      	ldr	r2, [sp, #16]
 8004dc4:	b9d8      	cbnz	r0, 8004dfe <_svfiprintf_r+0xea>
 8004dc6:	06d0      	lsls	r0, r2, #27
 8004dc8:	bf44      	itt	mi
 8004dca:	2320      	movmi	r3, #32
 8004dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dd0:	0711      	lsls	r1, r2, #28
 8004dd2:	bf44      	itt	mi
 8004dd4:	232b      	movmi	r3, #43	@ 0x2b
 8004dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dda:	f89a 3000 	ldrb.w	r3, [sl]
 8004dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8004de0:	d015      	beq.n	8004e0e <_svfiprintf_r+0xfa>
 8004de2:	4654      	mov	r4, sl
 8004de4:	2000      	movs	r0, #0
 8004de6:	f04f 0c0a 	mov.w	ip, #10
 8004dea:	9a07      	ldr	r2, [sp, #28]
 8004dec:	4621      	mov	r1, r4
 8004dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004df2:	3b30      	subs	r3, #48	@ 0x30
 8004df4:	2b09      	cmp	r3, #9
 8004df6:	d94b      	bls.n	8004e90 <_svfiprintf_r+0x17c>
 8004df8:	b1b0      	cbz	r0, 8004e28 <_svfiprintf_r+0x114>
 8004dfa:	9207      	str	r2, [sp, #28]
 8004dfc:	e014      	b.n	8004e28 <_svfiprintf_r+0x114>
 8004dfe:	eba0 0308 	sub.w	r3, r0, r8
 8004e02:	fa09 f303 	lsl.w	r3, r9, r3
 8004e06:	4313      	orrs	r3, r2
 8004e08:	46a2      	mov	sl, r4
 8004e0a:	9304      	str	r3, [sp, #16]
 8004e0c:	e7d2      	b.n	8004db4 <_svfiprintf_r+0xa0>
 8004e0e:	9b03      	ldr	r3, [sp, #12]
 8004e10:	1d19      	adds	r1, r3, #4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	9103      	str	r1, [sp, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bfbb      	ittet	lt
 8004e1a:	425b      	neglt	r3, r3
 8004e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8004e20:	9307      	strge	r3, [sp, #28]
 8004e22:	9307      	strlt	r3, [sp, #28]
 8004e24:	bfb8      	it	lt
 8004e26:	9204      	strlt	r2, [sp, #16]
 8004e28:	7823      	ldrb	r3, [r4, #0]
 8004e2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e2c:	d10a      	bne.n	8004e44 <_svfiprintf_r+0x130>
 8004e2e:	7863      	ldrb	r3, [r4, #1]
 8004e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e32:	d132      	bne.n	8004e9a <_svfiprintf_r+0x186>
 8004e34:	9b03      	ldr	r3, [sp, #12]
 8004e36:	3402      	adds	r4, #2
 8004e38:	1d1a      	adds	r2, r3, #4
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	9203      	str	r2, [sp, #12]
 8004e3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e42:	9305      	str	r3, [sp, #20]
 8004e44:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004efc <_svfiprintf_r+0x1e8>
 8004e48:	2203      	movs	r2, #3
 8004e4a:	4650      	mov	r0, sl
 8004e4c:	7821      	ldrb	r1, [r4, #0]
 8004e4e:	f000 fa17 	bl	8005280 <memchr>
 8004e52:	b138      	cbz	r0, 8004e64 <_svfiprintf_r+0x150>
 8004e54:	2240      	movs	r2, #64	@ 0x40
 8004e56:	9b04      	ldr	r3, [sp, #16]
 8004e58:	eba0 000a 	sub.w	r0, r0, sl
 8004e5c:	4082      	lsls	r2, r0
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	3401      	adds	r4, #1
 8004e62:	9304      	str	r3, [sp, #16]
 8004e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e68:	2206      	movs	r2, #6
 8004e6a:	4825      	ldr	r0, [pc, #148]	@ (8004f00 <_svfiprintf_r+0x1ec>)
 8004e6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e70:	f000 fa06 	bl	8005280 <memchr>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d036      	beq.n	8004ee6 <_svfiprintf_r+0x1d2>
 8004e78:	4b22      	ldr	r3, [pc, #136]	@ (8004f04 <_svfiprintf_r+0x1f0>)
 8004e7a:	bb1b      	cbnz	r3, 8004ec4 <_svfiprintf_r+0x1b0>
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	3307      	adds	r3, #7
 8004e80:	f023 0307 	bic.w	r3, r3, #7
 8004e84:	3308      	adds	r3, #8
 8004e86:	9303      	str	r3, [sp, #12]
 8004e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e8a:	4433      	add	r3, r6
 8004e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e8e:	e76a      	b.n	8004d66 <_svfiprintf_r+0x52>
 8004e90:	460c      	mov	r4, r1
 8004e92:	2001      	movs	r0, #1
 8004e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e98:	e7a8      	b.n	8004dec <_svfiprintf_r+0xd8>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f04f 0c0a 	mov.w	ip, #10
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	3401      	adds	r4, #1
 8004ea4:	9305      	str	r3, [sp, #20]
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eac:	3a30      	subs	r2, #48	@ 0x30
 8004eae:	2a09      	cmp	r2, #9
 8004eb0:	d903      	bls.n	8004eba <_svfiprintf_r+0x1a6>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0c6      	beq.n	8004e44 <_svfiprintf_r+0x130>
 8004eb6:	9105      	str	r1, [sp, #20]
 8004eb8:	e7c4      	b.n	8004e44 <_svfiprintf_r+0x130>
 8004eba:	4604      	mov	r4, r0
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ec2:	e7f0      	b.n	8004ea6 <_svfiprintf_r+0x192>
 8004ec4:	ab03      	add	r3, sp, #12
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	462a      	mov	r2, r5
 8004eca:	4638      	mov	r0, r7
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f08 <_svfiprintf_r+0x1f4>)
 8004ece:	a904      	add	r1, sp, #16
 8004ed0:	f3af 8000 	nop.w
 8004ed4:	1c42      	adds	r2, r0, #1
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	d1d6      	bne.n	8004e88 <_svfiprintf_r+0x174>
 8004eda:	89ab      	ldrh	r3, [r5, #12]
 8004edc:	065b      	lsls	r3, r3, #25
 8004ede:	f53f af2d 	bmi.w	8004d3c <_svfiprintf_r+0x28>
 8004ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ee4:	e72c      	b.n	8004d40 <_svfiprintf_r+0x2c>
 8004ee6:	ab03      	add	r3, sp, #12
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	462a      	mov	r2, r5
 8004eec:	4638      	mov	r0, r7
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <_svfiprintf_r+0x1f4>)
 8004ef0:	a904      	add	r1, sp, #16
 8004ef2:	f000 f87d 	bl	8004ff0 <_printf_i>
 8004ef6:	e7ed      	b.n	8004ed4 <_svfiprintf_r+0x1c0>
 8004ef8:	080054c2 	.word	0x080054c2
 8004efc:	080054c8 	.word	0x080054c8
 8004f00:	080054cc 	.word	0x080054cc
 8004f04:	00000000 	.word	0x00000000
 8004f08:	08004c5d 	.word	0x08004c5d

08004f0c <_printf_common>:
 8004f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f10:	4616      	mov	r6, r2
 8004f12:	4698      	mov	r8, r3
 8004f14:	688a      	ldr	r2, [r1, #8]
 8004f16:	690b      	ldr	r3, [r1, #16]
 8004f18:	4607      	mov	r7, r0
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	bfb8      	it	lt
 8004f1e:	4613      	movlt	r3, r2
 8004f20:	6033      	str	r3, [r6, #0]
 8004f22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f26:	460c      	mov	r4, r1
 8004f28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f2c:	b10a      	cbz	r2, 8004f32 <_printf_common+0x26>
 8004f2e:	3301      	adds	r3, #1
 8004f30:	6033      	str	r3, [r6, #0]
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	0699      	lsls	r1, r3, #26
 8004f36:	bf42      	ittt	mi
 8004f38:	6833      	ldrmi	r3, [r6, #0]
 8004f3a:	3302      	addmi	r3, #2
 8004f3c:	6033      	strmi	r3, [r6, #0]
 8004f3e:	6825      	ldr	r5, [r4, #0]
 8004f40:	f015 0506 	ands.w	r5, r5, #6
 8004f44:	d106      	bne.n	8004f54 <_printf_common+0x48>
 8004f46:	f104 0a19 	add.w	sl, r4, #25
 8004f4a:	68e3      	ldr	r3, [r4, #12]
 8004f4c:	6832      	ldr	r2, [r6, #0]
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	42ab      	cmp	r3, r5
 8004f52:	dc2b      	bgt.n	8004fac <_printf_common+0xa0>
 8004f54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f58:	6822      	ldr	r2, [r4, #0]
 8004f5a:	3b00      	subs	r3, #0
 8004f5c:	bf18      	it	ne
 8004f5e:	2301      	movne	r3, #1
 8004f60:	0692      	lsls	r2, r2, #26
 8004f62:	d430      	bmi.n	8004fc6 <_printf_common+0xba>
 8004f64:	4641      	mov	r1, r8
 8004f66:	4638      	mov	r0, r7
 8004f68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f6c:	47c8      	blx	r9
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d023      	beq.n	8004fba <_printf_common+0xae>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	6922      	ldr	r2, [r4, #16]
 8004f76:	f003 0306 	and.w	r3, r3, #6
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	bf14      	ite	ne
 8004f7e:	2500      	movne	r5, #0
 8004f80:	6833      	ldreq	r3, [r6, #0]
 8004f82:	f04f 0600 	mov.w	r6, #0
 8004f86:	bf08      	it	eq
 8004f88:	68e5      	ldreq	r5, [r4, #12]
 8004f8a:	f104 041a 	add.w	r4, r4, #26
 8004f8e:	bf08      	it	eq
 8004f90:	1aed      	subeq	r5, r5, r3
 8004f92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f96:	bf08      	it	eq
 8004f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	bfc4      	itt	gt
 8004fa0:	1a9b      	subgt	r3, r3, r2
 8004fa2:	18ed      	addgt	r5, r5, r3
 8004fa4:	42b5      	cmp	r5, r6
 8004fa6:	d11a      	bne.n	8004fde <_printf_common+0xd2>
 8004fa8:	2000      	movs	r0, #0
 8004faa:	e008      	b.n	8004fbe <_printf_common+0xb2>
 8004fac:	2301      	movs	r3, #1
 8004fae:	4652      	mov	r2, sl
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	47c8      	blx	r9
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d103      	bne.n	8004fc2 <_printf_common+0xb6>
 8004fba:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc2:	3501      	adds	r5, #1
 8004fc4:	e7c1      	b.n	8004f4a <_printf_common+0x3e>
 8004fc6:	2030      	movs	r0, #48	@ 0x30
 8004fc8:	18e1      	adds	r1, r4, r3
 8004fca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fd4:	4422      	add	r2, r4
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fdc:	e7c2      	b.n	8004f64 <_printf_common+0x58>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	4641      	mov	r1, r8
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	47c8      	blx	r9
 8004fe8:	3001      	adds	r0, #1
 8004fea:	d0e6      	beq.n	8004fba <_printf_common+0xae>
 8004fec:	3601      	adds	r6, #1
 8004fee:	e7d9      	b.n	8004fa4 <_printf_common+0x98>

08004ff0 <_printf_i>:
 8004ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff4:	7e0f      	ldrb	r7, [r1, #24]
 8004ff6:	4691      	mov	r9, r2
 8004ff8:	2f78      	cmp	r7, #120	@ 0x78
 8004ffa:	4680      	mov	r8, r0
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	469a      	mov	sl, r3
 8005000:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005002:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005006:	d807      	bhi.n	8005018 <_printf_i+0x28>
 8005008:	2f62      	cmp	r7, #98	@ 0x62
 800500a:	d80a      	bhi.n	8005022 <_printf_i+0x32>
 800500c:	2f00      	cmp	r7, #0
 800500e:	f000 80d1 	beq.w	80051b4 <_printf_i+0x1c4>
 8005012:	2f58      	cmp	r7, #88	@ 0x58
 8005014:	f000 80b8 	beq.w	8005188 <_printf_i+0x198>
 8005018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800501c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005020:	e03a      	b.n	8005098 <_printf_i+0xa8>
 8005022:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005026:	2b15      	cmp	r3, #21
 8005028:	d8f6      	bhi.n	8005018 <_printf_i+0x28>
 800502a:	a101      	add	r1, pc, #4	@ (adr r1, 8005030 <_printf_i+0x40>)
 800502c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005030:	08005089 	.word	0x08005089
 8005034:	0800509d 	.word	0x0800509d
 8005038:	08005019 	.word	0x08005019
 800503c:	08005019 	.word	0x08005019
 8005040:	08005019 	.word	0x08005019
 8005044:	08005019 	.word	0x08005019
 8005048:	0800509d 	.word	0x0800509d
 800504c:	08005019 	.word	0x08005019
 8005050:	08005019 	.word	0x08005019
 8005054:	08005019 	.word	0x08005019
 8005058:	08005019 	.word	0x08005019
 800505c:	0800519b 	.word	0x0800519b
 8005060:	080050c7 	.word	0x080050c7
 8005064:	08005155 	.word	0x08005155
 8005068:	08005019 	.word	0x08005019
 800506c:	08005019 	.word	0x08005019
 8005070:	080051bd 	.word	0x080051bd
 8005074:	08005019 	.word	0x08005019
 8005078:	080050c7 	.word	0x080050c7
 800507c:	08005019 	.word	0x08005019
 8005080:	08005019 	.word	0x08005019
 8005084:	0800515d 	.word	0x0800515d
 8005088:	6833      	ldr	r3, [r6, #0]
 800508a:	1d1a      	adds	r2, r3, #4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6032      	str	r2, [r6, #0]
 8005090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005094:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005098:	2301      	movs	r3, #1
 800509a:	e09c      	b.n	80051d6 <_printf_i+0x1e6>
 800509c:	6833      	ldr	r3, [r6, #0]
 800509e:	6820      	ldr	r0, [r4, #0]
 80050a0:	1d19      	adds	r1, r3, #4
 80050a2:	6031      	str	r1, [r6, #0]
 80050a4:	0606      	lsls	r6, r0, #24
 80050a6:	d501      	bpl.n	80050ac <_printf_i+0xbc>
 80050a8:	681d      	ldr	r5, [r3, #0]
 80050aa:	e003      	b.n	80050b4 <_printf_i+0xc4>
 80050ac:	0645      	lsls	r5, r0, #25
 80050ae:	d5fb      	bpl.n	80050a8 <_printf_i+0xb8>
 80050b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	da03      	bge.n	80050c0 <_printf_i+0xd0>
 80050b8:	232d      	movs	r3, #45	@ 0x2d
 80050ba:	426d      	negs	r5, r5
 80050bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050c0:	230a      	movs	r3, #10
 80050c2:	4858      	ldr	r0, [pc, #352]	@ (8005224 <_printf_i+0x234>)
 80050c4:	e011      	b.n	80050ea <_printf_i+0xfa>
 80050c6:	6821      	ldr	r1, [r4, #0]
 80050c8:	6833      	ldr	r3, [r6, #0]
 80050ca:	0608      	lsls	r0, r1, #24
 80050cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80050d0:	d402      	bmi.n	80050d8 <_printf_i+0xe8>
 80050d2:	0649      	lsls	r1, r1, #25
 80050d4:	bf48      	it	mi
 80050d6:	b2ad      	uxthmi	r5, r5
 80050d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050da:	6033      	str	r3, [r6, #0]
 80050dc:	bf14      	ite	ne
 80050de:	230a      	movne	r3, #10
 80050e0:	2308      	moveq	r3, #8
 80050e2:	4850      	ldr	r0, [pc, #320]	@ (8005224 <_printf_i+0x234>)
 80050e4:	2100      	movs	r1, #0
 80050e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ea:	6866      	ldr	r6, [r4, #4]
 80050ec:	2e00      	cmp	r6, #0
 80050ee:	60a6      	str	r6, [r4, #8]
 80050f0:	db05      	blt.n	80050fe <_printf_i+0x10e>
 80050f2:	6821      	ldr	r1, [r4, #0]
 80050f4:	432e      	orrs	r6, r5
 80050f6:	f021 0104 	bic.w	r1, r1, #4
 80050fa:	6021      	str	r1, [r4, #0]
 80050fc:	d04b      	beq.n	8005196 <_printf_i+0x1a6>
 80050fe:	4616      	mov	r6, r2
 8005100:	fbb5 f1f3 	udiv	r1, r5, r3
 8005104:	fb03 5711 	mls	r7, r3, r1, r5
 8005108:	5dc7      	ldrb	r7, [r0, r7]
 800510a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800510e:	462f      	mov	r7, r5
 8005110:	42bb      	cmp	r3, r7
 8005112:	460d      	mov	r5, r1
 8005114:	d9f4      	bls.n	8005100 <_printf_i+0x110>
 8005116:	2b08      	cmp	r3, #8
 8005118:	d10b      	bne.n	8005132 <_printf_i+0x142>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	07df      	lsls	r7, r3, #31
 800511e:	d508      	bpl.n	8005132 <_printf_i+0x142>
 8005120:	6923      	ldr	r3, [r4, #16]
 8005122:	6861      	ldr	r1, [r4, #4]
 8005124:	4299      	cmp	r1, r3
 8005126:	bfde      	ittt	le
 8005128:	2330      	movle	r3, #48	@ 0x30
 800512a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800512e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005132:	1b92      	subs	r2, r2, r6
 8005134:	6122      	str	r2, [r4, #16]
 8005136:	464b      	mov	r3, r9
 8005138:	4621      	mov	r1, r4
 800513a:	4640      	mov	r0, r8
 800513c:	f8cd a000 	str.w	sl, [sp]
 8005140:	aa03      	add	r2, sp, #12
 8005142:	f7ff fee3 	bl	8004f0c <_printf_common>
 8005146:	3001      	adds	r0, #1
 8005148:	d14a      	bne.n	80051e0 <_printf_i+0x1f0>
 800514a:	f04f 30ff 	mov.w	r0, #4294967295
 800514e:	b004      	add	sp, #16
 8005150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	f043 0320 	orr.w	r3, r3, #32
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	2778      	movs	r7, #120	@ 0x78
 800515e:	4832      	ldr	r0, [pc, #200]	@ (8005228 <_printf_i+0x238>)
 8005160:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	6831      	ldr	r1, [r6, #0]
 8005168:	061f      	lsls	r7, r3, #24
 800516a:	f851 5b04 	ldr.w	r5, [r1], #4
 800516e:	d402      	bmi.n	8005176 <_printf_i+0x186>
 8005170:	065f      	lsls	r7, r3, #25
 8005172:	bf48      	it	mi
 8005174:	b2ad      	uxthmi	r5, r5
 8005176:	6031      	str	r1, [r6, #0]
 8005178:	07d9      	lsls	r1, r3, #31
 800517a:	bf44      	itt	mi
 800517c:	f043 0320 	orrmi.w	r3, r3, #32
 8005180:	6023      	strmi	r3, [r4, #0]
 8005182:	b11d      	cbz	r5, 800518c <_printf_i+0x19c>
 8005184:	2310      	movs	r3, #16
 8005186:	e7ad      	b.n	80050e4 <_printf_i+0xf4>
 8005188:	4826      	ldr	r0, [pc, #152]	@ (8005224 <_printf_i+0x234>)
 800518a:	e7e9      	b.n	8005160 <_printf_i+0x170>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	f023 0320 	bic.w	r3, r3, #32
 8005192:	6023      	str	r3, [r4, #0]
 8005194:	e7f6      	b.n	8005184 <_printf_i+0x194>
 8005196:	4616      	mov	r6, r2
 8005198:	e7bd      	b.n	8005116 <_printf_i+0x126>
 800519a:	6833      	ldr	r3, [r6, #0]
 800519c:	6825      	ldr	r5, [r4, #0]
 800519e:	1d18      	adds	r0, r3, #4
 80051a0:	6961      	ldr	r1, [r4, #20]
 80051a2:	6030      	str	r0, [r6, #0]
 80051a4:	062e      	lsls	r6, r5, #24
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	d501      	bpl.n	80051ae <_printf_i+0x1be>
 80051aa:	6019      	str	r1, [r3, #0]
 80051ac:	e002      	b.n	80051b4 <_printf_i+0x1c4>
 80051ae:	0668      	lsls	r0, r5, #25
 80051b0:	d5fb      	bpl.n	80051aa <_printf_i+0x1ba>
 80051b2:	8019      	strh	r1, [r3, #0]
 80051b4:	2300      	movs	r3, #0
 80051b6:	4616      	mov	r6, r2
 80051b8:	6123      	str	r3, [r4, #16]
 80051ba:	e7bc      	b.n	8005136 <_printf_i+0x146>
 80051bc:	6833      	ldr	r3, [r6, #0]
 80051be:	2100      	movs	r1, #0
 80051c0:	1d1a      	adds	r2, r3, #4
 80051c2:	6032      	str	r2, [r6, #0]
 80051c4:	681e      	ldr	r6, [r3, #0]
 80051c6:	6862      	ldr	r2, [r4, #4]
 80051c8:	4630      	mov	r0, r6
 80051ca:	f000 f859 	bl	8005280 <memchr>
 80051ce:	b108      	cbz	r0, 80051d4 <_printf_i+0x1e4>
 80051d0:	1b80      	subs	r0, r0, r6
 80051d2:	6060      	str	r0, [r4, #4]
 80051d4:	6863      	ldr	r3, [r4, #4]
 80051d6:	6123      	str	r3, [r4, #16]
 80051d8:	2300      	movs	r3, #0
 80051da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051de:	e7aa      	b.n	8005136 <_printf_i+0x146>
 80051e0:	4632      	mov	r2, r6
 80051e2:	4649      	mov	r1, r9
 80051e4:	4640      	mov	r0, r8
 80051e6:	6923      	ldr	r3, [r4, #16]
 80051e8:	47d0      	blx	sl
 80051ea:	3001      	adds	r0, #1
 80051ec:	d0ad      	beq.n	800514a <_printf_i+0x15a>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	079b      	lsls	r3, r3, #30
 80051f2:	d413      	bmi.n	800521c <_printf_i+0x22c>
 80051f4:	68e0      	ldr	r0, [r4, #12]
 80051f6:	9b03      	ldr	r3, [sp, #12]
 80051f8:	4298      	cmp	r0, r3
 80051fa:	bfb8      	it	lt
 80051fc:	4618      	movlt	r0, r3
 80051fe:	e7a6      	b.n	800514e <_printf_i+0x15e>
 8005200:	2301      	movs	r3, #1
 8005202:	4632      	mov	r2, r6
 8005204:	4649      	mov	r1, r9
 8005206:	4640      	mov	r0, r8
 8005208:	47d0      	blx	sl
 800520a:	3001      	adds	r0, #1
 800520c:	d09d      	beq.n	800514a <_printf_i+0x15a>
 800520e:	3501      	adds	r5, #1
 8005210:	68e3      	ldr	r3, [r4, #12]
 8005212:	9903      	ldr	r1, [sp, #12]
 8005214:	1a5b      	subs	r3, r3, r1
 8005216:	42ab      	cmp	r3, r5
 8005218:	dcf2      	bgt.n	8005200 <_printf_i+0x210>
 800521a:	e7eb      	b.n	80051f4 <_printf_i+0x204>
 800521c:	2500      	movs	r5, #0
 800521e:	f104 0619 	add.w	r6, r4, #25
 8005222:	e7f5      	b.n	8005210 <_printf_i+0x220>
 8005224:	080054d3 	.word	0x080054d3
 8005228:	080054e4 	.word	0x080054e4

0800522c <memmove>:
 800522c:	4288      	cmp	r0, r1
 800522e:	b510      	push	{r4, lr}
 8005230:	eb01 0402 	add.w	r4, r1, r2
 8005234:	d902      	bls.n	800523c <memmove+0x10>
 8005236:	4284      	cmp	r4, r0
 8005238:	4623      	mov	r3, r4
 800523a:	d807      	bhi.n	800524c <memmove+0x20>
 800523c:	1e43      	subs	r3, r0, #1
 800523e:	42a1      	cmp	r1, r4
 8005240:	d008      	beq.n	8005254 <memmove+0x28>
 8005242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800524a:	e7f8      	b.n	800523e <memmove+0x12>
 800524c:	4601      	mov	r1, r0
 800524e:	4402      	add	r2, r0
 8005250:	428a      	cmp	r2, r1
 8005252:	d100      	bne.n	8005256 <memmove+0x2a>
 8005254:	bd10      	pop	{r4, pc}
 8005256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800525a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800525e:	e7f7      	b.n	8005250 <memmove+0x24>

08005260 <_sbrk_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	2300      	movs	r3, #0
 8005264:	4d05      	ldr	r5, [pc, #20]	@ (800527c <_sbrk_r+0x1c>)
 8005266:	4604      	mov	r4, r0
 8005268:	4608      	mov	r0, r1
 800526a:	602b      	str	r3, [r5, #0]
 800526c:	f7fb fba8 	bl	80009c0 <_sbrk>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_sbrk_r+0x1a>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_sbrk_r+0x1a>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	20003ca4 	.word	0x20003ca4

08005280 <memchr>:
 8005280:	4603      	mov	r3, r0
 8005282:	b510      	push	{r4, lr}
 8005284:	b2c9      	uxtb	r1, r1
 8005286:	4402      	add	r2, r0
 8005288:	4293      	cmp	r3, r2
 800528a:	4618      	mov	r0, r3
 800528c:	d101      	bne.n	8005292 <memchr+0x12>
 800528e:	2000      	movs	r0, #0
 8005290:	e003      	b.n	800529a <memchr+0x1a>
 8005292:	7804      	ldrb	r4, [r0, #0]
 8005294:	3301      	adds	r3, #1
 8005296:	428c      	cmp	r4, r1
 8005298:	d1f6      	bne.n	8005288 <memchr+0x8>
 800529a:	bd10      	pop	{r4, pc}

0800529c <_realloc_r>:
 800529c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a0:	4607      	mov	r7, r0
 80052a2:	4614      	mov	r4, r2
 80052a4:	460d      	mov	r5, r1
 80052a6:	b921      	cbnz	r1, 80052b2 <_realloc_r+0x16>
 80052a8:	4611      	mov	r1, r2
 80052aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ae:	f7ff bc49 	b.w	8004b44 <_malloc_r>
 80052b2:	b92a      	cbnz	r2, 80052c0 <_realloc_r+0x24>
 80052b4:	f7ff fbdc 	bl	8004a70 <_free_r>
 80052b8:	4625      	mov	r5, r4
 80052ba:	4628      	mov	r0, r5
 80052bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052c0:	f000 f81a 	bl	80052f8 <_malloc_usable_size_r>
 80052c4:	4284      	cmp	r4, r0
 80052c6:	4606      	mov	r6, r0
 80052c8:	d802      	bhi.n	80052d0 <_realloc_r+0x34>
 80052ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052ce:	d8f4      	bhi.n	80052ba <_realloc_r+0x1e>
 80052d0:	4621      	mov	r1, r4
 80052d2:	4638      	mov	r0, r7
 80052d4:	f7ff fc36 	bl	8004b44 <_malloc_r>
 80052d8:	4680      	mov	r8, r0
 80052da:	b908      	cbnz	r0, 80052e0 <_realloc_r+0x44>
 80052dc:	4645      	mov	r5, r8
 80052de:	e7ec      	b.n	80052ba <_realloc_r+0x1e>
 80052e0:	42b4      	cmp	r4, r6
 80052e2:	4622      	mov	r2, r4
 80052e4:	4629      	mov	r1, r5
 80052e6:	bf28      	it	cs
 80052e8:	4632      	movcs	r2, r6
 80052ea:	f7ff fbb3 	bl	8004a54 <memcpy>
 80052ee:	4629      	mov	r1, r5
 80052f0:	4638      	mov	r0, r7
 80052f2:	f7ff fbbd 	bl	8004a70 <_free_r>
 80052f6:	e7f1      	b.n	80052dc <_realloc_r+0x40>

080052f8 <_malloc_usable_size_r>:
 80052f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052fc:	1f18      	subs	r0, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bfbc      	itt	lt
 8005302:	580b      	ldrlt	r3, [r1, r0]
 8005304:	18c0      	addlt	r0, r0, r3
 8005306:	4770      	bx	lr

08005308 <_init>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	bf00      	nop
 800530c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530e:	bc08      	pop	{r3}
 8005310:	469e      	mov	lr, r3
 8005312:	4770      	bx	lr

08005314 <_fini>:
 8005314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005316:	bf00      	nop
 8005318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531a:	bc08      	pop	{r3}
 800531c:	469e      	mov	lr, r3
 800531e:	4770      	bx	lr
